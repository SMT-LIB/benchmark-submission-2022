(set-info :smt-lib-version 2.6)
(set-logic QF_BV)
(set-info :source |
Generated by: Alexander D. Coffin (alexcoffin1999@gmail.com or acoffin2@illinois.edu)
Generated on: 2022-01-10
Generator: Custom Rust code using z3 bindings (and then cleaned up by hand back into an incremental problem)
Application: Maximum, and minimum valid solutions for advent of code day 24, 2021 (see https://adventofcode.com/2021/day/24)
Target solver: Z3
|)
(set-info :license "https://creativecommons.org/publicdomain/zero/1.0/")
(set-info :category "industrial")

(declare-fun input!13 () (_ BitVec 32))
(declare-fun input!12 () (_ BitVec 32))
(declare-fun input!11 () (_ BitVec 32))
(declare-fun input!10 () (_ BitVec 32))
(declare-fun input!9 () (_ BitVec 32))
(declare-fun input!8 () (_ BitVec 32))
(declare-fun input!7 () (_ BitVec 32))
(declare-fun input!6 () (_ BitVec 32))
(declare-fun input!5 () (_ BitVec 32))
(declare-fun input!4 () (_ BitVec 32))
(declare-fun input!3 () (_ BitVec 32))
(declare-fun input!2 () (_ BitVec 32))
(declare-fun input!1 () (_ BitVec 32))
(declare-fun input!0 () (_ BitVec 32))
(assert
 (let ((?x81067 (bvadd (_ bv3 32) input!7)))
 (let ((?x370 (ite (= (ite (= input!0 (_ bv13 32)) (_ bv1 32) (_ bv0 32)) (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let ((?x375 (bvadd (_ bv15 32) input!0)))
 (let ((?x411 (bvmul ?x375 ?x370)))
 (let (($x418 (= (ite (= (bvsmod ?x411 (_ bv26 32)) (bvadd (_ bv4294967283 32) input!1)) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))
 (let ((?x435 (ite $x418 (_ bv1 32) (_ bv0 32))))
 (let ((?x871 (bvadd (bvmul ?x375 (bvadd (_ bv1 32) (bvmul (_ bv25 32) ?x435)) ?x370) (bvmul (bvadd (_ bv16 32) input!1) ?x435))))
 (let (($x948 (= (ite (= (bvsmod ?x871 (_ bv26 32)) (bvadd (_ bv4294967286 32) input!2)) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))
 (let ((?x81076 (ite $x948 (_ bv1 32) (_ bv0 32))))
 (let ((?x454 (bvadd (bvmul ?x871 (bvadd (_ bv1 32) (bvmul (_ bv25 32) ?x81076))) (bvmul (bvadd (_ bv4 32) input!2) ?x81076))))
 (let (($x442 (= (ite (= (bvsmod ?x454 (_ bv26 32)) (bvadd (_ bv4294967281 32) input!3)) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))
 (let ((?x445 (ite $x442 (_ bv1 32) (_ bv0 32))))
 (let ((?x423 (bvadd (bvmul ?x454 (bvadd (_ bv1 32) (bvmul (_ bv25 32) ?x445))) (bvmul (bvadd (_ bv14 32) input!3) ?x445))))
 (let (($x459 (= (ite (= (bvsmod ?x423 (_ bv26 32)) (bvadd (_ bv8 32) input!4)) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))
 (let ((?x949 (ite $x459 (_ bv1 32) (_ bv0 32))))
 (let ((?x439 (bvadd (bvmul (bvsdiv ?x423 (_ bv26 32)) (bvadd (_ bv1 32) (bvmul (_ bv25 32) ?x949))) (bvmul (bvadd (_ bv1 32) input!4) ?x949))))
 (let (($x81070 (= (ite (= (bvsmod ?x439 (_ bv26 32)) (bvadd (_ bv10 32) input!5)) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))
 (let ((?x506 (ite $x81070 (_ bv1 32) (_ bv0 32))))
 (let ((?x491 (bvadd (bvmul (bvsdiv ?x439 (_ bv26 32)) (bvadd (_ bv1 32) (bvmul (_ bv25 32) ?x506))) (bvmul (bvadd (_ bv5 32) input!5) ?x506))))
 (let (($x497 (= (ite (= (bvsmod ?x491 (_ bv26 32)) (bvadd (_ bv4294967285 32) input!6)) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))
 (let ((?x505 (ite $x497 (_ bv1 32) (_ bv0 32))))
 (let ((?x498 (bvadd (bvmul ?x491 (bvadd (_ bv1 32) (bvmul (_ bv25 32) ?x505))) (bvmul (bvadd (_ bv1 32) input!6) ?x505))))
 (let ((?x510 (ite (= (ite (= (bvsmod ?x498 (_ bv26 32)) ?x81067) (_ bv1 32) (_ bv0 32)) (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let ((?x987 (bvadd (bvmul (bvsdiv ?x498 (_ bv26 32)) (bvadd (_ bv1 32) (bvmul (_ bv25 32) ?x510))) (bvmul ?x81067 ?x510))))
 (let (($x504 (= (ite (= (bvsmod ?x987 (_ bv26 32)) (bvadd (_ bv4294967282 32) input!8)) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))
 (let ((?x534 (ite $x504 (_ bv1 32) (_ bv0 32))))
 (let ((?x532 (bvadd (bvmul ?x987 (bvadd (_ bv1 32) (bvmul (_ bv25 32) ?x534))) (bvmul (bvadd (_ bv3 32) input!8) ?x534))))
 (let (($x533 (= (ite (= (bvsmod ?x532 (_ bv26 32)) (bvadd (_ bv4 32) input!9)) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))
 (let ((?x536 (ite $x533 (_ bv1 32) (_ bv0 32))))
 (let ((?x543 (bvadd (bvmul (bvsdiv ?x532 (_ bv26 32)) (bvadd (_ bv1 32) (bvmul (_ bv25 32) ?x536))) (bvmul (bvadd (_ bv7 32) input!9) ?x536))))
 (let (($x80654 (= (ite (= (bvsmod ?x543 (_ bv26 32)) (bvadd (_ bv4294967282 32) input!10)) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))
 (let ((?x542 (ite $x80654 (_ bv1 32) (_ bv0 32))))
 (let ((?x958 (bvadd (bvmul ?x543 (bvadd (_ bv1 32) (bvmul (_ bv25 32) ?x542))) (bvmul (bvadd (_ bv5 32) input!10) ?x542))))
 (let (($x552 (= (ite (= (bvsmod ?x958 (_ bv26 32)) (bvadd (_ bv5 32) input!11)) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))
 (let ((?x81048 (ite $x552 (_ bv1 32) (_ bv0 32))))
 (let ((?x81054 (bvadd (bvmul (bvsdiv ?x958 (_ bv26 32)) (bvadd (_ bv1 32) (bvmul (_ bv25 32) ?x81048))) (bvmul (bvadd (_ bv13 32) input!11) ?x81048))))
 (let (($x362 (= (ite (= (bvsmod ?x81054 (_ bv26 32)) (bvadd (_ bv8 32) input!12)) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))
 (let ((?x967 (ite $x362 (_ bv1 32) (_ bv0 32))))
 (let ((?x81078 (bvadd (bvmul (bvsdiv ?x81054 (_ bv26 32)) (bvadd (_ bv1 32) (bvmul (_ bv25 32) ?x967))) (bvmul (bvadd (_ bv3 32) input!12) ?x967))))
 (let (($x80672 (= (ite (= (bvsmod ?x81078 (_ bv26 32)) (bvadd (_ bv11 32) input!13)) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))
 (let ((?x363 (ite $x80672 (_ bv1 32) (_ bv0 32))))
 (let (($x400 (= (bvmul (bvsdiv ?x81078 (_ bv26 32)) (bvadd (_ bv1 32) (bvmul (_ bv25 32) ?x363))) (bvmul (_ bv4294967295 32) (bvmul (bvadd (_ bv10 32) input!13) ?x363)))))
 (let (($x332 (bvsle input!13 (_ bv9 32))))
 (let (($x309 (bvsle input!12 (_ bv9 32))))
 (let (($x285 (bvsle input!11 (_ bv9 32))))
 (let (($x262 (bvsle input!10 (_ bv9 32))))
 (let (($x237 (bvsle input!9 (_ bv9 32))))
 (let (($x214 (bvsle input!8 (_ bv9 32))))
 (let (($x189 (bvsle input!7 (_ bv9 32))))
 (let (($x165 (bvsle input!6 (_ bv9 32))))
 (let (($x140 (bvsle input!5 (_ bv9 32))))
 (let (($x114 (bvsle input!4 (_ bv9 32))))
 (let (($x90 (bvsle input!3 (_ bv9 32))))
 (let (($x65 (bvsle input!2 (_ bv9 32))))
 (let (($x41 (bvsle input!1 (_ bv9 32))))
 (let (($x12 (bvsle input!0 (_ bv9 32))))
 (and (bvsle (_ bv1 32) input!0) $x12 (bvsle (_ bv1 32) input!1) $x41 (bvsle (_ bv0 32) ?x411) (bvsle (_ bv1 32) input!2) $x65 (bvsle (_ bv0 32) ?x871) (bvsle (_ bv1 32) input!3) $x90 (bvsle (_ bv0 32) ?x454) (bvsle (_ bv1 32) input!4) $x114 (bvsle (_ bv0 32) ?x423) (bvsle (_ bv1 32) input!5) $x140 (bvsle (_ bv0 32) ?x439) (bvsle (_ bv1 32) input!6) $x165 (bvsle (_ bv0 32) ?x491) (bvsle (_ bv1 32) input!7) $x189 (bvsle (_ bv0 32) ?x498) (bvsle (_ bv1 32) input!8) $x214 (bvsle (_ bv0 32) ?x987) (bvsle (_ bv1 32) input!9) $x237 (bvsle (_ bv0 32) ?x532) (bvsle (_ bv1 32) input!10) $x262 (bvsle (_ bv0 32) ?x543) (bvsle (_ bv1 32) input!11) $x285 (bvsle (_ bv0 32) ?x958) (bvsle (_ bv1 32) input!12) $x309 (bvsle (_ bv0 32) ?x81054) (bvsle (_ bv1 32) input!13) $x332 (bvsle (_ bv0 32) ?x81078) $x400 ))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(push 1)
(assert (= input!0 (_ bv1 32)))
(set-info :status sat)
(check-sat)

(push 1)
(assert (= input!1 (_ bv1 32)))
(set-info :status sat)
(check-sat)

(push 1)
(assert (= input!2 (_ bv1 32)))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (= input!2 (_ bv2 32)))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (= input!2 (_ bv3 32)))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (= input!2 (_ bv4 32)))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (= input!2 (_ bv5 32)))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (= input!2 (_ bv6 32)))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (= input!2 (_ bv7 32)))
(set-info :status sat)
(check-sat)

(push 1)
(assert (= input!3 (_ bv1 32)))
(set-info :status sat)
(check-sat)

(push 1)
(assert (= input!4 (_ bv1 32)))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (= input!4 (_ bv2 32)))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (= input!4 (_ bv3 32)))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (= input!4 (_ bv4 32)))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (= input!4 (_ bv5 32)))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (= input!4 (_ bv6 32)))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (= input!4 (_ bv7 32)))
(set-info :status sat)
(check-sat)

(push 1)
(assert (= input!5 (_ bv1 32)))
(set-info :status sat)
(check-sat)

(push 1)
(assert (= input!6 (_ bv1 32)))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (= input!6 (_ bv2 32)))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (= input!6 (_ bv3 32)))
(set-info :status sat)
(check-sat)

(push 1)
(assert (= input!7 (_ bv1 32)))
(set-info :status sat)
(check-sat)

(push 1)
(assert (= input!8 (_ bv1 32)))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (= input!8 (_ bv2 32)))
(set-info :status sat)
(check-sat)

(push 1)
(assert (= input!9 (_ bv1 32)))
(set-info :status sat)
(check-sat)

(push 1)
(assert (= input!10 (_ bv1 32)))
(set-info :status sat)
(check-sat)

(push 1)
(assert (= input!11 (_ bv1 32)))
(set-info :status sat)
(check-sat)

(push 1)
(assert (= input!12 (_ bv1 32)))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (= input!12 (_ bv2 32)))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (= input!12 (_ bv3 32)))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (= input!12 (_ bv4 32)))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (= input!12 (_ bv5 32)))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (= input!12 (_ bv6 32)))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (= input!12 (_ bv7 32)))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (= input!12 (_ bv8 32)))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (= input!12 (_ bv9 32)))
(set-info :status sat)
(check-sat)

(push 1)
(assert (= input!13 (_ bv1 32)))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (= input!13 (_ bv2 32)))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (= input!13 (_ bv3 32)))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (= input!13 (_ bv4 32)))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (= input!13 (_ bv5 32)))
(set-info :status sat)
(check-sat)

(pop 14)

; minimum: 11717131211195

(push 1)
(assert (= input!0 (_ bv9 32)))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (= input!0 (_ bv8 32)))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (= input!0 (_ bv7 32)))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (= input!0 (_ bv6 32)))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (= input!0 (_ bv5 32)))
(set-info :status sat)
(check-sat)

(push 1)
(assert (= input!1 (_ bv9 32)))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (= input!1 (_ bv8 32)))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (= input!1 (_ bv7 32)))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (= input!1 (_ bv6 32)))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (= input!1 (_ bv5 32)))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (= input!1 (_ bv4 32)))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (= input!1 (_ bv3 32)))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (= input!1 (_ bv2 32)))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (= input!1 (_ bv1 32)))
(set-info :status sat)
(check-sat)

(push 1)
(assert (= input!2 (_ bv9 32)))
(set-info :status sat)
(check-sat)

(push 1)
(assert (= input!3 (_ bv9 32)))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (= input!3 (_ bv8 32)))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (= input!3 (_ bv7 32)))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (= input!3 (_ bv6 32)))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (= input!3 (_ bv5 32)))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (= input!3 (_ bv4 32)))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (= input!3 (_ bv3 32)))
(set-info :status sat)
(check-sat)

(push 1)
(assert (= input!4 (_ bv9 32)))
(set-info :status sat)
(check-sat)

(push 1)
(assert (= input!5 (_ bv9 32)))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (= input!5 (_ bv8 32)))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (= input!5 (_ bv7 32)))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (= input!5 (_ bv6 32)))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (= input!5 (_ bv5 32)))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (= input!5 (_ bv4 32)))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (= input!5 (_ bv3 32)))
(set-info :status sat)
(check-sat)

(push 1)
(assert (= input!6 (_ bv9 32)))
(set-info :status sat)
(check-sat)

(push 1)
(assert (= input!7 (_ bv9 32)))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (= input!7 (_ bv8 32)))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (= input!7 (_ bv7 32)))
(set-info :status sat)
(check-sat)

(push 1)
(assert (= input!8 (_ bv9 32)))
(set-info :status sat)
(check-sat)

(push 1)
(assert (= input!9 (_ bv9 32)))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (= input!9 (_ bv8 32)))
(set-info :status sat)
(check-sat)

(push 1)
(assert (= input!10 (_ bv9 32)))
(set-info :status sat)
(check-sat)

(push 1)
(assert (= input!11 (_ bv9 32)))
(set-info :status sat)
(check-sat)

(push 1)
(assert (= input!12 (_ bv9 32)))
(set-info :status sat)
(check-sat)

(push 1)
(assert (= input!13 (_ bv9 32)))
(set-info :status sat)
(check-sat)

(pop 14)

; maximum: 51939397989999
(exit)
