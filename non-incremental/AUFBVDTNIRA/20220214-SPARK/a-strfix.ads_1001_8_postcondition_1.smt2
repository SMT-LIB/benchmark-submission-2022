(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTNIRA)
(set-info :source |
Generated by: Yannick Moy
Generated on: 2022-02-14
Generator: GNATprove
Application: GNAT light runtime library
Target solver: Alt-Ergo, CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)

;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
  (((Tuple0))))

(declare-sort us_private 0)

;; private__bool_eq
(declare-fun private__bool_eq (us_private
  us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
  (((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))

(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
  (((int__refqtmk (int__content Int)))))

(declare-datatypes ((bool__ref 0))
  (((bool__refqtmk (bool__content Bool)))))

(declare-datatypes ((us_fixed__ref 0))
  (((us_fixed__refqtmk (us_fixed__content Int)))))

(declare-datatypes ((real__ref 0))
  (((real__refqtmk (real__content Real)))))

(declare-datatypes ((us_private__ref 0))
  (((us_private__refqtmk (us_private__content us_private)))))

;; int__ref___projection
(define-fun int__ref___projection ((a int__ref)) Int
  (int__content a))

;; __fixed__ref___projection
(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int
  (us_fixed__content a))

;; bool__ref___projection
(define-fun bool__ref___projection ((a bool__ref)) Bool
  (bool__content a))

;; real__ref___projection
(define-fun real__ref___projection ((a real__ref)) Real
  (real__content a))

;; __private__ref___projection
(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

;; min
(define-fun min ((x Int) (y Int)) Int
  (ite (<= x y) x y))

;; max
(define-fun max ((x Int) (y Int)) Int
  (ite (<= x y) y x))

;; Min_r
(assert (forall ((x Int) (y Int)) (=> (<= y x) (= (min x y) y))))

;; Max_l
(assert (forall ((x Int) (y Int)) (=> (<= y x) (= (max x y) x))))

;; Min_comm
(assert (forall ((x Int) (y Int)) (= (min x y) (min y x))))

;; Max_comm
(assert (forall ((x Int) (y Int)) (= (max x y) (max y x))))

;; Min_assoc
(assert
  (forall ((x Int) (y Int) (z Int)) (= (min (min x y) z) (min x (min y z)))))

;; Max_assoc
(assert
  (forall ((x Int) (y Int) (z Int)) (= (max (max x y) z) (max x (max y z)))))

;; bool_eq
(define-fun bool_eq ((x Bool) (y Bool)) Bool
  (ite (= x y) true false))

;; to_int
(define-fun to_int1 ((b Bool)) Int
  (ite (= b true) 1 0))

;; of_int
(define-fun of_int ((i Int)) Bool
  (ite (= i 0) false true))

;; in_range
(define-fun in_range ((x Int)) Bool
  (or (= x 0) (= x 1)))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

;; integer'int
(declare-fun integerqtint (integer) Int)

;; integer'axiom
(assert
  (forall ((i integer))
    (and
      (<= (- 2147483648) (integerqtint i))
      (<= (integerqtint i) 2147483647))))

;; in_range
(define-fun in_range1 ((x Int)) Bool
  (and (<= (- 2147483648) x) (<= x 2147483647)))

;; bool_eq
(define-fun bool_eq1 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

;; user_eq
(declare-fun user_eq (integer
  integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
  (((integer__refqtmk (integer__content integer)))))

;; integer__ref_integer__content__projection
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer
  (integer__content a))

;; dynamic_invariant
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool
  (=>
    (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647))
    (in_range1 temp___expr_18)))

(declare-sort natural 0)

;; natural'int
(declare-fun naturalqtint (natural) Int)

;; natural'axiom
(assert
  (forall ((i natural))
    (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

;; in_range
(define-fun in_range2 ((x Int)) Bool
  (and (<= 0 x) (<= x 2147483647)))

;; bool_eq
(define-fun bool_eq2 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

;; user_eq
(declare-fun user_eq1 (natural
  natural) Bool)

(declare-const dummy1 natural)

(declare-datatypes ((natural__ref 0))
  (((natural__refqtmk (natural__content natural)))))

;; natural__ref_natural__content__projection
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural
  (natural__content a))

;; dynamic_invariant
(define-fun dynamic_invariant1 ((temp___expr_46 Int) (temp___is_init_42 Bool) (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool) (temp___do_typ_inv_45 Bool)) Bool
  (=>
    (or (= temp___is_init_42 true) (<= 0 2147483647))
    (in_range2 temp___expr_46)))

(declare-sort positive 0)

;; positive'int
(declare-fun positiveqtint (positive) Int)

;; positive'axiom
(assert
  (forall ((i positive))
    (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

;; in_range
(define-fun in_range3 ((x Int)) Bool
  (and (<= 1 x) (<= x 2147483647)))

;; bool_eq
(define-fun bool_eq3 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

;; user_eq
(declare-fun user_eq2 (positive
  positive) Bool)

(declare-const dummy2 positive)

(declare-datatypes ((positive__ref 0))
  (((positive__refqtmk (positive__content positive)))))

;; positive__ref_positive__content__projection
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive
  (positive__content a))

;; dynamic_invariant
(define-fun dynamic_invariant2 ((temp___expr_53 Int) (temp___is_init_49 Bool) (temp___skip_constant_50 Bool) (temp___do_toplevel_51 Bool) (temp___do_typ_inv_52 Bool)) Bool
  (=>
    (or (= temp___is_init_49 true) (<= 1 2147483647))
    (in_range3 temp___expr_53)))

(declare-sort character 0)

;; in_range
(define-fun in_range4 ((x Int)) Bool
  (and (<= 0 x) (<= x 255)))

;; bool_eq
(define-fun bool_eq4 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

;; user_eq
(declare-fun user_eq3 (character
  character) Bool)

(declare-const dummy3 character)

(declare-datatypes ((character__ref 0))
  (((character__refqtmk (character__content character)))))

;; character__ref_character__content__projection
(define-fun character__ref_character__content__projection ((a character__ref)) character
  (character__content a))

(declare-datatypes ((character__init_wrapper 0))
  (((character__init_wrapperqtmk (rec__value character)(us_attr__init Bool)))))

;; character__init_wrapper_rec__value__projection
(define-fun character__init_wrapper_rec__value__projection ((a character__init_wrapper)) character
  (rec__value a))

;; character__init_wrapper___attr__init__projection
(define-fun character__init_wrapper___attr__init__projection ((a character__init_wrapper)) Bool
  (us_attr__init a))

(declare-const dummy4 character__init_wrapper)

;; dummy__def
(assert (= (us_attr__init dummy4) false))

(declare-datatypes ((character__init_wrapper__ref 0))
  (((character__init_wrapper__refqtmk
    (character__init_wrapper__content character__init_wrapper)))))

;; character__init_wrapper__ref_character__init_wrapper__content__projection
(define-fun character__init_wrapper__ref_character__init_wrapper__content__projection 
  ((a character__init_wrapper__ref)) character__init_wrapper
  (character__init_wrapper__content a))

;; to_rep
(declare-fun to_rep (character) Int)

;; of_rep
(declare-fun of_rep (Int) character)

;; inversion_axiom
(assert
  (forall ((x character))
    (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
(assert
  (forall ((x character)) (! (in_range4 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
(assert
  (forall ((x Int))
    (! (=> (in_range4 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                                (of_rep x))) )))

(declare-datatypes ((map__ref 0))
  (((map__refqtmk (map__content (Array Int character))))))

;; slide
(declare-fun slide ((Array Int character)
  Int
  Int) (Array Int character))

;; slide_eq
(assert
  (forall ((a (Array Int character)))
    (forall ((first Int))
      (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
(assert
  (forall ((a (Array Int character)))
    (forall ((old_first Int))
      (forall ((new_first Int))
        (forall ((i Int))
          (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
          (slide
            a
            old_first
            new_first) i)) ))))))

;; const
(declare-fun const1 (character) (Array Int character))

;; const_def
(assert
  (forall ((v character))
    (forall ((i Int))
      (! (= (select (const1 v) i) v) :pattern ((select (const1 v) i)) ))))

;; bool_eq
(define-fun bool_eq5 ((a (Array Int character)) (a__first Int) (a__last Int) (b (Array Int character)) (b__first Int) (b__last Int)) Bool
  (ite (and
         (ite (<= a__first a__last)
           (and
             (<= b__first b__last)
             (= (- a__last a__first) (- b__last b__first)))
           (< b__last b__first))
         (forall ((temp___idx_105 Int))
           (=>
             (and (<= a__first temp___idx_105) (<= temp___idx_105 a__last))
             (= (to_rep (select a temp___idx_105)) (to_rep
                                                     (select b (+ (- b__first a__first) temp___idx_105)))))))
    true
    false))

;; bool_eq_rev
(assert
  (forall ((a (Array Int character)) (b (Array Int character)))
    (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
      (=>
        (= (bool_eq5 b b__first b__last a a__first a__last) true)
        (and
          (ite (<= a__first a__last)
            (and
              (<= b__first b__last)
              (= (- a__last a__first) (- b__last b__first)))
            (< b__last b__first))
          (forall ((temp___idx_105 Int))
            (=>
              (and (<= a__first temp___idx_105) (<= temp___idx_105 a__last))
              (= (to_rep (select a temp___idx_105)) (to_rep
                                                      (select b (+ (- b__first a__first) temp___idx_105)))))))))))

(declare-datatypes ((map__ref1 0))
  (((map__refqtmk1 (map__content1 (Array Int character__init_wrapper))))))

;; slide
(declare-fun slide1 ((Array Int character__init_wrapper)
  Int
  Int) (Array Int character__init_wrapper))

;; slide_eq
(assert
  (forall ((a (Array Int character__init_wrapper)))
    (forall ((first Int))
      (! (= (slide1 a first first) a) :pattern ((slide1 a first first)) ))))

;; slide_def
(assert
  (forall ((a (Array Int character__init_wrapper)))
    (forall ((old_first Int))
      (forall ((new_first Int))
        (forall ((i Int))
          (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
          (slide1
            a
            old_first
            new_first) i)) ))))))

;; const
(declare-fun const2 (character__init_wrapper) (Array Int character__init_wrapper))

;; const_def
(assert
  (forall ((v character__init_wrapper))
    (forall ((i Int))
      (! (= (select (const2 v) i) v) :pattern ((select (const2 v) i)) ))))

;; convert
(declare-fun convert ((Array Int character__init_wrapper)) (Array Int character))

;; convert__def
(assert
  (forall ((a (Array Int character__init_wrapper)))
    (forall ((temp___106 Int))
      (= (to_rep (of_rep (to_rep (rec__value (select a temp___106))))) 
      (to_rep
        (select (convert a) temp___106))))))

;; convert
(declare-fun convert1 ((Array Int character)) (Array Int character__init_wrapper))

;; convert__def
(assert
  (forall ((a (Array Int character)))
    (let ((b (convert1 a)))
      (forall ((temp___107 Int))
        (and
          (= (us_attr__init
               (character__init_wrapperqtmk
                 (of_rep (to_rep (select a temp___107)))
                 true)) (us_attr__init (select b temp___107)))
          (= (to_rep
               (rec__value
                 (character__init_wrapperqtmk
                   (of_rep (to_rep (select a temp___107)))
                   true))) (to_rep (rec__value (select b temp___107)))))))))

;; to_rep
(define-fun to_rep1 ((x integer)) Int
  (integerqtint x))

;; of_rep
(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
(assert
  (forall ((x integer))
    (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
(assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
(assert
  (forall ((x Int))
    (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                                  (of_rep1 x))) )))

(declare-datatypes ((t 0))
  (((tqtmk (rec__first integer)(rec__last integer)))))

;; mk
(declare-fun mk (Int
  Int) t)

;; mk_def
(assert
  (forall ((f Int) (l Int))
    (! (=>
         (in_range1 f)
         (=>
           (in_range1 l)
           (and
             (= (to_rep1 (rec__first (mk f l))) f)
             (= (to_rep1 (rec__last (mk f l))) l)))) :pattern ((mk f l)) )))

;; dynamic_property
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool
  (and
    (in_range1 low)
    (and
      (in_range1 high)
      (=> (<= low high) (and (in_range3 low) (in_range3 high))))))

(declare-datatypes ((us_t 0))
  (((us_tqtmk (elts (Array Int character))(rt t)))))

;; to_array
(define-fun to_array ((a us_t)) (Array Int character)
  (elts a))

;; of_array
(define-fun of_array ((a (Array Int character)) (f Int) (l Int)) us_t
  (us_tqtmk a (mk f l)))

;; first
(define-fun first ((a us_t)) Int
  (to_rep1 (rec__first (rt a))))

;; last
(define-fun last ((a us_t)) Int
  (to_rep1 (rec__last (rt a))))

;; length
(define-fun length ((a us_t)) Int
  (ite (<= (first a) (last a)) (+ (- (last a) (first a)) 1) 0))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
(assert (<= 0 value__size))

;; object__size_axiom
(assert (<= 0 object__size))

;; component__size_axiom
(assert (<= 0 component__size))

;; alignment_axiom
(assert (<= 0 alignment))

;; bool_eq
(define-fun bool_eq6 ((x us_t) (y us_t)) Bool
  (bool_eq5
    (elts x)
    (to_rep1 (rec__first (rt x)))
    (to_rep1 (rec__last (rt x)))
    (elts y)
    (to_rep1 (rec__first (rt y)))
    (to_rep1 (rec__last (rt y)))))

;; user_eq
(declare-fun user_eq4 (us_t
  us_t) Bool)

(declare-const dummy5 us_t)

(declare-datatypes ((string____ref 0))
  (((string____refqtmk (string____content us_t)))))

;; string____ref_string____content__projection
(define-fun string____ref_string____content__projection ((a string____ref)) us_t
  (string____content a))

;; dynamic_invariant
(define-fun dynamic_invariant3 ((temp___expr_114 us_t) (temp___is_init_110 Bool) (temp___skip_constant_111 Bool) (temp___do_toplevel_112 Bool) (temp___do_typ_inv_113 Bool)) Bool
  (=>
    (not (= temp___skip_constant_111 true))
    (dynamic_property
      1
      2147483647
      (first temp___expr_114)
      (last temp___expr_114))))

(declare-const source us_t)

(declare-const position Int)

(declare-const new_item us_t)

(declare-const result_length Int)

(declare-const front Int)

(declare-const result____first integer)

(declare-const result____last integer)

(declare-datatypes ((t129s__ref 0))
  (((t129s__refqtmk (t129s__content us_t)))))

;; t129s__ref_t129s__content__projection
(define-fun t129s__ref_t129s__content__projection ((a t129s__ref)) us_t
  (t129s__content a))

(declare-datatypes ((t131s__ref 0))
  (((t131s__refqtmk (t131s__content us_t)))))

;; t131s__ref_t131s__content__projection
(define-fun t131s__ref_t131s__content__projection ((a t131s__ref)) us_t
  (t131s__content a))

(declare-datatypes ((t133s__ref 0))
  (((t133s__refqtmk (t133s__content us_t)))))

;; t133s__ref_t133s__content__projection
(define-fun t133s__ref_t133s__content__projection ((a t133s__ref)) us_t
  (t133s__content a))

(declare-datatypes ((t135s__ref 0))
  (((t135s__refqtmk (t135s__content us_t)))))

;; t135s__ref_t135s__content__projection
(define-fun t135s__ref_t135s__content__projection ((a t135s__ref)) us_t
  (t135s__content a))

(declare-datatypes ((t137s__ref 0))
  (((t137s__refqtmk (t137s__content us_t)))))

;; t137s__ref_t137s__content__projection
(define-fun t137s__ref_t137s__content__projection ((a t137s__ref)) us_t
  (t137s__content a))

(declare-datatypes ((tresultS__ref 0))
  (((tresultS__refqtmk (tresultS__content us_t)))))

;; tresultS__ref_tresultS__content__5__projection
(define-fun tresultS__ref_tresultS__content__5__projection ((a tresultS__ref)) us_t
  (tresultS__content a))

;; array_bool_eq
(declare-fun array_bool_eq ((Array Int character__init_wrapper)
  Int
  Int
  (Array Int character__init_wrapper)
  Int
  Int) Bool)

(declare-datatypes ((t1 0))
  (((tqtmk1 (rec__first1 integer)(rec__last1 integer)))))

;; mk
(declare-fun mk1 (Int
  Int) t1)

;; mk_def
(assert
  (forall ((f Int) (l Int))
    (! (=>
         (in_range1 f)
         (=>
           (in_range1 l)
           (and
             (= (to_rep1 (rec__first1 (mk1 f l))) f)
             (= (to_rep1 (rec__last1 (mk1 f l))) l)))) :pattern ((mk1 f l)) )))

;; dynamic_property
(define-fun dynamic_property1 ((range_first Int) (range_last Int) (low Int) (high Int)) Bool
  (and
    (in_range1 low)
    (and
      (in_range1 high)
      (=> (<= low high) (and (in_range3 low) (in_range3 high))))))

(declare-datatypes ((us_t1 0))
  (((us_tqtmk1 (elts1 (Array Int character__init_wrapper))(rt1 t1)))))

;; to_array
(define-fun to_array1 ((a us_t1)) (Array Int character__init_wrapper)
  (elts1 a))

;; of_array
(define-fun of_array1 ((a (Array Int character__init_wrapper)) (f Int) (l Int)) us_t1
  (us_tqtmk1 a (mk1 f l)))

;; first
(define-fun first1 ((a us_t1)) Int
  (to_rep1 (rec__first1 (rt1 a))))

;; last
(define-fun last1 ((a us_t1)) Int
  (to_rep1 (rec__last1 (rt1 a))))

;; length
(define-fun length1 ((a us_t1)) Int
  (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const component__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
(assert (<= 0 value__size1))

;; object__size_axiom
(assert (<= 0 object__size1))

;; component__size_axiom
(assert (<= 0 component__size1))

;; alignment_axiom
(assert (<= 0 alignment1))

;; bool_eq
(define-fun bool_eq7 ((x us_t1) (y us_t1)) Bool
  (array_bool_eq
    (elts1 x)
    (to_rep1 (rec__first1 (rt1 x)))
    (to_rep1 (rec__last1 (rt1 x)))
    (elts1 y)
    (to_rep1 (rec__first1 (rt1 y)))
    (to_rep1 (rec__last1 (rt1 y)))))

;; user_eq
(declare-fun user_eq5 (us_t1
  us_t1) Bool)

(declare-const dummy6 us_t1)

(declare-datatypes ((string____init_wrapper__ref 0))
  (((string____init_wrapper__refqtmk (string____init_wrapper__content us_t1)))))

;; string____init_wrapper__ref_string____init_wrapper__content__projection
(define-fun string____init_wrapper__ref_string____init_wrapper__content__projection 
  ((a string____init_wrapper__ref)) us_t1
  (string____init_wrapper__content a))

(declare-datatypes ((tresultS__init_wrapper__ref 0))
  (((tresultS__init_wrapper__refqtmk (tresultS__init_wrapper__content us_t1)))))

;; tresultS__init_wrapper__ref_tresultS__init_wrapper__content__5__projection
(define-fun tresultS__init_wrapper__ref_tresultS__init_wrapper__content__5__projection 
  ((a tresultS__init_wrapper__ref)) us_t1
  (tresultS__init_wrapper__content a))

(declare-datatypes ((t128b__init_wrapper__ref 0))
  (((t128b__init_wrapper__refqtmk (t128b__init_wrapper__content us_t1)))))

;; t128b__init_wrapper__ref_t128b__init_wrapper__content__projection
(define-fun t128b__init_wrapper__ref_t128b__init_wrapper__content__projection 
  ((a t128b__init_wrapper__ref)) us_t1
  (t128b__init_wrapper__content a))

(declare-datatypes ((t130b__ref 0))
  (((t130b__refqtmk (t130b__content us_t)))))

;; t130b__ref_t130b__content__projection
(define-fun t130b__ref_t130b__content__projection ((a t130b__ref)) us_t
  (t130b__content a))

(declare-datatypes ((t132b__init_wrapper__ref 0))
  (((t132b__init_wrapper__refqtmk (t132b__init_wrapper__content us_t1)))))

;; t132b__init_wrapper__ref_t132b__init_wrapper__content__projection
(define-fun t132b__init_wrapper__ref_t132b__init_wrapper__content__projection 
  ((a t132b__init_wrapper__ref)) us_t1
  (t132b__init_wrapper__content a))

(declare-datatypes ((t134b__init_wrapper__ref 0))
  (((t134b__init_wrapper__refqtmk (t134b__init_wrapper__content us_t1)))))

;; t134b__init_wrapper__ref_t134b__init_wrapper__content__projection
(define-fun t134b__init_wrapper__ref_t134b__init_wrapper__content__projection 
  ((a t134b__init_wrapper__ref)) us_t1
  (t134b__init_wrapper__content a))

(declare-datatypes ((t136b__ref 0))
  (((t136b__refqtmk (t136b__content us_t)))))

;; t136b__ref_t136b__content__projection
(define-fun t136b__ref_t136b__content__projection ((a t136b__ref)) us_t
  (t136b__content a))

;; dynamic_invariant
(define-fun dynamic_invariant4 ((temp___expr_88 Int) (temp___is_init_84 Bool) (temp___skip_constant_85 Bool) (temp___do_toplevel_86 Bool) (temp___do_typ_inv_87 Bool)) Bool
  (=> (or (= temp___is_init_84 true) (<= 0 255)) (in_range4 temp___expr_88)))

;; result_length__def_axiom
(assert
  (= result_length (max
                     (length source)
                     (+ (- position (first source)) (length new_item)))))

;; front__def_axiom
(assert (= front (- position (first source))))

;; dynamic_invariant
(define-fun dynamic_invariant5 ((temp___expr_1106 us_t) (temp___is_init_1102 Bool) (temp___skip_constant_1103 Bool) (temp___do_toplevel_1104 Bool) (temp___do_typ_inv_1105 Bool) (Ada___ada___ada__strings__fixed__overwrite__B_13__result_length___result_length___ Int)) Bool
  (=>
    (not (= temp___skip_constant_1103 true))
    (and
      (and
        (dynamic_property
          1
          Ada___ada___ada__strings__fixed__overwrite__B_13__result_length___result_length___
          (first temp___expr_1106)
          (last temp___expr_1106))
        (= (first temp___expr_1106) 1))
      (= (last temp___expr_1106) Ada___ada___ada__strings__fixed__overwrite__B_13__result_length___result_length___))))

;; default_initial_assumption
(define-fun default_initial_assumption ((temp___expr_1108 us_t) (temp___skip_top_level_1109 Bool) (Ada___ada___ada__strings__fixed__overwrite__B_13__result_length___result_length___ Int)) Bool
  (and
    (= (first temp___expr_1108) 1)
    (= (last temp___expr_1108) Ada___ada___ada__strings__fixed__overwrite__B_13__result_length___result_length___)))

(declare-const result__ (Array Int character__init_wrapper))

;; Assume
(assert (dynamic_invariant3 source true false true true))

;; Assume
(assert (dynamic_invariant2 position true false true true))

;; Assume
(assert (dynamic_invariant3 new_item true false true true))

;; Assume
(assert
  (and
    (let ((temp___1936 (- position 1)))
      (and
        (<= (- (first source) 1) temp___1936)
        (<= temp___1936 (last source))))
    (=>
      (<= (- (length source) (length new_item)) (- position (first source)))
      (<= (- position (first source)) (- 2147483647 (length new_item))))))

;; Ensures
(assert (in_range1 (- (first source) 1)))

(declare-const spark__branch Bool)

;; H
(assert
  (= spark__branch (ite (= (and (ite (<= (- (first source) 1) (- position 1))
                                  true
                                  false) (ite (<= (- position 1) (last
                                                                   source))
                                           true
                                           false)) true)
                     false
                     true)))

;; H
(assert (not (= spark__branch true)))

;; Ensures
(assert (in_range1 (length new_item)))

;; Ensures
(assert (in_range1 (- position (first source))))

;; Ensures
(assert (in_range1 (+ (- position (first source)) (length new_item))))

;; Ensures
(assert (in_range1 (length source)))

;; Ensures
(assert
  (in_range2
    (max (length source) (+ (- position (first source)) (length new_item)))))

;; Assume
(assert
  (= (max (length source) (+ (- position (first source)) (length new_item))) 
  result_length))

;; Assume
(assert (dynamic_invariant1 result_length true false true true))

;; Ensures
(assert (in_range1 (- position (first source))))

;; Assume
(assert (= (- position (first source)) front))

;; Assume
(assert (dynamic_invariant front true false true true))

;; Assume
(assert
  (and
    (= (first1
         (of_array1
           result__
           (to_rep1 result____first)
           (to_rep1 result____last))) 1)
    (= (last1
         (of_array1
           result__
           (to_rep1 result____first)
           (to_rep1 result____last))) result_length)))

;; Assume
(assert
  (and
    (and
      (dynamic_property
        1
        result_length
        (first1
          (of_array1
            result__
            (to_rep1 result____first)
            (to_rep1 result____last)))
        (last1
          (of_array1
            result__
            (to_rep1 result____first)
            (to_rep1 result____last))))
      (= (first1
           (of_array1
             result__
             (to_rep1 result____first)
             (to_rep1 result____last))) 1))
    (= (last1
         (of_array1
           result__
           (to_rep1 result____first)
           (to_rep1 result____last))) result_length)))

;; Assert
(assert
  (=>
    (<= (first source) (- position 1))
    (and
      (and
        (<= (first source) (first source))
        (<= (first source) (last source)))
      (and
        (<= (first source) (- position 1))
        (<= (- position 1) (last source))))))

;; Assert
(assert
  (ite (<= (first (of_array (to_array source) (first source) (- position 1))) 
    (last
      (of_array (to_array source) (first source) (- position 1))))
    (and
      (<= 1 front)
      (= (- (last (of_array (to_array source) (first source) (- position 1))) 
      (first
        (of_array (to_array source) (first source) (- position 1)))) (- 
      front 1)))
    (< front 1)))

;; Assert
(assert
  (=>
    (<= 1 front)
    (and
      (and
        (<= (first1
              (of_array1
                result__
                (to_rep1 result____first)
                (to_rep1 result____last))) 1)
        (<= 1 (last1
                (of_array1
                  result__
                  (to_rep1 result____first)
                  (to_rep1 result____last)))))
      (and
        (<= (first1
              (of_array1
                result__
                (to_rep1 result____first)
                (to_rep1 result____last))) front)
        (<= front (last1
                    (of_array1
                      result__
                      (to_rep1 result____first)
                      (to_rep1 result____last))))))))

;; Assert
(assert
  (ite (<= (first1
             (of_array1
               (convert1
                 (slide
                   (to_array
                     (of_array
                       (to_array source)
                       (first source)
                       (- position 1)))
                   (first
                     (of_array
                       (to_array source)
                       (first source)
                       (- position 1)))
                   1))
               1
               front)) (last1
                         (of_array1
                           (convert1
                             (slide
                               (to_array
                                 (of_array
                                   (to_array source)
                                   (first source)
                                   (- position 1)))
                               (first
                                 (of_array
                                   (to_array source)
                                   (first source)
                                   (- position 1)))
                               1))
                           1
                           front)))
    (and
      (<= (first1
            (of_array1
              (to_array1
                (of_array1
                  result__
                  (to_rep1 result____first)
                  (to_rep1 result____last)))
              1
              front)) (last1
                        (of_array1
                          (to_array1
                            (of_array1
                              result__
                              (to_rep1 result____first)
                              (to_rep1 result____last)))
                          1
                          front)))
      (= (- (last1
              (of_array1
                (convert1
                  (slide
                    (to_array
                      (of_array
                        (to_array source)
                        (first source)
                        (- position 1)))
                    (first
                      (of_array
                        (to_array source)
                        (first source)
                        (- position 1)))
                    1))
                1
                front)) (first1
                          (of_array1
                            (convert1
                              (slide
                                (to_array
                                  (of_array
                                    (to_array source)
                                    (first source)
                                    (- position 1)))
                                (first
                                  (of_array
                                    (to_array source)
                                    (first source)
                                    (- position 1)))
                                1))
                            1
                            front))) (- (last1
                                          (of_array1
                                            (to_array1
                                              (of_array1
                                                result__
                                                (to_rep1 result____first)
                                                (to_rep1 result____last)))
                                            1
                                            front)) (first1
                                                      (of_array1
                                                        (to_array1
                                                          (of_array1
                                                            result__
                                                            (to_rep1
                                                              result____first)
                                                            (to_rep1
                                                              result____last)))
                                                        1
                                                        front)))))
    (< (last1
         (of_array1
           (to_array1
             (of_array1
               result__
               (to_rep1 result____first)
               (to_rep1 result____last)))
           1
           front)) (first1
                     (of_array1
                       (to_array1
                         (of_array1
                           result__
                           (to_rep1 result____first)
                           (to_rep1 result____last)))
                       1
                       front)))))

(declare-const usf us_t1)

;; H
(assert true)

;; H
(assert
  (= (first1
       (of_array1
         result__
         (to_rep1 result____first)
         (to_rep1 result____last))) (first1 usf)))

;; H
(assert
  (= (last1
       (of_array1
         result__
         (to_rep1 result____first)
         (to_rep1 result____last))) (last1 usf)))

;; H
(assert
  (forall ((temp___1886 Int))
    (ite (and (<= 1 temp___1886) (<= temp___1886 front))
      (= (select (to_array1 usf) temp___1886) (select (to_array1
                                                        (of_array1
                                                          (convert1
                                                            (slide
                                                              (to_array
                                                                (of_array
                                                                  (to_array
                                                                    source)
                                                                  (first
                                                                    source)
                                                                  (- 
                                                                  position 1)))
                                                              (first
                                                                (of_array
                                                                  (to_array
                                                                    source)
                                                                  (first
                                                                    source)
                                                                  (- 
                                                                  position 1)))
                                                              1))
                                                          1
                                                          front)) temp___1886))
      (= (select (to_array1 usf) temp___1886) (select (to_array1
                                                        (of_array1
                                                          result__
                                                          (to_rep1
                                                            result____first)
                                                          (to_rep1
                                                            result____last))) temp___1886)))))

(declare-const result__1 (Array Int character__init_wrapper))

;; H
(assert (= result__1 (to_array1 usf)))

;; Assert
(assert
  (ite (<= (first new_item) (last new_item))
    (and
      (<= (+ front 1) (+ front (length new_item)))
      (= (- (last new_item) (first new_item)) (- (+ front (length new_item)) (+ 
      front 1))))
    (< (+ front (length new_item)) (+ front 1))))

;; Ensures
(assert (in_range1 (length new_item)))

;; Ensures
(assert (in_range1 (+ front (length new_item))))

;; Ensures
(assert (in_range1 (+ front 1)))

;; Assert
(assert
  (=>
    (<= (+ front 1) (+ front (length new_item)))
    (and
      (and
        (<= (first1
              (of_array1
                result__1
                (to_rep1 result____first)
                (to_rep1 result____last))) (+ front 1))
        (<= (+ front 1) (last1
                          (of_array1
                            result__1
                            (to_rep1 result____first)
                            (to_rep1 result____last)))))
      (and
        (<= (first1
              (of_array1
                result__1
                (to_rep1 result____first)
                (to_rep1 result____last))) (+ front (length new_item)))
        (<= (+ front (length new_item)) (last1
                                          (of_array1
                                            result__1
                                            (to_rep1 result____first)
                                            (to_rep1 result____last))))))))

;; Assert
(assert
  (ite (<= (first1
             (of_array1
               (convert1
                 (slide (to_array new_item) (first new_item) (+ front 1)))
               (+ front 1)
               (+ front (length new_item)))) (last1
                                               (of_array1
                                                 (convert1
                                                   (slide
                                                     (to_array new_item)
                                                     (first new_item)
                                                     (+ front 1)))
                                                 (+ front 1)
                                                 (+ front (length new_item)))))
    (and
      (<= (first1
            (of_array1
              (to_array1
                (of_array1
                  result__1
                  (to_rep1 result____first)
                  (to_rep1 result____last)))
              (+ front 1)
              (+ front (length new_item)))) (last1
                                              (of_array1
                                                (to_array1
                                                  (of_array1
                                                    result__1
                                                    (to_rep1 result____first)
                                                    (to_rep1 result____last)))
                                                (+ front 1)
                                                (+ front (length new_item)))))
      (= (- (last1
              (of_array1
                (convert1
                  (slide (to_array new_item) (first new_item) (+ front 1)))
                (+ front 1)
                (+ front (length new_item)))) (first1
                                                (of_array1
                                                  (convert1
                                                    (slide
                                                      (to_array new_item)
                                                      (first new_item)
                                                      (+ front 1)))
                                                  (+ front 1)
                                                  (+ front (length new_item))))) (- 
      (last1
        (of_array1
          (to_array1
            (of_array1
              result__1
              (to_rep1 result____first)
              (to_rep1 result____last)))
          (+ front 1)
          (+ front (length new_item)))) (first1
                                          (of_array1
                                            (to_array1
                                              (of_array1
                                                result__1
                                                (to_rep1 result____first)
                                                (to_rep1 result____last)))
                                            (+ front 1)
                                            (+ front (length new_item)))))))
    (< (last1
         (of_array1
           (to_array1
             (of_array1
               result__1
               (to_rep1 result____first)
               (to_rep1 result____last)))
           (+ front 1)
           (+ front (length new_item)))) (first1
                                           (of_array1
                                             (to_array1
                                               (of_array1
                                                 result__1
                                                 (to_rep1 result____first)
                                                 (to_rep1 result____last)))
                                             (+ front 1)
                                             (+ front (length new_item)))))))

(declare-const usf1 us_t1)

;; H
(assert true)

;; H
(assert
  (= (first1
       (of_array1
         result__1
         (to_rep1 result____first)
         (to_rep1 result____last))) (first1 usf1)))

;; H
(assert
  (= (last1
       (of_array1
         result__1
         (to_rep1 result____first)
         (to_rep1 result____last))) (last1 usf1)))

;; H
(assert
  (forall ((temp___1897 Int))
    (ite (and
           (<= (+ front 1) temp___1897)
           (<= temp___1897 (+ front (length new_item))))
      (= (select (to_array1 usf1) temp___1897) (select (to_array1
                                                         (of_array1
                                                           (convert1
                                                             (slide
                                                               (to_array
                                                                 new_item)
                                                               (first
                                                                 new_item)
                                                               (+ front 1)))
                                                           (+ front 1)
                                                           (+ front (length
                                                                    new_item)))) temp___1897))
      (= (select (to_array1 usf1) temp___1897) (select (to_array1
                                                         (of_array1
                                                           result__1
                                                           (to_rep1
                                                             result____first)
                                                           (to_rep1
                                                             result____last))) temp___1897)))))

(declare-const result__2 (Array Int character__init_wrapper))

;; H
(assert (= result__2 (to_array1 usf1)))

(declare-const result__3 (Array Int character__init_wrapper))

;; H
(assert (in_range1 (length new_item)))

;; H
(assert (in_range1 (- (last source) (length new_item))))

(declare-const spark__branch1 Bool)

;; H
(assert
  (= spark__branch1 (ite (<= position (- (last source) (length new_item)))
                      true
                      false)))

(declare-const o Int)

(declare-const o1 Int)

(declare-const o2 Int)

(declare-const temp___1906 Int)

(declare-const o3 Int)

(declare-const o4 Int)

(declare-const usf2 us_t1)

;; H
(assert
  (ite (= spark__branch1 true)
    (and
      (= (to_rep1 result____last) o)
      (and
        (= (to_rep1 result____first) o1)
        (let ((temp___1908 (of_array1 result__2 o1 o)))
          (let ((temp___1900 (last source)))
            (let ((o5 (length new_item)))
              (and
                (in_range1 o5)
                (let ((o6 (+ position o5)))
                  (and
                    (in_range1 o6)
                    (and
                      (=>
                        (<= o6 temp___1900)
                        (and
                          (and (<= (first source) o6) (<= o6 (last source)))
                          (and
                            (<= (first source) temp___1900)
                            (<= temp___1900 (last source)))))
                      (let ((temp___1901 (of_array
                                           (to_array source)
                                           o6
                                           temp___1900)))
                        (and
                          (ite (<= (first temp___1901) (last temp___1901))
                            (and
                              (<= (+ (+ front (length new_item)) 1) (to_rep1
                                                                    result____last))
                              (= (- (last temp___1901) (first temp___1901)) (- 
                              (to_rep1
                                result____last) (+ (+ front (length new_item)) 1))))
                            (< (to_rep1 result____last) (+ (+ front (length
                                                                    new_item)) 1)))
                          (and
                            (= (to_rep1 result____last) o2)
                            (let ((temp___1903 (of_array1
                                                 (convert1
                                                   (slide
                                                     (to_array temp___1901)
                                                     (first temp___1901)
                                                     (+ (+ front (length
                                                                   new_item)) 1)))
                                                 (+ (+ front (length
                                                               new_item)) 1)
                                                 o2)))
                              (and
                                (= (to_rep1 result____last) temp___1906)
                                (let ((o7 (length new_item)))
                                  (and
                                    (in_range1 o7)
                                    (let ((o8 (+ front o7)))
                                      (and
                                        (in_range1 o8)
                                        (let ((o9 (+ o8 1)))
                                          (and
                                            (in_range1 o9)
                                            (and
                                              (= (to_rep1 result____last) 
                                              o3)
                                              (and
                                                (= (to_rep1 result____first) 
                                                o4)
                                                (let ((temp___1904 (of_array1
                                                                    result__2
                                                                    o4
                                                                    o3)))
                                                  (and
                                                    (=>
                                                      (<= o9 temp___1906)
                                                      (and
                                                        (and
                                                          (<= (first1
                                                                temp___1904) o9)
                                                          (<= o9 (last1
                                                                   temp___1904)))
                                                        (and
                                                          (<= (first1
                                                                temp___1904) 
                                                          temp___1906)
                                                          (<= temp___1906 
                                                          (last1
                                                            temp___1904)))))
                                                    (let ((temp___1907 
                                                      (of_array1
                                                        (to_array1
                                                          temp___1904)
                                                        o9
                                                        temp___1906)))
                                                      (and
                                                        (ite (<= (first1
                                                                   temp___1903) 
                                                          (last1
                                                            temp___1903))
                                                          (and
                                                            (<= (first1
                                                                  temp___1907) 
                                                            (last1
                                                              temp___1907))
                                                            (= (- (last1
                                                                    temp___1903) 
                                                            (first1
                                                              temp___1903)) (- 
                                                            (last1
                                                              temp___1907) 
                                                            (first1
                                                              temp___1907))))
                                                          (< (last1
                                                               temp___1907) 
                                                          (first1
                                                            temp___1907)))
                                                        (and
                                                          (and
                                                            (and
                                                              (= (first1
                                                                   temp___1908) 
                                                              (first1
                                                                usf2))
                                                              (= (last1
                                                                   temp___1908) 
                                                              (last1
                                                                usf2)))
                                                            (forall ((temp___1911 Int))
                                                              (ite (and
                                                                    (<= (+ (+ 
                                                                    front 
                                                                    (length
                                                                    new_item)) 1) temp___1911)
                                                                    (<= temp___1911 
                                                                    (to_rep1
                                                                    result____last)))
                                                                (= (select 
                                                                (to_array1
                                                                  usf2) temp___1911) (select 
                                                                (to_array1
                                                                  temp___1903) temp___1911))
                                                                (= (select 
                                                                (to_array1
                                                                  usf2) temp___1911) (select 
                                                                (to_array1
                                                                  temp___1908) temp___1911)))))
                                                          (= result__3 
                                                          (to_array1
                                                            usf2)))))))))))))))))))))))))))))
    (= result__3 result__2)))

(declare-const ada___ada___ada__strings__fixed__overwrite__result us_t)

;; H
(assert
  (= ada___ada___ada__strings__fixed__overwrite__result (of_array
                                                          (convert
                                                            (to_array1
                                                              (of_array1
                                                                result__3
                                                                (to_rep1
                                                                  result____first)
                                                                (to_rep1
                                                                  result____last))))
                                                          (first1
                                                            (of_array1
                                                              result__3
                                                              (to_rep1
                                                                result____first)
                                                              (to_rep1
                                                                result____last)))
                                                          (last1
                                                            (of_array1
                                                              result__3
                                                              (to_rep1
                                                                result____first)
                                                              (to_rep1
                                                                result____last))))))

;; Goal def'vc
;; File "a-strfix.ads", line 986, characters 0-0
(assert
  (not
  (=>
    (<= position (- (last source) (length new_item)))
    (= (let ((temp___1956 (of_array
                            (to_array source)
                            (+ position (length new_item))
                            (last source))))
         (let ((temp___1954 (of_array
                              (to_array
                                ada___ada___ada__strings__fixed__overwrite__result)
                              (+ (+ (- position (first source)) (length
                                                                  new_item)) 1)
                              (last
                                ada___ada___ada__strings__fixed__overwrite__result))))
           (bool_eq5
             (to_array temp___1954)
             (first temp___1954)
             (last temp___1954)
             (to_array temp___1956)
             (first temp___1956)
             (last temp___1956)))) true))))

(check-sat)
(exit)
