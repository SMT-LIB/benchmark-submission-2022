(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTNIRA)
(set-info :source |
Generated by: Yannick Moy
Generated on: 2022-02-14
Generator: GNATprove
Application: GNAT light runtime library
Target solver: Alt-Ergo, CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)

;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
  (((Tuple0))))

(declare-sort us_private 0)

;; private__bool_eq
(declare-fun private__bool_eq (us_private
  us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
  (((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))

(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
  (((int__refqtmk (int__content Int)))))

(declare-datatypes ((bool__ref 0))
  (((bool__refqtmk (bool__content Bool)))))

(declare-datatypes ((us_fixed__ref 0))
  (((us_fixed__refqtmk (us_fixed__content Int)))))

(declare-datatypes ((real__ref 0))
  (((real__refqtmk (real__content Real)))))

(declare-datatypes ((us_private__ref 0))
  (((us_private__refqtmk (us_private__content us_private)))))

;; int__ref___projection
(define-fun int__ref___projection ((a int__ref)) Int
  (int__content a))

;; __fixed__ref___projection
(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int
  (us_fixed__content a))

;; bool__ref___projection
(define-fun bool__ref___projection ((a bool__ref)) Bool
  (bool__content a))

;; real__ref___projection
(define-fun real__ref___projection ((a real__ref)) Real
  (real__content a))

;; __private__ref___projection
(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

;; bool_eq
(define-fun bool_eq ((x Bool) (y Bool)) Bool
  (ite (= x y) true false))

;; to_int
(define-fun to_int1 ((b Bool)) Int
  (ite (= b true) 1 0))

;; of_int
(define-fun of_int ((i Int)) Bool
  (ite (= i 0) false true))

;; in_range
(define-fun in_range ((x Int)) Bool
  (or (= x 0) (= x 1)))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

;; integer'int
(declare-fun integerqtint (integer) Int)

;; integer'axiom
(assert
  (forall ((i integer))
    (and
      (<= (- 2147483648) (integerqtint i))
      (<= (integerqtint i) 2147483647))))

;; in_range
(define-fun in_range1 ((x Int)) Bool
  (and (<= (- 2147483648) x) (<= x 2147483647)))

;; bool_eq
(define-fun bool_eq1 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

;; user_eq
(declare-fun user_eq (integer
  integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
  (((integer__refqtmk (integer__content integer)))))

;; integer__ref_integer__content__projection
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer
  (integer__content a))

;; dynamic_invariant
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool
  (=>
    (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647))
    (in_range1 temp___expr_18)))

(declare-sort natural 0)

;; natural'int
(declare-fun naturalqtint (natural) Int)

;; natural'axiom
(assert
  (forall ((i natural))
    (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

;; in_range
(define-fun in_range2 ((x Int)) Bool
  (and (<= 0 x) (<= x 2147483647)))

;; bool_eq
(define-fun bool_eq2 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

;; user_eq
(declare-fun user_eq1 (natural
  natural) Bool)

(declare-const dummy1 natural)

(declare-datatypes ((natural__ref 0))
  (((natural__refqtmk (natural__content natural)))))

;; natural__ref_natural__content__projection
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural
  (natural__content a))

;; dynamic_invariant
(define-fun dynamic_invariant1 ((temp___expr_46 Int) (temp___is_init_42 Bool) (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool) (temp___do_typ_inv_45 Bool)) Bool
  (=>
    (or (= temp___is_init_42 true) (<= 0 2147483647))
    (in_range2 temp___expr_46)))

(declare-sort positive 0)

;; positive'int
(declare-fun positiveqtint (positive) Int)

;; positive'axiom
(assert
  (forall ((i positive))
    (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

;; in_range
(define-fun in_range3 ((x Int)) Bool
  (and (<= 1 x) (<= x 2147483647)))

;; bool_eq
(define-fun bool_eq3 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

;; user_eq
(declare-fun user_eq2 (positive
  positive) Bool)

(declare-const dummy2 positive)

(declare-datatypes ((positive__ref 0))
  (((positive__refqtmk (positive__content positive)))))

;; positive__ref_positive__content__projection
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive
  (positive__content a))

;; dynamic_invariant
(define-fun dynamic_invariant2 ((temp___expr_53 Int) (temp___is_init_49 Bool) (temp___skip_constant_50 Bool) (temp___do_toplevel_51 Bool) (temp___do_typ_inv_52 Bool)) Bool
  (=>
    (or (= temp___is_init_49 true) (<= 1 2147483647))
    (in_range3 temp___expr_53)))

(declare-sort character 0)

;; in_range
(define-fun in_range4 ((x Int)) Bool
  (and (<= 0 x) (<= x 255)))

;; bool_eq
(define-fun bool_eq4 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

;; user_eq
(declare-fun user_eq3 (character
  character) Bool)

(declare-const dummy3 character)

(declare-datatypes ((character__ref 0))
  (((character__refqtmk (character__content character)))))

;; character__ref_character__content__projection
(define-fun character__ref_character__content__projection ((a character__ref)) character
  (character__content a))

(declare-datatypes ((character__init_wrapper 0))
  (((character__init_wrapperqtmk (rec__value character)(us_attr__init Bool)))))

;; character__init_wrapper_rec__value__projection
(define-fun character__init_wrapper_rec__value__projection ((a character__init_wrapper)) character
  (rec__value a))

;; character__init_wrapper___attr__init__projection
(define-fun character__init_wrapper___attr__init__projection ((a character__init_wrapper)) Bool
  (us_attr__init a))

(declare-const dummy4 character__init_wrapper)

;; dummy__def
(assert (= (us_attr__init dummy4) false))

(declare-datatypes ((character__init_wrapper__ref 0))
  (((character__init_wrapper__refqtmk
    (character__init_wrapper__content character__init_wrapper)))))

;; character__init_wrapper__ref_character__init_wrapper__content__projection
(define-fun character__init_wrapper__ref_character__init_wrapper__content__projection 
  ((a character__init_wrapper__ref)) character__init_wrapper
  (character__init_wrapper__content a))

;; to_rep
(declare-fun to_rep (character) Int)

;; of_rep
(declare-fun of_rep (Int) character)

;; inversion_axiom
(assert
  (forall ((x character))
    (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
(assert
  (forall ((x character)) (! (in_range4 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
(assert
  (forall ((x Int))
    (! (=> (in_range4 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                                (of_rep x))) )))

(declare-datatypes ((map__ref 0))
  (((map__refqtmk (map__content (Array Int character))))))

;; slide
(declare-fun slide ((Array Int character)
  Int
  Int) (Array Int character))

;; slide_eq
(assert
  (forall ((a (Array Int character)))
    (forall ((first Int))
      (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
(assert
  (forall ((a (Array Int character)))
    (forall ((old_first Int))
      (forall ((new_first Int))
        (forall ((i Int))
          (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
          (slide
            a
            old_first
            new_first) i)) ))))))

;; const
(declare-fun const1 (character) (Array Int character))

;; const_def
(assert
  (forall ((v character))
    (forall ((i Int))
      (! (= (select (const1 v) i) v) :pattern ((select (const1 v) i)) ))))

;; bool_eq
(define-fun bool_eq5 ((a (Array Int character)) (a__first Int) (a__last Int) (b (Array Int character)) (b__first Int) (b__last Int)) Bool
  (ite (and
         (ite (<= a__first a__last)
           (and
             (<= b__first b__last)
             (= (- a__last a__first) (- b__last b__first)))
           (< b__last b__first))
         (forall ((temp___idx_105 Int))
           (=>
             (and (<= a__first temp___idx_105) (<= temp___idx_105 a__last))
             (= (to_rep (select a temp___idx_105)) (to_rep
                                                     (select b (+ (- b__first a__first) temp___idx_105)))))))
    true
    false))

;; bool_eq_rev
(assert
  (forall ((a (Array Int character)) (b (Array Int character)))
    (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
      (=>
        (= (bool_eq5 b b__first b__last a a__first a__last) true)
        (and
          (ite (<= a__first a__last)
            (and
              (<= b__first b__last)
              (= (- a__last a__first) (- b__last b__first)))
            (< b__last b__first))
          (forall ((temp___idx_105 Int))
            (=>
              (and (<= a__first temp___idx_105) (<= temp___idx_105 a__last))
              (= (to_rep (select a temp___idx_105)) (to_rep
                                                      (select b (+ (- b__first a__first) temp___idx_105)))))))))))

(declare-datatypes ((map__ref1 0))
  (((map__refqtmk1 (map__content1 (Array Int character__init_wrapper))))))

;; slide
(declare-fun slide1 ((Array Int character__init_wrapper)
  Int
  Int) (Array Int character__init_wrapper))

;; slide_eq
(assert
  (forall ((a (Array Int character__init_wrapper)))
    (forall ((first Int))
      (! (= (slide1 a first first) a) :pattern ((slide1 a first first)) ))))

;; slide_def
(assert
  (forall ((a (Array Int character__init_wrapper)))
    (forall ((old_first Int))
      (forall ((new_first Int))
        (forall ((i Int))
          (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
          (slide1
            a
            old_first
            new_first) i)) ))))))

;; const
(declare-fun const2 (character__init_wrapper) (Array Int character__init_wrapper))

;; const_def
(assert
  (forall ((v character__init_wrapper))
    (forall ((i Int))
      (! (= (select (const2 v) i) v) :pattern ((select (const2 v) i)) ))))

;; convert
(declare-fun convert ((Array Int character__init_wrapper)) (Array Int character))

;; convert__def
(assert
  (forall ((a (Array Int character__init_wrapper)))
    (forall ((temp___106 Int))
      (= (to_rep (of_rep (to_rep (rec__value (select a temp___106))))) 
      (to_rep
        (select (convert a) temp___106))))))

;; convert
(declare-fun convert1 ((Array Int character)) (Array Int character__init_wrapper))

;; convert__def
(assert
  (forall ((a (Array Int character)))
    (let ((b (convert1 a)))
      (forall ((temp___107 Int))
        (and
          (= (us_attr__init
               (character__init_wrapperqtmk
                 (of_rep (to_rep (select a temp___107)))
                 true)) (us_attr__init (select b temp___107)))
          (= (to_rep
               (rec__value
                 (character__init_wrapperqtmk
                   (of_rep (to_rep (select a temp___107)))
                   true))) (to_rep (rec__value (select b temp___107)))))))))

;; to_rep
(define-fun to_rep1 ((x integer)) Int
  (integerqtint x))

;; of_rep
(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
(assert
  (forall ((x integer))
    (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
(assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
(assert
  (forall ((x Int))
    (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                                  (of_rep1 x))) )))

(declare-datatypes ((t 0))
  (((tqtmk (rec__first integer)(rec__last integer)))))

;; mk
(declare-fun mk (Int
  Int) t)

;; mk_def
(assert
  (forall ((f Int) (l Int))
    (! (=>
         (in_range1 f)
         (=>
           (in_range1 l)
           (and
             (= (to_rep1 (rec__first (mk f l))) f)
             (= (to_rep1 (rec__last (mk f l))) l)))) :pattern ((mk f l)) )))

;; dynamic_property
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool
  (and
    (in_range1 low)
    (and
      (in_range1 high)
      (=> (<= low high) (and (in_range3 low) (in_range3 high))))))

(declare-datatypes ((us_t 0))
  (((us_tqtmk (elts (Array Int character))(rt t)))))

;; to_array
(define-fun to_array ((a us_t)) (Array Int character)
  (elts a))

;; of_array
(define-fun of_array ((a (Array Int character)) (f Int) (l Int)) us_t
  (us_tqtmk a (mk f l)))

;; first
(define-fun first ((a us_t)) Int
  (to_rep1 (rec__first (rt a))))

;; last
(define-fun last ((a us_t)) Int
  (to_rep1 (rec__last (rt a))))

;; length
(define-fun length ((a us_t)) Int
  (ite (<= (first a) (last a)) (+ (- (last a) (first a)) 1) 0))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
(assert (<= 0 value__size))

;; object__size_axiom
(assert (<= 0 object__size))

;; component__size_axiom
(assert (<= 0 component__size))

;; alignment_axiom
(assert (<= 0 alignment))

;; bool_eq
(define-fun bool_eq6 ((x us_t) (y us_t)) Bool
  (bool_eq5
    (elts x)
    (to_rep1 (rec__first (rt x)))
    (to_rep1 (rec__last (rt x)))
    (elts y)
    (to_rep1 (rec__first (rt y)))
    (to_rep1 (rec__last (rt y)))))

;; user_eq
(declare-fun user_eq4 (us_t
  us_t) Bool)

(declare-const dummy5 us_t)

(declare-datatypes ((string____ref 0))
  (((string____refqtmk (string____content us_t)))))

;; string____ref_string____content__projection
(define-fun string____ref_string____content__projection ((a string____ref)) us_t
  (string____content a))

;; dynamic_invariant
(define-fun dynamic_invariant3 ((temp___expr_114 us_t) (temp___is_init_110 Bool) (temp___skip_constant_111 Bool) (temp___do_toplevel_112 Bool) (temp___do_typ_inv_113 Bool)) Bool
  (=>
    (not (= temp___skip_constant_111 true))
    (dynamic_property
      1
      2147483647
      (first temp___expr_114)
      (last temp___expr_114))))

(declare-const source us_t)

(declare-const from Int)

(declare-const through Int)

(declare-const front Int)

(declare-const result____first integer)

(declare-const result____last integer)

(declare-datatypes ((t139s__ref 0))
  (((t139s__refqtmk (t139s__content us_t)))))

;; t139s__ref_t139s__content__projection
(define-fun t139s__ref_t139s__content__projection ((a t139s__ref)) us_t
  (t139s__content a))

(declare-datatypes ((t141s__ref 0))
  (((t141s__refqtmk (t141s__content us_t)))))

;; t141s__ref_t141s__content__projection
(define-fun t141s__ref_t141s__content__projection ((a t141s__ref)) us_t
  (t141s__content a))

(declare-datatypes ((t143s__ref 0))
  (((t143s__refqtmk (t143s__content us_t)))))

;; t143s__ref_t143s__content__projection
(define-fun t143s__ref_t143s__content__projection ((a t143s__ref)) us_t
  (t143s__content a))

(declare-datatypes ((t145s__ref 0))
  (((t145s__refqtmk (t145s__content us_t)))))

;; t145s__ref_t145s__content__projection
(define-fun t145s__ref_t145s__content__projection ((a t145s__ref)) us_t
  (t145s__content a))

(declare-datatypes ((result_type__ref 0))
  (((result_type__refqtmk (result_type__content us_t)))))

;; result_type__ref_result_type__content__projection
(define-fun result_type__ref_result_type__content__projection ((a result_type__ref)) us_t
  (result_type__content a))

(declare-datatypes ((tresultS__ref 0))
  (((tresultS__refqtmk (tresultS__content us_t)))))

;; tresultS__ref_tresultS__content__3__projection
(define-fun tresultS__ref_tresultS__content__3__projection ((a tresultS__ref)) us_t
  (tresultS__content a))

;; array_bool_eq
(declare-fun array_bool_eq ((Array Int character__init_wrapper)
  Int
  Int
  (Array Int character__init_wrapper)
  Int
  Int) Bool)

(declare-datatypes ((t1 0))
  (((tqtmk1 (rec__first1 integer)(rec__last1 integer)))))

;; mk
(declare-fun mk1 (Int
  Int) t1)

;; mk_def
(assert
  (forall ((f Int) (l Int))
    (! (=>
         (in_range1 f)
         (=>
           (in_range1 l)
           (and
             (= (to_rep1 (rec__first1 (mk1 f l))) f)
             (= (to_rep1 (rec__last1 (mk1 f l))) l)))) :pattern ((mk1 f l)) )))

;; dynamic_property
(define-fun dynamic_property1 ((range_first Int) (range_last Int) (low Int) (high Int)) Bool
  (and
    (in_range1 low)
    (and
      (in_range1 high)
      (=> (<= low high) (and (in_range3 low) (in_range3 high))))))

(declare-datatypes ((us_t1 0))
  (((us_tqtmk1 (elts1 (Array Int character__init_wrapper))(rt1 t1)))))

;; to_array
(define-fun to_array1 ((a us_t1)) (Array Int character__init_wrapper)
  (elts1 a))

;; of_array
(define-fun of_array1 ((a (Array Int character__init_wrapper)) (f Int) (l Int)) us_t1
  (us_tqtmk1 a (mk1 f l)))

;; first
(define-fun first1 ((a us_t1)) Int
  (to_rep1 (rec__first1 (rt1 a))))

;; last
(define-fun last1 ((a us_t1)) Int
  (to_rep1 (rec__last1 (rt1 a))))

;; length
(define-fun length1 ((a us_t1)) Int
  (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const component__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
(assert (<= 0 value__size1))

;; object__size_axiom
(assert (<= 0 object__size1))

;; component__size_axiom
(assert (<= 0 component__size1))

;; alignment_axiom
(assert (<= 0 alignment1))

;; bool_eq
(define-fun bool_eq7 ((x us_t1) (y us_t1)) Bool
  (array_bool_eq
    (elts1 x)
    (to_rep1 (rec__first1 (rt1 x)))
    (to_rep1 (rec__last1 (rt1 x)))
    (elts1 y)
    (to_rep1 (rec__first1 (rt1 y)))
    (to_rep1 (rec__last1 (rt1 y)))))

;; user_eq
(declare-fun user_eq5 (us_t1
  us_t1) Bool)

(declare-const dummy6 us_t1)

(declare-datatypes ((string____init_wrapper__ref 0))
  (((string____init_wrapper__refqtmk (string____init_wrapper__content us_t1)))))

;; string____init_wrapper__ref_string____init_wrapper__content__projection
(define-fun string____init_wrapper__ref_string____init_wrapper__content__projection 
  ((a string____init_wrapper__ref)) us_t1
  (string____init_wrapper__content a))

(declare-datatypes ((tresultS__init_wrapper__ref 0))
  (((tresultS__init_wrapper__refqtmk (tresultS__init_wrapper__content us_t1)))))

;; tresultS__init_wrapper__ref_tresultS__init_wrapper__content__3__projection
(define-fun tresultS__init_wrapper__ref_tresultS__init_wrapper__content__3__projection 
  ((a tresultS__init_wrapper__ref)) us_t1
  (tresultS__init_wrapper__content a))

(declare-datatypes ((t60b__init_wrapper__ref 0))
  (((t60b__init_wrapper__refqtmk (t60b__init_wrapper__content us_t1)))))

;; t60b__init_wrapper__ref_t60b__init_wrapper__content__projection
(define-fun t60b__init_wrapper__ref_t60b__init_wrapper__content__projection 
  ((a t60b__init_wrapper__ref)) us_t1
  (t60b__init_wrapper__content a))

(declare-datatypes ((t62b__ref 0))
  (((t62b__refqtmk (t62b__content us_t)))))

;; t62b__ref_t62b__content__projection
(define-fun t62b__ref_t62b__content__projection ((a t62b__ref)) us_t
  (t62b__content a))

(declare-datatypes ((t64b__init_wrapper__ref 0))
  (((t64b__init_wrapper__refqtmk (t64b__init_wrapper__content us_t1)))))

;; t64b__init_wrapper__ref_t64b__init_wrapper__content__projection
(define-fun t64b__init_wrapper__ref_t64b__init_wrapper__content__projection 
  ((a t64b__init_wrapper__ref)) us_t1
  (t64b__init_wrapper__content a))

(declare-datatypes ((t66b__ref 0))
  (((t66b__refqtmk (t66b__content us_t)))))

;; t66b__ref_t66b__content__projection
(define-fun t66b__ref_t66b__content__projection ((a t66b__ref)) us_t
  (t66b__content a))

;; dynamic_invariant
(define-fun dynamic_invariant4 ((temp___expr_88 Int) (temp___is_init_84 Bool) (temp___skip_constant_85 Bool) (temp___do_toplevel_86 Bool) (temp___do_typ_inv_87 Bool)) Bool
  (=> (or (= temp___is_init_84 true) (<= 0 255)) (in_range4 temp___expr_88)))

;; dynamic_invariant
(define-fun dynamic_invariant5 ((temp___expr_976 us_t) (temp___is_init_972 Bool) (temp___skip_constant_973 Bool) (temp___do_toplevel_974 Bool) (temp___do_typ_inv_975 Bool)) Bool
  (=>
    (not (= temp___skip_constant_973 true))
    (and
      (and
        (dynamic_property
          1
          (length source)
          (first temp___expr_976)
          (last temp___expr_976))
        (= (first temp___expr_976) 1))
      (= (last temp___expr_976) (length source)))))

;; default_initial_assumption
(define-fun default_initial_assumption ((temp___expr_978 us_t) (temp___skip_top_level_979 Bool)) Bool
  (and
    (= (first temp___expr_978) 1)
    (= (last temp___expr_978) (length source))))

;; front__def_axiom
(assert (= front (- from (first source))))

;; dynamic_invariant
(define-fun dynamic_invariant6 ((temp___expr_986 us_t) (temp___is_init_982 Bool) (temp___skip_constant_983 Bool) (temp___do_toplevel_984 Bool) (temp___do_typ_inv_985 Bool) (Ada___ada___ada__strings__fixed__delete__from___from___ Int) (Ada___ada___ada__strings__fixed__delete__through___through___ Int)) Bool
  (=>
    (not (= temp___skip_constant_983 true))
    (and
      (and
        (dynamic_property
          1
          (- (length source) (+ (- Ada___ada___ada__strings__fixed__delete__through___through___ Ada___ada___ada__strings__fixed__delete__from___from___) 1))
          (first temp___expr_986)
          (last temp___expr_986))
        (= (first temp___expr_986) 1))
      (= (last temp___expr_986) (- (length source) (+ (- Ada___ada___ada__strings__fixed__delete__through___through___ Ada___ada___ada__strings__fixed__delete__from___from___) 1))))))

;; default_initial_assumption
(define-fun default_initial_assumption1 ((temp___expr_988 us_t) (temp___skip_top_level_989 Bool) (Ada___ada___ada__strings__fixed__delete__from___from___ Int) (Ada___ada___ada__strings__fixed__delete__through___through___ Int)) Bool
  (and
    (= (first temp___expr_988) 1)
    (= (last temp___expr_988) (- (length source) (+ (- Ada___ada___ada__strings__fixed__delete__through___through___ Ada___ada___ada__strings__fixed__delete__from___from___) 1)))))

(declare-const result__ (Array Int character__init_wrapper))

;; Assume
(assert (dynamic_invariant3 source true false true true))

;; Assume
(assert (dynamic_invariant2 from true false true true))

;; Assume
(assert (dynamic_invariant1 through true false true true))

;; Assume
(assert
  (=>
    (<= from through)
    (and
      (and (<= (first source) from) (<= from (last source)))
      (<= through (last source)))))

(declare-const ada___ada___ada__strings__fixed__delete__result us_t)

(declare-const spark__branch Bool)

;; H
(assert (= spark__branch (ite (< through from) true false)))

(declare-const spark__branch1 Bool)

(declare-const o Int)

(declare-const o1 Int)

(declare-const o2 Int)

(declare-const o3 Int)

(declare-const usf us_t1)

(declare-const result__1 (Array Int character__init_wrapper))

(declare-const result__2 (Array Int character__init_wrapper))

(declare-const o4 Int)

(declare-const o5 Int)

(declare-const spark__branch2 Bool)

(declare-const o6 Int)

(declare-const o7 Int)

(declare-const o8 Int)

(declare-const temp___2004 Int)

(declare-const o9 Int)

(declare-const o10 Int)

(declare-const usf1 us_t1)

(declare-const o11 Bool)

(declare-const spark__branch3 Bool)

;; H
(assert
  (ite (= spark__branch true)
    (and
      (ite (<= (first source) (last source))
        (and
          (<= 1 (length source))
          (= (- (last source) (first source)) (- (length source) 1)))
        (< (length source) 1))
      (let ((temp___1971 (of_array
                           (slide (to_array source) (first source) 1)
                           1
                           (length source))))
        (= ada___ada___ada__strings__fixed__delete__result (of_array
                                                             (to_array
                                                               temp___1971)
                                                             (first
                                                               temp___1971)
                                                             (last
                                                               temp___1971)))))
    (and
      (= spark__branch1 (ite (not
                               (= (and (ite (<= (first source) from)
                                         true
                                         false) (ite (<= from (last source))
                                                  true
                                                  false)) true))
                          true
                          (let ((usqtunusedqtunused Tuple0))
                            (let ((o12 (last source)))
                              (let ((lastqtresultqtunusedqtunused o12))
                                (ite (< o12 through) true false))))))
      (ite (= spark__branch1 true)
        (and
          (let ((o12 (+ (last source) 1)))
            (and
              (in_range1 o12)
              (ite (= from o12)
                (= o11 (ite (= from through) true false))
                (= o11 false))))
          (and
            (= spark__branch3 o11)
            (and
              (= spark__branch3 true)
              (= ada___ada___ada__strings__fixed__delete__result source))))
        (let ((o12 (- from (first source))))
          (and
            (in_range1 o12)
            (and
              (= o12 front)
              (and
                (dynamic_invariant front true false true true)
                (and
                  (and
                    (= (first1
                         (of_array1
                           result__
                           (to_rep1 result____first)
                           (to_rep1 result____last))) 1)
                    (= (last1
                         (of_array1
                           result__
                           (to_rep1 result____first)
                           (to_rep1 result____last))) (- (length source) (+ (- 
                    through from) 1))))
                  (and
                    (and
                      (and
                        (dynamic_property
                          1
                          (- (length source) (+ (- through from) 1))
                          (first1
                            (of_array1
                              result__
                              (to_rep1 result____first)
                              (to_rep1 result____last)))
                          (last1
                            (of_array1
                              result__
                              (to_rep1 result____first)
                              (to_rep1 result____last))))
                        (= (first1
                             (of_array1
                               result__
                               (to_rep1 result____first)
                               (to_rep1 result____last))) 1))
                      (= (last1
                           (of_array1
                             result__
                             (to_rep1 result____first)
                             (to_rep1 result____last))) (- (length source) (+ (- 
                      through from) 1))))
                    (and
                      (= (to_rep1 result____last) o)
                      (and
                        (= (to_rep1 result____first) o1)
                        (let ((temp___1992 (of_array1 result__ o1 o)))
                          (let ((temp___1985 (- from 1)))
                            (let ((temp___1984 (first source)))
                              (and
                                (=>
                                  (<= temp___1984 temp___1985)
                                  (and
                                    (and
                                      (<= (first source) temp___1984)
                                      (<= temp___1984 (last source)))
                                    (and
                                      (<= (first source) temp___1985)
                                      (<= temp___1985 (last source)))))
                                (let ((temp___1986 (of_array
                                                     (to_array source)
                                                     temp___1984
                                                     temp___1985)))
                                  (and
                                    (ite (<= (first temp___1986) (last
                                                                   temp___1986))
                                      (and
                                        (<= 1 front)
                                        (= (- (last temp___1986) (first
                                                                   temp___1986)) (- 
                                        front 1)))
                                      (< front 1))
                                    (let ((temp___1988 (of_array1
                                                         (convert1
                                                           (slide
                                                             (to_array
                                                               temp___1986)
                                                             (first
                                                               temp___1986)
                                                             1))
                                                         1
                                                         front)))
                                      (and
                                        (= (to_rep1 result____last) o2)
                                        (and
                                          (= (to_rep1 result____first) 
                                          o3)
                                          (let ((temp___1989 (of_array1
                                                               result__
                                                               o3
                                                               o2)))
                                            (and
                                              (=>
                                                (<= 1 front)
                                                (and
                                                  (and
                                                    (<= (first1 temp___1989) 1)
                                                    (<= 1 (last1 temp___1989)))
                                                  (and
                                                    (<= (first1 temp___1989) 
                                                    front)
                                                    (<= front (last1
                                                                temp___1989)))))
                                              (let ((temp___1991 (of_array1
                                                                   (to_array1
                                                                    temp___1989)
                                                                   1
                                                                   front)))
                                                (and
                                                  (ite (<= (first1
                                                             temp___1988) 
                                                    (last1
                                                      temp___1988))
                                                    (and
                                                      (<= (first1
                                                            temp___1991) 
                                                      (last1
                                                        temp___1991))
                                                      (= (- (last1
                                                              temp___1988) 
                                                      (first1
                                                        temp___1988)) (- 
                                                      (last1
                                                        temp___1991) 
                                                      (first1
                                                        temp___1991))))
                                                    (< (last1 temp___1991) 
                                                    (first1
                                                      temp___1991)))
                                                  (and
                                                    (and
                                                      (and
                                                        (= (first1
                                                             temp___1992) 
                                                        (first1
                                                          usf))
                                                        (= (last1
                                                             temp___1992) 
                                                        (last1
                                                          usf)))
                                                      (forall ((temp___1995 Int))
                                                        (ite (and
                                                               (<= 1 temp___1995)
                                                               (<= temp___1995 
                                                               front))
                                                          (= (select 
                                                          (to_array1
                                                            usf) temp___1995) (select 
                                                          (to_array1
                                                            temp___1988) temp___1995))
                                                          (= (select 
                                                          (to_array1
                                                            usf) temp___1995) (select 
                                                          (to_array1
                                                            temp___1992) temp___1995)))))
                                                    (and
                                                      (= result__1 (to_array1
                                                                    usf))
                                                      (and
                                                        (and
                                                          (= spark__branch2 
                                                          (ite (< through 
                                                            (last
                                                              source))
                                                            true
                                                            false))
                                                          (ite (= spark__branch2 true)
                                                            (and
                                                              (= (to_rep1
                                                                   result____last) 
                                                              o6)
                                                              (and
                                                                (= (to_rep1
                                                                    result____first) 
                                                                o7)
                                                                (let ((temp___2006 
                                                                  (of_array1
                                                                    result__1
                                                                    o7
                                                                    o6)))
                                                                  (let ((temp___1998 
                                                                    (last
                                                                    source)))
                                                                    (let ((o13 (+ 
                                                                    through 1)))
                                                                    (and
                                                                    (in_range1
                                                                    o13)
                                                                    (and
                                                                    (=>
                                                                    (<= o13 temp___1998)
                                                                    (and
                                                                    (and
                                                                    (<= 
                                                                    (first
                                                                    source) o13)
                                                                    (<= o13 
                                                                    (last
                                                                    source)))
                                                                    (and
                                                                    (<= 
                                                                    (first
                                                                    source) temp___1998)
                                                                    (<= temp___1998 
                                                                    (last
                                                                    source)))))
                                                                    (let ((temp___1999 
                                                                    (of_array
                                                                    (to_array
                                                                    source)
                                                                    o13
                                                                    temp___1998)))
                                                                    (and
                                                                    (ite (<= 
                                                                    (first
                                                                    temp___1999) 
                                                                    (last
                                                                    temp___1999))
                                                                    (and
                                                                    (<= (+ 
                                                                    front 1) 
                                                                    (to_rep1
                                                                    result____last))
                                                                    (= (- 
                                                                    (last
                                                                    temp___1999) 
                                                                    (first
                                                                    temp___1999)) (- 
                                                                    (to_rep1
                                                                    result____last) (+ 
                                                                    front 1))))
                                                                    (< 
                                                                    (to_rep1
                                                                    result____last) (+ 
                                                                    front 1)))
                                                                    (and
                                                                    (= 
                                                                    (to_rep1
                                                                    result____last) 
                                                                    o8)
                                                                    (let ((temp___2001 
                                                                    (of_array1
                                                                    (convert1
                                                                    (slide
                                                                    (to_array
                                                                    temp___1999)
                                                                    (first
                                                                    temp___1999)
                                                                    (+ 
                                                                    front 1)))
                                                                    (+ 
                                                                    front 1)
                                                                    o8)))
                                                                    (and
                                                                    (= 
                                                                    (to_rep1
                                                                    result____last) 
                                                                    temp___2004)
                                                                    (let ((o14 (+ 
                                                                    front 1)))
                                                                    (and
                                                                    (in_range1
                                                                    o14)
                                                                    (and
                                                                    (= 
                                                                    (to_rep1
                                                                    result____last) 
                                                                    o9)
                                                                    (and
                                                                    (= 
                                                                    (to_rep1
                                                                    result____first) 
                                                                    o10)
                                                                    (let ((temp___2002 
                                                                    (of_array1
                                                                    result__1
                                                                    o10
                                                                    o9)))
                                                                    (and
                                                                    (=>
                                                                    (<= o14 
                                                                    temp___2004)
                                                                    (and
                                                                    (and
                                                                    (<= 
                                                                    (first1
                                                                    temp___2002) o14)
                                                                    (<= o14 
                                                                    (last1
                                                                    temp___2002)))
                                                                    (and
                                                                    (<= 
                                                                    (first1
                                                                    temp___2002) 
                                                                    temp___2004)
                                                                    (<= 
                                                                    temp___2004 
                                                                    (last1
                                                                    temp___2002)))))
                                                                    (let ((temp___2005 
                                                                    (of_array1
                                                                    (to_array1
                                                                    temp___2002)
                                                                    o14
                                                                    temp___2004)))
                                                                    (and
                                                                    (ite (<= 
                                                                    (first1
                                                                    temp___2001) 
                                                                    (last1
                                                                    temp___2001))
                                                                    (and
                                                                    (<= 
                                                                    (first1
                                                                    temp___2005) 
                                                                    (last1
                                                                    temp___2005))
                                                                    (= (- 
                                                                    (last1
                                                                    temp___2001) 
                                                                    (first1
                                                                    temp___2001)) (- 
                                                                    (last1
                                                                    temp___2005) 
                                                                    (first1
                                                                    temp___2005))))
                                                                    (< 
                                                                    (last1
                                                                    temp___2005) 
                                                                    (first1
                                                                    temp___2005)))
                                                                    (and
                                                                    (and
                                                                    (and
                                                                    (= 
                                                                    (first1
                                                                    temp___2006) 
                                                                    (first1
                                                                    usf1))
                                                                    (= 
                                                                    (last1
                                                                    temp___2006) 
                                                                    (last1
                                                                    usf1)))
                                                                    (forall 
                                                                    ((temp___2009 Int))
                                                                    (ite 
                                                                    (and
                                                                    (<= (+ 
                                                                    front 1) temp___2009)
                                                                    (<= temp___2009 
                                                                    (to_rep1
                                                                    result____last)))
                                                                    (= (select 
                                                                    (to_array1
                                                                    usf1) temp___2009) (select 
                                                                    (to_array1
                                                                    temp___2001) temp___2009))
                                                                    (= (select 
                                                                    (to_array1
                                                                    usf1) temp___2009) (select 
                                                                    (to_array1
                                                                    temp___2006) temp___2009)))))
                                                                    (= 
                                                                    result__2 
                                                                    (to_array1
                                                                    usf1)))))))))))))))))))))))
                                                            (= result__2 
                                                            result__1)))
                                                        (and
                                                          (= (to_rep1
                                                               result____last) 
                                                          o4)
                                                          (and
                                                            (= (to_rep1
                                                                 result____first) 
                                                            o5)
                                                            (let ((temp___1981 
                                                              (of_array1
                                                                result__2
                                                                o5
                                                                o4)))
                                                              (= ada___ada___ada__strings__fixed__delete__result 
                                                              (of_array
                                                                (convert
                                                                  (to_array1
                                                                    temp___1981))
                                                                (first1
                                                                  temp___1981)
                                                                (last1
                                                                  temp___1981))))))))))))))))))))))))))))))))))

;; Goal def'vc
;; File "a-strfix.ads", line 1057, characters 0-0
(assert
  (not
  (=>
    (<= from through)
    (=>
      (< through (last source))
      (= (let ((temp___2042 (of_array
                              (to_array source)
                              (+ through 1)
                              (last source))))
           (let ((temp___2040 (of_array
                                (to_array
                                  ada___ada___ada__strings__fixed__delete__result)
                                (+ (- from (first source)) 1)
                                (last
                                  ada___ada___ada__strings__fixed__delete__result))))
             (bool_eq5
               (to_array temp___2040)
               (first temp___2040)
               (last temp___2040)
               (to_array temp___2042)
               (first temp___2042)
               (last temp___2042)))) true)))))

(check-sat)
(exit)
