(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTNIRA)
(set-info :source |
Generated by: Yannick Moy
Generated on: 2022-02-14
Generator: GNATprove
Application: GNAT light runtime library
Target solver: Alt-Ergo, CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)

;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
  (((Tuple0))))

(declare-sort us_private 0)

;; private__bool_eq
(declare-fun private__bool_eq (us_private
  us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
  (((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))

(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
  (((int__refqtmk (int__content Int)))))

(declare-datatypes ((bool__ref 0))
  (((bool__refqtmk (bool__content Bool)))))

(declare-datatypes ((us_fixed__ref 0))
  (((us_fixed__refqtmk (us_fixed__content Int)))))

(declare-datatypes ((real__ref 0))
  (((real__refqtmk (real__content Real)))))

(declare-datatypes ((us_private__ref 0))
  (((us_private__refqtmk (us_private__content us_private)))))

;; int__ref___projection
(define-fun int__ref___projection ((a int__ref)) Int
  (int__content a))

;; __fixed__ref___projection
(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int
  (us_fixed__content a))

;; bool__ref___projection
(define-fun bool__ref___projection ((a bool__ref)) Bool
  (bool__content a))

;; real__ref___projection
(define-fun real__ref___projection ((a real__ref)) Real
  (real__content a))

;; __private__ref___projection
(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

;; bool_eq
(define-fun bool_eq ((x Bool) (y Bool)) Bool
  (ite (= x y) true false))

;; to_int
(define-fun to_int1 ((b Bool)) Int
  (ite (= b true) 1 0))

;; of_int
(define-fun of_int ((i Int)) Bool
  (ite (= i 0) false true))

;; in_range
(define-fun in_range ((x Int)) Bool
  (or (= x 0) (= x 1)))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

;; integer'int
(declare-fun integerqtint (integer) Int)

;; integer'axiom
(assert
  (forall ((i integer))
    (and
      (<= (- 2147483648) (integerqtint i))
      (<= (integerqtint i) 2147483647))))

;; in_range
(define-fun in_range1 ((x Int)) Bool
  (and (<= (- 2147483648) x) (<= x 2147483647)))

;; bool_eq
(define-fun bool_eq1 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

;; user_eq
(declare-fun user_eq (integer
  integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
  (((integer__refqtmk (integer__content integer)))))

;; integer__ref_integer__content__projection
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer
  (integer__content a))

(declare-sort positive 0)

;; positive'int
(declare-fun positiveqtint (positive) Int)

;; positive'axiom
(assert
  (forall ((i positive))
    (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

;; in_range
(define-fun in_range2 ((x Int)) Bool
  (and (<= 1 x) (<= x 2147483647)))

;; bool_eq
(define-fun bool_eq2 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

;; user_eq
(declare-fun user_eq1 (positive
  positive) Bool)

(declare-const dummy1 positive)

(declare-datatypes ((positive__ref 0))
  (((positive__refqtmk (positive__content positive)))))

;; positive__ref_positive__content__projection
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive
  (positive__content a))

;; dynamic_invariant
(define-fun dynamic_invariant ((temp___expr_53 Int) (temp___is_init_49 Bool) (temp___skip_constant_50 Bool) (temp___do_toplevel_51 Bool) (temp___do_typ_inv_52 Bool)) Bool
  (=>
    (or (= temp___is_init_49 true) (<= 1 2147483647))
    (in_range2 temp___expr_53)))

(declare-sort character 0)

;; in_range
(define-fun in_range3 ((x Int)) Bool
  (and (<= 0 x) (<= x 255)))

;; bool_eq
(define-fun bool_eq3 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

;; user_eq
(declare-fun user_eq2 (character
  character) Bool)

(declare-const dummy2 character)

(declare-datatypes ((character__ref 0))
  (((character__refqtmk (character__content character)))))

;; character__ref_character__content__projection
(define-fun character__ref_character__content__projection ((a character__ref)) character
  (character__content a))

;; to_rep
(declare-fun to_rep (character) Int)

;; of_rep
(declare-fun of_rep (Int) character)

;; inversion_axiom
(assert
  (forall ((x character))
    (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
(assert
  (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
(assert
  (forall ((x Int))
    (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                                (of_rep x))) )))

(declare-datatypes ((map__ref 0))
  (((map__refqtmk (map__content (Array Int character))))))

;; slide
(declare-fun slide ((Array Int character)
  Int
  Int) (Array Int character))

;; slide_eq
(assert
  (forall ((a (Array Int character)))
    (forall ((first Int))
      (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
(assert
  (forall ((a (Array Int character)))
    (forall ((old_first Int))
      (forall ((new_first Int))
        (forall ((i Int))
          (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
          (slide
            a
            old_first
            new_first) i)) ))))))

;; const
(declare-fun const1 (character) (Array Int character))

;; const_def
(assert
  (forall ((v character))
    (forall ((i Int))
      (! (= (select (const1 v) i) v) :pattern ((select (const1 v) i)) ))))

;; bool_eq
(define-fun bool_eq4 ((a (Array Int character)) (a__first Int) (a__last Int) (b (Array Int character)) (b__first Int) (b__last Int)) Bool
  (ite (and
         (ite (<= a__first a__last)
           (and
             (<= b__first b__last)
             (= (- a__last a__first) (- b__last b__first)))
           (< b__last b__first))
         (forall ((temp___idx_105 Int))
           (=>
             (and (<= a__first temp___idx_105) (<= temp___idx_105 a__last))
             (= (to_rep (select a temp___idx_105)) (to_rep
                                                     (select b (+ (- b__first a__first) temp___idx_105)))))))
    true
    false))

;; bool_eq_rev
(assert
  (forall ((a (Array Int character)) (b (Array Int character)))
    (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
      (=>
        (= (bool_eq4 b b__first b__last a a__first a__last) true)
        (and
          (ite (<= a__first a__last)
            (and
              (<= b__first b__last)
              (= (- a__last a__first) (- b__last b__first)))
            (< b__last b__first))
          (forall ((temp___idx_105 Int))
            (=>
              (and (<= a__first temp___idx_105) (<= temp___idx_105 a__last))
              (= (to_rep (select a temp___idx_105)) (to_rep
                                                      (select b (+ (- b__first a__first) temp___idx_105)))))))))))

;; to_rep
(define-fun to_rep1 ((x integer)) Int
  (integerqtint x))

;; of_rep
(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
(assert
  (forall ((x integer))
    (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
(assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
(assert
  (forall ((x Int))
    (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                                  (of_rep1 x))) )))

(declare-datatypes ((t 0))
  (((tqtmk (rec__first integer)(rec__last integer)))))

;; mk
(declare-fun mk (Int
  Int) t)

;; mk_def
(assert
  (forall ((f Int) (l Int))
    (! (=>
         (in_range1 f)
         (=>
           (in_range1 l)
           (and
             (= (to_rep1 (rec__first (mk f l))) f)
             (= (to_rep1 (rec__last (mk f l))) l)))) :pattern ((mk f l)) )))

;; dynamic_property
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool
  (and
    (in_range1 low)
    (and
      (in_range1 high)
      (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes ((us_t 0))
  (((us_tqtmk (elts (Array Int character))(rt t)))))

;; to_array
(define-fun to_array ((a us_t)) (Array Int character)
  (elts a))

;; of_array
(define-fun of_array ((a (Array Int character)) (f Int) (l Int)) us_t
  (us_tqtmk a (mk f l)))

;; first
(define-fun first ((a us_t)) Int
  (to_rep1 (rec__first (rt a))))

;; last
(define-fun last ((a us_t)) Int
  (to_rep1 (rec__last (rt a))))

;; length
(define-fun length ((a us_t)) Int
  (ite (<= (first a) (last a)) (+ (- (last a) (first a)) 1) 0))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
(assert (<= 0 value__size))

;; object__size_axiom
(assert (<= 0 object__size))

;; component__size_axiom
(assert (<= 0 component__size))

;; alignment_axiom
(assert (<= 0 alignment))

;; bool_eq
(define-fun bool_eq5 ((x us_t) (y us_t)) Bool
  (bool_eq4
    (elts x)
    (to_rep1 (rec__first (rt x)))
    (to_rep1 (rec__last (rt x)))
    (elts y)
    (to_rep1 (rec__first (rt y)))
    (to_rep1 (rec__last (rt y)))))

;; user_eq
(declare-fun user_eq3 (us_t
  us_t) Bool)

(declare-const dummy3 us_t)

(declare-datatypes ((string____ref 0))
  (((string____refqtmk (string____content us_t)))))

;; string____ref_string____content__projection
(define-fun string____ref_string____content__projection ((a string____ref)) us_t
  (string____content a))

(declare-datatypes ((character_sequence__ref 0))
  (((character_sequence__refqtmk (character_sequence__content us_t)))))

;; character_sequence__ref_character_sequence__content__projection
(define-fun character_sequence__ref_character_sequence__content__projection 
  ((a character_sequence__ref)) us_t
  (character_sequence__content a))

;; is_domain
(declare-fun is_domain ((Array Int character)
  us_t) Bool)

;; is_domain__function_guard
(declare-fun is_domain__function_guard (Bool
  (Array Int character)
  us_t) Bool)

;; spark_proof_sorted_character_sequence
(define-fun spark_proof_sorted_character_sequence ((seq us_t)) Bool
  (ite (forall ((j Int))
         (=>
           (and (<= (first seq) j) (<= j (last seq)))
           (=>
             (not (= j (last seq)))
             (< (to_rep (select (to_array seq) j)) (to_rep
                                                     (select (to_array seq) (+ j 1)))))))
    true
    false))

;; spark_proof_sorted_character_sequence__function_guard
(declare-fun spark_proof_sorted_character_sequence__function_guard (Bool
  us_t) Bool)

;; dynamic_invariant
(define-fun dynamic_invariant1 ((temp___expr_307 us_t) (temp___is_init_303 Bool) (temp___skip_constant_304 Bool) (temp___do_toplevel_305 Bool) (temp___do_typ_inv_306 Bool)) Bool
  (=>
    (not (= temp___skip_constant_304 true))
    (dynamic_property
      1
      2147483647
      (first temp___expr_307)
      (last temp___expr_307))))

;; is_domain__post_axiom
(assert true)

;; is_domain__def_axiom
(assert
  (forall ((map1 (Array Int character)))
    (forall ((seq us_t))
      (! (=
           (= (is_domain map1 seq) true)
           (and
             (and
               (and
                 (= (first seq) 1)
                 (= (spark_proof_sorted_character_sequence seq) true))
               (forall ((char1 Int))
                 (=>
                   (and (<= 0 char1) (<= char1 255))
                   (=>
                     (forall ((temp___450 Int))
                       (=>
                         (and
                           (<= (first seq) temp___450)
                           (<= temp___450 (last seq)))
                         (not
                           (= (to_rep (select (to_array seq) temp___450)) char1))))
                     (= (to_rep (select map1 char1)) char1)))))
             (forall ((temp___451 Int))
               (=>
                 (and (<= (first seq) temp___451) (<= temp___451 (last seq)))
                 (let ((char1 (to_rep (select (to_array seq) temp___451))))
                   (not (= (to_rep (select map1 char1)) char1))))))) :pattern (
      (is_domain
        map1
        seq)) ))))

(declare-const map1 (Array Int character))

(declare-const seq1 us_t)

(declare-const seq2 us_t)

(declare-datatypes ((t86b__ref 0))
  (((t86b__refqtmk (t86b__content us_t)))))

;; t86b__ref_t86b__content__projection
(define-fun t86b__ref_t86b__content__projection ((a t86b__ref)) us_t
  (t86b__content a))

(declare-datatypes ((t88b__ref 0))
  (((t88b__refqtmk (t88b__content us_t)))))

;; t88b__ref_t88b__content__projection
(define-fun t88b__ref_t88b__content__projection ((a t88b__ref)) us_t
  (t88b__content a))

;; dynamic_invariant
(define-fun dynamic_invariant2 ((temp___expr_88 Int) (temp___is_init_84 Bool) (temp___skip_constant_85 Bool) (temp___do_toplevel_86 Bool) (temp___do_typ_inv_87 Bool)) Bool
  (=> (or (= temp___is_init_84 true) (<= 0 255)) (in_range3 temp___expr_88)))

;; dynamic_invariant
(define-fun dynamic_invariant3 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool
  (=>
    (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647))
    (in_range1 temp___expr_18)))

;; Assume
(assert true)

;; Assume
(assert (dynamic_invariant1 seq1 true false true true))

;; Assume
(assert (dynamic_invariant1 seq2 true false true true))

;; Assume
(assert (and (= (is_domain map1 seq1) true) (= (is_domain map1 seq2) true)))

(declare-const j Int)

;; H
(assert (= j 1))

;; H
(assert (dynamic_invariant j true false true true))

;; H
(assert
  (or
    (exists ((o Bool))
      (and
        (ite (and (<= j (last seq1)) (<= j (last seq2)))
          (and
            (and (<= (first seq2) j) (<= j (last seq2)))
            (exists ((o1 Int))
              (and
                (= (to_rep (select (to_array seq2) j)) o1)
                (and
                  (and (<= (first seq1) j) (<= j (last seq1)))
                  (exists ((o2 Int))
                    (and
                      (= (to_rep (select (to_array seq1) j)) o2)
                      (= o (ite (= o2 o1) true false))))))))
          (= o false))
        (and
          (= o true)
          (let ((temp___1218 (first seq2)))
            (and
              (=>
                (<= temp___1218 j)
                (and
                  (and
                    (<= (first seq2) temp___1218)
                    (<= temp___1218 (last seq2)))
                  (and (<= (first seq2) j) (<= j (last seq2)))))
              (let ((temp___1217 (first seq1)))
                (and
                  (=>
                    (<= temp___1217 j)
                    (and
                      (and
                        (<= (first seq1) temp___1217)
                        (<= temp___1217 (last seq1)))
                      (and (<= (first seq1) j) (<= j (last seq1)))))
                  (exists ((j1 Int))
                    (and
                      (= (let ((temp___1228 (of_array
                                              (to_array seq2)
                                              (first seq2)
                                              j1)))
                           (let ((temp___1226 (of_array
                                                (to_array seq1)
                                                (first seq1)
                                                j1)))
                             (bool_eq4
                               (to_array temp___1226)
                               (first temp___1226)
                               (last temp___1226)
                               (to_array temp___1228)
                               (first temp___1228)
                               (last temp___1228)))) true)
                      (and
                        (= (and (ite (dynamic_invariant
                                       j1
                                       true
                                       true
                                       true
                                       true)
                                  true
                                  false) (ite (and
                                                (and
                                                  (<= j1 (last seq1))
                                                  (<= j1 (last seq2)))
                                                (= (to_rep
                                                     (select (to_array seq1) j1)) 
                                                (to_rep
                                                  (select (to_array seq2) j1))))
                                           true
                                           false)) true)
                        (exists ((spark__branch Bool))
                          (and
                            (= spark__branch (ite (= j1 2147483647)
                                               true
                                               false))
                            (= spark__branch true)))))))))))))
    (and
      (exists ((o Bool))
        (and
          (ite (and (<= j (last seq1)) (<= j (last seq2)))
            (and
              (and (<= (first seq2) j) (<= j (last seq2)))
              (exists ((o1 Int))
                (and
                  (= (to_rep (select (to_array seq2) j)) o1)
                  (and
                    (and (<= (first seq1) j) (<= j (last seq1)))
                    (exists ((o2 Int))
                      (and
                        (= (to_rep (select (to_array seq1) j)) o2)
                        (= o (ite (= o2 o1) true false))))))))
            (= o false))
          (or
            (not (= o true))
            (let ((temp___1218 (first seq2)))
              (and
                (=>
                  (<= temp___1218 j)
                  (and
                    (and
                      (<= (first seq2) temp___1218)
                      (<= temp___1218 (last seq2)))
                    (and (<= (first seq2) j) (<= j (last seq2)))))
                (let ((temp___1217 (first seq1)))
                  (and
                    (=>
                      (<= temp___1217 j)
                      (and
                        (and
                          (<= (first seq1) temp___1217)
                          (<= temp___1217 (last seq1)))
                        (and (<= (first seq1) j) (<= j (last seq1)))))
                    (exists ((j1 Int))
                      (and
                        (= (let ((temp___1228 (of_array
                                                (to_array seq2)
                                                (first seq2)
                                                j1)))
                             (let ((temp___1226 (of_array
                                                  (to_array seq1)
                                                  (first seq1)
                                                  j1)))
                               (bool_eq4
                                 (to_array temp___1226)
                                 (first temp___1226)
                                 (last temp___1226)
                                 (to_array temp___1228)
                                 (first temp___1228)
                                 (last temp___1228)))) true)
                        (and
                          (= (and (ite (dynamic_invariant
                                         j1
                                         true
                                         true
                                         true
                                         true)
                                    true
                                    false) (ite (and
                                                  (and
                                                    (<= j1 (last seq1))
                                                    (<= j1 (last seq2)))
                                                  (= (to_rep
                                                       (select (to_array
                                                                 seq1) j1)) 
                                                  (to_rep
                                                    (select (to_array seq2) j1))))
                                             true
                                             false)) true)
                          (exists ((spark__branch Bool))
                            (and
                              (= spark__branch (ite (= j1 2147483647)
                                                 true
                                                 false))
                              (and
                                (not (= spark__branch true))
                                (let ((o1 (+ j1 1)))
                                  (and
                                    (in_range1 o1)
                                    (exists ((j2 Int))
                                      (and
                                        (= j2 o1)
                                        (exists ((o2 Bool))
                                          (and
                                            (ite (and
                                                   (<= j2 (last seq1))
                                                   (<= j2 (last seq2)))
                                              (and
                                                (and
                                                  (<= (first seq2) j2)
                                                  (<= j2 (last seq2)))
                                                (exists ((o3 Int))
                                                  (and
                                                    (= (to_rep
                                                         (select (to_array
                                                                   seq2) j2)) o3)
                                                    (and
                                                      (and
                                                        (<= (first seq1) j2)
                                                        (<= j2 (last seq1)))
                                                      (exists ((o4 Int))
                                                        (and
                                                          (= (to_rep
                                                               (select 
                                                               (to_array
                                                                 seq1) j2)) o4)
                                                          (= o2 (ite (= o4 o3)
                                                                  true
                                                                  false))))))))
                                              (= o2 false))
                                            (not (= o2 true)))))))))))))))))))))
      (let ((o seq1))
        (and
          (forall ((j1 Int))
            (=>
              (and (<= (first o) j1) (<= j1 (last o)))
              (forall ((k Int))
                (=>
                  (and (<= (first o) k) (<= k (last o)))
                  (=>
                    (< j1 k)
                    (< (to_rep (select (to_array o) j1)) (to_rep
                                                           (select (to_array
                                                                    o) k))))))))
          (let ((o1 seq2))
            (forall ((j1 Int))
              (=>
                (and (<= (first o1) j1) (<= j1 (last o1)))
                (forall ((k Int))
                  (=>
                    (and (<= (first o1) k) (<= k (last o1)))
                    (=>
                      (< j1 k)
                      (< (to_rep (select (to_array o1) j1)) (to_rep
                                                              (select 
                                                              (to_array
                                                                o1) k))))))))))))))

;; Goal def'vc
;; File "a-strmap.adb", line 249, characters 0-0
(assert
  (not
  (= (bool_eq4
       (to_array seq1)
       (first seq1)
       (last seq1)
       (to_array seq2)
       (first seq2)
       (last seq2)) true)))

(check-sat)
(exit)
