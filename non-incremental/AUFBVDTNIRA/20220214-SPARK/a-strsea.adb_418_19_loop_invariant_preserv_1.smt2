(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTNIRA)
(set-info :source |
Generated by: Yannick Moy
Generated on: 2022-02-14
Generator: GNATprove
Application: GNAT light runtime library
Target solver: Alt-Ergo, CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)

;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
  (((Tuple0))))

(declare-sort us_private 0)

;; private__bool_eq
(declare-fun private__bool_eq (us_private
  us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
  (((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))

(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
  (((int__refqtmk (int__content Int)))))

(declare-datatypes ((bool__ref 0))
  (((bool__refqtmk (bool__content Bool)))))

(declare-datatypes ((us_fixed__ref 0))
  (((us_fixed__refqtmk (us_fixed__content Int)))))

(declare-datatypes ((real__ref 0))
  (((real__refqtmk (real__content Real)))))

(declare-datatypes ((us_private__ref 0))
  (((us_private__refqtmk (us_private__content us_private)))))

;; int__ref___projection
(define-fun int__ref___projection ((a int__ref)) Int
  (int__content a))

;; __fixed__ref___projection
(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int
  (us_fixed__content a))

;; bool__ref___projection
(define-fun bool__ref___projection ((a bool__ref)) Bool
  (bool__content a))

;; real__ref___projection
(define-fun real__ref___projection ((a real__ref)) Real
  (real__content a))

;; __private__ref___projection
(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

;; bool_eq
(define-fun bool_eq ((x Bool) (y Bool)) Bool
  (ite (= x y) true false))

;; to_int
(define-fun to_int1 ((b Bool)) Int
  (ite (= b true) 1 0))

;; of_int
(define-fun of_int ((i Int)) Bool
  (ite (= i 0) false true))

;; in_range
(define-fun in_range ((x Int)) Bool
  (or (= x 0) (= x 1)))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

;; integer'int
(declare-fun integerqtint (integer) Int)

;; integer'axiom
(assert
  (forall ((i integer))
    (and
      (<= (- 2147483648) (integerqtint i))
      (<= (integerqtint i) 2147483647))))

;; in_range
(define-fun in_range1 ((x Int)) Bool
  (and (<= (- 2147483648) x) (<= x 2147483647)))

;; bool_eq
(define-fun bool_eq1 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

;; user_eq
(declare-fun user_eq (integer
  integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
  (((integer__refqtmk (integer__content integer)))))

;; integer__ref_integer__content__projection
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer
  (integer__content a))

;; dynamic_invariant
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool
  (=>
    (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647))
    (in_range1 temp___expr_18)))

(declare-sort natural 0)

;; natural'int
(declare-fun naturalqtint (natural) Int)

;; natural'axiom
(assert
  (forall ((i natural))
    (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

;; in_range
(define-fun in_range2 ((x Int)) Bool
  (and (<= 0 x) (<= x 2147483647)))

;; bool_eq
(define-fun bool_eq2 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

;; user_eq
(declare-fun user_eq1 (natural
  natural) Bool)

(declare-const dummy1 natural)

(declare-datatypes ((natural__ref 0))
  (((natural__refqtmk (natural__content natural)))))

;; natural__ref_natural__content__projection
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural
  (natural__content a))

(declare-sort character 0)

;; in_range
(define-fun in_range3 ((x Int)) Bool
  (and (<= 0 x) (<= x 255)))

;; bool_eq
(define-fun bool_eq3 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

;; user_eq
(declare-fun user_eq2 (character
  character) Bool)

(declare-const dummy2 character)

(declare-datatypes ((character__ref 0))
  (((character__refqtmk (character__content character)))))

;; character__ref_character__content__projection
(define-fun character__ref_character__content__projection ((a character__ref)) character
  (character__content a))

;; to_rep
(declare-fun to_rep (character) Int)

;; of_rep
(declare-fun of_rep (Int) character)

;; inversion_axiom
(assert
  (forall ((x character))
    (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
(assert
  (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
(assert
  (forall ((x Int))
    (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                                (of_rep x))) )))

(declare-datatypes ((map__ref 0))
  (((map__refqtmk (map__content (Array Int character))))))

;; slide
(declare-fun slide ((Array Int character)
  Int
  Int) (Array Int character))

;; slide_eq
(assert
  (forall ((a (Array Int character)))
    (forall ((first Int))
      (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
(assert
  (forall ((a (Array Int character)))
    (forall ((old_first Int))
      (forall ((new_first Int))
        (forall ((i Int))
          (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
          (slide
            a
            old_first
            new_first) i)) ))))))

;; const
(declare-fun const1 (character) (Array Int character))

;; const_def
(assert
  (forall ((v character))
    (forall ((i Int))
      (! (= (select (const1 v) i) v) :pattern ((select (const1 v) i)) ))))

;; bool_eq
(define-fun bool_eq4 ((a (Array Int character)) (a__first Int) (a__last Int) (b (Array Int character)) (b__first Int) (b__last Int)) Bool
  (ite (and
         (ite (<= a__first a__last)
           (and
             (<= b__first b__last)
             (= (- a__last a__first) (- b__last b__first)))
           (< b__last b__first))
         (forall ((temp___idx_105 Int))
           (=>
             (and (<= a__first temp___idx_105) (<= temp___idx_105 a__last))
             (= (to_rep (select a temp___idx_105)) (to_rep
                                                     (select b (+ (- b__first a__first) temp___idx_105)))))))
    true
    false))

;; bool_eq_rev
(assert
  (forall ((a (Array Int character)) (b (Array Int character)))
    (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
      (=>
        (= (bool_eq4 b b__first b__last a a__first a__last) true)
        (and
          (ite (<= a__first a__last)
            (and
              (<= b__first b__last)
              (= (- a__last a__first) (- b__last b__first)))
            (< b__last b__first))
          (forall ((temp___idx_105 Int))
            (=>
              (and (<= a__first temp___idx_105) (<= temp___idx_105 a__last))
              (= (to_rep (select a temp___idx_105)) (to_rep
                                                      (select b (+ (- b__first a__first) temp___idx_105)))))))))))

(declare-sort positive 0)

;; positive'int
(declare-fun positiveqtint (positive) Int)

;; positive'axiom
(assert
  (forall ((i positive))
    (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

;; in_range
(define-fun in_range4 ((x Int)) Bool
  (and (<= 1 x) (<= x 2147483647)))

;; bool_eq
(define-fun bool_eq5 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

;; user_eq
(declare-fun user_eq3 (positive
  positive) Bool)

(declare-const dummy3 positive)

(declare-datatypes ((positive__ref 0))
  (((positive__refqtmk (positive__content positive)))))

;; positive__ref_positive__content__projection
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive
  (positive__content a))

;; to_rep
(define-fun to_rep1 ((x integer)) Int
  (integerqtint x))

;; of_rep
(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
(assert
  (forall ((x integer))
    (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
(assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
(assert
  (forall ((x Int))
    (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                                  (of_rep1 x))) )))

(declare-datatypes ((t 0))
  (((tqtmk (rec__first integer)(rec__last integer)))))

;; mk
(declare-fun mk (Int
  Int) t)

;; mk_def
(assert
  (forall ((f Int) (l Int))
    (! (=>
         (in_range1 f)
         (=>
           (in_range1 l)
           (and
             (= (to_rep1 (rec__first (mk f l))) f)
             (= (to_rep1 (rec__last (mk f l))) l)))) :pattern ((mk f l)) )))

;; dynamic_property
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool
  (and
    (in_range1 low)
    (and
      (in_range1 high)
      (=> (<= low high) (and (in_range4 low) (in_range4 high))))))

(declare-datatypes ((us_t 0))
  (((us_tqtmk (elts (Array Int character))(rt t)))))

;; to_array
(define-fun to_array ((a us_t)) (Array Int character)
  (elts a))

;; of_array
(define-fun of_array ((a (Array Int character)) (f Int) (l Int)) us_t
  (us_tqtmk a (mk f l)))

;; first
(define-fun first ((a us_t)) Int
  (to_rep1 (rec__first (rt a))))

;; last
(define-fun last ((a us_t)) Int
  (to_rep1 (rec__last (rt a))))

;; length
(define-fun length ((a us_t)) Int
  (ite (<= (first a) (last a)) (+ (- (last a) (first a)) 1) 0))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
(assert (<= 0 value__size))

;; object__size_axiom
(assert (<= 0 object__size))

;; component__size_axiom
(assert (<= 0 component__size))

;; alignment_axiom
(assert (<= 0 alignment))

;; bool_eq
(define-fun bool_eq6 ((x us_t) (y us_t)) Bool
  (bool_eq4
    (elts x)
    (to_rep1 (rec__first (rt x)))
    (to_rep1 (rec__last (rt x)))
    (elts y)
    (to_rep1 (rec__first (rt y)))
    (to_rep1 (rec__last (rt y)))))

;; user_eq
(declare-fun user_eq4 (us_t
  us_t) Bool)

(declare-const dummy4 us_t)

(declare-datatypes ((string____ref 0))
  (((string____refqtmk (string____content us_t)))))

;; string____ref_string____content__projection
(define-fun string____ref_string____content__projection ((a string____ref)) us_t
  (string____content a))

;; dynamic_invariant
(define-fun dynamic_invariant1 ((temp___expr_110 us_t) (temp___is_init_106 Bool) (temp___skip_constant_107 Bool) (temp___do_toplevel_108 Bool) (temp___do_typ_inv_109 Bool)) Bool
  (=>
    (not (= temp___skip_constant_107 true))
    (dynamic_property
      1
      2147483647
      (first temp___expr_110)
      (last temp___expr_110))))

;; value
(declare-fun value ((Array Int character)
  Int) Int)

;; value__function_guard
(declare-fun value__function_guard (Int
  (Array Int character)
  Int) Bool)

;; dynamic_invariant
(define-fun dynamic_invariant2 ((temp___expr_88 Int) (temp___is_init_84 Bool) (temp___skip_constant_85 Bool) (temp___do_toplevel_86 Bool) (temp___do_typ_inv_87 Bool)) Bool
  (=> (or (= temp___is_init_84 true) (<= 0 255)) (in_range3 temp___expr_88)))

;; spark_proof_model
(declare-fun spark_proof_model ((Array Int character)) (Array Int character))

;; spark_proof_model__function_guard
(declare-fun spark_proof_model__function_guard ((Array Int character)
  (Array Int character)) Bool)

;; value__post_axiom
(assert
  (forall ((map1 (Array Int character)))
    (forall ((element Int))
      (! (=>
           (dynamic_invariant2 element true true true true)
           (let ((result (value map1 element)))
             (=>
               (value__function_guard result map1 element)
               (and
                 (= result (to_rep
                             (let ((temp___230 (spark_proof_model map1)))
                               (select temp___230 element))))
                 (dynamic_invariant2 result true false true true))))) :pattern (
      (value
        map1
        element)) ))))

;; match__
(declare-fun match__ (us_t
  us_t
  (Array Int character)
  Int) Bool)

;; match____function_guard
(declare-fun match____function_guard (Bool
  us_t
  us_t
  (Array Int character)
  Int) Bool)

;; match____post_axiom
(assert true)

;; match____def_axiom
(assert
  (forall ((source us_t) (pattern us_t))
    (forall ((mapping (Array Int character)))
      (forall ((from Int))
        (! (and
             (forall ((source1 us_t) (pattern1 us_t) (mapping1 (Array Int character)) (from1 Int) (k Int))
               (value__function_guard
                 (value
                   mapping1
                   (to_rep
                     (select (to_array source1) (+ from1 (- k (first
                                                                pattern1))))))
                 mapping1
                 (to_rep
                   (select (to_array source1) (+ from1 (- k (first pattern1)))))))
             (=
               (= (match__ source pattern mapping from) true)
               (forall ((k Int))
                 (=>
                   (and (<= (first pattern) k) (<= k (last pattern)))
                   (= (to_rep (select (to_array pattern) k)) (value
                                                               mapping
                                                               (to_rep
                                                                 (select 
                                                                 (to_array
                                                                   source) (+ from (- k 
                                                                 (first
                                                                   pattern))))))))))) :pattern (
        (match__
          source
          pattern
          mapping
          from)) )))))

;; is_identity
(declare-fun is_identity ((Array Int character)) Bool)

;; is_identity__function_guard
(declare-fun is_identity__function_guard (Bool
  (Array Int character)) Bool)

(declare-const source us_t)

(declare-const pattern us_t)

(declare-const going Int)

(declare-const mapping (Array Int character))

(declare-const pl1 Int)

(declare-sort direction 0)

;; in_range
(define-fun in_range5 ((x Int)) Bool
  (and (<= 0 x) (<= x 1)))

;; bool_eq
(define-fun bool_eq7 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

;; user_eq
(declare-fun user_eq5 (direction
  direction) Bool)

(declare-const dummy5 direction)

(declare-datatypes ((direction__ref 0))
  (((direction__refqtmk (direction__content direction)))))

;; direction__ref_direction__content__projection
(define-fun direction__ref_direction__content__projection ((a direction__ref)) direction
  (direction__content a))

;; dynamic_invariant
(define-fun dynamic_invariant3 ((temp___expr_246 Int) (temp___is_init_242 Bool) (temp___skip_constant_243 Bool) (temp___do_toplevel_244 Bool) (temp___do_typ_inv_245 Bool)) Bool
  (=> (or (= temp___is_init_242 true) (<= 0 1)) (in_range5 temp___expr_246)))

;; dynamic_property
(define-fun dynamic_property1 ((first_int Int) (last_int Int) (x Int)) Bool
  (and (<= first_int x) (<= x last_int)))

;; bool_eq
(define-fun bool_eq8 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

;; user_eq
(declare-fun user_eq6 (integer
  integer) Bool)

(declare-const dummy6 integer)

(declare-datatypes ((t59b__ref 0))
  (((t59b__refqtmk (t59b__content integer)))))

;; t59b__ref_t59b__content__projection
(define-fun t59b__ref_t59b__content__projection ((a t59b__ref)) integer
  (t59b__content a))

(declare-datatypes ((t61b__ref 0))
  (((t61b__refqtmk (t61b__content us_t)))))

;; t61b__ref_t61b__content__projection
(define-fun t61b__ref_t61b__content__projection ((a t61b__ref)) us_t
  (t61b__content a))

;; dynamic_property
(define-fun dynamic_property2 ((first_int Int) (last_int Int) (x Int)) Bool
  (and (<= first_int x) (<= x last_int)))

;; bool_eq
(define-fun bool_eq9 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

;; user_eq
(declare-fun user_eq7 (integer
  integer) Bool)

(declare-const dummy7 integer)

(declare-datatypes ((t67b__ref 0))
  (((t67b__refqtmk (t67b__content integer)))))

;; t67b__ref_t67b__content__projection
(define-fun t67b__ref_t67b__content__projection ((a t67b__ref)) integer
  (t67b__content a))

;; dynamic_property
(define-fun dynamic_property3 ((first_int Int) (last_int Int) (x Int)) Bool
  (and (<= first_int x) (<= x last_int)))

;; bool_eq
(define-fun bool_eq10 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

;; user_eq
(declare-fun user_eq8 (integer
  integer) Bool)

(declare-const dummy8 integer)

(declare-datatypes ((t68b__ref 0))
  (((t68b__refqtmk (t68b__content integer)))))

;; t68b__ref_t68b__content__projection
(define-fun t68b__ref_t68b__content__projection ((a t68b__ref)) integer
  (t68b__content a))

;; dynamic_property
(define-fun dynamic_property4 ((first_int Int) (last_int Int) (x Int)) Bool
  (and (<= first_int x) (<= x last_int)))

;; bool_eq
(define-fun bool_eq11 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

;; user_eq
(declare-fun user_eq9 (integer
  integer) Bool)

(declare-const dummy9 integer)

(declare-datatypes ((t78b__ref 0))
  (((t78b__refqtmk (t78b__content integer)))))

;; t78b__ref_t78b__content__projection
(define-fun t78b__ref_t78b__content__projection ((a t78b__ref)) integer
  (t78b__content a))

(declare-datatypes ((t80b__ref 0))
  (((t80b__refqtmk (t80b__content us_t)))))

;; t80b__ref_t80b__content__projection
(define-fun t80b__ref_t80b__content__projection ((a t80b__ref)) us_t
  (t80b__content a))

;; dynamic_property
(define-fun dynamic_property5 ((first_int Int) (last_int Int) (x Int)) Bool
  (and (<= first_int x) (<= x last_int)))

;; bool_eq
(define-fun bool_eq12 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)

;; user_eq
(declare-fun user_eq10 (integer
  integer) Bool)

(declare-const dummy10 integer)

(declare-datatypes ((t86b__ref 0))
  (((t86b__refqtmk (t86b__content integer)))))

;; t86b__ref_t86b__content__projection
(define-fun t86b__ref_t86b__content__projection ((a t86b__ref)) integer
  (t86b__content a))

;; dynamic_property
(define-fun dynamic_property6 ((first_int Int) (last_int Int) (x Int)) Bool
  (and (<= first_int x) (<= x last_int)))

;; bool_eq
(define-fun bool_eq13 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE11 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) Int)

;; user_eq
(declare-fun user_eq11 (integer
  integer) Bool)

(declare-const dummy11 integer)

(declare-datatypes ((t87b__ref 0))
  (((t87b__refqtmk (t87b__content integer)))))

;; t87b__ref_t87b__content__projection
(define-fun t87b__ref_t87b__content__projection ((a t87b__ref)) integer
  (t87b__content a))

;; temp___String_Literal_550
(declare-fun temp___String_Literal_550 (tuple0) (Array Int character))

;; temp___String_Literal_550__def_axiom
(assert true)

;; dynamic_invariant
(define-fun dynamic_invariant4 ((temp___expr_46 Int) (temp___is_init_42 Bool) (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool) (temp___do_typ_inv_45 Bool)) Bool
  (=>
    (or (= temp___is_init_42 true) (<= 0 2147483647))
    (in_range2 temp___expr_46)))

;; dynamic_invariant
(define-fun dynamic_invariant5 ((temp___expr_53 Int) (temp___is_init_49 Bool) (temp___skip_constant_50 Bool) (temp___do_toplevel_51 Bool) (temp___do_typ_inv_52 Bool)) Bool
  (=>
    (or (= temp___is_init_49 true) (<= 1 2147483647))
    (in_range4 temp___expr_53)))

;; pl1__def_axiom
(assert (= pl1 (- (length pattern) 1)))

;; spark_proof_model__post_axiom
(assert true)

;; spark_proof_model__def_axiom
(assert
  (forall ((map1 (Array Int character)))
    (! (= (spark_proof_model map1) (let ((temp___227 map1)) temp___227)) :pattern (
    (spark_proof_model
      map1)) )))

(declare-const ada___ada___ada__strings__search__index__result Int)

;; Assume
(assert (dynamic_invariant1 source true false true true))

;; Assume
(assert (dynamic_invariant1 pattern true false true true))

;; Assume
(assert (dynamic_invariant3 going true false true true))

;; Assume
(assert true)

;; Assume
(assert (< 0 (length pattern)))

;; (=)'result'unused'unused
(define-fun lpeqrpqtresultqtunusedqtunused () Bool
  (ite (= (length source) 0) true false))

(declare-const temp___548 Bool)

(declare-const usf Int)

;; H
(assert
  (ite (< 0 (length source))
    (and
      (let ((o (length pattern)))
        (and (in_range1 o) (in_range1 (- (last source) (- o 1)))))
      (= temp___548 (ite (exists ((j Int))
                           (and
                             (and
                               (<= (first source) j)
                               (<= j (- (last source) (- (length pattern) 1))))
                             (= (match__ source pattern mapping j) true)))
                      true
                      false)))
    (= temp___548 false)))

;; Ensures
(assert (in_range1 (length pattern)))

;; Assume
(assert (= (- (length pattern) 1) pl1))

;; Assume
(assert (dynamic_invariant pl1 true false true true))

(declare-const spark__branch Bool)

;; H
(assert
  (= spark__branch (bool_eq4
                     (to_array pattern)
                     (first pattern)
                     (last pattern)
                     (temp___String_Literal_550 Tuple0)
                     1
                     0)))

;; H
(assert (not (= spark__branch true)))

(declare-const spark__branch1 Bool)

;; H
(assert
  (= spark__branch1 (ite (< (length source) (length pattern)) true false)))

;; H
(assert (not (= spark__branch1 true)))

;; (=)'result'unused'unused
(define-fun lpeqrpqtresultqtunusedqtunused1 () Bool
  (ite (= going 0) true false))

(declare-const spark__branch2 Bool)

;; H
(assert (= spark__branch2 (ite (= going 0) true false)))

;; H
(assert (not (= spark__branch2 true)))

;; H
(assert (is_identity__function_guard (is_identity mapping) mapping))

;; H
(assert
  (and
    (forall ((k Int)) (value__function_guard (value mapping k) mapping k))
    (=>
      (= (is_identity mapping) true)
      (forall ((k Int))
        (=> (and (<= 0 k) (<= k 255)) (= (value mapping k) k))))))

(declare-const spark__branch3 Bool)

;; H
(assert (= spark__branch3 (is_identity mapping)))

;; H
(assert (= spark__branch3 true))

;; Ensures
(assert (in_range1 (- (last source) pl1)))

(declare-const ind Int)

;; H
(assert (= ind (- (last source) pl1)))

;; H
(assert
  (= (and (ite (<= (first source) ind) true false) (ite (<= ind (- (last
                                                                    source) 
                                                     pl1))
                                                     true
                                                     false)) true))

;; Ensures
(assert (in_range1 (+ ind pl1)))

;; Assert
(assert
  (=>
    (<= ind (+ ind pl1))
    (and
      (and (<= (first source) ind) (<= ind (last source)))
      (and (<= (first source) (+ ind pl1)) (<= (+ ind pl1) (last source))))))

(declare-const spark__branch4 Bool)

;; H
(assert
  (= spark__branch4 (bool_eq4
                      (to_array pattern)
                      (first pattern)
                      (last pattern)
                      (to_array (of_array (to_array source) ind (+ ind pl1)))
                      (first (of_array (to_array source) ind (+ ind pl1)))
                      (last (of_array (to_array source) ind (+ ind pl1))))))

;; H
(assert (not (= spark__branch4 true)))

(declare-const usf1 Int)

;; H
(assert (in_range1 (- (last source) pl1)))

;; _f'unused'unused
(define-fun usfqtunusedqtunused () Bool
  (ite (forall ((j Int))
         (=>
           (and (<= ind j) (<= j (- (last source) pl1)))
           (not (= (match__ source pattern mapping j) true))))
    true
    false))

;; any'result'unused'unused
(define-fun anyqtresultqtunusedqtunused () Bool
  (ite (forall ((j Int))
         (=>
           (and (<= ind j) (<= j (- (last source) pl1)))
           (not (= (match__ source pattern mapping j) true))))
    true
    false))

(declare-const ind1 Int)

;; LoopInvariant
(assert
  (forall ((j Int))
    (=>
      (and (<= ind1 j) (<= j (- (last source) pl1)))
      (not (= (match__ source pattern mapping j) true)))))

;; H
(assert
  (= (and (ite (dynamic_property4 (first source) (- (last source) pl1) ind1)
            true
            false) (ite (and
                          (<= (first source) ind1)
                          (<= ind1 (- (last source) pl1)))
                     true
                     false)) true))

;; (=)'result'unused'unused
(define-fun lpeqrpqtresultqtunusedqtunused2 () Bool
  (ite (= ind1 (first source)) true false))

;; H
(assert (not (= ind1 (first source))))

(declare-const ind2 Int)

;; H
(assert (= ind2 (- ind1 1)))

;; Ensures
(assert (in_range1 (+ ind2 pl1)))

;; Assert
(assert
  (=>
    (<= ind2 (+ ind2 pl1))
    (and
      (and (<= (first source) ind2) (<= ind2 (last source)))
      (and (<= (first source) (+ ind2 pl1)) (<= (+ ind2 pl1) (last source))))))

(declare-const spark__branch5 Bool)

;; H
(assert
  (= spark__branch5 (bool_eq4
                      (to_array pattern)
                      (first pattern)
                      (last pattern)
                      (to_array
                        (of_array (to_array source) ind2 (+ ind2 pl1)))
                      (first (of_array (to_array source) ind2 (+ ind2 pl1)))
                      (last (of_array (to_array source) ind2 (+ ind2 pl1))))))

;; H
(assert (not (= spark__branch5 true)))

(declare-const usf2 Int)

;; H
(assert (in_range1 (- (last source) pl1)))

;; _f'unused'unused
(define-fun usfqtunusedqtunused1 () Bool
  (ite (forall ((j Int))
         (=>
           (and (<= ind2 j) (<= j (- (last source) pl1)))
           (not (= (match__ source pattern mapping j) true))))
    true
    false))

;; any'result'unused'unused
(define-fun anyqtresultqtunusedqtunused1 () Bool
  (ite (forall ((j Int))
         (=>
           (and (<= ind2 j) (<= j (- (last source) pl1)))
           (not (= (match__ source pattern mapping j) true))))
    true
    false))

(declare-const j Int)

;; H
(assert (<= ind2 j))

;; H
(assert (<= j (- (last source) pl1)))

;; Goal def'vc
;; File "a-strsea.ads", line 102, characters 0-0
(assert
  (not (not (= (match__ source pattern mapping j) true))))

(check-sat)
(exit)
