(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTNIRA)
(set-info :source |
Generated by: Yannick Moy
Generated on: 2022-02-14
Generator: GNATprove
Application: GNAT light runtime library
Target solver: Alt-Ergo, CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)

;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
  (((Tuple0))))

(declare-sort us_private 0)

;; private__bool_eq
(declare-fun private__bool_eq (us_private
  us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
  (((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))

(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
  (((int__refqtmk (int__content Int)))))

(declare-datatypes ((bool__ref 0))
  (((bool__refqtmk (bool__content Bool)))))

(declare-datatypes ((us_fixed__ref 0))
  (((us_fixed__refqtmk (us_fixed__content Int)))))

(declare-datatypes ((real__ref 0))
  (((real__refqtmk (real__content Real)))))

(declare-datatypes ((us_private__ref 0))
  (((us_private__refqtmk (us_private__content us_private)))))

;; int__ref___projection
(define-fun int__ref___projection ((a int__ref)) Int
  (int__content a))

;; __fixed__ref___projection
(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int
  (us_fixed__content a))

;; bool__ref___projection
(define-fun bool__ref___projection ((a bool__ref)) Bool
  (bool__content a))

;; real__ref___projection
(define-fun real__ref___projection ((a real__ref)) Real
  (real__content a))

;; __private__ref___projection
(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

;; bool_eq
(define-fun bool_eq ((x Bool) (y Bool)) Bool
  (ite (= x y) true false))

;; to_int
(define-fun to_int1 ((b Bool)) Int
  (ite (= b true) 1 0))

;; of_int
(define-fun of_int ((i Int)) Bool
  (ite (= i 0) false true))

;; in_range
(define-fun in_range ((x Int)) Bool
  (or (= x 0) (= x 1)))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

;; integer'int
(declare-fun integerqtint (integer) Int)

;; integer'axiom
(assert
  (forall ((i integer))
    (and
      (<= (- 2147483648) (integerqtint i))
      (<= (integerqtint i) 2147483647))))

;; in_range
(define-fun in_range1 ((x Int)) Bool
  (and (<= (- 2147483648) x) (<= x 2147483647)))

;; bool_eq
(define-fun bool_eq1 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

;; user_eq
(declare-fun user_eq (integer
  integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
  (((integer__refqtmk (integer__content integer)))))

;; integer__ref_integer__content__projection
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer
  (integer__content a))

;; dynamic_invariant
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool
  (=>
    (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647))
    (in_range1 temp___expr_18)))

(declare-sort natural 0)

;; natural'int
(declare-fun naturalqtint (natural) Int)

;; natural'axiom
(assert
  (forall ((i natural))
    (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

;; in_range
(define-fun in_range2 ((x Int)) Bool
  (and (<= 0 x) (<= x 2147483647)))

;; bool_eq
(define-fun bool_eq2 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

;; user_eq
(declare-fun user_eq1 (natural
  natural) Bool)

(declare-const dummy1 natural)

(declare-datatypes ((natural__ref 0))
  (((natural__refqtmk (natural__content natural)))))

;; natural__ref_natural__content__projection
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural
  (natural__content a))

;; dynamic_invariant
(define-fun dynamic_invariant1 ((temp___expr_46 Int) (temp___is_init_42 Bool) (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool) (temp___do_typ_inv_45 Bool)) Bool
  (=>
    (or (= temp___is_init_42 true) (<= 0 2147483647))
    (in_range2 temp___expr_46)))

(declare-sort positive 0)

;; positive'int
(declare-fun positiveqtint (positive) Int)

;; positive'axiom
(assert
  (forall ((i positive))
    (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

;; in_range
(define-fun in_range3 ((x Int)) Bool
  (and (<= 1 x) (<= x 2147483647)))

;; bool_eq
(define-fun bool_eq3 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

;; user_eq
(declare-fun user_eq2 (positive
  positive) Bool)

(declare-const dummy2 positive)

(declare-datatypes ((positive__ref 0))
  (((positive__refqtmk (positive__content positive)))))

;; positive__ref_positive__content__projection
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive
  (positive__content a))

;; dynamic_invariant
(define-fun dynamic_invariant2 ((temp___expr_53 Int) (temp___is_init_49 Bool) (temp___skip_constant_50 Bool) (temp___do_toplevel_51 Bool) (temp___do_typ_inv_52 Bool)) Bool
  (=>
    (or (= temp___is_init_49 true) (<= 1 2147483647))
    (in_range3 temp___expr_53)))

(declare-sort character 0)

;; in_range
(define-fun in_range4 ((x Int)) Bool
  (and (<= 0 x) (<= x 255)))

;; bool_eq
(define-fun bool_eq4 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

;; user_eq
(declare-fun user_eq3 (character
  character) Bool)

(declare-const dummy3 character)

(declare-datatypes ((character__ref 0))
  (((character__refqtmk (character__content character)))))

;; character__ref_character__content__projection
(define-fun character__ref_character__content__projection ((a character__ref)) character
  (character__content a))

;; to_rep
(declare-fun to_rep (character) Int)

;; of_rep
(declare-fun of_rep (Int) character)

;; inversion_axiom
(assert
  (forall ((x character))
    (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
(assert
  (forall ((x character)) (! (in_range4 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
(assert
  (forall ((x Int))
    (! (=> (in_range4 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                                (of_rep x))) )))

(declare-datatypes ((map__ref 0))
  (((map__refqtmk (map__content (Array Int character))))))

;; slide
(declare-fun slide ((Array Int character)
  Int
  Int) (Array Int character))

;; slide_eq
(assert
  (forall ((a (Array Int character)))
    (forall ((first Int))
      (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
(assert
  (forall ((a (Array Int character)))
    (forall ((old_first Int))
      (forall ((new_first Int))
        (forall ((i Int))
          (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
          (slide
            a
            old_first
            new_first) i)) ))))))

;; const
(declare-fun const1 (character) (Array Int character))

;; const_def
(assert
  (forall ((v character))
    (forall ((i Int))
      (! (= (select (const1 v) i) v) :pattern ((select (const1 v) i)) ))))

;; bool_eq
(define-fun bool_eq5 ((a (Array Int character)) (a__first Int) (a__last Int) (b (Array Int character)) (b__first Int) (b__last Int)) Bool
  (ite (and
         (ite (<= a__first a__last)
           (and
             (<= b__first b__last)
             (= (- a__last a__first) (- b__last b__first)))
           (< b__last b__first))
         (forall ((temp___idx_105 Int))
           (=>
             (and (<= a__first temp___idx_105) (<= temp___idx_105 a__last))
             (= (to_rep (select a temp___idx_105)) (to_rep
                                                     (select b (+ (- b__first a__first) temp___idx_105)))))))
    true
    false))

;; bool_eq_rev
(assert
  (forall ((a (Array Int character)) (b (Array Int character)))
    (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
      (=>
        (= (bool_eq5 b b__first b__last a a__first a__last) true)
        (and
          (ite (<= a__first a__last)
            (and
              (<= b__first b__last)
              (= (- a__last a__first) (- b__last b__first)))
            (< b__last b__first))
          (forall ((temp___idx_105 Int))
            (=>
              (and (<= a__first temp___idx_105) (<= temp___idx_105 a__last))
              (= (to_rep (select a temp___idx_105)) (to_rep
                                                      (select b (+ (- b__first a__first) temp___idx_105)))))))))))

;; to_rep
(define-fun to_rep1 ((x integer)) Int
  (integerqtint x))

;; of_rep
(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
(assert
  (forall ((x integer))
    (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
(assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
(assert
  (forall ((x Int))
    (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                                  (of_rep1 x))) )))

(declare-datatypes ((t 0))
  (((tqtmk (rec__first integer)(rec__last integer)))))

;; mk
(declare-fun mk (Int
  Int) t)

;; mk_def
(assert
  (forall ((f Int) (l Int))
    (! (=>
         (in_range1 f)
         (=>
           (in_range1 l)
           (and
             (= (to_rep1 (rec__first (mk f l))) f)
             (= (to_rep1 (rec__last (mk f l))) l)))) :pattern ((mk f l)) )))

;; dynamic_property
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool
  (and
    (in_range1 low)
    (and
      (in_range1 high)
      (=> (<= low high) (and (in_range3 low) (in_range3 high))))))

(declare-datatypes ((us_t 0))
  (((us_tqtmk (elts (Array Int character))(rt t)))))

;; to_array
(define-fun to_array ((a us_t)) (Array Int character)
  (elts a))

;; of_array
(define-fun of_array ((a (Array Int character)) (f Int) (l Int)) us_t
  (us_tqtmk a (mk f l)))

;; first
(define-fun first ((a us_t)) Int
  (to_rep1 (rec__first (rt a))))

;; last
(define-fun last ((a us_t)) Int
  (to_rep1 (rec__last (rt a))))

;; length
(define-fun length ((a us_t)) Int
  (ite (<= (first a) (last a)) (+ (- (last a) (first a)) 1) 0))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
(assert (<= 0 value__size))

;; object__size_axiom
(assert (<= 0 object__size))

;; component__size_axiom
(assert (<= 0 component__size))

;; alignment_axiom
(assert (<= 0 alignment))

;; bool_eq
(define-fun bool_eq6 ((x us_t) (y us_t)) Bool
  (bool_eq5
    (elts x)
    (to_rep1 (rec__first (rt x)))
    (to_rep1 (rec__last (rt x)))
    (elts y)
    (to_rep1 (rec__first (rt y)))
    (to_rep1 (rec__last (rt y)))))

;; user_eq
(declare-fun user_eq4 (us_t
  us_t) Bool)

(declare-const dummy4 us_t)

(declare-datatypes ((string____ref 0))
  (((string____refqtmk (string____content us_t)))))

;; string____ref_string____content__projection
(define-fun string____ref_string____content__projection ((a string____ref)) us_t
  (string____content a))

;; dynamic_invariant
(define-fun dynamic_invariant3 ((temp___expr_110 us_t) (temp___is_init_106 Bool) (temp___skip_constant_107 Bool) (temp___do_toplevel_108 Bool) (temp___do_typ_inv_109 Bool)) Bool
  (=>
    (not (= temp___skip_constant_107 true))
    (dynamic_property
      1
      2147483647
      (first temp___expr_110)
      (last temp___expr_110))))

;; match__
(declare-fun match__ (us_t
  us_t
  (Array Int character)
  Int) Bool)

;; match____function_guard
(declare-fun match____function_guard (Bool
  us_t
  us_t
  (Array Int character)
  Int) Bool)

;; value
(declare-fun value ((Array Int character)
  Int) Int)

;; value__function_guard
(declare-fun value__function_guard (Int
  (Array Int character)
  Int) Bool)

;; match____post_axiom
(assert true)

;; match____def_axiom
(assert
  (forall ((source us_t) (pattern us_t))
    (forall ((mapping (Array Int character)))
      (forall ((from Int))
        (! (and
             (forall ((source1 us_t) (pattern1 us_t) (mapping1 (Array Int character)) (from1 Int) (k Int))
               (value__function_guard
                 (value
                   mapping1
                   (to_rep
                     (select (to_array source1) (+ from1 (- k (first
                                                                pattern1))))))
                 mapping1
                 (to_rep
                   (select (to_array source1) (+ from1 (- k (first pattern1)))))))
             (=
               (= (match__ source pattern mapping from) true)
               (forall ((k Int))
                 (=>
                   (and (<= (first pattern) k) (<= k (last pattern)))
                   (= (to_rep (select (to_array pattern) k)) (value
                                                               mapping
                                                               (to_rep
                                                                 (select 
                                                                 (to_array
                                                                   source) (+ from (- k 
                                                                 (first
                                                                   pattern))))))))))) :pattern (
        (match__
          source
          pattern
          mapping
          from)) )))))

;; bool_eq
(declare-fun bool_eq7 (Int
  Int) Bool)

;; bool_ne
(declare-fun bool_ne (Int
  Int) Bool)

;; bool_lt
(declare-fun bool_lt (Int
  Int) Bool)

;; bool_le
(declare-fun bool_le (Int
  Int) Bool)

;; bool_gt
(declare-fun bool_gt (Int
  Int) Bool)

;; bool_ge
(declare-fun bool_ge (Int
  Int) Bool)

;; bool_eq_axiom
(assert
  (forall ((x Int)) (forall ((y Int)) (= (= (bool_eq7 x y) true) (= x y)))))

;; bool_ne_axiom
(assert
  (forall ((x Int))
    (forall ((y Int)) (= (= (bool_ne x y) true) (not (= x y))))))

;; bool_lt_axiom
(assert
  (forall ((x Int)) (forall ((y Int)) (= (= (bool_lt x y) true) (< x y)))))

;; bool_int__le_axiom
(assert
  (forall ((x Int)) (forall ((y Int)) (= (= (bool_le x y) true) (<= x y)))))

;; bool_gt_axiom
(assert
  (forall ((x Int)) (forall ((y Int)) (= (= (bool_gt x y) true) (< y x)))))

;; bool_ge_axiom
(assert
  (forall ((x Int)) (forall ((y Int)) (= (= (bool_ge x y) true) (<= y x)))))

;; length
(define-fun length1 ((x Int) (y Int)) Int
  (ite (<= x y) (+ (- y x) 1) 0))

;; index
(declare-fun index (us_t
  us_t
  Int
  (Array Int character)) Int)

;; index__function_guard
(declare-fun index__function_guard (Int
  us_t
  us_t
  Int
  (Array Int character)) Bool)

(declare-sort direction 0)

;; in_range
(define-fun in_range5 ((x Int)) Bool
  (and (<= 0 x) (<= x 1)))

;; bool_eq
(define-fun bool_eq8 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

;; user_eq
(declare-fun user_eq5 (direction
  direction) Bool)

(declare-const dummy5 direction)

(declare-datatypes ((direction__ref 0))
  (((direction__refqtmk (direction__content direction)))))

;; direction__ref_direction__content__projection
(define-fun direction__ref_direction__content__projection ((a direction__ref)) direction
  (direction__content a))

;; dynamic_invariant
(define-fun dynamic_invariant4 ((temp___expr_246 Int) (temp___is_init_242 Bool) (temp___skip_constant_243 Bool) (temp___do_toplevel_244 Bool) (temp___do_typ_inv_245 Bool)) Bool
  (=> (or (= temp___is_init_242 true) (<= 0 1)) (in_range5 temp___expr_246)))

;; index__post_axiom
(assert
  (forall ((source us_t) (pattern us_t))
    (forall ((going Int))
      (forall ((mapping (Array Int character)))
        (! (=>
             (and
               (and
                 (and
                   (dynamic_invariant3 source true true true true)
                   (dynamic_invariant3 pattern true true true true))
                 (dynamic_invariant4 going true true true true))
               (< 0 (length pattern)))
             (let ((result (index source pattern going mapping)))
               (=>
                 (index__function_guard result source pattern going mapping)
                 (and
                   (and
                     (or
                       (= result 0)
                       (and
                         (<= (first source) result)
                         (<= result (last source))))
                     (ite (= (length source) 0)
                       (= result 0)
                       (ite (and
                              (< 0 (length source))
                              (exists ((j Int))
                                (and
                                  (and
                                    (<= (first source) j)
                                    (<= j (- (last source) (- (length
                                                                pattern) 1))))
                                  (= (match__ source pattern mapping j) true))))
                         (and
                           (and
                             (and
                               (<= (first source) result)
                               (<= result (- (last source) (- (length
                                                                pattern) 1))))
                             (= (match__ source pattern mapping result) true))
                           (forall ((j Int))
                             (=>
                               (and
                                 (<= (first source) j)
                                 (<= j (last source)))
                               (=>
                                 (ite (= going 0)
                                   (<= j (- result 1))
                                   (let ((temp___253 (- j 1)))
                                     (and
                                       (<= result temp___253)
                                       (<= temp___253 (- (last source) 
                                       (length
                                         pattern))))))
                                 (not
                                   (= (match__ source pattern mapping j) true))))))
                         (= result 0))))
                   (dynamic_invariant1 result true false true true))))) :pattern (
        (index
          source
          pattern
          going
          mapping)) )))))

(declare-const source us_t)

(declare-const pattern us_t)

(declare-const from Int)

(declare-const going Int)

(declare-const mapping (Array Int character))

(declare-const pl1 Int)

(declare-datatypes ((t147b__ref 0))
  (((t147b__refqtmk (t147b__content us_t)))))

;; t147b__ref_t147b__content__projection
(define-fun t147b__ref_t147b__content__projection ((a t147b__ref)) us_t
  (t147b__content a))

(declare-datatypes ((t149b__ref 0))
  (((t149b__refqtmk (t149b__content us_t)))))

;; t149b__ref_t149b__content__projection
(define-fun t149b__ref_t149b__content__projection ((a t149b__ref)) us_t
  (t149b__content a))

;; dynamic_invariant
(define-fun dynamic_invariant5 ((temp___expr_88 Int) (temp___is_init_84 Bool) (temp___skip_constant_85 Bool) (temp___do_toplevel_86 Bool) (temp___do_typ_inv_87 Bool)) Bool
  (=> (or (= temp___is_init_84 true) (<= 0 255)) (in_range4 temp___expr_88)))

;; pl1__def_axiom
(assert (= pl1 (- (length pattern) 1)))

;; spark_proof_model
(declare-fun spark_proof_model ((Array Int character)) (Array Int character))

;; spark_proof_model__function_guard
(declare-fun spark_proof_model__function_guard ((Array Int character)
  (Array Int character)) Bool)

;; spark_proof_model__post_axiom
(assert true)

;; spark_proof_model__def_axiom
(assert
  (forall ((map1 (Array Int character)))
    (! (= (spark_proof_model map1) (let ((temp___227 map1)) temp___227)) :pattern (
    (spark_proof_model
      map1)) )))

;; value__post_axiom
(assert
  (forall ((map1 (Array Int character)))
    (forall ((element Int))
      (! (=>
           (dynamic_invariant5 element true true true true)
           (let ((result (value map1 element)))
             (=>
               (value__function_guard result map1 element)
               (and
                 (= result (to_rep
                             (let ((temp___230 (spark_proof_model map1)))
                               (select temp___230 element))))
                 (dynamic_invariant5 result true false true true))))) :pattern (
      (value
        map1
        element)) ))))

(declare-const result__ Int)

;; Assume
(assert (dynamic_invariant3 source true false true true))

;; Assume
(assert (dynamic_invariant3 pattern true false true true))

;; Assume
(assert (dynamic_invariant2 from true false true true))

;; Assume
(assert (dynamic_invariant4 going true false true true))

;; Assume
(assert true)

;; Assume
(assert
  (and
    (< 0 (length pattern))
    (=>
      (< 0 (length source))
      (and (<= (first source) from) (<= from (last source))))))

(declare-const temp___653 Bool)

(declare-const usf Int)

(declare-const o Int)

(declare-const o1 Int)

;; H
(assert
  (ite (< 0 (length source))
    (and
      (let ((o2 (length pattern)))
        (and
          (in_range1 o2)
          (and
            (ite (= going 0) (= o (last source)) (= o from))
            (and
              (in_range1 (- o (- o2 1)))
              (ite (= going 0) (= o1 from) (= o1 (first source)))))))
      (= temp___653 (ite (exists ((j Int))
                           (and
                             (and
                               (<= (ite (= going 0) from (first source)) j)
                               (<= j (- (ite (= going 0) (last source) from) (- 
                               (length
                                 pattern) 1))))
                             (= (match__ source pattern mapping j) true)))
                      true
                      false)))
    (= temp___653 false)))

;; (=)'result'unused'unused
(define-fun lpeqrpqtresultqtunusedqtunused () Bool
  (ite (= (length source) 0) true false))

(declare-const ada___ada___ada__strings__search__index__4__result Int)

;; Assume
(assert true)

;; Assume
(assert (dynamic_invariant1 result__ false false true true))

;; H
(assert (in_range1 (length pattern)))

;; H
(assert (= (- (length pattern) 1) pl1))

;; H
(assert (dynamic_invariant pl1 true false true true))

;; H
(assert
  (or
    (exists ((spark__branch Bool))
      (and
        (= spark__branch (ite (= (length source) 0) true false))
        (and
          (= spark__branch true)
          (= ada___ada___ada__strings__search__index__4__result 0))))
    (exists ((result__1 Int))
      (and
        (exists ((spark__branch Bool))
          (and
            (= spark__branch (ite (= (length source) 0) true false))
            (and
              (not (= spark__branch true))
              (exists ((spark__branch1 Bool))
                (and
                  (= spark__branch1 (ite (= going 0) true false))
                  (ite (= spark__branch1 true)
                    (exists ((spark__branch2 Bool))
                      (and
                        (= spark__branch2 (ite (< from (first source))
                                            true
                                            false))
                        (and
                          (not (= spark__branch2 true))
                          (let ((o2 mapping))
                            (let ((o3 pattern))
                              (let ((temp___660 (last source)))
                                (and
                                  (=>
                                    (<= from temp___660)
                                    (and
                                      (and
                                        (<= (first source) from)
                                        (<= from (last source)))
                                      (and
                                        (<= (first source) temp___660)
                                        (<= temp___660 (last source)))))
                                  (let ((temp___661 (of_array
                                                      (to_array source)
                                                      from
                                                      temp___660)))
                                    (let ((o4 (of_array
                                                (to_array temp___661)
                                                (first temp___661)
                                                (last temp___661))))
                                      (let ((o5 (index o4 o3 0 o2)))
                                        (and
                                          (and
                                            (index__function_guard
                                              o5
                                              o4
                                              o3
                                              0
                                              o2)
                                            (and
                                              (dynamic_invariant1
                                                o5
                                                true
                                                false
                                                true
                                                true)
                                              (and
                                                (or
                                                  (= o5 0)
                                                  (and
                                                    (<= (first o4) o5)
                                                    (<= o5 (last o4))))
                                                (ite (= (length o4) 0)
                                                  (= o5 0)
                                                  (ite (= (and (bool_gt
                                                                 (length o4)
                                                                 0) (ite 
                                                                    (exists 
                                                                    ((j Int))
                                                                    (and
                                                                    (and
                                                                    (<= 
                                                                    (first
                                                                    o4) j)
                                                                    (<= j (- 
                                                                    (last
                                                                    o4) (- 
                                                                    (length
                                                                    o3) 1))))
                                                                    (= 
                                                                    (match__
                                                                    o4
                                                                    o3
                                                                    o2
                                                                    j) true)))
                                                                    true
                                                                    false)) true)
                                                    (and
                                                      (and
                                                        (and
                                                          (<= (first o4) o5)
                                                          (<= o5 (- (last o4) (- 
                                                          (length
                                                            o3) 1))))
                                                        (= (match__
                                                             o4
                                                             o3
                                                             o2
                                                             o5) true))
                                                      (forall ((j Int))
                                                        (=>
                                                          (and
                                                            (<= (first o4) j)
                                                            (<= j (last o4)))
                                                          (=>
                                                            (<= j (- o5 1))
                                                            (not
                                                              (= (match__
                                                                   o4
                                                                   o3
                                                                   o2
                                                                   j) true))))))
                                                    (= o5 0))))))
                                          (= result__1 o5))))))))))))
                    (exists ((spark__branch2 Bool))
                      (and
                        (= spark__branch2 (ite (< (last source) from)
                                            true
                                            false))
                        (and
                          (not (= spark__branch2 true))
                          (let ((o2 mapping))
                            (let ((o3 pattern))
                              (let ((temp___656 (first source)))
                                (and
                                  (=>
                                    (<= temp___656 from)
                                    (and
                                      (and
                                        (<= (first source) temp___656)
                                        (<= temp___656 (last source)))
                                      (and
                                        (<= (first source) from)
                                        (<= from (last source)))))
                                  (let ((temp___657 (of_array
                                                      (to_array source)
                                                      temp___656
                                                      from)))
                                    (let ((o4 (of_array
                                                (to_array temp___657)
                                                (first temp___657)
                                                (last temp___657))))
                                      (let ((o5 (index o4 o3 1 o2)))
                                        (and
                                          (and
                                            (index__function_guard
                                              o5
                                              o4
                                              o3
                                              1
                                              o2)
                                            (and
                                              (dynamic_invariant1
                                                o5
                                                true
                                                false
                                                true
                                                true)
                                              (and
                                                (or
                                                  (= o5 0)
                                                  (and
                                                    (<= (first o4) o5)
                                                    (<= o5 (last o4))))
                                                (ite (= (length o4) 0)
                                                  (= o5 0)
                                                  (ite (= (and (bool_gt
                                                                 (length o4)
                                                                 0) (ite 
                                                                    (exists 
                                                                    ((j Int))
                                                                    (and
                                                                    (and
                                                                    (<= 
                                                                    (first
                                                                    o4) j)
                                                                    (<= j (- 
                                                                    (last
                                                                    o4) (- 
                                                                    (length
                                                                    o3) 1))))
                                                                    (= 
                                                                    (match__
                                                                    o4
                                                                    o3
                                                                    o2
                                                                    j) true)))
                                                                    true
                                                                    false)) true)
                                                    (and
                                                      (and
                                                        (and
                                                          (<= (first o4) o5)
                                                          (<= o5 (- (last o4) (- 
                                                          (length
                                                            o3) 1))))
                                                        (= (match__
                                                             o4
                                                             o3
                                                             o2
                                                             o5) true))
                                                      (forall ((j Int))
                                                        (=>
                                                          (and
                                                            (<= (first o4) j)
                                                            (<= j (last o4)))
                                                          (=>
                                                            (ite (= 1 0)
                                                              (<= j (- o5 1))
                                                              (let ((temp___249 (- j 1)))
                                                                (and
                                                                  (<= o5 temp___249)
                                                                  (<= temp___249 (- 
                                                                  (last
                                                                    o4) 
                                                                  (length
                                                                    o3))))))
                                                            (not
                                                              (= (match__
                                                                   o4
                                                                   o3
                                                                   o2
                                                                   j) true))))))
                                                    (= o5 0))))))
                                          (= result__1 o5))))))))))))))))))
        (= ada___ada___ada__strings__search__index__4__result result__1)))))

;; Assert
(assert
  (=>
    (= (length source) 0)
    (= ada___ada___ada__strings__search__index__4__result 0)))

;; Goal def'vc
;; File "a-strsea.ads", line 242, characters 0-0
(assert
  (not
  (=>
    (= temp___653 true)
    (forall ((j Int))
      (=>
        (and (<= (first source) j) (<= j (last source)))
        (=>
          (ite (= going 0)
            (and
              (<= from j)
              (<= j (- ada___ada___ada__strings__search__index__4__result 1)))
            (let ((temp___665 (- j 1)))
              (and
                (<= ada___ada___ada__strings__search__index__4__result temp___665)
                (<= temp___665 (- from (length pattern))))))
          (not (= (match__ source pattern mapping j) true))))))))

(check-sat)
(exit)
