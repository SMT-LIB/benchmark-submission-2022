(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTNIRA)
(set-info :source |
Generated by: Yannick Moy
Generated on: 2022-02-14
Generator: GNATprove
Application: GNAT light runtime library
Target solver: Alt-Ergo, CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)

;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
  (((Tuple0))))

(declare-sort us_private 0)

;; private__bool_eq
(declare-fun private__bool_eq (us_private
  us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
  (((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))

(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
  (((int__refqtmk (int__content Int)))))

(declare-datatypes ((bool__ref 0))
  (((bool__refqtmk (bool__content Bool)))))

(declare-datatypes ((us_fixed__ref 0))
  (((us_fixed__refqtmk (us_fixed__content Int)))))

(declare-datatypes ((real__ref 0))
  (((real__refqtmk (real__content Real)))))

(declare-datatypes ((us_private__ref 0))
  (((us_private__refqtmk (us_private__content us_private)))))

;; int__ref___projection
(define-fun int__ref___projection ((a int__ref)) Int
  (int__content a))

;; __fixed__ref___projection
(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int
  (us_fixed__content a))

;; bool__ref___projection
(define-fun bool__ref___projection ((a bool__ref)) Bool
  (bool__content a))

;; real__ref___projection
(define-fun real__ref___projection ((a real__ref)) Real
  (real__content a))

;; __private__ref___projection
(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

;; bool_eq
(declare-fun bool_eq (Int
  Int) Bool)

;; bool_ne
(declare-fun bool_ne (Int
  Int) Bool)

;; bool_lt
(declare-fun bool_lt (Int
  Int) Bool)

;; bool_le
(declare-fun bool_le (Int
  Int) Bool)

;; bool_gt
(declare-fun bool_gt (Int
  Int) Bool)

;; bool_ge
(declare-fun bool_ge (Int
  Int) Bool)

;; bool_eq_axiom
(assert
  (forall ((x Int)) (forall ((y Int)) (= (= (bool_eq x y) true) (= x y)))))

;; bool_ne_axiom
(assert
  (forall ((x Int))
    (forall ((y Int)) (= (= (bool_ne x y) true) (not (= x y))))))

;; bool_lt_axiom
(assert
  (forall ((x Int)) (forall ((y Int)) (= (= (bool_lt x y) true) (< x y)))))

;; bool_int__le_axiom
(assert
  (forall ((x Int)) (forall ((y Int)) (= (= (bool_le x y) true) (<= x y)))))

;; bool_gt_axiom
(assert
  (forall ((x Int)) (forall ((y Int)) (= (= (bool_gt x y) true) (< y x)))))

;; bool_ge_axiom
(assert
  (forall ((x Int)) (forall ((y Int)) (= (= (bool_ge x y) true) (<= y x)))))

;; length
(define-fun length ((x Int) (y Int)) Int
  (ite (<= x y) (+ (- y x) 1) 0))

;; nth
(declare-fun nth ((_ BitVec 64)
  Int) Bool)

;; lsr
(declare-fun lsr ((_ BitVec 64)
  Int) (_ BitVec 64))

;; asr
(declare-fun asr ((_ BitVec 64)
  Int) (_ BitVec 64))

;; lsl
(declare-fun lsl ((_ BitVec 64)
  Int) (_ BitVec 64))

;; abs
(define-fun abs1 ((x Int)) Int
  (ite (<= 0 x) x (- x)))

;; Abs_le
(assert
  (forall ((x Int) (y Int)) (= (<= (abs1 x) y) (and (<= (- y) x) (<= x y)))))

;; Abs_pos
(assert (forall ((x Int)) (<= 0 (abs1 x))))

;; Div_unique
(assert
  (forall ((x Int) (y Int) (q Int))
    (=>
      (< 0 y)
      (=> (and (<= (* q y) x) (< x (+ (* q y) y))) (= (div x y) q)))))

;; Div_bound
(assert
  (forall ((x Int) (y Int))
    (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div x y)) (<= (div x y) x)))))

;; Div_inf
(assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div x y) 0))))

;; Div_inf_neg
(assert
  (forall ((x Int) (y Int))
    (=> (and (< 0 x) (<= x y)) (= (div (- x) y) (- 1)))))

;; Mod_0
(assert (forall ((y Int)) (=> (not (= y 0)) (= (mod 0 y) 0))))

;; Div_1_left
(assert (forall ((y Int)) (=> (< 1 y) (= (div 1 y) 0))))

;; Div_minus1_left
(assert (forall ((y Int)) (=> (< 1 y) (= (div (- 1) y) (- 1)))))

;; Mod_1_left
(assert (forall ((y Int)) (=> (< 1 y) (= (mod 1 y) 1))))

;; Mod_minus1_left
(assert
  (forall ((y Int))
    (! (=> (< 1 y) (= (mod (- 1) y) (- y 1))) :pattern ((mod (- 1) y)) )))

;; Div_mult
(assert
  (forall ((x Int) (y Int) (z Int))
    (! (=> (< 0 x) (= (div (+ (* x y) z) x) (+ y (div z x)))) :pattern ((div (+ (* x y) z) x)) )))

;; Mod_mult
(assert
  (forall ((x Int) (y Int) (z Int))
    (! (=> (< 0 x) (= (mod (+ (* x y) z) x) (mod z x))) :pattern ((mod (+ (* x y) z) x)) )))

;; rotate_right
(declare-fun rotate_right1 ((_ BitVec 64)
  Int) (_ BitVec 64))

;; rotate_left
(declare-fun rotate_left1 ((_ BitVec 64)
  Int) (_ BitVec 64))

;; pow2
(declare-fun pow2 (Int) Int)

(declare-const two_power_size_minus_one Int)

;; two_power_size_minus_one_val
(assert (= two_power_size_minus_one (pow2 (- 64 1))))

;; to_int
(define-fun to_int1 ((x (_ BitVec 64))) Int
  (ite (bvsge x (_ bv0 64))
    (bv2nat x)
    (- (- 18446744073709551616 (bv2nat x)))))

;; uint_in_range
(define-fun uint_in_range ((i Int)) Bool
  (and (<= 0 i) (<= i 18446744073709551615)))

;; lsr_bv_is_lsr
(assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
    (= (bvlshr x n) (lsr x (bv2nat n)))))

;; asr_bv_is_asr
(assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
    (= (bvashr x n) (asr x (bv2nat n)))))

;; lsl_bv_is_lsl
(assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
    (= (bvshl x n) (lsl x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
(assert
  (forall ((v (_ BitVec 64)) (n (_ BitVec 64)))
    (= (bvor (bvshl v (bvurem n (_ bv64 64))) (bvlshr v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) 
    (rotate_left1
      v
      (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
(assert
  (forall ((v (_ BitVec 64)) (n (_ BitVec 64)))
    (= (bvor (bvlshr v (bvurem n (_ bv64 64))) (bvshl v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) 
    (rotate_right1
      v
      (bv2nat n)))))

;; nth_bv
(declare-fun nth_bv ((_ BitVec 64)
  (_ BitVec 64)) Bool)

;; nth_bv_def
(assert
  (forall ((x (_ BitVec 64)) (i (_ BitVec 64)))
    (=
      (= (nth_bv x i) true)
      (not (= (bvand (bvlshr x i) #x0000000000000001) #x0000000000000000)))))

;; Nth_bv_is_nth
(assert
  (forall ((x (_ BitVec 64)) (i (_ BitVec 64)))
    (= (nth x (bv2nat i)) (nth_bv x i))))

;; Nth_bv_is_nth2
(assert
  (forall ((x (_ BitVec 64)) (i Int))
    (=>
      (and (<= 0 i) (< i 18446744073709551616))
      (= (nth_bv x ((_ int2bv 64) i)) (nth x i)))))

;; eq_sub_bv
(declare-fun eq_sub_bv ((_ BitVec 64)
  (_ BitVec 64)
  (_ BitVec 64)
  (_ BitVec 64)) Bool)

;; eq_sub_bv_def
(assert
  (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64)))
    (let ((mask (bvshl (bvsub (bvshl #x0000000000000001 n) #x0000000000000001) i)))
      (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))

;; eq_sub
(define-fun eq_sub ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int) (n Int)) Bool
  (forall ((j Int))
    (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

;; eq_sub_equiv
(assert
  (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64)))
    (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))

(declare-datatypes ((t__ref 0))
  (((t__refqtmk (t__content (_ BitVec 64))))))

;; bool_eq
(define-fun bool_eq1 ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool
  (ite (= x y) true false))

;; bool_ne
(define-fun bool_ne1 ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool
  (ite (not (= x y)) true false))

;; bool_lt
(define-fun bool_lt1 ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool
  (ite (bvult x y) true false))

;; bool_le
(define-fun bool_le1 ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool
  (ite (bvule x y) true false))

;; bool_gt
(define-fun bool_gt1 ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool
  (ite (bvugt x y) true false))

;; bool_ge
(define-fun bool_ge1 ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool
  (ite (bvuge x y) true false))

;; power
(declare-fun power ((_ BitVec 64)
  Int) (_ BitVec 64))

;; Power_0
(assert (forall ((x (_ BitVec 64))) (= (power x 0) #x0000000000000001)))

;; Power_1
(assert (forall ((x (_ BitVec 64))) (= (power x 1) x)))

;; Power_s
(assert
  (forall ((x (_ BitVec 64)) (n Int))
    (=> (<= 0 n) (= (power x (+ n 1)) (bvmul x (power x n))))))

;; Power_s_alt
(assert
  (forall ((x (_ BitVec 64)) (n Int))
    (=> (< 0 n) (= (power x n) (bvmul x (power x (- n 1)))))))

;; Power_sum
(assert
  (forall ((x (_ BitVec 64)) (n Int) (m Int))
    (=>
      (<= 0 n)
      (=> (<= 0 m) (= (power x (+ n m)) (bvmul (power x n) (power x m)))))))

;; Power_mult
(assert
  (forall ((x (_ BitVec 64)) (n Int) (m Int))
    (=> (<= 0 n) (=> (<= 0 m) (= (power x (* n m)) (power (power x n) m))))))

;; Power_mult2
(assert
  (forall ((x (_ BitVec 64)) (y (_ BitVec 64)) (n Int))
    (=> (<= 0 n) (= (power (bvmul x y) n) (bvmul (power x n) (power y n))))))

;; bv_min
(define-fun bv_min ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)
  (ite (bvule x y) x y))

;; bv_max
(define-fun bv_max ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)
  (ite (bvule x y) y x))

;; min
(define-fun min ((x Int) (y Int)) Int
  (ite (<= x y) x y))

;; max
(define-fun max ((x Int) (y Int)) Int
  (ite (<= x y) y x))

;; Min_r
(assert (forall ((x Int) (y Int)) (=> (<= y x) (= (min x y) y))))

;; Max_l
(assert (forall ((x Int) (y Int)) (=> (<= y x) (= (max x y) x))))

;; Min_comm
(assert (forall ((x Int) (y Int)) (= (min x y) (min y x))))

;; Max_comm
(assert (forall ((x Int) (y Int)) (= (max x y) (max y x))))

;; Min_assoc
(assert
  (forall ((x Int) (y Int) (z Int)) (= (min (min x y) z) (min x (min y z)))))

;; Max_assoc
(assert
  (forall ((x Int) (y Int) (z Int)) (= (max (max x y) z) (max x (max y z)))))

;; bv_min_to_uint
(assert
  (forall ((x (_ BitVec 64)) (y (_ BitVec 64)))
    (= (bv2nat (bv_min x y)) (min (bv2nat x) (bv2nat y)))))

;; bv_max_to_uint
(assert
  (forall ((x (_ BitVec 64)) (y (_ BitVec 64)))
    (= (bv2nat (bv_max x y)) (max (bv2nat x) (bv2nat y)))))

;; uc_of_int
(define-fun uc_of_int ((x Int)) (_ BitVec 64)
  (ite (<= 0 x) ((_ int2bv 64) x) (bvneg ((_ int2bv 64) (- x)))))

;; uc_to_int
(define-fun uc_to_int ((x (_ BitVec 64))) Int
  (ite (= (bool_lt1 x ((_ int2bv 64) two_power_size_minus_one)) true)
    (bv2nat x)
    (- (bv2nat (bvneg x)))))

;; bool_eq
(define-fun bool_eq2 ((x Bool) (y Bool)) Bool
  (ite (= x y) true false))

;; to_int
(define-fun to_int2 ((b Bool)) Int
  (ite (= b true) 1 0))

;; of_int
(define-fun of_int ((i Int)) Bool
  (ite (= i 0) false true))

;; in_range
(define-fun in_range ((x Int)) Bool
  (or (= x 0) (= x 1)))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

;; integer'int
(declare-fun integerqtint (integer) Int)

;; integer'axiom
(assert
  (forall ((i integer))
    (and
      (<= (- 2147483648) (integerqtint i))
      (<= (integerqtint i) 2147483647))))

;; in_range
(define-fun in_range1 ((x Int)) Bool
  (and (<= (- 2147483648) x) (<= x 2147483647)))

;; bool_eq
(define-fun bool_eq3 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

;; user_eq
(declare-fun user_eq (integer
  integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
  (((integer__refqtmk (integer__content integer)))))

;; integer__ref_integer__content__projection
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer
  (integer__content a))

(declare-sort character 0)

;; in_range
(define-fun in_range2 ((x Int)) Bool
  (and (<= 0 x) (<= x 255)))

;; bool_eq
(define-fun bool_eq4 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

;; user_eq
(declare-fun user_eq1 (character
  character) Bool)

(declare-const dummy1 character)

(declare-datatypes ((character__ref 0))
  (((character__refqtmk (character__content character)))))

;; character__ref_character__content__projection
(define-fun character__ref_character__content__projection ((a character__ref)) character
  (character__content a))

;; to_rep
(declare-fun to_rep (character) Int)

;; of_rep
(declare-fun of_rep (Int) character)

;; inversion_axiom
(assert
  (forall ((x character))
    (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
(assert
  (forall ((x character)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
(assert
  (forall ((x Int))
    (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                                (of_rep x))) )))

(declare-datatypes ((map__ref 0))
  (((map__refqtmk (map__content (Array Int character))))))

;; slide
(declare-fun slide ((Array Int character)
  Int
  Int) (Array Int character))

;; slide_eq
(assert
  (forall ((a (Array Int character)))
    (forall ((first Int))
      (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
(assert
  (forall ((a (Array Int character)))
    (forall ((old_first Int))
      (forall ((new_first Int))
        (forall ((i Int))
          (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
          (slide
            a
            old_first
            new_first) i)) ))))))

;; const
(declare-fun const1 (character) (Array Int character))

;; const_def
(assert
  (forall ((v character))
    (forall ((i Int))
      (! (= (select (const1 v) i) v) :pattern ((select (const1 v) i)) ))))

;; bool_eq
(define-fun bool_eq5 ((a (Array Int character)) (a__first Int) (a__last Int) (b (Array Int character)) (b__first Int) (b__last Int)) Bool
  (ite (and
         (ite (<= a__first a__last)
           (and
             (<= b__first b__last)
             (= (- a__last a__first) (- b__last b__first)))
           (< b__last b__first))
         (forall ((temp___idx_105 Int))
           (=>
             (and (<= a__first temp___idx_105) (<= temp___idx_105 a__last))
             (= (to_rep (select a temp___idx_105)) (to_rep
                                                     (select b (+ (- b__first a__first) temp___idx_105)))))))
    true
    false))

;; bool_eq_rev
(assert
  (forall ((a (Array Int character)) (b (Array Int character)))
    (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
      (=>
        (= (bool_eq5 b b__first b__last a a__first a__last) true)
        (and
          (ite (<= a__first a__last)
            (and
              (<= b__first b__last)
              (= (- a__last a__first) (- b__last b__first)))
            (< b__last b__first))
          (forall ((temp___idx_105 Int))
            (=>
              (and (<= a__first temp___idx_105) (<= temp___idx_105 a__last))
              (= (to_rep (select a temp___idx_105)) (to_rep
                                                      (select b (+ (- b__first a__first) temp___idx_105)))))))))))

(declare-sort positive 0)

;; positive'int
(declare-fun positiveqtint (positive) Int)

;; positive'axiom
(assert
  (forall ((i positive))
    (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

;; in_range
(define-fun in_range3 ((x Int)) Bool
  (and (<= 1 x) (<= x 2147483647)))

;; bool_eq
(define-fun bool_eq6 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

;; user_eq
(declare-fun user_eq2 (positive
  positive) Bool)

(declare-const dummy2 positive)

(declare-datatypes ((positive__ref 0))
  (((positive__refqtmk (positive__content positive)))))

;; positive__ref_positive__content__projection
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive
  (positive__content a))

;; to_rep
(define-fun to_rep1 ((x integer)) Int
  (integerqtint x))

;; of_rep
(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
(assert
  (forall ((x integer))
    (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
(assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
(assert
  (forall ((x Int))
    (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                                  (of_rep1 x))) )))

(declare-datatypes ((t 0))
  (((tqtmk (rec__first integer)(rec__last integer)))))

;; mk
(declare-fun mk (Int
  Int) t)

;; mk_def
(assert
  (forall ((f Int) (l Int))
    (! (=>
         (in_range1 f)
         (=>
           (in_range1 l)
           (and
             (= (to_rep1 (rec__first (mk f l))) f)
             (= (to_rep1 (rec__last (mk f l))) l)))) :pattern ((mk f l)) )))

;; dynamic_property
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool
  (and
    (in_range1 low)
    (and
      (in_range1 high)
      (=> (<= low high) (and (in_range3 low) (in_range3 high))))))

(declare-datatypes ((us_t 0))
  (((us_tqtmk (elts (Array Int character))(rt t)))))

;; to_array
(define-fun to_array ((a us_t)) (Array Int character)
  (elts a))

;; of_array
(define-fun of_array ((a (Array Int character)) (f Int) (l Int)) us_t
  (us_tqtmk a (mk f l)))

;; first
(define-fun first ((a us_t)) Int
  (to_rep1 (rec__first (rt a))))

;; last
(define-fun last ((a us_t)) Int
  (to_rep1 (rec__last (rt a))))

;; length
(define-fun length1 ((a us_t)) Int
  (ite (<= (first a) (last a)) (+ (- (last a) (first a)) 1) 0))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
(assert (<= 0 value__size))

;; object__size_axiom
(assert (<= 0 object__size))

;; component__size_axiom
(assert (<= 0 component__size))

;; alignment_axiom
(assert (<= 0 alignment))

;; bool_eq
(define-fun bool_eq7 ((x us_t) (y us_t)) Bool
  (bool_eq5
    (elts x)
    (to_rep1 (rec__first (rt x)))
    (to_rep1 (rec__last (rt x)))
    (elts y)
    (to_rep1 (rec__first (rt y)))
    (to_rep1 (rec__last (rt y)))))

;; user_eq
(declare-fun user_eq3 (us_t
  us_t) Bool)

(declare-const dummy3 us_t)

(declare-datatypes ((string____ref 0))
  (((string____refqtmk (string____content us_t)))))

;; string____ref_string____content__projection
(define-fun string____ref_string____content__projection ((a string____ref)) us_t
  (string____content a))

;; dynamic_invariant
(define-fun dynamic_invariant ((temp___expr_114 us_t) (temp___is_init_110 Bool) (temp___skip_constant_111 Bool) (temp___do_toplevel_112 Bool) (temp___do_typ_inv_113 Bool)) Bool
  (=>
    (not (= temp___skip_constant_111 true))
    (dynamic_property
      1
      2147483647
      (first temp___expr_114)
      (last temp___expr_114))))

(declare-sort universal_integer 0)

;; universal_integer'int
(declare-fun universal_integerqtint (universal_integer) Int)

;; universal_integer'axiom
(assert
  (forall ((i universal_integer))
    (and
      (<= (- 170141183460469231731687303715884105728) (universal_integerqtint
                                                        i))
      (<= (universal_integerqtint i) 170141183460469231731687303715884105727))))

;; in_range
(define-fun in_range4 ((x Int)) Bool
  (and
    (<= (- 170141183460469231731687303715884105728) x)
    (<= x 170141183460469231731687303715884105727)))

;; bool_eq
(define-fun bool_eq8 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

;; user_eq
(declare-fun user_eq4 (universal_integer
  universal_integer) Bool)

(declare-const dummy4 universal_integer)

(declare-datatypes ((universal_integer__ref 0))
  (((universal_integer__refqtmk
    (universal_integer__content universal_integer)))))

;; universal_integer__ref_universal_integer__content__projection
(define-fun universal_integer__ref_universal_integer__content__projection 
  ((a universal_integer__ref)) universal_integer
  (universal_integer__content a))

;; to_c
(declare-fun to_c (Int) Int)

;; to_c__function_guard
(declare-fun to_c__function_guard (Int
  Int) Bool)

;; dynamic_invariant
(define-fun dynamic_invariant1 ((temp___expr_88 Int) (temp___is_init_84 Bool) (temp___skip_constant_85 Bool) (temp___do_toplevel_86 Bool) (temp___do_typ_inv_87 Bool)) Bool
  (=> (or (= temp___is_init_84 true) (<= 0 255)) (in_range2 temp___expr_88)))

(declare-sort char1 0)

;; in_range
(define-fun in_range5 ((x Int)) Bool
  (and (<= 0 x) (<= x 255)))

;; bool_eq
(define-fun bool_eq9 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

;; user_eq
(declare-fun user_eq5 (char1
  char1) Bool)

(declare-const dummy5 char1)

(declare-datatypes ((char__ref 0))
  (((char__refqtmk (char__content char1)))))

;; char__ref_char__content__projection
(define-fun char__ref_char__content__projection ((a char__ref)) char1
  (char__content a))

;; dynamic_invariant
(define-fun dynamic_invariant2 ((temp___expr_354 Int) (temp___is_init_350 Bool) (temp___skip_constant_351 Bool) (temp___do_toplevel_352 Bool) (temp___do_typ_inv_353 Bool)) Bool
  (=>
    (or (= temp___is_init_350 true) (<= 0 255))
    (in_range5 temp___expr_354)))

;; to_c__post_axiom
(assert
  (forall ((item Int))
    (! (=>
         (dynamic_invariant1 item true true true true)
         (let ((result (to_c item)))
           (=>
             (to_c__function_guard result item)
             (and
               (= result item)
               (dynamic_invariant2 result true false true true))))) :pattern (
    (to_c
      item)) )))

(declare-sort size_t 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 64))

;; bool_eq
(define-fun bool_eq10 ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE6 ((_ BitVec 64)) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) (_ BitVec 64))

;; user_eq
(declare-fun user_eq6 (size_t
  size_t) Bool)

(declare-const dummy6 size_t)

(declare-datatypes ((size_t__ref 0))
  (((size_t__refqtmk (size_t__content size_t)))))

;; size_t__ref_size_t__content__projection
(define-fun size_t__ref_size_t__content__projection ((a size_t__ref)) size_t
  (size_t__content a))

;; to_rep
(declare-fun to_rep2 (size_t) (_ BitVec 64))

;; of_rep
(declare-fun of_rep2 ((_ BitVec 64)) size_t)

;; inversion_axiom
(assert
  (forall ((x size_t))
    (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
(assert true)

;; coerce_axiom
(assert
  (forall ((x (_ BitVec 64)))
    (! (= (to_rep2 (of_rep2 x)) x) :pattern ((to_rep2 (of_rep2 x))) )))

;; to_int
(define-fun to_int3 ((x size_t)) Int
  (bv2nat (to_rep2 x)))

;; range_int_axiom
(assert
  (forall ((x size_t))
    (! (uint_in_range (to_int3 x)) :pattern ((to_int3 x)) )))

;; to_rep
(declare-fun to_rep3 (char1) Int)

;; of_rep
(declare-fun of_rep3 (Int) char1)

;; inversion_axiom
(assert
  (forall ((x char1))
    (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
(assert
  (forall ((x char1)) (! (in_range5 (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
(assert
  (forall ((x Int))
    (! (=> (in_range5 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                                  (of_rep3 x))) )))

(declare-datatypes ((map__ref1 0))
  (((map__refqtmk1 (map__content1 (Array (_ BitVec 64) char1))))))

;; slide
(declare-fun slide1 ((Array (_ BitVec 64) char1)
  (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) char1))

;; slide_eq
(assert
  (forall ((a (Array (_ BitVec 64) char1)))
    (forall ((first1 (_ BitVec 64)))
      (! (= (slide1 a first1 first1) a) :pattern ((slide1 a first1 first1)) ))))

;; slide_def
(assert
  (forall ((a (Array (_ BitVec 64) char1)))
    (forall ((old_first (_ BitVec 64)))
      (forall ((new_first (_ BitVec 64)))
        (forall ((i (_ BitVec 64)))
          (! (= (select (slide1 a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select 
          (slide1
            a
            old_first
            new_first) i)) ))))))

;; const
(declare-fun const2 (char1) (Array (_ BitVec 64) char1))

;; const_def
(assert
  (forall ((v char1))
    (forall ((i (_ BitVec 64)))
      (! (= (select (const2 v) i) v) :pattern ((select (const2 v) i)) ))))

;; bool_eq
(define-fun bool_eq11 ((a (Array (_ BitVec 64) char1)) (a__first (_ BitVec 64)) (a__last (_ BitVec 64)) (b (Array (_ BitVec 64) char1)) (b__first (_ BitVec 64)) (b__last (_ BitVec 64))) Bool
  (ite (and
         (ite (bvule a__first a__last)
           (and
             (bvule b__first b__last)
             (= (bvsub a__last a__first) (bvsub b__last b__first)))
           (bvugt b__first b__last))
         (forall ((temp___idx_182 (_ BitVec 64)))
           (=>
             (and
               (bvule a__first temp___idx_182)
               (bvule temp___idx_182 a__last))
             (= (to_rep3 (select a temp___idx_182)) (to_rep3
                                                      (select b (bvadd (bvsub b__first a__first) temp___idx_182)))))))
    true
    false))

;; bool_eq_rev
(assert
  (forall ((a (Array (_ BitVec 64) char1)) (b (Array (_ BitVec 64) char1)))
    (forall ((a__first (_ BitVec 64)) (a__last (_ BitVec 64)) (b__first (_ BitVec 64)) (b__last (_ BitVec 64)))
      (=>
        (= (bool_eq11 b b__first b__last a a__first a__last) true)
        (and
          (ite (bvule a__first a__last)
            (and
              (bvule b__first b__last)
              (= (bvsub a__last a__first) (bvsub b__last b__first)))
            (bvugt b__first b__last))
          (forall ((temp___idx_182 (_ BitVec 64)))
            (=>
              (and
                (bvule a__first temp___idx_182)
                (bvule temp___idx_182 a__last))
              (= (to_rep3 (select a temp___idx_182)) (to_rep3
                                                       (select b (bvadd (bvsub b__first a__first) temp___idx_182)))))))))))

(declare-datatypes ((t1 0))
  (((tqtmk1 (rec__first1 size_t)(rec__last1 size_t)))))

;; mk
(declare-fun mk1 ((_ BitVec 64)
  (_ BitVec 64)) t1)

;; mk_def
(assert
  (forall ((f (_ BitVec 64)) (l (_ BitVec 64)))
    (! (and
         (= (to_rep2 (rec__first1 (mk1 f l))) f)
         (= (to_rep2 (rec__last1 (mk1 f l))) l)) :pattern ((mk1 f l)) )))

;; dynamic_property
(define-fun dynamic_property1 ((range_first (_ BitVec 64)) (range_last (_ BitVec 64)) (low (_ BitVec 64)) (high (_ BitVec 64))) Bool
  true)

(declare-datatypes ((us_t1 0))
  (((us_tqtmk1 (elts1 (Array (_ BitVec 64) char1))(rt1 t1)))))

;; to_array
(define-fun to_array1 ((a us_t1)) (Array (_ BitVec 64) char1)
  (elts1 a))

;; of_array
(define-fun of_array1 ((a (Array (_ BitVec 64) char1)) (f (_ BitVec 64)) (l (_ BitVec 64))) us_t1
  (us_tqtmk1 a (mk1 f l)))

;; first
(define-fun first1 ((a us_t1)) (_ BitVec 64)
  (to_rep2 (rec__first1 (rt1 a))))

;; last
(define-fun last1 ((a us_t1)) (_ BitVec 64)
  (to_rep2 (rec__last1 (rt1 a))))

;; length
(define-fun length2 ((a us_t1)) Int
  (ite (bvule (first1 a) (last1 a))
    (+ (- (bv2nat (last1 a)) (bv2nat (first1 a))) 1)
    0))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const component__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
(assert (<= 0 value__size1))

;; object__size_axiom
(assert (<= 0 object__size1))

;; component__size_axiom
(assert (<= 0 component__size1))

;; alignment_axiom
(assert (<= 0 alignment1))

;; bool_eq
(define-fun bool_eq12 ((x us_t1) (y us_t1)) Bool
  (bool_eq11
    (elts1 x)
    (to_rep2 (rec__first1 (rt1 x)))
    (to_rep2 (rec__last1 (rt1 x)))
    (elts1 y)
    (to_rep2 (rec__first1 (rt1 y)))
    (to_rep2 (rec__last1 (rt1 y)))))

;; user_eq
(declare-fun user_eq7 (us_t1
  us_t1) Bool)

(declare-const dummy7 us_t1)

(declare-datatypes ((char_array__ref 0))
  (((char_array__refqtmk (char_array__content us_t1)))))

;; char_array__ref_char_array__content__projection
(define-fun char_array__ref_char_array__content__projection ((a char_array__ref)) us_t1
  (char_array__content a))

(declare-const item us_t)

(declare-datatypes ((char__init_wrapper 0))
  (((char__init_wrapperqtmk (rec__value char1)(us_attr__init Bool)))))

;; char__init_wrapper_rec__value__projection
(define-fun char__init_wrapper_rec__value__projection ((a char__init_wrapper)) char1
  (rec__value a))

;; char__init_wrapper___attr__init__projection
(define-fun char__init_wrapper___attr__init__projection ((a char__init_wrapper)) Bool
  (us_attr__init a))

(declare-const dummy8 char__init_wrapper)

;; dummy__def
(assert (= (us_attr__init dummy8) false))

(declare-datatypes ((char__init_wrapper__ref 0))
  (((char__init_wrapper__refqtmk
    (char__init_wrapper__content char__init_wrapper)))))

;; char__init_wrapper__ref_char__init_wrapper__content__projection
(define-fun char__init_wrapper__ref_char__init_wrapper__content__projection 
  ((a char__init_wrapper__ref)) char__init_wrapper
  (char__init_wrapper__content a))

(declare-datatypes ((map__ref2 0))
  (((map__refqtmk2 (map__content2 (Array (_ BitVec 64) char__init_wrapper))))))

;; slide
(declare-fun slide2 ((Array (_ BitVec 64) char__init_wrapper)
  (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) char__init_wrapper))

;; slide_eq
(assert
  (forall ((a (Array (_ BitVec 64) char__init_wrapper)))
    (forall ((first2 (_ BitVec 64)))
      (! (= (slide2 a first2 first2) a) :pattern ((slide2 a first2 first2)) ))))

;; slide_def
(assert
  (forall ((a (Array (_ BitVec 64) char__init_wrapper)))
    (forall ((old_first (_ BitVec 64)))
      (forall ((new_first (_ BitVec 64)))
        (forall ((i (_ BitVec 64)))
          (! (= (select (slide2 a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select 
          (slide2
            a
            old_first
            new_first) i)) ))))))

;; const
(declare-fun const3 (char__init_wrapper) (Array (_ BitVec 64) char__init_wrapper))

;; const_def
(assert
  (forall ((v char__init_wrapper))
    (forall ((i (_ BitVec 64)))
      (! (= (select (const3 v) i) v) :pattern ((select (const3 v) i)) ))))

(declare-const target__first size_t)

(declare-const target__last size_t)

(declare-const append_nul Bool)

;; dynamic_invariant
(define-fun dynamic_invariant3 ((temp___expr_312 (_ BitVec 64)) (temp___is_init_308 Bool) (temp___skip_constant_309 Bool) (temp___do_toplevel_310 Bool) (temp___do_typ_inv_311 Bool)) Bool
  true)

;; array_bool_eq
(declare-fun array_bool_eq ((Array (_ BitVec 64) char__init_wrapper)
  (_ BitVec 64)
  (_ BitVec 64)
  (Array (_ BitVec 64) char__init_wrapper)
  (_ BitVec 64)
  (_ BitVec 64)) Bool)

(declare-datatypes ((t2 0))
  (((tqtmk2 (rec__first2 size_t)(rec__last2 size_t)))))

;; mk
(declare-fun mk2 ((_ BitVec 64)
  (_ BitVec 64)) t2)

;; mk_def
(assert
  (forall ((f (_ BitVec 64)) (l (_ BitVec 64)))
    (! (and
         (= (to_rep2 (rec__first2 (mk2 f l))) f)
         (= (to_rep2 (rec__last2 (mk2 f l))) l)) :pattern ((mk2 f l)) )))

;; dynamic_property
(define-fun dynamic_property2 ((range_first (_ BitVec 64)) (range_last (_ BitVec 64)) (low (_ BitVec 64)) (high (_ BitVec 64))) Bool
  true)

(declare-datatypes ((us_t2 0))
  (((us_tqtmk2 (elts2 (Array (_ BitVec 64) char__init_wrapper))(rt2 t2)))))

;; to_array
(define-fun to_array2 ((a us_t2)) (Array (_ BitVec 64) char__init_wrapper)
  (elts2 a))

;; of_array
(define-fun of_array2 ((a (Array (_ BitVec 64) char__init_wrapper)) (f (_ BitVec 64)) (l (_ BitVec 64))) us_t2
  (us_tqtmk2 a (mk2 f l)))

;; first
(define-fun first2 ((a us_t2)) (_ BitVec 64)
  (to_rep2 (rec__first2 (rt2 a))))

;; last
(define-fun last2 ((a us_t2)) (_ BitVec 64)
  (to_rep2 (rec__last2 (rt2 a))))

;; length
(define-fun length3 ((a us_t2)) Int
  (ite (bvule (first2 a) (last2 a))
    (+ (- (bv2nat (last2 a)) (bv2nat (first2 a))) 1)
    0))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const component__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
(assert (<= 0 value__size2))

;; object__size_axiom
(assert (<= 0 object__size2))

;; component__size_axiom
(assert (<= 0 component__size2))

;; alignment_axiom
(assert (<= 0 alignment2))

;; bool_eq
(define-fun bool_eq13 ((x us_t2) (y us_t2)) Bool
  (array_bool_eq
    (elts2 x)
    (to_rep2 (rec__first2 (rt2 x)))
    (to_rep2 (rec__last2 (rt2 x)))
    (elts2 y)
    (to_rep2 (rec__first2 (rt2 y)))
    (to_rep2 (rec__last2 (rt2 y)))))

;; user_eq
(declare-fun user_eq8 (us_t2
  us_t2) Bool)

(declare-const dummy9 us_t2)

(declare-datatypes ((char_array__init_wrapper__ref 0))
  (((char_array__init_wrapper__refqtmk
    (char_array__init_wrapper__content us_t2)))))

;; char_array__init_wrapper__ref_char_array__init_wrapper__content__projection
(define-fun char_array__init_wrapper__ref_char_array__init_wrapper__content__projection 
  ((a char_array__init_wrapper__ref)) us_t2
  (char_array__init_wrapper__content a))

(declare-datatypes ((t71s__init_wrapper__ref 0))
  (((t71s__init_wrapper__refqtmk (t71s__init_wrapper__content us_t2)))))

;; t71s__init_wrapper__ref_t71s__init_wrapper__content__projection
(define-fun t71s__init_wrapper__ref_t71s__init_wrapper__content__projection 
  ((a t71s__init_wrapper__ref)) us_t2
  (t71s__init_wrapper__content a))

(declare-datatypes ((s260b__init_wrapper__ref 0))
  (((s260b__init_wrapper__refqtmk (s260b__init_wrapper__content us_t2)))))

;; s260b__init_wrapper__ref_s260b__init_wrapper__content__projection
(define-fun s260b__init_wrapper__ref_s260b__init_wrapper__content__projection 
  ((a s260b__init_wrapper__ref)) us_t2
  (s260b__init_wrapper__content a))

;; dynamic_property
(define-fun dynamic_property3 ((first_int Int) (last_int Int) (x Int)) Bool
  (and (<= first_int x) (<= x last_int)))

;; bool_eq
(define-fun bool_eq14 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

;; user_eq
(declare-fun user_eq9 (integer
  integer) Bool)

(declare-const dummy10 integer)

(declare-datatypes ((t261b__ref 0))
  (((t261b__refqtmk (t261b__content integer)))))

;; t261b__ref_t261b__content__projection
(define-fun t261b__ref_t261b__content__projection ((a t261b__ref)) integer
  (t261b__content a))

(declare-datatypes ((t269b__init_wrapper__ref 0))
  (((t269b__init_wrapper__refqtmk (t269b__init_wrapper__content us_t2)))))

;; t269b__init_wrapper__ref_t269b__init_wrapper__content__projection
(define-fun t269b__init_wrapper__ref_t269b__init_wrapper__content__projection 
  ((a t269b__init_wrapper__ref)) us_t2
  (t269b__init_wrapper__content a))

;; dynamic_invariant
(define-fun dynamic_invariant4 ((temp___expr_53 Int) (temp___is_init_49 Bool) (temp___skip_constant_50 Bool) (temp___do_toplevel_51 Bool) (temp___do_typ_inv_52 Bool)) Bool
  (=>
    (or (= temp___is_init_49 true) (<= 1 2147483647))
    (in_range3 temp___expr_53)))

;; dynamic_invariant
(define-fun dynamic_invariant5 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool
  (=>
    (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647))
    (in_range1 temp___expr_18)))

;; dynamic_invariant
(define-fun dynamic_invariant6 ((temp___expr_177 Int) (temp___is_init_173 Bool) (temp___skip_constant_174 Bool) (temp___do_toplevel_175 Bool) (temp___do_typ_inv_176 Bool)) Bool
  (=>
    (or
      (= temp___is_init_173 true)
      (<= (- 170141183460469231731687303715884105728) 170141183460469231731687303715884105727))
    (in_range4 temp___expr_177)))

;; dynamic_invariant
(define-fun dynamic_invariant7 ((temp___expr_361 us_t1) (temp___is_init_357 Bool) (temp___skip_constant_358 Bool) (temp___do_toplevel_359 Bool) (temp___do_typ_inv_360 Bool)) Bool
  (=>
    (not (= temp___skip_constant_358 true))
    (dynamic_property1
      #x0000000000000000
      #xFFFFFFFFFFFFFFFF
      (first1 temp___expr_361)
      (last1 temp___expr_361))))

(declare-datatypes ((s260b__ref 0))
  (((s260b__refqtmk (s260b__content us_t1)))))

;; s260b__ref_s260b__content__projection
(define-fun s260b__ref_s260b__content__projection ((a s260b__ref)) us_t1
  (s260b__content a))

;; dynamic_invariant
(define-fun dynamic_invariant8 ((temp___expr_892 us_t1) (temp___is_init_888 Bool) (temp___skip_constant_889 Bool) (temp___do_toplevel_890 Bool) (temp___do_typ_inv_891 Bool)) Bool
  (=>
    (not (= temp___skip_constant_889 true))
    (and
      (and
        (dynamic_property1
          (to_rep2 target__first)
          (to_rep2 target__last)
          (first1 temp___expr_892)
          (last1 temp___expr_892))
        (= (first1 temp___expr_892) (to_rep2 target__first)))
      (= (last1 temp___expr_892) (to_rep2 target__last)))))

;; default_initial_assumption
(define-fun default_initial_assumption ((temp___expr_894 us_t1) (temp___skip_top_level_895 Bool)) Bool
  (and
    (= (first1 temp___expr_894) (to_rep2 target__first))
    (= (last1 temp___expr_894) (to_rep2 target__last))))

(declare-const target (Array (_ BitVec 64) char__init_wrapper))

(declare-const count (_ BitVec 64))

(declare-const to__ (_ BitVec 64))

;; Assume
(assert (dynamic_invariant item true false true true))

;; Assume
(assert
  (dynamic_property1
    #x0000000000000000
    #xFFFFFFFFFFFFFFFF
    (first2
      (of_array2 target (to_rep2 target__first) (to_rep2 target__last)))
    (last2 (of_array2 target (to_rep2 target__first) (to_rep2 target__last)))))

;; Assume
(assert (dynamic_invariant3 count false false true true))

;; Assume
(assert
  (<= (ite (= append_nul true) (+ (length1 item) 1) (length1 item)) (length
                                                                    (bv2nat 
                                                                    (to_rep2
                                                                    target__first))
                                                                    (bv2nat 
                                                                    (to_rep2
                                                                    target__last)))))

;; Assume
(assert true)

;; Assume
(assert (dynamic_invariant3 to__ false false true true))

;; Ensures
(assert
  (in_range4
    (length (bv2nat (to_rep2 target__first)) (bv2nat (to_rep2 target__last)))))

(declare-const spark__branch Bool)

;; H
(assert
  (= spark__branch (ite (< (length
                             (bv2nat (to_rep2 target__first))
                             (bv2nat (to_rep2 target__last))) (length1 item))
                     true
                     false)))

;; H
(assert (not (= spark__branch true)))

(declare-const to__1 (_ BitVec 64))

;; H
(assert (= to__1 (to_rep2 target__first)))

(declare-const from Int)

;; H
(assert (= from (first item)))

;; H
(assert
  (= (and (ite (<= (first item) from) true false) (ite (<= from (last item))
                                                    true
                                                    false)) true))

(declare-const o char1)

;; Ensures
(assert (= (to_rep3 o) (to_rep (select (to_array item) from))))

;; Assert
(assert
  (and
    (bvule (first2
             (of_array2
               target
               (to_rep2 target__first)
               (to_rep2 target__last))) to__1)
    (bvule to__1 (last2
                   (of_array2
                     target
                     (to_rep2 target__first)
                     (to_rep2 target__last))))))

(declare-const target1 (Array (_ BitVec 64) char__init_wrapper))

;; H
(assert
  (= target1 (to_array2
               (us_tqtmk2
                 (store (to_array2
                          (of_array2
                            target
                            (to_rep2 target__first)
                            (to_rep2 target__last))) to__1 (char__init_wrapperqtmk
                                                             o
                                                             true))
                 (rt2
                   (of_array2
                     target
                     (to_rep2 target__first)
                     (to_rep2 target__last)))))))

(declare-const target2 (Array (_ BitVec 64) char__init_wrapper))

(declare-const to__2 (_ BitVec 64))

(declare-const from1 Int)

;; LoopInvariant
(assert
  (and
    (bvule (to_rep2 target__first) to__2)
    (bvule to__2 (to_rep2 target__last))))

;; LoopInvariant
(assert
  (= (bvsub to__2 (to_rep2 target__first)) ((_ int2bv 64) (- from1 (first
                                                                    item)))))

;; LoopInvariant
(assert
  (forall ((j (_ BitVec 64)))
    (=>
      (and (bvule (to_rep2 target__first) j) (bvule j to__2))
      (= (us_attr__init
           (select (to_array2
                     (of_array2
                       target2
                       (to_rep2 target__first)
                       (to_rep2 target__last))) j)) true))))

;; LoopInvariant
(assert
  (let ((temp___1256 (of_array2
                       (to_array2
                         (of_array2
                           target2
                           (to_rep2 target__first)
                           (to_rep2 target__last)))
                       (to_rep2 target__first)
                       to__2)))
    (forall ((temp___1257 (_ BitVec 64)))
      (=>
        (and
          (bvule (first2 temp___1256) temp___1257)
          (bvule temp___1257 (last2 temp___1256)))
        (= (us_attr__init (select (to_array2 temp___1256) temp___1257)) true)))))

;; LoopInvariant
(assert
  (forall ((j Int))
    (=>
      (and (<= (first item) j) (<= j from1))
      (and
        (forall ((j1 Int))
          (to_c__function_guard
            (to_c (to_rep (select (to_array item) j1)))
            (to_rep (select (to_array item) j1))))
        (= (to_rep3
             (rec__value
               (select (to_array2
                         (of_array2
                           target2
                           (to_rep2 target__first)
                           (to_rep2 target__last))) (bvadd (to_rep2
                                                             target__first) ((_ int2bv 64) (- j 
               (first
                 item))))))) (to_c (to_rep (select (to_array item) j))))))))

;; H
(assert
  (= (and (ite (and
                 (dynamic_invariant3 to__2 false true true true)
                 (dynamic_property3 (first item) (last item) from1))
            true
            false) (ite (and (<= (first item) from1) (<= from1 (last item)))
                     true
                     false)) true))

(declare-const to__3 (_ BitVec 64))

;; H
(assert (= to__3 (bvadd to__2 #x0000000000000001)))

;; (=)'result'unused'unused
(define-fun lpeqrpqtresultqtunusedqtunused () Bool
  (ite (= from1 (last item)) true false))

;; H
(assert (not (= from1 (last item))))

(declare-const from2 Int)

;; H
(assert (= from2 (+ from1 1)))

(declare-const o1 char1)

;; Ensures
(assert (= (to_rep3 o1) (to_rep (select (to_array item) from2))))

;; Assert
(assert
  (and
    (bvule (first2
             (of_array2
               target2
               (to_rep2 target__first)
               (to_rep2 target__last))) to__3)
    (bvule to__3 (last2
                   (of_array2
                     target2
                     (to_rep2 target__first)
                     (to_rep2 target__last))))))

(declare-const target3 (Array (_ BitVec 64) char__init_wrapper))

;; H
(assert
  (= target3 (to_array2
               (us_tqtmk2
                 (store (to_array2
                          (of_array2
                            target2
                            (to_rep2 target__first)
                            (to_rep2 target__last))) to__3 (char__init_wrapperqtmk
                                                             o1
                                                             true))
                 (rt2
                   (of_array2
                     target2
                     (to_rep2 target__first)
                     (to_rep2 target__last)))))))

;; LoopInvariant
(assert
  (and
    (bvule (to_rep2 target__first) to__3)
    (bvule to__3 (to_rep2 target__last))))

;; Goal def'vc
;; File "i-c.ads", line 182, characters 0-0
(assert
  (not
  (= (bvsub to__3 (to_rep2 target__first)) ((_ int2bv 64) (- from2 (first
                                                                    item))))))

(check-sat)
(exit)
