(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTNIRA)
(set-info :source |
Generated by: Yannick Moy
Generated on: 2022-02-14
Generator: GNATprove
Application: GNAT light runtime library
Target solver: Alt-Ergo, CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)

(define-fun bv2nat8 ((a (_ BitVec 8))) Int
  (+ (+ (+ (+ (+ (+ (+
  (ite (= ((_ extract 0 0) a) (_ bv0 1)) 0 1)
  (ite (= ((_ extract 1 1) a) (_ bv0 1)) 0 2))
  (ite (= ((_ extract 2 2) a) (_ bv0 1)) 0 4))
  (ite (= ((_ extract 3 3) a) (_ bv0 1)) 0 8))
  (ite (= ((_ extract 4 4) a) (_ bv0 1)) 0 16))
  (ite (= ((_ extract 5 5) a) (_ bv0 1)) 0 32))
  (ite (= ((_ extract 6 6) a) (_ bv0 1)) 0 64))
  (ite (= ((_ extract 7 7) a) (_ bv0 1)) 0 128))
)

(define-fun bv2nat16 ((a (_ BitVec 16))) Int
  (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+
  (ite (= ((_ extract 0 0) a) (_ bv0 1)) 0 1)
  (ite (= ((_ extract 1 1) a) (_ bv0 1)) 0 2))
  (ite (= ((_ extract 2 2) a) (_ bv0 1)) 0 4))
  (ite (= ((_ extract 3 3) a) (_ bv0 1)) 0 8))
  (ite (= ((_ extract 4 4) a) (_ bv0 1)) 0 16))
  (ite (= ((_ extract 5 5) a) (_ bv0 1)) 0 32))
  (ite (= ((_ extract 6 6) a) (_ bv0 1)) 0 64))
  (ite (= ((_ extract 7 7) a) (_ bv0 1)) 0 128))
  (ite (= ((_ extract 8 8) a) (_ bv0 1)) 0 256))
  (ite (= ((_ extract 9 9) a) (_ bv0 1)) 0 512))
  (ite (= ((_ extract 10 10) a) (_ bv0 1)) 0 1024))
  (ite (= ((_ extract 11 11) a) (_ bv0 1)) 0 2048))
  (ite (= ((_ extract 12 12) a) (_ bv0 1)) 0 4096))
  (ite (= ((_ extract 13 13) a) (_ bv0 1)) 0 8192))
  (ite (= ((_ extract 14 14) a) (_ bv0 1)) 0 16384))
  (ite (= ((_ extract 15 15) a) (_ bv0 1)) 0 32768))
)

(define-fun bv2nat32 ((a (_ BitVec 32))) Int
  (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+
  (ite (= ((_ extract 0 0) a) (_ bv0 1)) 0 1)
  (ite (= ((_ extract 1 1) a) (_ bv0 1)) 0 2))
  (ite (= ((_ extract 2 2) a) (_ bv0 1)) 0 4))
  (ite (= ((_ extract 3 3) a) (_ bv0 1)) 0 8))
  (ite (= ((_ extract 4 4) a) (_ bv0 1)) 0 16))
  (ite (= ((_ extract 5 5) a) (_ bv0 1)) 0 32))
  (ite (= ((_ extract 6 6) a) (_ bv0 1)) 0 64))
  (ite (= ((_ extract 7 7) a) (_ bv0 1)) 0 128))
  (ite (= ((_ extract 8 8) a) (_ bv0 1)) 0 256))
  (ite (= ((_ extract 9 9) a) (_ bv0 1)) 0 512))
  (ite (= ((_ extract 10 10) a) (_ bv0 1)) 0 1024))
  (ite (= ((_ extract 11 11) a) (_ bv0 1)) 0 2048))
  (ite (= ((_ extract 12 12) a) (_ bv0 1)) 0 4096))
  (ite (= ((_ extract 13 13) a) (_ bv0 1)) 0 8192))
  (ite (= ((_ extract 14 14) a) (_ bv0 1)) 0 16384))
  (ite (= ((_ extract 15 15) a) (_ bv0 1)) 0 32768))
  (ite (= ((_ extract 16 16) a) (_ bv0 1)) 0 65536))
  (ite (= ((_ extract 17 17) a) (_ bv0 1)) 0 131072))
  (ite (= ((_ extract 18 18) a) (_ bv0 1)) 0 262144))
  (ite (= ((_ extract 19 19) a) (_ bv0 1)) 0 524288))
  (ite (= ((_ extract 20 20) a) (_ bv0 1)) 0 1048576))
  (ite (= ((_ extract 21 21) a) (_ bv0 1)) 0 2097152))
  (ite (= ((_ extract 22 22) a) (_ bv0 1)) 0 4194304))
  (ite (= ((_ extract 23 23) a) (_ bv0 1)) 0 8388608))
  (ite (= ((_ extract 24 24) a) (_ bv0 1)) 0 16777216))
  (ite (= ((_ extract 25 25) a) (_ bv0 1)) 0 33554432))
  (ite (= ((_ extract 26 26) a) (_ bv0 1)) 0 67108864))
  (ite (= ((_ extract 27 27) a) (_ bv0 1)) 0 134217728))
  (ite (= ((_ extract 28 28) a) (_ bv0 1)) 0 268435456))
  (ite (= ((_ extract 29 29) a) (_ bv0 1)) 0 536870912))
  (ite (= ((_ extract 30 30) a) (_ bv0 1)) 0 1073741824))
  (ite (= ((_ extract 31 31) a) (_ bv0 1)) 0 2147483648))
)

(define-fun bv2nat64 ((a (_ BitVec 64))) Int
  (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+
  (ite (= ((_ extract 0 0) a) (_ bv0 1)) 0 1)
  (ite (= ((_ extract 1 1) a) (_ bv0 1)) 0 2))
  (ite (= ((_ extract 2 2) a) (_ bv0 1)) 0 4))
  (ite (= ((_ extract 3 3) a) (_ bv0 1)) 0 8))
  (ite (= ((_ extract 4 4) a) (_ bv0 1)) 0 16))
  (ite (= ((_ extract 5 5) a) (_ bv0 1)) 0 32))
  (ite (= ((_ extract 6 6) a) (_ bv0 1)) 0 64))
  (ite (= ((_ extract 7 7) a) (_ bv0 1)) 0 128))
  (ite (= ((_ extract 8 8) a) (_ bv0 1)) 0 256))
  (ite (= ((_ extract 9 9) a) (_ bv0 1)) 0 512))
  (ite (= ((_ extract 10 10) a) (_ bv0 1)) 0 1024))
  (ite (= ((_ extract 11 11) a) (_ bv0 1)) 0 2048))
  (ite (= ((_ extract 12 12) a) (_ bv0 1)) 0 4096))
  (ite (= ((_ extract 13 13) a) (_ bv0 1)) 0 8192))
  (ite (= ((_ extract 14 14) a) (_ bv0 1)) 0 16384))
  (ite (= ((_ extract 15 15) a) (_ bv0 1)) 0 32768))
  (ite (= ((_ extract 16 16) a) (_ bv0 1)) 0 65536))
  (ite (= ((_ extract 17 17) a) (_ bv0 1)) 0 131072))
  (ite (= ((_ extract 18 18) a) (_ bv0 1)) 0 262144))
  (ite (= ((_ extract 19 19) a) (_ bv0 1)) 0 524288))
  (ite (= ((_ extract 20 20) a) (_ bv0 1)) 0 1048576))
  (ite (= ((_ extract 21 21) a) (_ bv0 1)) 0 2097152))
  (ite (= ((_ extract 22 22) a) (_ bv0 1)) 0 4194304))
  (ite (= ((_ extract 23 23) a) (_ bv0 1)) 0 8388608))
  (ite (= ((_ extract 24 24) a) (_ bv0 1)) 0 16777216))
  (ite (= ((_ extract 25 25) a) (_ bv0 1)) 0 33554432))
  (ite (= ((_ extract 26 26) a) (_ bv0 1)) 0 67108864))
  (ite (= ((_ extract 27 27) a) (_ bv0 1)) 0 134217728))
  (ite (= ((_ extract 28 28) a) (_ bv0 1)) 0 268435456))
  (ite (= ((_ extract 29 29) a) (_ bv0 1)) 0 536870912))
  (ite (= ((_ extract 30 30) a) (_ bv0 1)) 0 1073741824))
  (ite (= ((_ extract 31 31) a) (_ bv0 1)) 0 2147483648))
  (ite (= ((_ extract 32 32) a) (_ bv0 1)) 0 4294967296))
  (ite (= ((_ extract 33 33) a) (_ bv0 1)) 0 8589934592))
  (ite (= ((_ extract 34 34) a) (_ bv0 1)) 0 17179869184))
  (ite (= ((_ extract 35 35) a) (_ bv0 1)) 0 34359738368))
  (ite (= ((_ extract 36 36) a) (_ bv0 1)) 0 68719476736))
  (ite (= ((_ extract 37 37) a) (_ bv0 1)) 0 137438953472))
  (ite (= ((_ extract 38 38) a) (_ bv0 1)) 0 274877906944))
  (ite (= ((_ extract 39 39) a) (_ bv0 1)) 0 549755813888))
  (ite (= ((_ extract 40 40) a) (_ bv0 1)) 0 1099511627776))
  (ite (= ((_ extract 41 41) a) (_ bv0 1)) 0 2199023255552))
  (ite (= ((_ extract 42 42) a) (_ bv0 1)) 0 4398046511104))
  (ite (= ((_ extract 43 43) a) (_ bv0 1)) 0 8796093022208))
  (ite (= ((_ extract 44 44) a) (_ bv0 1)) 0 17592186044416))
  (ite (= ((_ extract 45 45) a) (_ bv0 1)) 0 35184372088832))
  (ite (= ((_ extract 46 46) a) (_ bv0 1)) 0 70368744177664))
  (ite (= ((_ extract 47 47) a) (_ bv0 1)) 0 140737488355328))
  (ite (= ((_ extract 48 48) a) (_ bv0 1)) 0 281474976710656))
  (ite (= ((_ extract 49 49) a) (_ bv0 1)) 0 562949953421312))
  (ite (= ((_ extract 50 50) a) (_ bv0 1)) 0 1125899906842624))
  (ite (= ((_ extract 51 51) a) (_ bv0 1)) 0 2251799813685248))
  (ite (= ((_ extract 52 52) a) (_ bv0 1)) 0 4503599627370496))
  (ite (= ((_ extract 53 53) a) (_ bv0 1)) 0 9007199254740992))
  (ite (= ((_ extract 54 54) a) (_ bv0 1)) 0 18014398509481984))
  (ite (= ((_ extract 55 55) a) (_ bv0 1)) 0 36028797018963968))
  (ite (= ((_ extract 56 56) a) (_ bv0 1)) 0 72057594037927936))
  (ite (= ((_ extract 57 57) a) (_ bv0 1)) 0 144115188075855872))
  (ite (= ((_ extract 58 58) a) (_ bv0 1)) 0 288230376151711744))
  (ite (= ((_ extract 59 59) a) (_ bv0 1)) 0 576460752303423488))
  (ite (= ((_ extract 60 60) a) (_ bv0 1)) 0 1152921504606846976))
  (ite (= ((_ extract 61 61) a) (_ bv0 1)) 0 2305843009213693952))
  (ite (= ((_ extract 62 62) a) (_ bv0 1)) 0 4611686018427387904))
  (ite (= ((_ extract 63 63) a) (_ bv0 1)) 0 9223372036854775808))
)

(define-fun bv2nat128 ((a (_ BitVec 128))) Int
  (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+
  (ite (= ((_ extract 0 0) a) (_ bv0 1)) 0 1)
  (ite (= ((_ extract 1 1) a) (_ bv0 1)) 0 2))
  (ite (= ((_ extract 2 2) a) (_ bv0 1)) 0 4))
  (ite (= ((_ extract 3 3) a) (_ bv0 1)) 0 8))
  (ite (= ((_ extract 4 4) a) (_ bv0 1)) 0 16))
  (ite (= ((_ extract 5 5) a) (_ bv0 1)) 0 32))
  (ite (= ((_ extract 6 6) a) (_ bv0 1)) 0 64))
  (ite (= ((_ extract 7 7) a) (_ bv0 1)) 0 128))
  (ite (= ((_ extract 8 8) a) (_ bv0 1)) 0 256))
  (ite (= ((_ extract 9 9) a) (_ bv0 1)) 0 512))
  (ite (= ((_ extract 10 10) a) (_ bv0 1)) 0 1024))
  (ite (= ((_ extract 11 11) a) (_ bv0 1)) 0 2048))
  (ite (= ((_ extract 12 12) a) (_ bv0 1)) 0 4096))
  (ite (= ((_ extract 13 13) a) (_ bv0 1)) 0 8192))
  (ite (= ((_ extract 14 14) a) (_ bv0 1)) 0 16384))
  (ite (= ((_ extract 15 15) a) (_ bv0 1)) 0 32768))
  (ite (= ((_ extract 16 16) a) (_ bv0 1)) 0 65536))
  (ite (= ((_ extract 17 17) a) (_ bv0 1)) 0 131072))
  (ite (= ((_ extract 18 18) a) (_ bv0 1)) 0 262144))
  (ite (= ((_ extract 19 19) a) (_ bv0 1)) 0 524288))
  (ite (= ((_ extract 20 20) a) (_ bv0 1)) 0 1048576))
  (ite (= ((_ extract 21 21) a) (_ bv0 1)) 0 2097152))
  (ite (= ((_ extract 22 22) a) (_ bv0 1)) 0 4194304))
  (ite (= ((_ extract 23 23) a) (_ bv0 1)) 0 8388608))
  (ite (= ((_ extract 24 24) a) (_ bv0 1)) 0 16777216))
  (ite (= ((_ extract 25 25) a) (_ bv0 1)) 0 33554432))
  (ite (= ((_ extract 26 26) a) (_ bv0 1)) 0 67108864))
  (ite (= ((_ extract 27 27) a) (_ bv0 1)) 0 134217728))
  (ite (= ((_ extract 28 28) a) (_ bv0 1)) 0 268435456))
  (ite (= ((_ extract 29 29) a) (_ bv0 1)) 0 536870912))
  (ite (= ((_ extract 30 30) a) (_ bv0 1)) 0 1073741824))
  (ite (= ((_ extract 31 31) a) (_ bv0 1)) 0 2147483648))
  (ite (= ((_ extract 32 32) a) (_ bv0 1)) 0 4294967296))
  (ite (= ((_ extract 33 33) a) (_ bv0 1)) 0 8589934592))
  (ite (= ((_ extract 34 34) a) (_ bv0 1)) 0 17179869184))
  (ite (= ((_ extract 35 35) a) (_ bv0 1)) 0 34359738368))
  (ite (= ((_ extract 36 36) a) (_ bv0 1)) 0 68719476736))
  (ite (= ((_ extract 37 37) a) (_ bv0 1)) 0 137438953472))
  (ite (= ((_ extract 38 38) a) (_ bv0 1)) 0 274877906944))
  (ite (= ((_ extract 39 39) a) (_ bv0 1)) 0 549755813888))
  (ite (= ((_ extract 40 40) a) (_ bv0 1)) 0 1099511627776))
  (ite (= ((_ extract 41 41) a) (_ bv0 1)) 0 2199023255552))
  (ite (= ((_ extract 42 42) a) (_ bv0 1)) 0 4398046511104))
  (ite (= ((_ extract 43 43) a) (_ bv0 1)) 0 8796093022208))
  (ite (= ((_ extract 44 44) a) (_ bv0 1)) 0 17592186044416))
  (ite (= ((_ extract 45 45) a) (_ bv0 1)) 0 35184372088832))
  (ite (= ((_ extract 46 46) a) (_ bv0 1)) 0 70368744177664))
  (ite (= ((_ extract 47 47) a) (_ bv0 1)) 0 140737488355328))
  (ite (= ((_ extract 48 48) a) (_ bv0 1)) 0 281474976710656))
  (ite (= ((_ extract 49 49) a) (_ bv0 1)) 0 562949953421312))
  (ite (= ((_ extract 50 50) a) (_ bv0 1)) 0 1125899906842624))
  (ite (= ((_ extract 51 51) a) (_ bv0 1)) 0 2251799813685248))
  (ite (= ((_ extract 52 52) a) (_ bv0 1)) 0 4503599627370496))
  (ite (= ((_ extract 53 53) a) (_ bv0 1)) 0 9007199254740992))
  (ite (= ((_ extract 54 54) a) (_ bv0 1)) 0 18014398509481984))
  (ite (= ((_ extract 55 55) a) (_ bv0 1)) 0 36028797018963968))
  (ite (= ((_ extract 56 56) a) (_ bv0 1)) 0 72057594037927936))
  (ite (= ((_ extract 57 57) a) (_ bv0 1)) 0 144115188075855872))
  (ite (= ((_ extract 58 58) a) (_ bv0 1)) 0 288230376151711744))
  (ite (= ((_ extract 59 59) a) (_ bv0 1)) 0 576460752303423488))
  (ite (= ((_ extract 60 60) a) (_ bv0 1)) 0 1152921504606846976))
  (ite (= ((_ extract 61 61) a) (_ bv0 1)) 0 2305843009213693952))
  (ite (= ((_ extract 62 62) a) (_ bv0 1)) 0 4611686018427387904))
  (ite (= ((_ extract 63 63) a) (_ bv0 1)) 0 9223372036854775808))
  (ite (= ((_ extract 64 64) a) (_ bv0 1)) 0 18446744073709551616))
  (ite (= ((_ extract 65 65) a) (_ bv0 1)) 0 36893488147419103232))
  (ite (= ((_ extract 66 66) a) (_ bv0 1)) 0 73786976294838206464))
  (ite (= ((_ extract 67 67) a) (_ bv0 1)) 0 147573952589676412928))
  (ite (= ((_ extract 68 68) a) (_ bv0 1)) 0 295147905179352825856))
  (ite (= ((_ extract 69 69) a) (_ bv0 1)) 0 590295810358705651712))
  (ite (= ((_ extract 70 70) a) (_ bv0 1)) 0 1180591620717411303424))
  (ite (= ((_ extract 71 71) a) (_ bv0 1)) 0 2361183241434822606848))
  (ite (= ((_ extract 72 72) a) (_ bv0 1)) 0 4722366482869645213696))
  (ite (= ((_ extract 73 73) a) (_ bv0 1)) 0 9444732965739290427392))
  (ite (= ((_ extract 74 74) a) (_ bv0 1)) 0 18889465931478580854784))
  (ite (= ((_ extract 75 75) a) (_ bv0 1)) 0 37778931862957161709568))
  (ite (= ((_ extract 76 76) a) (_ bv0 1)) 0 75557863725914323419136))
  (ite (= ((_ extract 77 77) a) (_ bv0 1)) 0 151115727451828646838272))
  (ite (= ((_ extract 78 78) a) (_ bv0 1)) 0 302231454903657293676544))
  (ite (= ((_ extract 79 79) a) (_ bv0 1)) 0 604462909807314587353088))
  (ite (= ((_ extract 80 80) a) (_ bv0 1)) 0 1208925819614629174706176))
  (ite (= ((_ extract 81 81) a) (_ bv0 1)) 0 2417851639229258349412352))
  (ite (= ((_ extract 82 82) a) (_ bv0 1)) 0 4835703278458516698824704))
  (ite (= ((_ extract 83 83) a) (_ bv0 1)) 0 9671406556917033397649408))
  (ite (= ((_ extract 84 84) a) (_ bv0 1)) 0 19342813113834066795298816))
  (ite (= ((_ extract 85 85) a) (_ bv0 1)) 0 38685626227668133590597632))
  (ite (= ((_ extract 86 86) a) (_ bv0 1)) 0 77371252455336267181195264))
  (ite (= ((_ extract 87 87) a) (_ bv0 1)) 0 154742504910672534362390528))
  (ite (= ((_ extract 88 88) a) (_ bv0 1)) 0 309485009821345068724781056))
  (ite (= ((_ extract 89 89) a) (_ bv0 1)) 0 618970019642690137449562112))
  (ite (= ((_ extract 90 90) a) (_ bv0 1)) 0 1237940039285380274899124224))
  (ite (= ((_ extract 91 91) a) (_ bv0 1)) 0 2475880078570760549798248448))
  (ite (= ((_ extract 92 92) a) (_ bv0 1)) 0 4951760157141521099596496896))
  (ite (= ((_ extract 93 93) a) (_ bv0 1)) 0 9903520314283042199192993792))
  (ite (= ((_ extract 94 94) a) (_ bv0 1)) 0 19807040628566084398385987584))
  (ite (= ((_ extract 95 95) a) (_ bv0 1)) 0 39614081257132168796771975168))
  (ite (= ((_ extract 96 96) a) (_ bv0 1)) 0 79228162514264337593543950336))
  (ite (= ((_ extract 97 97) a) (_ bv0 1)) 0 158456325028528675187087900672))
  (ite (= ((_ extract 98 98) a) (_ bv0 1)) 0 316912650057057350374175801344))
  (ite (= ((_ extract 99 99) a) (_ bv0 1)) 0 633825300114114700748351602688))
  (ite (= ((_ extract 100 100) a) (_ bv0 1)) 0 1267650600228229401496703205376))
  (ite (= ((_ extract 101 101) a) (_ bv0 1)) 0 2535301200456458802993406410752))
  (ite (= ((_ extract 102 102) a) (_ bv0 1)) 0 5070602400912917605986812821504))
  (ite (= ((_ extract 103 103) a) (_ bv0 1)) 0 10141204801825835211973625643008))
  (ite (= ((_ extract 104 104) a) (_ bv0 1)) 0 20282409603651670423947251286016))
  (ite (= ((_ extract 105 105) a) (_ bv0 1)) 0 40564819207303340847894502572032))
  (ite (= ((_ extract 106 106) a) (_ bv0 1)) 0 81129638414606681695789005144064))
  (ite (= ((_ extract 107 107) a) (_ bv0 1)) 0 162259276829213363391578010288128))
  (ite (= ((_ extract 108 108) a) (_ bv0 1)) 0 324518553658426726783156020576256))
  (ite (= ((_ extract 109 109) a) (_ bv0 1)) 0 649037107316853453566312041152512))
  (ite (= ((_ extract 110 110) a) (_ bv0 1)) 0 1298074214633706907132624082305024))
  (ite (= ((_ extract 111 111) a) (_ bv0 1)) 0 2596148429267413814265248164610048))
  (ite (= ((_ extract 112 112) a) (_ bv0 1)) 0 5192296858534827628530496329220096))
  (ite (= ((_ extract 113 113) a) (_ bv0 1)) 0 10384593717069655257060992658440192))
  (ite (= ((_ extract 114 114) a) (_ bv0 1)) 0 20769187434139310514121985316880384))
  (ite (= ((_ extract 115 115) a) (_ bv0 1)) 0 41538374868278621028243970633760768))
  (ite (= ((_ extract 116 116) a) (_ bv0 1)) 0 83076749736557242056487941267521536))
  (ite (= ((_ extract 117 117) a) (_ bv0 1)) 0 166153499473114484112975882535043072))
  (ite (= ((_ extract 118 118) a) (_ bv0 1)) 0 332306998946228968225951765070086144))
  (ite (= ((_ extract 119 119) a) (_ bv0 1)) 0 664613997892457936451903530140172288))
  (ite (= ((_ extract 120 120) a) (_ bv0 1)) 0 1329227995784915872903807060280344576))
  (ite (= ((_ extract 121 121) a) (_ bv0 1)) 0 2658455991569831745807614120560689152))
  (ite (= ((_ extract 122 122) a) (_ bv0 1)) 0 5316911983139663491615228241121378304))
  (ite (= ((_ extract 123 123) a) (_ bv0 1)) 0 10633823966279326983230456482242756608))
  (ite (= ((_ extract 124 124) a) (_ bv0 1)) 0 21267647932558653966460912964485513216))
  (ite (= ((_ extract 125 125) a) (_ bv0 1)) 0 42535295865117307932921825928971026432))
  (ite (= ((_ extract 126 126) a) (_ bv0 1)) 0 85070591730234615865843651857942052864))
  (ite (= ((_ extract 127 127) a) (_ bv0 1)) 0 170141183460469231731687303715884105728))
)

(define-fun bv2nat256 ((a (_ BitVec 256))) Int

  (ite (= ((_ extract 0 0) a) (_ bv0 1)) 0 1)
  (ite (= ((_ extract 1 1) a) (_ bv0 1)) 0 2))
  (ite (= ((_ extract 2 2) a) (_ bv0 1)) 0 4))
  (ite (= ((_ extract 3 3) a) (_ bv0 1)) 0 8))
  (ite (= ((_ extract 4 4) a) (_ bv0 1)) 0 16))
  (ite (= ((_ extract 5 5) a) (_ bv0 1)) 0 32))
  (ite (= ((_ extract 6 6) a) (_ bv0 1)) 0 64))
  (ite (= ((_ extract 7 7) a) (_ bv0 1)) 0 128))
  (ite (= ((_ extract 8 8) a) (_ bv0 1)) 0 256))
  (ite (= ((_ extract 9 9) a) (_ bv0 1)) 0 512))
  (ite (= ((_ extract 10 10) a) (_ bv0 1)) 0 1024))
  (ite (= ((_ extract 11 11) a) (_ bv0 1)) 0 2048))
  (ite (= ((_ extract 12 12) a) (_ bv0 1)) 0 4096))
  (ite (= ((_ extract 13 13) a) (_ bv0 1)) 0 8192))
  (ite (= ((_ extract 14 14) a) (_ bv0 1)) 0 16384))
  (ite (= ((_ extract 15 15) a) (_ bv0 1)) 0 32768))
  (ite (= ((_ extract 16 16) a) (_ bv0 1)) 0 65536))
  (ite (= ((_ extract 17 17) a) (_ bv0 1)) 0 131072))
  (ite (= ((_ extract 18 18) a) (_ bv0 1)) 0 262144))
  (ite (= ((_ extract 19 19) a) (_ bv0 1)) 0 524288))
  (ite (= ((_ extract 20 20) a) (_ bv0 1)) 0 1048576))
  (ite (= ((_ extract 21 21) a) (_ bv0 1)) 0 2097152))
  (ite (= ((_ extract 22 22) a) (_ bv0 1)) 0 4194304))
  (ite (= ((_ extract 23 23) a) (_ bv0 1)) 0 8388608))
  (ite (= ((_ extract 24 24) a) (_ bv0 1)) 0 16777216))
  (ite (= ((_ extract 25 25) a) (_ bv0 1)) 0 33554432))
  (ite (= ((_ extract 26 26) a) (_ bv0 1)) 0 67108864))
  (ite (= ((_ extract 27 27) a) (_ bv0 1)) 0 134217728))
  (ite (= ((_ extract 28 28) a) (_ bv0 1)) 0 268435456))
  (ite (= ((_ extract 29 29) a) (_ bv0 1)) 0 536870912))
  (ite (= ((_ extract 30 30) a) (_ bv0 1)) 0 1073741824))
  (ite (= ((_ extract 31 31) a) (_ bv0 1)) 0 2147483648))
  (ite (= ((_ extract 32 32) a) (_ bv0 1)) 0 4294967296))
  (ite (= ((_ extract 33 33) a) (_ bv0 1)) 0 8589934592))
  (ite (= ((_ extract 34 34) a) (_ bv0 1)) 0 17179869184))
  (ite (= ((_ extract 35 35) a) (_ bv0 1)) 0 34359738368))
  (ite (= ((_ extract 36 36) a) (_ bv0 1)) 0 68719476736))
  (ite (= ((_ extract 37 37) a) (_ bv0 1)) 0 137438953472))
  (ite (= ((_ extract 38 38) a) (_ bv0 1)) 0 274877906944))
  (ite (= ((_ extract 39 39) a) (_ bv0 1)) 0 549755813888))
  (ite (= ((_ extract 40 40) a) (_ bv0 1)) 0 1099511627776))
  (ite (= ((_ extract 41 41) a) (_ bv0 1)) 0 2199023255552))
  (ite (= ((_ extract 42 42) a) (_ bv0 1)) 0 4398046511104))
  (ite (= ((_ extract 43 43) a) (_ bv0 1)) 0 8796093022208))
  (ite (= ((_ extract 44 44) a) (_ bv0 1)) 0 17592186044416))
  (ite (= ((_ extract 45 45) a) (_ bv0 1)) 0 35184372088832))
  (ite (= ((_ extract 46 46) a) (_ bv0 1)) 0 70368744177664))
  (ite (= ((_ extract 47 47) a) (_ bv0 1)) 0 140737488355328))
  (ite (= ((_ extract 48 48) a) (_ bv0 1)) 0 281474976710656))
  (ite (= ((_ extract 49 49) a) (_ bv0 1)) 0 562949953421312))
  (ite (= ((_ extract 50 50) a) (_ bv0 1)) 0 1125899906842624))
  (ite (= ((_ extract 51 51) a) (_ bv0 1)) 0 2251799813685248))
  (ite (= ((_ extract 52 52) a) (_ bv0 1)) 0 4503599627370496))
  (ite (= ((_ extract 53 53) a) (_ bv0 1)) 0 9007199254740992))
  (ite (= ((_ extract 54 54) a) (_ bv0 1)) 0 18014398509481984))
  (ite (= ((_ extract 55 55) a) (_ bv0 1)) 0 36028797018963968))
  (ite (= ((_ extract 56 56) a) (_ bv0 1)) 0 72057594037927936))
  (ite (= ((_ extract 57 57) a) (_ bv0 1)) 0 144115188075855872))
  (ite (= ((_ extract 58 58) a) (_ bv0 1)) 0 288230376151711744))
  (ite (= ((_ extract 59 59) a) (_ bv0 1)) 0 576460752303423488))
  (ite (= ((_ extract 60 60) a) (_ bv0 1)) 0 1152921504606846976))
  (ite (= ((_ extract 61 61) a) (_ bv0 1)) 0 2305843009213693952))
  (ite (= ((_ extract 62 62) a) (_ bv0 1)) 0 4611686018427387904))
  (ite (= ((_ extract 63 63) a) (_ bv0 1)) 0 9223372036854775808))
  (ite (= ((_ extract 64 64) a) (_ bv0 1)) 0 18446744073709551616))
  (ite (= ((_ extract 65 65) a) (_ bv0 1)) 0 36893488147419103232))
  (ite (= ((_ extract 66 66) a) (_ bv0 1)) 0 73786976294838206464))
  (ite (= ((_ extract 67 67) a) (_ bv0 1)) 0 147573952589676412928))
  (ite (= ((_ extract 68 68) a) (_ bv0 1)) 0 295147905179352825856))
  (ite (= ((_ extract 69 69) a) (_ bv0 1)) 0 590295810358705651712))
  (ite (= ((_ extract 70 70) a) (_ bv0 1)) 0 1180591620717411303424))
  (ite (= ((_ extract 71 71) a) (_ bv0 1)) 0 2361183241434822606848))
  (ite (= ((_ extract 72 72) a) (_ bv0 1)) 0 4722366482869645213696))
  (ite (= ((_ extract 73 73) a) (_ bv0 1)) 0 9444732965739290427392))
  (ite (= ((_ extract 74 74) a) (_ bv0 1)) 0 18889465931478580854784))
  (ite (= ((_ extract 75 75) a) (_ bv0 1)) 0 37778931862957161709568))
  (ite (= ((_ extract 76 76) a) (_ bv0 1)) 0 75557863725914323419136))
  (ite (= ((_ extract 77 77) a) (_ bv0 1)) 0 151115727451828646838272))
  (ite (= ((_ extract 78 78) a) (_ bv0 1)) 0 302231454903657293676544))
  (ite (= ((_ extract 79 79) a) (_ bv0 1)) 0 604462909807314587353088))
  (ite (= ((_ extract 80 80) a) (_ bv0 1)) 0 1208925819614629174706176))
  (ite (= ((_ extract 81 81) a) (_ bv0 1)) 0 2417851639229258349412352))
  (ite (= ((_ extract 82 82) a) (_ bv0 1)) 0 4835703278458516698824704))
  (ite (= ((_ extract 83 83) a) (_ bv0 1)) 0 9671406556917033397649408))
  (ite (= ((_ extract 84 84) a) (_ bv0 1)) 0 19342813113834066795298816))
  (ite (= ((_ extract 85 85) a) (_ bv0 1)) 0 38685626227668133590597632))
  (ite (= ((_ extract 86 86) a) (_ bv0 1)) 0 77371252455336267181195264))
  (ite (= ((_ extract 87 87) a) (_ bv0 1)) 0 154742504910672534362390528))
  (ite (= ((_ extract 88 88) a) (_ bv0 1)) 0 309485009821345068724781056))
  (ite (= ((_ extract 89 89) a) (_ bv0 1)) 0 618970019642690137449562112))
  (ite (= ((_ extract 90 90) a) (_ bv0 1)) 0 1237940039285380274899124224))
  (ite (= ((_ extract 91 91) a) (_ bv0 1)) 0 2475880078570760549798248448))
  (ite (= ((_ extract 92 92) a) (_ bv0 1)) 0 4951760157141521099596496896))
  (ite (= ((_ extract 93 93) a) (_ bv0 1)) 0 9903520314283042199192993792))
  (ite (= ((_ extract 94 94) a) (_ bv0 1)) 0 19807040628566084398385987584))
  (ite (= ((_ extract 95 95) a) (_ bv0 1)) 0 39614081257132168796771975168))
  (ite (= ((_ extract 96 96) a) (_ bv0 1)) 0 79228162514264337593543950336))
  (ite (= ((_ extract 97 97) a) (_ bv0 1)) 0 158456325028528675187087900672))
  (ite (= ((_ extract 98 98) a) (_ bv0 1)) 0 316912650057057350374175801344))
  (ite (= ((_ extract 99 99) a) (_ bv0 1)) 0 633825300114114700748351602688))
  (ite (= ((_ extract 100 100) a) (_ bv0 1)) 0 1267650600228229401496703205376))
  (ite (= ((_ extract 101 101) a) (_ bv0 1)) 0 2535301200456458802993406410752))
  (ite (= ((_ extract 102 102) a) (_ bv0 1)) 0 5070602400912917605986812821504))
  (ite (= ((_ extract 103 103) a) (_ bv0 1)) 0 10141204801825835211973625643008))
  (ite (= ((_ extract 104 104) a) (_ bv0 1)) 0 20282409603651670423947251286016))
  (ite (= ((_ extract 105 105) a) (_ bv0 1)) 0 40564819207303340847894502572032))
  (ite (= ((_ extract 106 106) a) (_ bv0 1)) 0 81129638414606681695789005144064))
  (ite (= ((_ extract 107 107) a) (_ bv0 1)) 0 162259276829213363391578010288128))
  (ite (= ((_ extract 108 108) a) (_ bv0 1)) 0 324518553658426726783156020576256))
  (ite (= ((_ extract 109 109) a) (_ bv0 1)) 0 649037107316853453566312041152512))
  (ite (= ((_ extract 110 110) a) (_ bv0 1)) 0 1298074214633706907132624082305024))
  (ite (= ((_ extract 111 111) a) (_ bv0 1)) 0 2596148429267413814265248164610048))
  (ite (= ((_ extract 112 112) a) (_ bv0 1)) 0 5192296858534827628530496329220096))
  (ite (= ((_ extract 113 113) a) (_ bv0 1)) 0 10384593717069655257060992658440192))
  (ite (= ((_ extract 114 114) a) (_ bv0 1)) 0 20769187434139310514121985316880384))
  (ite (= ((_ extract 115 115) a) (_ bv0 1)) 0 41538374868278621028243970633760768))
  (ite (= ((_ extract 116 116) a) (_ bv0 1)) 0 83076749736557242056487941267521536))
  (ite (= ((_ extract 117 117) a) (_ bv0 1)) 0 166153499473114484112975882535043072))
  (ite (= ((_ extract 118 118) a) (_ bv0 1)) 0 332306998946228968225951765070086144))
  (ite (= ((_ extract 119 119) a) (_ bv0 1)) 0 664613997892457936451903530140172288))
  (ite (= ((_ extract 120 120) a) (_ bv0 1)) 0 1329227995784915872903807060280344576))
  (ite (= ((_ extract 121 121) a) (_ bv0 1)) 0 2658455991569831745807614120560689152))
  (ite (= ((_ extract 122 122) a) (_ bv0 1)) 0 5316911983139663491615228241121378304))
  (ite (= ((_ extract 123 123) a) (_ bv0 1)) 0 10633823966279326983230456482242756608))
  (ite (= ((_ extract 124 124) a) (_ bv0 1)) 0 21267647932558653966460912964485513216))
  (ite (= ((_ extract 125 125) a) (_ bv0 1)) 0 42535295865117307932921825928971026432))
  (ite (= ((_ extract 126 126) a) (_ bv0 1)) 0 85070591730234615865843651857942052864))
  (ite (= ((_ extract 127 127) a) (_ bv0 1)) 0 170141183460469231731687303715884105728))
  (ite (= ((_ extract 128 128) a) (_ bv0 1)) 0 340282366920938463463374607431768211456))
  (ite (= ((_ extract 129 129) a) (_ bv0 1)) 0 680564733841876926926749214863536422912))
  (ite (= ((_ extract 130 130) a) (_ bv0 1)) 0 1361129467683753853853498429727072845824))
  (ite (= ((_ extract 131 131) a) (_ bv0 1)) 0 2722258935367507707706996859454145691648))
  (ite (= ((_ extract 132 132) a) (_ bv0 1)) 0 5444517870735015415413993718908291383296))
  (ite (= ((_ extract 133 133) a) (_ bv0 1)) 0 10889035741470030830827987437816582766592))
  (ite (= ((_ extract 134 134) a) (_ bv0 1)) 0 21778071482940061661655974875633165533184))
  (ite (= ((_ extract 135 135) a) (_ bv0 1)) 0 43556142965880123323311949751266331066368))
  (ite (= ((_ extract 136 136) a) (_ bv0 1)) 0 87112285931760246646623899502532662132736))
  (ite (= ((_ extract 137 137) a) (_ bv0 1)) 0 174224571863520493293247799005065324265472))
  (ite (= ((_ extract 138 138) a) (_ bv0 1)) 0 348449143727040986586495598010130648530944))
  (ite (= ((_ extract 139 139) a) (_ bv0 1)) 0 696898287454081973172991196020261297061888))
  (ite (= ((_ extract 140 140) a) (_ bv0 1)) 0 1393796574908163946345982392040522594123776))
  (ite (= ((_ extract 141 141) a) (_ bv0 1)) 0 2787593149816327892691964784081045188247552))
  (ite (= ((_ extract 142 142) a) (_ bv0 1)) 0 5575186299632655785383929568162090376495104))
  (ite (= ((_ extract 143 143) a) (_ bv0 1)) 0 11150372599265311570767859136324180752990208))
  (ite (= ((_ extract 144 144) a) (_ bv0 1)) 0 22300745198530623141535718272648361505980416))
  (ite (= ((_ extract 145 145) a) (_ bv0 1)) 0 44601490397061246283071436545296723011960832))
  (ite (= ((_ extract 146 146) a) (_ bv0 1)) 0 89202980794122492566142873090593446023921664))
  (ite (= ((_ extract 147 147) a) (_ bv0 1)) 0 178405961588244985132285746181186892047843328))
  (ite (= ((_ extract 148 148) a) (_ bv0 1)) 0 356811923176489970264571492362373784095686656))
  (ite (= ((_ extract 149 149) a) (_ bv0 1)) 0 713623846352979940529142984724747568191373312))
  (ite (= ((_ extract 150 150) a) (_ bv0 1)) 0 1427247692705959881058285969449495136382746624))
  (ite (= ((_ extract 151 151) a) (_ bv0 1)) 0 2854495385411919762116571938898990272765493248))
  (ite (= ((_ extract 152 152) a) (_ bv0 1)) 0 5708990770823839524233143877797980545530986496))
  (ite (= ((_ extract 153 153) a) (_ bv0 1)) 0 11417981541647679048466287755595961091061972992))
  (ite (= ((_ extract 154 154) a) (_ bv0 1)) 0 22835963083295358096932575511191922182123945984))
  (ite (= ((_ extract 155 155) a) (_ bv0 1)) 0 45671926166590716193865151022383844364247891968))
  (ite (= ((_ extract 156 156) a) (_ bv0 1)) 0 91343852333181432387730302044767688728495783936))
  (ite (= ((_ extract 157 157) a) (_ bv0 1)) 0 182687704666362864775460604089535377456991567872))
  (ite (= ((_ extract 158 158) a) (_ bv0 1)) 0 365375409332725729550921208179070754913983135744))
  (ite (= ((_ extract 159 159) a) (_ bv0 1)) 0 730750818665451459101842416358141509827966271488))
  (ite (= ((_ extract 160 160) a) (_ bv0 1)) 0 1461501637330902918203684832716283019655932542976))
  (ite (= ((_ extract 161 161) a) (_ bv0 1)) 0 2923003274661805836407369665432566039311865085952))
  (ite (= ((_ extract 162 162) a) (_ bv0 1)) 0 5846006549323611672814739330865132078623730171904))
  (ite (= ((_ extract 163 163) a) (_ bv0 1)) 0 11692013098647223345629478661730264157247460343808))
  (ite (= ((_ extract 164 164) a) (_ bv0 1)) 0 23384026197294446691258957323460528314494920687616))
  (ite (= ((_ extract 165 165) a) (_ bv0 1)) 0 46768052394588893382517914646921056628989841375232))
  (ite (= ((_ extract 166 166) a) (_ bv0 1)) 0 93536104789177786765035829293842113257979682750464))
  (ite (= ((_ extract 167 167) a) (_ bv0 1)) 0 187072209578355573530071658587684226515959365500928))
  (ite (= ((_ extract 168 168) a) (_ bv0 1)) 0 374144419156711147060143317175368453031918731001856))
  (ite (= ((_ extract 169 169) a) (_ bv0 1)) 0 748288838313422294120286634350736906063837462003712))
  (ite (= ((_ extract 170 170) a) (_ bv0 1)) 0 1496577676626844588240573268701473812127674924007424))
  (ite (= ((_ extract 171 171) a) (_ bv0 1)) 0 2993155353253689176481146537402947624255349848014848))
  (ite (= ((_ extract 172 172) a) (_ bv0 1)) 0 5986310706507378352962293074805895248510699696029696))
  (ite (= ((_ extract 173 173) a) (_ bv0 1)) 0 11972621413014756705924586149611790497021399392059392))
  (ite (= ((_ extract 174 174) a) (_ bv0 1)) 0 23945242826029513411849172299223580994042798784118784))
  (ite (= ((_ extract 175 175) a) (_ bv0 1)) 0 47890485652059026823698344598447161988085597568237568))
  (ite (= ((_ extract 176 176) a) (_ bv0 1)) 0 95780971304118053647396689196894323976171195136475136))
  (ite (= ((_ extract 177 177) a) (_ bv0 1)) 0 191561942608236107294793378393788647952342390272950272))
  (ite (= ((_ extract 178 178) a) (_ bv0 1)) 0 383123885216472214589586756787577295904684780545900544))
  (ite (= ((_ extract 179 179) a) (_ bv0 1)) 0 766247770432944429179173513575154591809369561091801088))
  (ite (= ((_ extract 180 180) a) (_ bv0 1)) 0 1532495540865888858358347027150309183618739122183602176))
  (ite (= ((_ extract 181 181) a) (_ bv0 1)) 0 3064991081731777716716694054300618367237478244367204352))
  (ite (= ((_ extract 182 182) a) (_ bv0 1)) 0 6129982163463555433433388108601236734474956488734408704))
  (ite (= ((_ extract 183 183) a) (_ bv0 1)) 0 12259964326927110866866776217202473468949912977468817408))
  (ite (= ((_ extract 184 184) a) (_ bv0 1)) 0 24519928653854221733733552434404946937899825954937634816))
  (ite (= ((_ extract 185 185) a) (_ bv0 1)) 0 49039857307708443467467104868809893875799651909875269632))
  (ite (= ((_ extract 186 186) a) (_ bv0 1)) 0 98079714615416886934934209737619787751599303819750539264))
  (ite (= ((_ extract 187 187) a) (_ bv0 1)) 0 196159429230833773869868419475239575503198607639501078528))
  (ite (= ((_ extract 188 188) a) (_ bv0 1)) 0 392318858461667547739736838950479151006397215279002157056))
  (ite (= ((_ extract 189 189) a) (_ bv0 1)) 0 784637716923335095479473677900958302012794430558004314112))
  (ite (= ((_ extract 190 190) a) (_ bv0 1)) 0 1569275433846670190958947355801916604025588861116008628224))
  (ite (= ((_ extract 191 191) a) (_ bv0 1)) 0 3138550867693340381917894711603833208051177722232017256448))
  (ite (= ((_ extract 192 192) a) (_ bv0 1)) 0 6277101735386680763835789423207666416102355444464034512896))
  (ite (= ((_ extract 193 193) a) (_ bv0 1)) 0 12554203470773361527671578846415332832204710888928069025792))
  (ite (= ((_ extract 194 194) a) (_ bv0 1)) 0 25108406941546723055343157692830665664409421777856138051584))
  (ite (= ((_ extract 195 195) a) (_ bv0 1)) 0 50216813883093446110686315385661331328818843555712276103168))
  (ite (= ((_ extract 196 196) a) (_ bv0 1)) 0 100433627766186892221372630771322662657637687111424552206336))
  (ite (= ((_ extract 197 197) a) (_ bv0 1)) 0 200867255532373784442745261542645325315275374222849104412672))
  (ite (= ((_ extract 198 198) a) (_ bv0 1)) 0 401734511064747568885490523085290650630550748445698208825344))
  (ite (= ((_ extract 199 199) a) (_ bv0 1)) 0 803469022129495137770981046170581301261101496891396417650688))
  (ite (= ((_ extract 200 200) a) (_ bv0 1)) 0 1606938044258990275541962092341162602522202993782792835301376))
  (ite (= ((_ extract 201 201) a) (_ bv0 1)) 0 3213876088517980551083924184682325205044405987565585670602752))
  (ite (= ((_ extract 202 202) a) (_ bv0 1)) 0 6427752177035961102167848369364650410088811975131171341205504))
  (ite (= ((_ extract 203 203) a) (_ bv0 1)) 0 12855504354071922204335696738729300820177623950262342682411008))
  (ite (= ((_ extract 204 204) a) (_ bv0 1)) 0 25711008708143844408671393477458601640355247900524685364822016))
  (ite (= ((_ extract 205 205) a) (_ bv0 1)) 0 51422017416287688817342786954917203280710495801049370729644032))
  (ite (= ((_ extract 206 206) a) (_ bv0 1)) 0 102844034832575377634685573909834406561420991602098741459288064))
  (ite (= ((_ extract 207 207) a) (_ bv0 1)) 0 205688069665150755269371147819668813122841983204197482918576128))
  (ite (= ((_ extract 208 208) a) (_ bv0 1)) 0 411376139330301510538742295639337626245683966408394965837152256))
  (ite (= ((_ extract 209 209) a) (_ bv0 1)) 0 822752278660603021077484591278675252491367932816789931674304512))
  (ite (= ((_ extract 210 210) a) (_ bv0 1)) 0 1645504557321206042154969182557350504982735865633579863348609024))
  (ite (= ((_ extract 211 211) a) (_ bv0 1)) 0 3291009114642412084309938365114701009965471731267159726697218048))
  (ite (= ((_ extract 212 212) a) (_ bv0 1)) 0 6582018229284824168619876730229402019930943462534319453394436096))
  (ite (= ((_ extract 213 213) a) (_ bv0 1)) 0 13164036458569648337239753460458804039861886925068638906788872192))
  (ite (= ((_ extract 214 214) a) (_ bv0 1)) 0 26328072917139296674479506920917608079723773850137277813577744384))
  (ite (= ((_ extract 215 215) a) (_ bv0 1)) 0 52656145834278593348959013841835216159447547700274555627155488768))
  (ite (= ((_ extract 216 216) a) (_ bv0 1)) 0 105312291668557186697918027683670432318895095400549111254310977536))
  (ite (= ((_ extract 217 217) a) (_ bv0 1)) 0 210624583337114373395836055367340864637790190801098222508621955072))
  (ite (= ((_ extract 218 218) a) (_ bv0 1)) 0 421249166674228746791672110734681729275580381602196445017243910144))
  (ite (= ((_ extract 219 219) a) (_ bv0 1)) 0 842498333348457493583344221469363458551160763204392890034487820288))
  (ite (= ((_ extract 220 220) a) (_ bv0 1)) 0 1684996666696914987166688442938726917102321526408785780068975640576))
  (ite (= ((_ extract 221 221) a) (_ bv0 1)) 0 3369993333393829974333376885877453834204643052817571560137951281152))
  (ite (= ((_ extract 222 222) a) (_ bv0 1)) 0 6739986666787659948666753771754907668409286105635143120275902562304))
  (ite (= ((_ extract 223 223) a) (_ bv0 1)) 0 13479973333575319897333507543509815336818572211270286240551805124608))
  (ite (= ((_ extract 224 224) a) (_ bv0 1)) 0 26959946667150639794667015087019630673637144422540572481103610249216))
  (ite (= ((_ extract 225 225) a) (_ bv0 1)) 0 53919893334301279589334030174039261347274288845081144962207220498432))
  (ite (= ((_ extract 226 226) a) (_ bv0 1)) 0 107839786668602559178668060348078522694548577690162289924414440996864))
  (ite (= ((_ extract 227 227) a) (_ bv0 1)) 0 215679573337205118357336120696157045389097155380324579848828881993728))
  (ite (= ((_ extract 228 228) a) (_ bv0 1)) 0 431359146674410236714672241392314090778194310760649159697657763987456))
  (ite (= ((_ extract 229 229) a) (_ bv0 1)) 0 862718293348820473429344482784628181556388621521298319395315527974912))
  (ite (= ((_ extract 230 230) a) (_ bv0 1)) 0 1725436586697640946858688965569256363112777243042596638790631055949824))
  (ite (= ((_ extract 231 231) a) (_ bv0 1)) 0 3450873173395281893717377931138512726225554486085193277581262111899648))
  (ite (= ((_ extract 232 232) a) (_ bv0 1)) 0 6901746346790563787434755862277025452451108972170386555162524223799296))
  (ite (= ((_ extract 233 233) a) (_ bv0 1)) 0 13803492693581127574869511724554050904902217944340773110325048447598592))
  (ite (= ((_ extract 234 234) a) (_ bv0 1)) 0 27606985387162255149739023449108101809804435888681546220650096895197184))
  (ite (= ((_ extract 235 235) a) (_ bv0 1)) 0 55213970774324510299478046898216203619608871777363092441300193790394368))
  (ite (= ((_ extract 236 236) a) (_ bv0 1)) 0 110427941548649020598956093796432407239217743554726184882600387580788736))
  (ite (= ((_ extract 237 237) a) (_ bv0 1)) 0 220855883097298041197912187592864814478435487109452369765200775161577472))
  (ite (= ((_ extract 238 238) a) (_ bv0 1)) 0 441711766194596082395824375185729628956870974218904739530401550323154944))
  (ite (= ((_ extract 239 239) a) (_ bv0 1)) 0 883423532389192164791648750371459257913741948437809479060803100646309888))
  (ite (= ((_ extract 240 240) a) (_ bv0 1)) 0 1766847064778384329583297500742918515827483896875618958121606201292619776))
  (ite (= ((_ extract 241 241) a) (_ bv0 1)) 0 3533694129556768659166595001485837031654967793751237916243212402585239552))
  (ite (= ((_ extract 242 242) a) (_ bv0 1)) 0 7067388259113537318333190002971674063309935587502475832486424805170479104))
  (ite (= ((_ extract 243 243) a) (_ bv0 1)) 0 14134776518227074636666380005943348126619871175004951664972849610340958208))
  (ite (= ((_ extract 244 244) a) (_ bv0 1)) 0 28269553036454149273332760011886696253239742350009903329945699220681916416))
  (ite (= ((_ extract 245 245) a) (_ bv0 1)) 0 56539106072908298546665520023773392506479484700019806659891398441363832832))
  (ite (= ((_ extract 246 246) a) (_ bv0 1)) 0 113078212145816597093331040047546785012958969400039613319782796882727665664))
  (ite (= ((_ extract 247 247) a) (_ bv0 1)) 0 226156424291633194186662080095093570025917938800079226639565593765455331328))
  (ite (= ((_ extract 248 248) a) (_ bv0 1)) 0 452312848583266388373324160190187140051835877600158453279131187530910662656))
  (ite (= ((_ extract 249 249) a) (_ bv0 1)) 0 904625697166532776746648320380374280103671755200316906558262375061821325312))
  (ite (= ((_ extract 250 250) a) (_ bv0 1)) 0 1809251394333065553493296640760748560207343510400633813116524750123642650624))
  (ite (= ((_ extract 251 251) a) (_ bv0 1)) 0 3618502788666131106986593281521497120414687020801267626233049500247285301248))
  (ite (= ((_ extract 252 252) a) (_ bv0 1)) 0 7237005577332262213973186563042994240829374041602535252466099000494570602496))
  (ite (= ((_ extract 253 253) a) (_ bv0 1)) 0 14474011154664524427946373126085988481658748083205070504932198000989141204992))
  (ite (= ((_ extract 254 254) a) (_ bv0 1)) 0 28948022309329048855892746252171976963317496166410141009864396001978282409984))
  (ite (= ((_ extract 255 255) a) (_ bv0 1)) 0 57896044618658097711785492504343953926634992332820282019728792003956564819968))
)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
  (((Tuple0))))

(declare-sort us_private 0)

;; private__bool_eq
(declare-fun private__bool_eq (us_private
  us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
  (((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))

(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
  (((int__refqtmk (int__content Int)))))

(declare-datatypes ((bool__ref 0))
  (((bool__refqtmk (bool__content Bool)))))

(declare-datatypes ((us_fixed__ref 0))
  (((us_fixed__refqtmk (us_fixed__content Int)))))

(declare-datatypes ((real__ref 0))
  (((real__refqtmk (real__content Real)))))

(declare-datatypes ((us_private__ref 0))
  (((us_private__refqtmk (us_private__content us_private)))))

;; int__ref___projection
(define-fun int__ref___projection ((a int__ref)) Int
  (int__content a))

;; __fixed__ref___projection
(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int
  (us_fixed__content a))

;; bool__ref___projection
(define-fun bool__ref___projection ((a bool__ref)) Bool
  (bool__content a))

;; real__ref___projection
(define-fun real__ref___projection ((a real__ref)) Real
  (real__content a))

;; __private__ref___projection
(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

;; nth
(declare-fun nth ((_ BitVec 64)
  Int) Bool)

;; lsr
(declare-fun lsr ((_ BitVec 64)
  Int) (_ BitVec 64))

;; asr
(declare-fun asr ((_ BitVec 64)
  Int) (_ BitVec 64))

;; lsl
(declare-fun lsl ((_ BitVec 64)
  Int) (_ BitVec 64))

;; abs
(define-fun abs1 ((x Int)) Int
  (ite (<= 0 x) x (- x)))

;; Abs_le
(assert
  (forall ((x Int) (y Int)) (= (<= (abs1 x) y) (and (<= (- y) x) (<= x y)))))

;; Abs_pos
(assert (forall ((x Int)) (<= 0 (abs1 x))))

;; Div_unique
(assert
  (forall ((x Int) (y Int) (q Int))
    (=>
      (< 0 y)
      (=> (and (<= (* q y) x) (< x (+ (* q y) y))) (= (div x y) q)))))

;; Div_bound
(assert
  (forall ((x Int) (y Int))
    (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div x y)) (<= (div x y) x)))))

;; Div_inf
(assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div x y) 0))))

;; Div_inf_neg
(assert
  (forall ((x Int) (y Int))
    (=> (and (< 0 x) (<= x y)) (= (div (- x) y) (- 1)))))

;; Mod_0
(assert (forall ((y Int)) (=> (not (= y 0)) (= (mod 0 y) 0))))

;; Div_1_left
(assert (forall ((y Int)) (=> (< 1 y) (= (div 1 y) 0))))

;; Div_minus1_left
(assert (forall ((y Int)) (=> (< 1 y) (= (div (- 1) y) (- 1)))))

;; Mod_1_left
(assert (forall ((y Int)) (=> (< 1 y) (= (mod 1 y) 1))))

;; Mod_minus1_left
(assert
  (forall ((y Int))
    (! (=> (< 1 y) (= (mod (- 1) y) (- y 1))) :pattern ((mod (- 1) y)) )))

;; Div_mult
(assert
  (forall ((x Int) (y Int) (z Int))
    (! (=> (< 0 x) (= (div (+ (* x y) z) x) (+ y (div z x)))) :pattern ((div (+ (* x y) z) x)) )))

;; Mod_mult
(assert
  (forall ((x Int) (y Int) (z Int))
    (! (=> (< 0 x) (= (mod (+ (* x y) z) x) (mod z x))) :pattern ((mod (+ (* x y) z) x)) )))

;; rotate_right
(declare-fun rotate_right1 ((_ BitVec 64)
  Int) (_ BitVec 64))

;; rotate_left
(declare-fun rotate_left1 ((_ BitVec 64)
  Int) (_ BitVec 64))

;; pow2
(declare-fun pow2 (Int) Int)

(declare-const two_power_size_minus_one Int)

;; two_power_size_minus_one_val
(assert (= two_power_size_minus_one (pow2 (- 64 1))))

;; of_int
(declare-fun of_int (Int) (_ BitVec 64))

;; to_int
(define-fun to_int1 ((x (_ BitVec 64))) Int
  (ite (bvsge x (_ bv0 64))
    (bv2nat64 x)
    (- (- 18446744073709551616 (bv2nat64 x)))))

;; uint_in_range
(define-fun uint_in_range ((i Int)) Bool
  (and (<= 0 i) (<= i 18446744073709551615)))

;; lsr_bv_is_lsr
(assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
    (= (bvlshr x n) (lsr x (bv2nat64 n)))))

;; asr_bv_is_asr
(assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
    (= (bvashr x n) (asr x (bv2nat64 n)))))

;; lsl_bv_is_lsl
(assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
    (= (bvshl x n) (lsl x (bv2nat64 n)))))

;; rotate_left_bv_is_rotate_left
(assert
  (forall ((v (_ BitVec 64)) (n (_ BitVec 64)))
    (= (bvor (bvshl v (bvurem n (_ bv64 64))) (bvlshr v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) 
    (rotate_left1
      v
      (bv2nat64 n)))))

;; rotate_right_bv_is_rotate_right
(assert
  (forall ((v (_ BitVec 64)) (n (_ BitVec 64)))
    (= (bvor (bvlshr v (bvurem n (_ bv64 64))) (bvshl v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) 
    (rotate_right1
      v
      (bv2nat64 n)))))

;; nth_bv
(declare-fun nth_bv ((_ BitVec 64)
  (_ BitVec 64)) Bool)

;; nth_bv_def
(assert
  (forall ((x (_ BitVec 64)) (i (_ BitVec 64)))
    (=
      (= (nth_bv x i) true)
      (not (= (bvand (bvlshr x i) #x0000000000000001) #x0000000000000000)))))

;; Nth_bv_is_nth
(assert
  (forall ((x (_ BitVec 64)) (i (_ BitVec 64)))
    (= (nth x (bv2nat64 i)) (nth_bv x i))))

;; Nth_bv_is_nth2
(assert
  (forall ((x (_ BitVec 64)) (i Int))
    (=>
      (and (<= 0 i) (< i 18446744073709551616))
      (= (nth_bv x (of_int i)) (nth x i)))))

;; eq_sub_bv
(declare-fun eq_sub_bv ((_ BitVec 64)
  (_ BitVec 64)
  (_ BitVec 64)
  (_ BitVec 64)) Bool)

;; eq_sub_bv_def
(assert
  (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64)))
    (let ((mask (bvshl (bvsub (bvshl #x0000000000000001 n) #x0000000000000001) i)))
      (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))

;; eq_sub
(define-fun eq_sub ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int) (n Int)) Bool
  (forall ((j Int))
    (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

;; eq_sub_equiv
(assert
  (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64)))
    (= (eq_sub a b (bv2nat64 i) (bv2nat64 n)) (eq_sub_bv a b i n))))

(declare-datatypes ((t__ref 0))
  (((t__refqtmk (t__content (_ BitVec 64))))))

;; bool_eq
(define-fun bool_eq ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool
  (ite (= x y) true false))

;; bool_ne
(define-fun bool_ne ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool
  (ite (not (= x y)) true false))

;; bool_lt
(define-fun bool_lt ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool
  (ite (bvult x y) true false))

;; bool_le
(define-fun bool_le ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool
  (ite (bvule x y) true false))

;; bool_gt
(define-fun bool_gt ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool
  (ite (bvugt x y) true false))

;; bool_ge
(define-fun bool_ge ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool
  (ite (bvuge x y) true false))

;; power
(declare-fun power ((_ BitVec 64)
  Int) (_ BitVec 64))

;; Power_0
(assert (forall ((x (_ BitVec 64))) (= (power x 0) #x0000000000000001)))

;; Power_1
(assert (forall ((x (_ BitVec 64))) (= (power x 1) x)))

;; Power_s
(assert
  (forall ((x (_ BitVec 64)) (n Int))
    (=> (<= 0 n) (= (power x (+ n 1)) (bvmul x (power x n))))))

;; Power_s_alt
(assert
  (forall ((x (_ BitVec 64)) (n Int))
    (=> (< 0 n) (= (power x n) (bvmul x (power x (- n 1)))))))

;; Power_sum
(assert
  (forall ((x (_ BitVec 64)) (n Int) (m Int))
    (=>
      (<= 0 n)
      (=> (<= 0 m) (= (power x (+ n m)) (bvmul (power x n) (power x m)))))))

;; Power_mult
(assert
  (forall ((x (_ BitVec 64)) (n Int) (m Int))
    (=> (<= 0 n) (=> (<= 0 m) (= (power x (* n m)) (power (power x n) m))))))

;; Power_mult2
(assert
  (forall ((x (_ BitVec 64)) (y (_ BitVec 64)) (n Int))
    (=> (<= 0 n) (= (power (bvmul x y) n) (bvmul (power x n) (power y n))))))

;; bv_min
(define-fun bv_min ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)
  (ite (bvule x y) x y))

;; bv_max
(define-fun bv_max ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)
  (ite (bvule x y) y x))

;; min
(define-fun min ((x Int) (y Int)) Int
  (ite (<= x y) x y))

;; max
(define-fun max ((x Int) (y Int)) Int
  (ite (<= x y) y x))

;; Min_r
(assert (forall ((x Int) (y Int)) (=> (<= y x) (= (min x y) y))))

;; Max_l
(assert (forall ((x Int) (y Int)) (=> (<= y x) (= (max x y) x))))

;; Min_comm
(assert (forall ((x Int) (y Int)) (= (min x y) (min y x))))

;; Max_comm
(assert (forall ((x Int) (y Int)) (= (max x y) (max y x))))

;; Min_assoc
(assert
  (forall ((x Int) (y Int) (z Int)) (= (min (min x y) z) (min x (min y z)))))

;; Max_assoc
(assert
  (forall ((x Int) (y Int) (z Int)) (= (max (max x y) z) (max x (max y z)))))

;; bv_min_to_uint
(assert
  (forall ((x (_ BitVec 64)) (y (_ BitVec 64)))
    (= (bv2nat64 (bv_min x y)) (min (bv2nat64 x) (bv2nat64 y)))))

;; bv_max_to_uint
(assert
  (forall ((x (_ BitVec 64)) (y (_ BitVec 64)))
    (= (bv2nat64 (bv_max x y)) (max (bv2nat64 x) (bv2nat64 y)))))

;; uc_of_int
(define-fun uc_of_int ((x Int)) (_ BitVec 64)
  (ite (<= 0 x) (of_int x) (bvneg (of_int (- x)))))

;; uc_to_int
(define-fun uc_to_int ((x (_ BitVec 64))) Int
  (ite (= (bool_lt x (of_int two_power_size_minus_one)) true)
    (bv2nat64 x)
    (- (bv2nat64 (bvneg x)))))

;; bool_eq
(define-fun bool_eq1 ((x Bool) (y Bool)) Bool
  (ite (= x y) true false))

;; to_int
(define-fun to_int2 ((b Bool)) Int
  (ite (= b true) 1 0))

;; of_int
(define-fun of_int1 ((i Int)) Bool
  (ite (= i 0) false true))

;; in_range
(define-fun in_range ((x Int)) Bool
  (or (= x 0) (= x 1)))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort size_t 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 64))

;; bool_eq
(define-fun bool_eq2 ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 64)) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 64))

;; user_eq
(declare-fun user_eq (size_t
  size_t) Bool)

(declare-const dummy size_t)

(declare-datatypes ((size_t__ref 0))
  (((size_t__refqtmk (size_t__content size_t)))))

;; size_t__ref_size_t__content__projection
(define-fun size_t__ref_size_t__content__projection ((a size_t__ref)) size_t
  (size_t__content a))

;; to_rep
(declare-fun to_rep (size_t) (_ BitVec 64))

;; of_rep
(declare-fun of_rep ((_ BitVec 64)) size_t)

;; inversion_axiom
(assert
  (forall ((x size_t)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
(assert true)

;; coerce_axiom
(assert
  (forall ((x (_ BitVec 64)))
    (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))) )))

;; to_int
(define-fun to_int3 ((x size_t)) Int
  (bv2nat64 (to_rep x)))

;; range_int_axiom
(assert
  (forall ((x size_t))
    (! (uint_in_range (to_int3 x)) :pattern ((to_int3 x)) )))

(declare-sort char32_t 0)

;; in_range
(define-fun in_range1 ((x Int)) Bool
  (and (<= 0 x) (<= x 2147483647)))

;; bool_eq
(define-fun bool_eq3 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

;; user_eq
(declare-fun user_eq1 (char32_t
  char32_t) Bool)

(declare-const dummy1 char32_t)

(declare-datatypes ((char32_t__ref 0))
  (((char32_t__refqtmk (char32_t__content char32_t)))))

;; char32_t__ref_char32_t__content__projection
(define-fun char32_t__ref_char32_t__content__projection ((a char32_t__ref)) char32_t
  (char32_t__content a))

;; to_rep
(declare-fun to_rep1 (char32_t) Int)

;; of_rep
(declare-fun of_rep1 (Int) char32_t)

;; inversion_axiom
(assert
  (forall ((x char32_t))
    (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
(assert
  (forall ((x char32_t)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
(assert
  (forall ((x Int))
    (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                                  (of_rep1 x))) )))

(declare-datatypes ((map__ref 0))
  (((map__refqtmk (map__content (Array (_ BitVec 64) char32_t))))))

;; slide
(declare-fun slide ((Array (_ BitVec 64) char32_t)
  (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) char32_t))

;; slide_eq
(assert
  (forall ((a (Array (_ BitVec 64) char32_t)))
    (forall ((first (_ BitVec 64)))
      (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
(assert
  (forall ((a (Array (_ BitVec 64) char32_t)))
    (forall ((old_first (_ BitVec 64)))
      (forall ((new_first (_ BitVec 64)))
        (forall ((i (_ BitVec 64)))
          (! (= (select (slide a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select 
          (slide
            a
            old_first
            new_first) i)) ))))))

;; const
(declare-fun const1 (char32_t) (Array (_ BitVec 64) char32_t))

;; const_def
(assert
  (forall ((v char32_t))
    (forall ((i (_ BitVec 64)))
      (! (= (select (const1 v) i) v) :pattern ((select (const1 v) i)) ))))

;; bool_eq
(define-fun bool_eq4 ((a (Array (_ BitVec 64) char32_t)) (a__first (_ BitVec 64)) (a__last (_ BitVec 64)) (b (Array (_ BitVec 64) char32_t)) (b__first (_ BitVec 64)) (b__last (_ BitVec 64))) Bool
  (ite (and
         (ite (bvule a__first a__last)
           (and
             (bvule b__first b__last)
             (= (bvsub a__last a__first) (bvsub b__last b__first)))
           (bvugt b__first b__last))
         (forall ((temp___idx_215 (_ BitVec 64)))
           (=>
             (and
               (bvule a__first temp___idx_215)
               (bvule temp___idx_215 a__last))
             (= (to_rep1 (select a temp___idx_215)) (to_rep1
                                                      (select b (bvadd (bvsub b__first a__first) temp___idx_215)))))))
    true
    false))

;; bool_eq_rev
(assert
  (forall ((a (Array (_ BitVec 64) char32_t)) (b (Array (_ BitVec 64) char32_t)))
    (forall ((a__first (_ BitVec 64)) (a__last (_ BitVec 64)) (b__first (_ BitVec 64)) (b__last (_ BitVec 64)))
      (=>
        (= (bool_eq4 b b__first b__last a a__first a__last) true)
        (and
          (ite (bvule a__first a__last)
            (and
              (bvule b__first b__last)
              (= (bvsub a__last a__first) (bvsub b__last b__first)))
            (bvugt b__first b__last))
          (forall ((temp___idx_215 (_ BitVec 64)))
            (=>
              (and
                (bvule a__first temp___idx_215)
                (bvule temp___idx_215 a__last))
              (= (to_rep1 (select a temp___idx_215)) (to_rep1
                                                       (select b (bvadd (bvsub b__first a__first) temp___idx_215)))))))))))

(declare-datatypes ((t 0))
  (((tqtmk (rec__first size_t)(rec__last size_t)))))

;; mk
(declare-fun mk ((_ BitVec 64)
  (_ BitVec 64)) t)

;; mk_def
(assert
  (forall ((f (_ BitVec 64)) (l (_ BitVec 64)))
    (! (and
         (= (to_rep (rec__first (mk f l))) f)
         (= (to_rep (rec__last (mk f l))) l)) :pattern ((mk f l)) )))

;; dynamic_property
(define-fun dynamic_property ((range_first (_ BitVec 64)) (range_last (_ BitVec 64)) (low (_ BitVec 64)) (high (_ BitVec 64))) Bool
  true)

(declare-datatypes ((us_t 0))
  (((us_tqtmk (elts (Array (_ BitVec 64) char32_t))(rt t)))))

;; to_array
(define-fun to_array ((a us_t)) (Array (_ BitVec 64) char32_t)
  (elts a))

;; of_array
(define-fun of_array ((a (Array (_ BitVec 64) char32_t)) (f (_ BitVec 64)) (l (_ BitVec 64))) us_t
  (us_tqtmk a (mk f l)))

;; first
(define-fun first ((a us_t)) (_ BitVec 64)
  (to_rep (rec__first (rt a))))

;; last
(define-fun last ((a us_t)) (_ BitVec 64)
  (to_rep (rec__last (rt a))))

;; length
(define-fun length ((a us_t)) Int
  (ite (bvule (first a) (last a))
    (+ (- (bv2nat64 (last a)) (bv2nat64 (first a))) 1)
    0))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
(assert (<= 0 value__size))

;; object__size_axiom
(assert (<= 0 object__size))

;; component__size_axiom
(assert (<= 0 component__size))

;; alignment_axiom
(assert (<= 0 alignment))

;; bool_eq
(define-fun bool_eq5 ((x us_t) (y us_t)) Bool
  (bool_eq4
    (elts x)
    (to_rep (rec__first (rt x)))
    (to_rep (rec__last (rt x)))
    (elts y)
    (to_rep (rec__first (rt y)))
    (to_rep (rec__last (rt y)))))

;; user_eq
(declare-fun user_eq2 (us_t
  us_t) Bool)

(declare-const dummy2 us_t)

(declare-datatypes ((char32_array__ref 0))
  (((char32_array__refqtmk (char32_array__content us_t)))))

;; char32_array__ref_char32_array__content__projection
(define-fun char32_array__ref_char32_array__content__projection ((a char32_array__ref)) us_t
  (char32_array__content a))

;; is_nul_terminated
(declare-fun is_nul_terminated (us_t) Bool)

;; is_nul_terminated__function_guard
(declare-fun is_nul_terminated__function_guard (Bool
  us_t) Bool)

;; dynamic_invariant
(define-fun dynamic_invariant ((temp___expr_598 us_t) (temp___is_init_594 Bool) (temp___skip_constant_595 Bool) (temp___do_toplevel_596 Bool) (temp___do_typ_inv_597 Bool)) Bool
  (=>
    (not (= temp___skip_constant_595 true))
    (dynamic_property
      #x0000000000000000
      #xFFFFFFFFFFFFFFFF
      (first temp___expr_598)
      (last temp___expr_598))))

;; is_nul_terminated__post_axiom
(assert
  (forall ((item us_t))
    (! (=>
         (dynamic_invariant item true true true true)
         (let ((result (is_nul_terminated item)))
           (=>
             (is_nul_terminated__function_guard result item)
             (=
               (= result true)
               (exists ((temp___602 (_ BitVec 64)))
                 (and
                   (and
                     (bvule (first item) temp___602)
                     (bvule temp___602 (last item)))
                   (= (to_rep1 (select (to_array item) temp___602)) 0))))))) :pattern (
    (is_nul_terminated
      item)) )))

(declare-const item us_t)

(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 64))

;; dynamic_property
(define-fun dynamic_property1 ((first_int (_ BitVec 64)) (last_int (_ BitVec 64)) (x (_ BitVec 64))) Bool
  (and (bvule first_int x) (bvule x last_int)))

;; dynamic_property_int
(define-fun dynamic_property_int ((first_int Int) (last_int Int) (x Int)) Bool
  (and (<= first_int x) (<= x last_int)))

;; bool_eq
(define-fun bool_eq6 ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 64)) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 64))

;; user_eq
(declare-fun user_eq3 (size_t
  size_t) Bool)

(declare-const dummy3 size_t)

(declare-datatypes ((t23b__ref 0))
  (((t23b__refqtmk (t23b__content size_t)))))

;; t23b__ref_t23b__content__projection
(define-fun t23b__ref_t23b__content__projection ((a t23b__ref)) size_t
  (t23b__content a))

;; dynamic_invariant
(define-fun dynamic_invariant1 ((temp___expr_312 (_ BitVec 64)) (temp___is_init_308 Bool) (temp___skip_constant_309 Bool) (temp___do_toplevel_310 Bool) (temp___do_typ_inv_311 Bool)) Bool
  true)

;; dynamic_invariant
(define-fun dynamic_invariant2 ((temp___expr_591 Int) (temp___is_init_587 Bool) (temp___skip_constant_588 Bool) (temp___do_toplevel_589 Bool) (temp___do_typ_inv_590 Bool)) Bool
  (=>
    (or (= temp___is_init_587 true) (<= 0 2147483647))
    (in_range1 temp___expr_591)))

;; Assume
(assert (dynamic_invariant item true false true true))

;; Assume
(assert
  (and
    (is_nul_terminated__function_guard (is_nul_terminated item) item)
    (= (is_nul_terminated item) true)))

(declare-const j (_ BitVec 64))

;; H
(assert (= j (first item)))

;; H
(assert
  (= (and (ite (bvule (first item) j) true false) (ite (bvule j (last item))
                                                    true
                                                    false)) true))

;; (=)'result'unused'unused
(define-fun lpeqrpqtresultqtunusedqtunused () Bool
  (ite (= (to_rep1 (select (to_array item) j)) 0) true false))

(declare-const spark__branch Bool)

;; H
(assert
  (= spark__branch (ite (= (to_rep1 (select (to_array item) j)) 0)
                     true
                     false)))

;; H
(assert (not (= spark__branch true)))

;; _f'unused'unused
(define-fun usfqtunusedqtunused () Bool
  (ite (forall ((k (_ BitVec 64)))
         (=>
           (and (bvule (first item) k) (bvule k j))
           (not (= (to_rep1 (select (to_array item) k)) 0))))
    true
    false))

;; any'result'unused'unused
(define-fun anyqtresultqtunusedqtunused () Bool
  (ite (forall ((k (_ BitVec 64)))
         (=>
           (and (bvule (first item) k) (bvule k j))
           (not (= (to_rep1 (select (to_array item) k)) 0))))
    true
    false))

(declare-const k (_ BitVec 64))

;; H
(assert (bvule (first item) k))

;; H
(assert (bvule k j))

;; Goal def'vc
;; File "i-c.ads", line 504, characters 0-0
(assert
  (not (not (= (to_rep1 (select (to_array item) k)) 0))))

(check-sat)
(exit)
