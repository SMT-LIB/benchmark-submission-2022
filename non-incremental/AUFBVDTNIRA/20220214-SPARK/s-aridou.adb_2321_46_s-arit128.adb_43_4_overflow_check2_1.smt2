(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTNIRA)
(set-info :source |
Generated by: Yannick Moy
Generated on: 2022-02-14
Generator: GNATprove
Application: GNAT light runtime library
Target solver: Alt-Ergo, CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)

;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
  (((Tuple0))))

(declare-sort us_private 0)

;; private__bool_eq
(declare-fun private__bool_eq (us_private
  us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
  (((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))

(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
  (((int__refqtmk (int__content Int)))))

(declare-datatypes ((bool__ref 0))
  (((bool__refqtmk (bool__content Bool)))))

(declare-datatypes ((us_fixed__ref 0))
  (((us_fixed__refqtmk (us_fixed__content Int)))))

(declare-datatypes ((real__ref 0))
  (((real__refqtmk (real__content Real)))))

(declare-datatypes ((us_private__ref 0))
  (((us_private__refqtmk (us_private__content us_private)))))

;; int__ref___projection
(define-fun int__ref___projection ((a int__ref)) Int
  (int__content a))

;; __fixed__ref___projection
(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int
  (us_fixed__content a))

;; bool__ref___projection
(define-fun bool__ref___projection ((a bool__ref)) Bool
  (bool__content a))

;; real__ref___projection
(define-fun real__ref___projection ((a real__ref)) Real
  (real__content a))

;; __private__ref___projection
(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

;; power
(declare-fun power (Int
  Int) Int)

;; Power_0
(assert (forall ((x Int)) (= (power x 0) 1)))

;; Power_s
(assert
  (forall ((x Int) (n Int))
    (=> (<= 0 n) (= (power x (+ n 1)) (* x (power x n))))))

;; Power_s_alt
(assert
  (forall ((x Int) (n Int))
    (=> (< 0 n) (= (power x n) (* x (power x (- n 1)))))))

;; Power_1
(assert (forall ((x Int)) (= (power x 1) x)))

;; Power_sum
(assert
  (forall ((x Int) (n Int) (m Int))
    (=>
      (<= 0 n)
      (=> (<= 0 m) (= (power x (+ n m)) (* (power x n) (power x m)))))))

;; Power_mult
(assert
  (forall ((x Int) (n Int) (m Int))
    (=> (<= 0 n) (=> (<= 0 m) (= (power x (* n m)) (power (power x n) m))))))

;; Power_comm1
(assert
  (forall ((x Int) (y Int))
    (=>
      (= (* x y) (* y x))
      (forall ((n Int))
        (=> (<= 0 n) (= (* (power x n) y) (* y (power x n))))))))

;; Power_comm2
(assert
  (forall ((x Int) (y Int))
    (=>
      (= (* x y) (* y x))
      (forall ((n Int))
        (=> (<= 0 n) (= (power (* x y) n) (* (power x n) (power y n))))))))

;; Power_non_neg
(assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (<= 0 y)) (<= 0 (power x y)))))

;; Power_pos
(assert
  (forall ((x Int) (y Int)) (=> (and (< 0 x) (<= 0 y)) (< 0 (power x y)))))

;; Power_monotonic
(assert
  (forall ((x Int) (n Int) (m Int))
    (=> (and (< 0 x) (and (<= 0 n) (<= n m))) (<= (power x n) (power x m)))))

;; abs
(define-fun abs1 ((x Int)) Int
  (ite (<= 0 x) x (- x)))

;; Abs_le
(assert
  (forall ((x Int) (y Int)) (= (<= (abs1 x) y) (and (<= (- y) x) (<= x y)))))

;; Abs_pos
(assert (forall ((x Int)) (<= 0 (abs1 x))))

;; div
(declare-fun div1 (Int
  Int) Int)

;; mod
(declare-fun mod1 (Int
  Int) Int)

;; Div_mod
(assert
  (forall ((x Int) (y Int))
    (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))

;; Div_bound
(assert
  (forall ((x Int) (y Int))
    (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))

;; Mod_bound
(assert
  (forall ((x Int) (y Int))
    (=>
      (not (= y 0))
      (and (< (- (abs1 y)) (mod1 x y)) (< (mod1 x y) (abs1 y))))))

;; Div_sign_pos
(assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))

;; Div_sign_neg
(assert
  (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))

;; Mod_sign_pos
(assert
  (forall ((x Int) (y Int))
    (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))

;; Mod_sign_neg
(assert
  (forall ((x Int) (y Int))
    (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))

;; Rounds_toward_zero
(assert
  (forall ((x Int) (y Int))
    (=> (not (= y 0)) (<= (abs1 (* (div1 x y) y)) (abs1 x)))))

;; Div_1
(assert (forall ((x Int)) (= (div1 x 1) x)))

;; Mod_1
(assert (forall ((x Int)) (= (mod1 x 1) 0)))

;; Div_inf
(assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))

;; Mod_inf
(assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))

;; Div_mult
(assert
  (forall ((x Int) (y Int) (z Int))
    (! (=>
         (and (< 0 x) (and (<= 0 y) (<= 0 z)))
         (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1
                                                                  (+ (* x y) z)
                                                                  x)) )))

;; Mod_mult
(assert
  (forall ((x Int) (y Int) (z Int))
    (! (=>
         (and (< 0 x) (and (<= 0 y) (<= 0 z)))
         (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1
                                                            (+ (* x y) z)
                                                            x)) )))

;; Div_unique
(assert
  (forall ((x Int) (y Int) (q Int))
    (=>
      (< 0 y)
      (=> (and (<= (* q y) x) (< x (+ (* q y) y))) (= (div x y) q)))))

;; Div_bound
(assert
  (forall ((x Int) (y Int))
    (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div x y)) (<= (div x y) x)))))

;; Div_inf
(assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div x y) 0))))

;; Div_inf_neg
(assert
  (forall ((x Int) (y Int))
    (=> (and (< 0 x) (<= x y)) (= (div (- x) y) (- 1)))))

;; Mod_0
(assert (forall ((y Int)) (=> (not (= y 0)) (= (mod 0 y) 0))))

;; Div_1_left
(assert (forall ((y Int)) (=> (< 1 y) (= (div 1 y) 0))))

;; Div_minus1_left
(assert (forall ((y Int)) (=> (< 1 y) (= (div (- 1) y) (- 1)))))

;; Mod_1_left
(assert (forall ((y Int)) (=> (< 1 y) (= (mod 1 y) 1))))

;; Mod_minus1_left
(assert
  (forall ((y Int))
    (! (=> (< 1 y) (= (mod (- 1) y) (- y 1))) :pattern ((mod (- 1) y)) )))

;; Div_mult
(assert
  (forall ((x Int) (y Int) (z Int))
    (! (=> (< 0 x) (= (div (+ (* x y) z) x) (+ y (div z x)))) :pattern ((div (+ (* x y) z) x)) )))

;; Mod_mult
(assert
  (forall ((x Int) (y Int) (z Int))
    (! (=> (< 0 x) (= (mod (+ (* x y) z) x) (mod z x))) :pattern ((mod (+ (* x y) z) x)) )))

;; mod
(define-fun mod2 ((x Int) (y Int)) Int
  (ite (or (and (< 0 x) (< 0 y)) (and (< x 0) (< y 0)))
    (mod1 x y)
    (ite (= (mod1 x y) 0) 0 (+ (mod1 x y) y))))

;; nth
(declare-fun nth ((_ BitVec 64)
  Int) Bool)

;; lsr
(declare-fun lsr ((_ BitVec 64)
  Int) (_ BitVec 64))

;; asr
(declare-fun asr ((_ BitVec 64)
  Int) (_ BitVec 64))

;; lsl
(declare-fun lsl ((_ BitVec 64)
  Int) (_ BitVec 64))

;; rotate_right
(declare-fun rotate_right1 ((_ BitVec 64)
  Int) (_ BitVec 64))

;; rotate_left
(declare-fun rotate_left1 ((_ BitVec 64)
  Int) (_ BitVec 64))

;; pow2
(declare-fun pow2 (Int) Int)

(declare-const two_power_size_minus_one Int)

;; two_power_size_minus_one_val
(assert (= two_power_size_minus_one (pow2 (- 64 1))))

;; to_int
(define-fun to_int1 ((x (_ BitVec 64))) Int
  (ite (bvsge x (_ bv0 64))
    (bv2nat x)
    (- (- 18446744073709551616 (bv2nat x)))))

;; uint_in_range
(define-fun uint_in_range ((i Int)) Bool
  (and (<= 0 i) (<= i 18446744073709551615)))

;; lsr_bv_is_lsr
(assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
    (= (bvlshr x n) (lsr x (bv2nat n)))))

;; asr_bv_is_asr
(assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
    (= (bvashr x n) (asr x (bv2nat n)))))

;; lsl_bv_is_lsl
(assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
    (= (bvshl x n) (lsl x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
(assert
  (forall ((v (_ BitVec 64)) (n (_ BitVec 64)))
    (= (bvor (bvshl v (bvurem n (_ bv64 64))) (bvlshr v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) 
    (rotate_left1
      v
      (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
(assert
  (forall ((v (_ BitVec 64)) (n (_ BitVec 64)))
    (= (bvor (bvlshr v (bvurem n (_ bv64 64))) (bvshl v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) 
    (rotate_right1
      v
      (bv2nat n)))))

;; nth_bv
(declare-fun nth_bv ((_ BitVec 64)
  (_ BitVec 64)) Bool)

;; nth_bv_def
(assert
  (forall ((x (_ BitVec 64)) (i (_ BitVec 64)))
    (=
      (= (nth_bv x i) true)
      (not (= (bvand (bvlshr x i) #x0000000000000001) #x0000000000000000)))))

;; Nth_bv_is_nth
(assert
  (forall ((x (_ BitVec 64)) (i (_ BitVec 64)))
    (= (nth x (bv2nat i)) (nth_bv x i))))

;; Nth_bv_is_nth2
(assert
  (forall ((x (_ BitVec 64)) (i Int))
    (=>
      (and (<= 0 i) (< i 18446744073709551616))
      (= (nth_bv x ((_ int2bv 64) i)) (nth x i)))))

;; eq_sub_bv
(declare-fun eq_sub_bv ((_ BitVec 64)
  (_ BitVec 64)
  (_ BitVec 64)
  (_ BitVec 64)) Bool)

;; eq_sub_bv_def
(assert
  (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64)))
    (let ((mask (bvshl (bvsub (bvshl #x0000000000000001 n) #x0000000000000001) i)))
      (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))

;; eq_sub
(define-fun eq_sub ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int) (n Int)) Bool
  (forall ((j Int))
    (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

;; eq_sub_equiv
(assert
  (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64)))
    (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))

(declare-datatypes ((t__ref 0))
  (((t__refqtmk (t__content (_ BitVec 64))))))

;; bool_eq
(define-fun bool_eq ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool
  (ite (= x y) true false))

;; bool_ne
(define-fun bool_ne ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool
  (ite (not (= x y)) true false))

;; bool_lt
(define-fun bool_lt ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool
  (ite (bvult x y) true false))

;; bool_le
(define-fun bool_le ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool
  (ite (bvule x y) true false))

;; bool_gt
(define-fun bool_gt ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool
  (ite (bvugt x y) true false))

;; bool_ge
(define-fun bool_ge ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool
  (ite (bvuge x y) true false))

;; power
(declare-fun power1 ((_ BitVec 64)
  Int) (_ BitVec 64))

;; Power_0
(assert (forall ((x (_ BitVec 64))) (= (power1 x 0) #x0000000000000001)))

;; Power_1
(assert (forall ((x (_ BitVec 64))) (= (power1 x 1) x)))

;; Power_s
(assert
  (forall ((x (_ BitVec 64)) (n Int))
    (=> (<= 0 n) (= (power1 x (+ n 1)) (bvmul x (power1 x n))))))

;; Power_s_alt
(assert
  (forall ((x (_ BitVec 64)) (n Int))
    (=> (< 0 n) (= (power1 x n) (bvmul x (power1 x (- n 1)))))))

;; Power_sum
(assert
  (forall ((x (_ BitVec 64)) (n Int) (m Int))
    (=>
      (<= 0 n)
      (=> (<= 0 m) (= (power1 x (+ n m)) (bvmul (power1 x n) (power1 x m)))))))

;; Power_mult
(assert
  (forall ((x (_ BitVec 64)) (n Int) (m Int))
    (=>
      (<= 0 n)
      (=> (<= 0 m) (= (power1 x (* n m)) (power1 (power1 x n) m))))))

;; Power_mult2
(assert
  (forall ((x (_ BitVec 64)) (y (_ BitVec 64)) (n Int))
    (=>
      (<= 0 n)
      (= (power1 (bvmul x y) n) (bvmul (power1 x n) (power1 y n))))))

;; bv_min
(define-fun bv_min ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)
  (ite (bvule x y) x y))

;; bv_max
(define-fun bv_max ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)
  (ite (bvule x y) y x))

;; min
(define-fun min ((x Int) (y Int)) Int
  (ite (<= x y) x y))

;; max
(define-fun max ((x Int) (y Int)) Int
  (ite (<= x y) y x))

;; Min_r
(assert (forall ((x Int) (y Int)) (=> (<= y x) (= (min x y) y))))

;; Max_l
(assert (forall ((x Int) (y Int)) (=> (<= y x) (= (max x y) x))))

;; Min_comm
(assert (forall ((x Int) (y Int)) (= (min x y) (min y x))))

;; Max_comm
(assert (forall ((x Int) (y Int)) (= (max x y) (max y x))))

;; Min_assoc
(assert
  (forall ((x Int) (y Int) (z Int)) (= (min (min x y) z) (min x (min y z)))))

;; Max_assoc
(assert
  (forall ((x Int) (y Int) (z Int)) (= (max (max x y) z) (max x (max y z)))))

;; bv_min_to_uint
(assert
  (forall ((x (_ BitVec 64)) (y (_ BitVec 64)))
    (= (bv2nat (bv_min x y)) (min (bv2nat x) (bv2nat y)))))

;; bv_max_to_uint
(assert
  (forall ((x (_ BitVec 64)) (y (_ BitVec 64)))
    (= (bv2nat (bv_max x y)) (max (bv2nat x) (bv2nat y)))))

;; uc_of_int
(define-fun uc_of_int ((x Int)) (_ BitVec 64)
  (ite (<= 0 x) ((_ int2bv 64) x) (bvneg ((_ int2bv 64) (- x)))))

;; uc_to_int
(define-fun uc_to_int ((x (_ BitVec 64))) Int
  (ite (= (bool_lt x ((_ int2bv 64) two_power_size_minus_one)) true)
    (bv2nat x)
    (- (bv2nat (bvneg x)))))

;; nth
(declare-fun nth1 ((_ BitVec 128)
  Int) Bool)

;; lsr
(declare-fun lsr1 ((_ BitVec 128)
  Int) (_ BitVec 128))

;; asr
(declare-fun asr1 ((_ BitVec 128)
  Int) (_ BitVec 128))

;; lsl
(declare-fun lsl1 ((_ BitVec 128)
  Int) (_ BitVec 128))

;; rotate_right
(declare-fun rotate_right2 ((_ BitVec 128)
  Int) (_ BitVec 128))

;; rotate_left
(declare-fun rotate_left2 ((_ BitVec 128)
  Int) (_ BitVec 128))

(declare-const two_power_size_minus_one1 Int)

;; two_power_size_minus_one_val
(assert (= two_power_size_minus_one1 (pow2 (- 128 1))))

;; to_int
(define-fun to_int2 ((x (_ BitVec 128))) Int
  (ite (bvsge x (_ bv0 128))
    (bv2nat x)
    (- (- 340282366920938463463374607431768211456 (bv2nat x)))))

;; uint_in_range
(define-fun uint_in_range1 ((i Int)) Bool
  (and (<= 0 i) (<= i 340282366920938463463374607431768211455)))

;; lsr_bv_is_lsr
(assert
  (forall ((x (_ BitVec 128)) (n (_ BitVec 128)))
    (= (bvlshr x n) (lsr1 x (bv2nat n)))))

;; asr_bv_is_asr
(assert
  (forall ((x (_ BitVec 128)) (n (_ BitVec 128)))
    (= (bvashr x n) (asr1 x (bv2nat n)))))

;; lsl_bv_is_lsl
(assert
  (forall ((x (_ BitVec 128)) (n (_ BitVec 128)))
    (= (bvshl x n) (lsl1 x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
(assert
  (forall ((v (_ BitVec 128)) (n (_ BitVec 128)))
    (= (bvor (bvshl v (bvurem n (_ bv128 128))) (bvlshr v (bvsub (_ bv128 128) (bvurem n (_ bv128 128))))) 
    (rotate_left2
      v
      (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
(assert
  (forall ((v (_ BitVec 128)) (n (_ BitVec 128)))
    (= (bvor (bvlshr v (bvurem n (_ bv128 128))) (bvshl v (bvsub (_ bv128 128) (bvurem n (_ bv128 128))))) 
    (rotate_right2
      v
      (bv2nat n)))))

;; nth_bv
(declare-fun nth_bv1 ((_ BitVec 128)
  (_ BitVec 128)) Bool)

;; nth_bv_def
(assert
  (forall ((x (_ BitVec 128)) (i (_ BitVec 128)))
    (=
      (= (nth_bv1 x i) true)
      (not
        (= (bvand (bvlshr x i) #x00000000000000000000000000000001) #x00000000000000000000000000000000)))))

;; Nth_bv_is_nth
(assert
  (forall ((x (_ BitVec 128)) (i (_ BitVec 128)))
    (= (nth1 x (bv2nat i)) (nth_bv1 x i))))

;; Nth_bv_is_nth2
(assert
  (forall ((x (_ BitVec 128)) (i Int))
    (=>
      (and (<= 0 i) (< i 340282366920938463463374607431768211456))
      (= (nth_bv1 x ((_ int2bv 128) i)) (nth1 x i)))))

;; eq_sub_bv
(declare-fun eq_sub_bv1 ((_ BitVec 128)
  (_ BitVec 128)
  (_ BitVec 128)
  (_ BitVec 128)) Bool)

;; eq_sub_bv_def
(assert
  (forall ((a (_ BitVec 128)) (b (_ BitVec 128)) (i (_ BitVec 128)) (n (_ BitVec 128)))
    (let ((mask (bvshl (bvsub (bvshl #x00000000000000000000000000000001 n) #x00000000000000000000000000000001) i)))
      (= (eq_sub_bv1 a b i n) (= (bvand b mask) (bvand a mask))))))

;; eq_sub
(define-fun eq_sub1 ((a (_ BitVec 128)) (b (_ BitVec 128)) (i Int) (n Int)) Bool
  (forall ((j Int))
    (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))

;; eq_sub_equiv
(assert
  (forall ((a (_ BitVec 128)) (b (_ BitVec 128)) (i (_ BitVec 128)) (n (_ BitVec 128)))
    (= (eq_sub1 a b (bv2nat i) (bv2nat n)) (eq_sub_bv1 a b i n))))

(declare-datatypes ((t__ref1 0))
  (((t__refqtmk1 (t__content1 (_ BitVec 128))))))

;; bool_eq
(define-fun bool_eq1 ((x (_ BitVec 128)) (y (_ BitVec 128))) Bool
  (ite (= x y) true false))

;; bool_ne
(define-fun bool_ne1 ((x (_ BitVec 128)) (y (_ BitVec 128))) Bool
  (ite (not (= x y)) true false))

;; bool_lt
(define-fun bool_lt1 ((x (_ BitVec 128)) (y (_ BitVec 128))) Bool
  (ite (bvult x y) true false))

;; bool_le
(define-fun bool_le1 ((x (_ BitVec 128)) (y (_ BitVec 128))) Bool
  (ite (bvule x y) true false))

;; bool_gt
(define-fun bool_gt1 ((x (_ BitVec 128)) (y (_ BitVec 128))) Bool
  (ite (bvugt x y) true false))

;; bool_ge
(define-fun bool_ge1 ((x (_ BitVec 128)) (y (_ BitVec 128))) Bool
  (ite (bvuge x y) true false))

;; power
(declare-fun power2 ((_ BitVec 128)
  Int) (_ BitVec 128))

;; Power_0
(assert
  (forall ((x (_ BitVec 128)))
    (= (power2 x 0) #x00000000000000000000000000000001)))

;; Power_1
(assert (forall ((x (_ BitVec 128))) (= (power2 x 1) x)))

;; Power_s
(assert
  (forall ((x (_ BitVec 128)) (n Int))
    (=> (<= 0 n) (= (power2 x (+ n 1)) (bvmul x (power2 x n))))))

;; Power_s_alt
(assert
  (forall ((x (_ BitVec 128)) (n Int))
    (=> (< 0 n) (= (power2 x n) (bvmul x (power2 x (- n 1)))))))

;; Power_sum
(assert
  (forall ((x (_ BitVec 128)) (n Int) (m Int))
    (=>
      (<= 0 n)
      (=> (<= 0 m) (= (power2 x (+ n m)) (bvmul (power2 x n) (power2 x m)))))))

;; Power_mult
(assert
  (forall ((x (_ BitVec 128)) (n Int) (m Int))
    (=>
      (<= 0 n)
      (=> (<= 0 m) (= (power2 x (* n m)) (power2 (power2 x n) m))))))

;; Power_mult2
(assert
  (forall ((x (_ BitVec 128)) (y (_ BitVec 128)) (n Int))
    (=>
      (<= 0 n)
      (= (power2 (bvmul x y) n) (bvmul (power2 x n) (power2 y n))))))

;; bv_min
(define-fun bv_min1 ((x (_ BitVec 128)) (y (_ BitVec 128))) (_ BitVec 128)
  (ite (bvule x y) x y))

;; bv_max
(define-fun bv_max1 ((x (_ BitVec 128)) (y (_ BitVec 128))) (_ BitVec 128)
  (ite (bvule x y) y x))

;; bv_min_to_uint
(assert
  (forall ((x (_ BitVec 128)) (y (_ BitVec 128)))
    (= (bv2nat (bv_min1 x y)) (min (bv2nat x) (bv2nat y)))))

;; bv_max_to_uint
(assert
  (forall ((x (_ BitVec 128)) (y (_ BitVec 128)))
    (= (bv2nat (bv_max1 x y)) (max (bv2nat x) (bv2nat y)))))

;; uc_of_int
(define-fun uc_of_int1 ((x Int)) (_ BitVec 128)
  (ite (<= 0 x) ((_ int2bv 128) x) (bvneg ((_ int2bv 128) (- x)))))

;; uc_to_int
(define-fun uc_to_int1 ((x (_ BitVec 128))) Int
  (ite (= (bool_lt1 x ((_ int2bv 128) two_power_size_minus_one1)) true)
    (bv2nat x)
    (- (bv2nat (bvneg x)))))

;; bool_eq
(define-fun bool_eq2 ((x Bool) (y Bool)) Bool
  (ite (= x y) true false))

;; to_int
(define-fun to_int3 ((b Bool)) Int
  (ite (= b true) 1 0))

;; of_int
(define-fun of_int ((i Int)) Bool
  (ite (= i 0) false true))

;; in_range
(define-fun in_range ((x Int)) Bool
  (or (= x 0) (= x 1)))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

;; integer'int
(declare-fun integerqtint (integer) Int)

;; integer'axiom
(assert
  (forall ((i integer))
    (and
      (<= (- 2147483648) (integerqtint i))
      (<= (integerqtint i) 2147483647))))

;; in_range
(define-fun in_range1 ((x Int)) Bool
  (and (<= (- 2147483648) x) (<= x 2147483647)))

;; bool_eq
(define-fun bool_eq3 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

;; user_eq
(declare-fun user_eq (integer
  integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
  (((integer__refqtmk (integer__content integer)))))

;; integer__ref_integer__content__projection
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer
  (integer__content a))

(declare-sort natural 0)

;; natural'int
(declare-fun naturalqtint (natural) Int)

;; natural'axiom
(assert
  (forall ((i natural))
    (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

;; in_range
(define-fun in_range2 ((x Int)) Bool
  (and (<= 0 x) (<= x 2147483647)))

;; bool_eq
(define-fun bool_eq4 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

;; user_eq
(declare-fun user_eq1 (natural
  natural) Bool)

(declare-const dummy1 natural)

(declare-datatypes ((natural__ref 0))
  (((natural__refqtmk (natural__content natural)))))

;; natural__ref_natural__content__projection
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural
  (natural__content a))

;; dynamic_invariant
(define-fun dynamic_invariant ((temp___expr_46 Int) (temp___is_init_42 Bool) (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool) (temp___do_typ_inv_45 Bool)) Bool
  (=>
    (or (= temp___is_init_42 true) (<= 0 2147483647))
    (in_range2 temp___expr_46)))

;; to_rep
(define-fun to_rep ((x natural)) Int
  (naturalqtint x))

;; of_rep
(declare-fun of_rep (Int) natural)

;; inversion_axiom
(assert
  (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
(assert
  (forall ((x natural)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
(assert
  (forall ((x Int))
    (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                                (of_rep x))) )))

;; bool_eq
(declare-fun bool_eq5 (Int
  Int) Bool)

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
(assert (<= 0 value__size))

;; object__size_axiom
(assert (<= 0 object__size))

;; alignment_axiom
(assert (<= 0 alignment))

;; user_eq
(declare-fun user_eq2 (Int
  Int) Bool)

(declare-const dummy2 Int)

(declare-datatypes ((big_integer__ref 0))
  (((big_integer__refqtmk (big_integer__content Int)))))

;; big_integer__ref_big_integer__content__projection
(define-fun big_integer__ref_big_integer__content__projection ((a big_integer__ref)) Int
  (big_integer__content a))

(declare-datatypes ((valid_big_integer__ref 0))
  (((valid_big_integer__refqtmk (valid_big_integer__content Int)))))

;; valid_big_integer__ref_valid_big_integer__content__projection
(define-fun valid_big_integer__ref_valid_big_integer__content__projection 
  ((a valid_big_integer__ref)) Int
  (valid_big_integer__content a))

;; big
(declare-fun big (Int) Int)

;; big__function_guard
(declare-fun big__function_guard (Int
  Int) Bool)

(declare-sort int128 0)

;; int128'int
(declare-fun int128qtint (int128) Int)

;; int128'axiom
(assert
  (forall ((i int128))
    (and
      (<= (- 170141183460469231731687303715884105728) (int128qtint i))
      (<= (int128qtint i) 170141183460469231731687303715884105727))))

;; in_range
(define-fun in_range3 ((x Int)) Bool
  (and
    (<= (- 170141183460469231731687303715884105728) x)
    (<= x 170141183460469231731687303715884105727)))

;; bool_eq
(define-fun bool_eq6 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

;; user_eq
(declare-fun user_eq3 (int128
  int128) Bool)

(declare-const dummy3 int128)

(declare-datatypes ((int128__ref 0))
  (((int128__refqtmk (int128__content int128)))))

;; int128__ref_int128__content__projection
(define-fun int128__ref_int128__content__projection ((a int128__ref)) int128
  (int128__content a))

;; dynamic_invariant
(define-fun dynamic_invariant1 ((temp___expr_235 Int) (temp___is_init_231 Bool) (temp___skip_constant_232 Bool) (temp___do_toplevel_233 Bool) (temp___do_typ_inv_234 Bool)) Bool
  (=>
    (or
      (= temp___is_init_231 true)
      (<= (- 170141183460469231731687303715884105728) 170141183460469231731687303715884105727))
    (in_range3 temp___expr_235)))

;; big__post_axiom
(assert true)

;; big__def_axiom
(assert
  (forall ((arg Int))
    (! (=> (dynamic_invariant1 arg true true true true) (= (big arg) arg)) :pattern (
    (big
      arg)) )))

;; in_double_int_range
(declare-fun in_double_int_range (Int) Bool)

;; in_double_int_range__function_guard
(declare-fun in_double_int_range__function_guard (Bool
  Int) Bool)

;; in_range
(declare-fun in_range4 (Int
  Int
  Int) Bool)

;; in_range__function_guard
(declare-fun in_range__function_guard (Bool
  Int
  Int
  Int) Bool)

;; in_double_int_range__post_axiom
(assert true)

;; in_double_int_range__def_axiom
(assert
  (forall ((arg Int))
    (! (=
         (= (in_double_int_range arg) true)
         (= (in_range4
              arg
              (big (- 170141183460469231731687303715884105728))
              (big 170141183460469231731687303715884105727)) true)) :pattern (
    (in_double_int_range
      arg)) )))

;; big
(declare-fun big1 ((_ BitVec 128)) Int)

;; big__function_guard
(declare-fun big__function_guard1 (Int
  (_ BitVec 128)) Bool)

(declare-sort uns128 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 128))

;; bool_eq
(define-fun bool_eq7 ((x (_ BitVec 128)) (y (_ BitVec 128))) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE4 ((_ BitVec 128)) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) (_ BitVec 128))

;; user_eq
(declare-fun user_eq4 (uns128
  uns128) Bool)

(declare-const dummy4 uns128)

(declare-datatypes ((uns128__ref 0))
  (((uns128__refqtmk (uns128__content uns128)))))

;; uns128__ref_uns128__content__projection
(define-fun uns128__ref_uns128__content__projection ((a uns128__ref)) uns128
  (uns128__content a))

;; dynamic_invariant
(define-fun dynamic_invariant2 ((temp___expr_282 (_ BitVec 128)) (temp___is_init_278 Bool) (temp___skip_constant_279 Bool) (temp___do_toplevel_280 Bool) (temp___do_typ_inv_281 Bool)) Bool
  true)

;; big__post_axiom
(assert true)

;; big__def_axiom
(assert
  (forall ((arg (_ BitVec 128)))
    (! (=>
         (dynamic_invariant2 arg true true true true)
         (= (big1 arg) (bv2nat arg))) :pattern ((big1 arg)) )))

;; round_quotient
(declare-fun round_quotient (Int
  Int
  Int
  Int) Int)

;; round_quotient__function_guard
(declare-fun round_quotient__function_guard (Int
  Int
  Int
  Int
  Int) Bool)

;; same_sign
(declare-fun same_sign (Int
  Int) Bool)

;; same_sign__function_guard
(declare-fun same_sign__function_guard (Bool
  Int
  Int) Bool)

;; round_quotient__post_axiom
(assert true)

;; round_quotient__def_axiom
(assert
  (forall ((x Int) (y Int) (q Int) (r Int))
    (! (= (round_quotient x y q r) (ite (< (div1
                                             (- (abs1 y) (big 1))
                                             (big 2)) (abs1 r))
                                     (ite (= (same_sign x y) true)
                                       (+ q (big 1))
                                       (- q (big 1)))
                                     q)) :pattern ((round_quotient x y q r)) )))

(declare-const x Int)

(declare-const y Int)

(declare-const z Int)

(declare-const round Bool)

(declare-const log_single_size Int)

;; oadd
(define-fun oadd ((a (_ BitVec 64)) (b (_ BitVec 64))) (_ BitVec 128)
  (bvadd ((_ zero_extend 64) a) ((_ zero_extend 64) b)))

;; oadd__function_guard
(declare-fun oadd__function_guard ((_ BitVec 128)
  (_ BitVec 64)
  (_ BitVec 64)) Bool)

;; oadd
(define-fun oadd1 ((a (_ BitVec 128)) (b (_ BitVec 64))) (_ BitVec 128)
  (bvadd a ((_ zero_extend 64) b)))

;; oadd__function_guard
(declare-fun oadd__function_guard1 ((_ BitVec 128)
  (_ BitVec 128)
  (_ BitVec 64)) Bool)

;; omultiply
(define-fun omultiply ((a (_ BitVec 64)) (b (_ BitVec 64))) (_ BitVec 128)
  (bvmul ((_ zero_extend 64) a) ((_ zero_extend 64) b)))

;; omultiply__function_guard
(declare-fun omultiply__function_guard ((_ BitVec 128)
  (_ BitVec 64)
  (_ BitVec 64)) Bool)

;; odivide
(define-fun odivide ((a (_ BitVec 128)) (b (_ BitVec 64))) (_ BitVec 128)
  (bvudiv a ((_ zero_extend 64) b)))

;; odivide__function_guard
(declare-fun odivide__function_guard ((_ BitVec 128)
  (_ BitVec 128)
  (_ BitVec 64)) Bool)

;; oconcat
(declare-fun oconcat ((_ BitVec 64)
  (_ BitVec 64)) (_ BitVec 128))

;; oconcat__function_guard
(declare-fun oconcat__function_guard ((_ BitVec 128)
  (_ BitVec 64)
  (_ BitVec 64)) Bool)

(declare-sort uns64 0)

(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 64))

;; bool_eq
(define-fun bool_eq8 ((x1 (_ BitVec 64)) (y1 (_ BitVec 64))) Bool
  (ite (= x1 y1) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE5 ((_ BitVec 64)) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) (_ BitVec 64))

;; user_eq
(declare-fun user_eq5 (uns64
  uns64) Bool)

(declare-const dummy5 uns64)

(declare-datatypes ((uns64__ref 0))
  (((uns64__refqtmk (uns64__content uns64)))))

;; uns64__ref_uns64__content__projection
(define-fun uns64__ref_uns64__content__projection ((a uns64__ref)) uns64
  (uns64__content a))

;; dynamic_invariant
(define-fun dynamic_invariant3 ((temp___expr_296 (_ BitVec 64)) (temp___is_init_292 Bool) (temp___skip_constant_293 Bool) (temp___do_toplevel_294 Bool) (temp___do_typ_inv_295 Bool)) Bool
  true)

;; oconcat__post_axiom
(assert
  (forall ((hi (_ BitVec 64)) (lo (_ BitVec 64)))
    (! (=>
         (and
           (dynamic_invariant3 hi true true true true)
           (dynamic_invariant3 lo true true true true))
         (let ((result (oconcat hi lo)))
           (=>
             (oconcat__function_guard result hi lo)
             (dynamic_invariant2 result true false true true)))) :pattern (
    (oconcat
      hi
      lo)) )))

;; oconcat__def_axiom
(assert
  (forall ((hi (_ BitVec 64)) (lo (_ BitVec 64)))
    (! (=>
         (and
           (dynamic_invariant3 hi true true true true)
           (dynamic_invariant3 lo true true true true))
         (= (oconcat hi lo) (bvor (bvshl ((_ zero_extend 64) hi) ((_ int2bv 128) 64)) ((_ zero_extend 64) lo)))) :pattern (
    (oconcat
      hi
      lo)) )))

;; oabs
(define-fun oabs ((x1 Int)) (_ BitVec 128)
  (ite (= x1 (- 170141183460469231731687303715884105728))
    #x80000000000000000000000000000000
    ((_ int2bv 128) (abs1 x1))))

;; oabs__function_guard
(declare-fun oabs__function_guard ((_ BitVec 128)
  Int) Bool)

;; orem
(define-fun orem ((a (_ BitVec 128)) (b (_ BitVec 64))) (_ BitVec 128)
  (bvurem a ((_ zero_extend 64) b)))

;; orem__function_guard
(declare-fun orem__function_guard ((_ BitVec 128)
  (_ BitVec 128)
  (_ BitVec 64)) Bool)

;; big_2xx
(declare-fun big_2xx (Int) Int)

;; big_2xx__function_guard
(declare-fun big_2xx__function_guard (Int
  Int) Bool)

;; big_2xx__post_axiom
(assert
  (forall ((n Int))
    (! (=>
         (and (dynamic_invariant n true true true true) (< n 128))
         (let ((result (big_2xx n)))
           (=> (big_2xx__function_guard result n) (< 0 result)))) :pattern (
    (big_2xx
      n)) )))

;; big_2xx__def_axiom
(assert
  (forall ((n Int))
    (! (=>
         (dynamic_invariant n true true true true)
         (= (big_2xx n) (big1
                          (ite (< n 340282366920938463463374607431768211456)
                            (bvshl #x00000000000000000000000000000001 ((_ int2bv 128) n))
                            #x00000000000000000000000000000000)))) :pattern (
    (big_2xx
      n)) )))

;; big3
(declare-fun big3 ((_ BitVec 64)
  (_ BitVec 64)
  (_ BitVec 64)) Int)

;; big3__function_guard
(declare-fun big3__function_guard (Int
  (_ BitVec 64)
  (_ BitVec 64)
  (_ BitVec 64)) Bool)

(declare-const big_2xxsingle Int)

;; big3__post_axiom
(assert true)

;; big3__def_axiom
(assert
  (forall ((x1 (_ BitVec 64)) (x2 (_ BitVec 64)) (x3 (_ BitVec 64)))
    (! (=>
         (and
           (and
             (dynamic_invariant3 x1 true true true true)
             (dynamic_invariant3 x2 true true true true))
           (dynamic_invariant3 x3 true true true true))
         (= (big3 x1 x2 x3) (+ (+ (* (* big_2xxsingle big_2xxsingle) 
         (big1
           ((_ zero_extend 64) x1))) (* big_2xxsingle (big1
                                                        ((_ zero_extend 64) x2)))) 
         (big1
           ((_ zero_extend 64) x3))))) :pattern ((big3 x1 x2 x3)) )))

;; le3
(declare-fun le3 ((_ BitVec 64)
  (_ BitVec 64)
  (_ BitVec 64)
  (_ BitVec 64)
  (_ BitVec 64)
  (_ BitVec 64)) Bool)

;; le3__function_guard
(declare-fun le3__function_guard (Bool
  (_ BitVec 64)
  (_ BitVec 64)
  (_ BitVec 64)
  (_ BitVec 64)
  (_ BitVec 64)
  (_ BitVec 64)) Bool)

;; le3__post_axiom
(assert
  (forall ((x1 (_ BitVec 64)) (x2 (_ BitVec 64)) (x3 (_ BitVec 64)) (y1 (_ BitVec 64)) (y2 (_ BitVec 64)) (y3 (_ BitVec 64)))
    (! (=>
         (and
           (and
             (and
               (and
                 (and
                   (dynamic_invariant3 x1 true true true true)
                   (dynamic_invariant3 x2 true true true true))
                 (dynamic_invariant3 x3 true true true true))
               (dynamic_invariant3 y1 true true true true))
             (dynamic_invariant3 y2 true true true true))
           (dynamic_invariant3 y3 true true true true))
         (let ((result (le3 x1 x2 x3 y1 y2 y3)))
           (=>
             (le3__function_guard result x1 x2 x3 y1 y2 y3)
             (= (= result true) (<= (big3 x1 x2 x3) (big3 y1 y2 y3)))))) :pattern (
    (le3
      x1
      x2
      x3
      y1
      y2
      y3)) )))

;; lo
(define-fun lo ((a (_ BitVec 128))) (_ BitVec 64)
  ((_ extract 63 0) (bvand a #x0000000000000000FFFFFFFFFFFFFFFF)))

;; lo__function_guard
(declare-fun lo__function_guard ((_ BitVec 64)
  (_ BitVec 128)) Bool)

;; hi
(declare-fun hi ((_ BitVec 128)) (_ BitVec 64))

;; hi__function_guard
(declare-fun hi__function_guard ((_ BitVec 64)
  (_ BitVec 128)) Bool)

;; hi__post_axiom
(assert
  (forall ((a (_ BitVec 128)))
    (! (=>
         (dynamic_invariant2 a true true true true)
         (let ((result (hi a)))
           (=>
             (hi__function_guard result a)
             (dynamic_invariant3 result true false true true)))) :pattern (
    (hi
      a)) )))

;; hi__def_axiom
(assert
  (forall ((a (_ BitVec 128)))
    (! (=>
         (dynamic_invariant2 a true true true true)
         (= (hi a) ((_ extract 63 0) (bvlshr a ((_ int2bv 128) 64))))) :pattern (
    (hi
      a)) )))

;; to_neg_int
(declare-fun to_neg_int ((_ BitVec 128)) Int)

;; to_neg_int__function_guard
(declare-fun to_neg_int__function_guard (Int
  (_ BitVec 128)) Bool)

;; to_neg_int__post_axiom
(assert
  (forall ((a (_ BitVec 128)))
    (! (=>
         (and
           (dynamic_invariant2 a true true true true)
           (= (in_double_int_range (- (big1 a))) true))
         (let ((result (to_neg_int a)))
           (=>
             (to_neg_int__function_guard result a)
             (and
               (= (big result) (- (big1 a)))
               (dynamic_invariant1 result true false true true))))) :pattern (
    (to_neg_int
      a)) )))

;; to_pos_int
(declare-fun to_pos_int ((_ BitVec 128)) Int)

;; to_pos_int__function_guard
(declare-fun to_pos_int__function_guard (Int
  (_ BitVec 128)) Bool)

;; to_pos_int__post_axiom
(assert
  (forall ((a (_ BitVec 128)))
    (! (=>
         (and
           (dynamic_invariant2 a true true true true)
           (= (in_double_int_range (big1 a)) true))
         (let ((result (to_pos_int a)))
           (=>
             (to_pos_int__function_guard result a)
             (and
               (= (big result) (big1 a))
               (dynamic_invariant1 result true false true true))))) :pattern (
    (to_pos_int
      a)) )))

(declare-const big_2xxdouble Int)

(declare-const xu (_ BitVec 128))

(declare-const xhi (_ BitVec 64))

(declare-const xlo (_ BitVec 64))

(declare-const yu (_ BitVec 128))

(declare-const yhi (_ BitVec 64))

(declare-const ylo (_ BitVec 64))

(declare-datatypes ((uns64__init_wrapper 0))
  (((uns64__init_wrapperqtmk (rec__value uns64)(us_attr__init Bool)))))

;; uns64__init_wrapper_rec__value__projection
(define-fun uns64__init_wrapper_rec__value__projection ((a uns64__init_wrapper)) uns64
  (rec__value a))

;; uns64__init_wrapper___attr__init__projection
(define-fun uns64__init_wrapper___attr__init__projection ((a uns64__init_wrapper)) Bool
  (us_attr__init a))

(declare-const dummy6 uns64__init_wrapper)

;; dummy__def
(assert (= (us_attr__init dummy6) false))

(declare-datatypes ((uns64__init_wrapper__ref 0))
  (((uns64__init_wrapper__refqtmk
    (uns64__init_wrapper__content uns64__init_wrapper)))))

;; uns64__init_wrapper__ref_uns64__init_wrapper__content__projection
(define-fun uns64__init_wrapper__ref_uns64__init_wrapper__content__projection 
  ((a uns64__init_wrapper__ref)) uns64__init_wrapper
  (uns64__init_wrapper__content a))

(declare-datatypes ((map__ref 0))
  (((map__refqtmk (map__content (Array Int uns64__init_wrapper))))))

;; slide
(declare-fun slide ((Array Int uns64__init_wrapper)
  Int
  Int) (Array Int uns64__init_wrapper))

;; slide_eq
(assert
  (forall ((a (Array Int uns64__init_wrapper)))
    (forall ((first Int))
      (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
(assert
  (forall ((a (Array Int uns64__init_wrapper)))
    (forall ((old_first Int))
      (forall ((new_first Int))
        (forall ((i Int))
          (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
          (slide
            a
            old_first
            new_first) i)) ))))))

;; const
(declare-fun const1 (uns64__init_wrapper) (Array Int uns64__init_wrapper))

;; const_def
(assert
  (forall ((v uns64__init_wrapper))
    (forall ((i Int))
      (! (= (select (const1 v) i) v) :pattern ((select (const1 v) i)) ))))

(declare-const mult Int)

(declare-const shift_prev Int)

(declare-const mask_prev (_ BitVec 64))

(declare-const zu_prev (_ BitVec 128))

(declare-const d123 Int)

;; to_rep
(declare-fun to_rep1 (uns64) (_ BitVec 64))

;; of_rep
(declare-fun of_rep1 ((_ BitVec 64)) uns64)

;; inversion_axiom
(assert
  (forall ((x1 uns64))
    (! (= (of_rep1 (to_rep1 x1)) x1) :pattern ((to_rep1 x1)) )))

;; range_axiom
(assert true)

;; coerce_axiom
(assert
  (forall ((x1 (_ BitVec 64)))
    (! (= (to_rep1 (of_rep1 x1)) x1) :pattern ((to_rep1 (of_rep1 x1))) )))

;; to_int
(define-fun to_int4 ((x1 uns64)) Int
  (bv2nat (to_rep1 x1)))

;; range_int_axiom
(assert
  (forall ((x1 uns64))
    (! (uint_in_range (to_int4 x1)) :pattern ((to_int4 x1)) )))

(declare-sort tqdD1 0)

;; tqdD1'int
(declare-fun tqdD1qtint (tqdD1) Int)

;; tqdD1'axiom
(assert
  (forall ((i tqdD1)) (and (<= 1 (tqdD1qtint i)) (<= (tqdD1qtint i) 2))))

;; in_range
(define-fun in_range5 ((x1 Int)) Bool
  (and (<= 1 x1) (<= x1 2)))

;; bool_eq
(define-fun bool_eq9 ((x1 Int) (y1 Int)) Bool
  (ite (= x1 y1) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

;; user_eq
(declare-fun user_eq6 (tqdD1
  tqdD1) Bool)

(declare-const dummy7 tqdD1)

(declare-datatypes ((tqdD1__ref 0))
  (((tqdD1__refqtmk (tqdD1__content tqdD1)))))

;; tqdD1__ref_tqdD1__content__projection
(define-fun tqdD1__ref_tqdD1__content__projection ((a tqdD1__ref)) tqdD1
  (tqdD1__content a))

;; dynamic_invariant
(define-fun dynamic_invariant4 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool
  (=>
    (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647))
    (in_range1 temp___expr_18)))

;; dynamic_invariant
(define-fun dynamic_invariant5 ((temp___expr_256 Int) (temp___is_init_252 Bool) (temp___skip_constant_253 Bool) (temp___do_toplevel_254 Bool) (temp___do_typ_inv_255 Bool)) Bool
  true)

;; in_range__post_axiom
(assert true)

;; in_range__def_axiom
(assert
  (forall ((arg Int))
    (forall ((low Int) (high Int))
      (! (=
           (= (in_range4 arg low high) true)
           (and (<= low arg) (<= arg high))) :pattern ((in_range4
                                                         arg
                                                         low
                                                         high)) ))))

;; same_sign__post_axiom
(assert true)

;; same_sign__def_axiom
(assert
  (forall ((x1 Int) (y1 Int))
    (! (=
         (= (same_sign x1 y1) true)
         (or
           (or (= x1 (big 0)) (= y1 (big 0)))
           (= (< x1 (big 0)) (< y1 (big 0))))) :pattern ((same_sign x1 y1)) )))

;; log_single_size__def_axiom
(assert
  (= log_single_size (ite (= 64 32)
                       5
                       (ite true 6 (ite (= 64 128) 7 (to_rep dummy1))))))

;; big_2xxsingle__def_axiom
(assert (= big_2xxsingle (big 18446744073709551616)))

;; big_2xxdouble__def_axiom
(assert (= big_2xxdouble (+ (big1 #xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) 1)))

;; xu__def_axiom
(assert (= xu (oabs x)))

;; xhi__def_axiom
(assert (and (hi__function_guard (hi xu) xu) (= xhi (hi xu))))

;; xlo__def_axiom
(assert (= xlo (lo xu)))

;; yu__def_axiom
(assert (= yu (oabs y)))

;; yhi__def_axiom
(assert (and (hi__function_guard (hi yu) yu) (= yhi (hi yu))))

;; ylo__def_axiom
(assert (= ylo (lo yu)))

;; mult__def_axiom
(assert (= mult (abs1 (* (big x) (big y)))))

(declare-const q Int)

(declare-const r Int)

(declare-const d (Array Int uns64__init_wrapper))

(declare-const qd (Array Int uns64__init_wrapper))

(declare-const s1 (_ BitVec 64))

(declare-const s2 (_ BitVec 64))

(declare-const s3 (_ BitVec 64))

(declare-const qu (_ BitVec 128))

(declare-const ru (_ BitVec 128))

(declare-const mask (_ BitVec 64))

(declare-const scale Int)

(declare-const shift Int)

(declare-const t1 (_ BitVec 128))

(declare-const t2 (_ BitVec 128))

(declare-const t3 (_ BitVec 128))

(declare-const quot Int)

(declare-const big_r Int)

(declare-const big_q Int)

(declare-const inter Int)

(declare-const prev (_ BitVec 64))

;; Assume
(assert (dynamic_invariant log_single_size true false true true))

;; H
(assert (ite (= 64 32) (= log_single_size 5) (= log_single_size 6)))

;; Assume
(assert (dynamic_invariant1 x true false true true))

;; Assume
(assert (dynamic_invariant1 y true false true true))

;; Assume
(assert (dynamic_invariant1 z true false true true))

;; Assume
(assert (dynamic_invariant1 q false false true true))

;; Assume
(assert (dynamic_invariant1 r false false true true))

;; Assume
(assert
  (and
    (not (= z 0))
    (= (in_double_int_range
         (ite (= round true)
           (round_quotient
             (* (big x) (big y))
             (big z)
             (div1 (* (big x) (big y)) (big z))
             (mod1 (* (big x) (big y)) (big z)))
           (div1 (* (big x) (big y)) (big z)))) true)))

;; H
(assert (dynamic_invariant2 (oabs x) true false true true))

;; H
(assert
  (= (oabs x) (ite (= x (- 170141183460469231731687303715884105728))
                #x80000000000000000000000000000000
                ((_ int2bv 128) (abs1 x)))))

;; Assume
(assert (= (oabs x) xu))

;; Assume
(assert (dynamic_invariant2 xu true false true true))

;; H
(assert (hi__function_guard (hi xu) xu))

;; H
(assert (dynamic_invariant3 (hi xu) true false true true))

;; H
(assert (= (hi xu) ((_ extract 63 0) (bvlshr xu ((_ int2bv 128) 64)))))

;; Assume
(assert (= (hi xu) xhi))

;; Assume
(assert (dynamic_invariant3 xhi true false true true))

;; H
(assert (dynamic_invariant3 (lo xu) true false true true))

;; H
(assert
  (= (lo xu) ((_ extract 63 0) (bvand xu #x0000000000000000FFFFFFFFFFFFFFFF))))

;; Assume
(assert (= (lo xu) xlo))

;; Assume
(assert (dynamic_invariant3 xlo true false true true))

;; H
(assert (dynamic_invariant2 (oabs y) true false true true))

;; H
(assert
  (= (oabs y) (ite (= y (- 170141183460469231731687303715884105728))
                #x80000000000000000000000000000000
                ((_ int2bv 128) (abs1 y)))))

;; Assume
(assert (= (oabs y) yu))

;; Assume
(assert (dynamic_invariant2 yu true false true true))

;; H
(assert (hi__function_guard (hi yu) yu))

;; H
(assert (dynamic_invariant3 (hi yu) true false true true))

;; H
(assert (= (hi yu) ((_ extract 63 0) (bvlshr yu ((_ int2bv 128) 64)))))

;; Assume
(assert (= (hi yu) yhi))

;; Assume
(assert (dynamic_invariant3 yhi true false true true))

;; H
(assert (dynamic_invariant3 (lo yu) true false true true))

;; H
(assert
  (= (lo yu) ((_ extract 63 0) (bvand yu #x0000000000000000FFFFFFFFFFFFFFFF))))

;; Assume
(assert (= (lo yu) ylo))

;; Assume
(assert (dynamic_invariant3 ylo true false true true))

;; H
(assert (dynamic_invariant2 (oabs z) true false true true))

;; H
(assert
  (= (oabs z) (ite (= z (- 170141183460469231731687303715884105728))
                #x80000000000000000000000000000000
                ((_ int2bv 128) (abs1 z)))))

(declare-const zu (_ BitVec 128))

;; H
(assert (= zu (oabs z)))

;; Assume
(assert (dynamic_invariant2 zu true false true true))

;; H
(assert (hi__function_guard (hi zu) zu))

;; H
(assert (dynamic_invariant3 (hi zu) true false true true))

;; H
(assert (= (hi zu) ((_ extract 63 0) (bvlshr zu ((_ int2bv 128) 64)))))

(declare-const zhi (_ BitVec 64))

;; H
(assert (= zhi (hi zu)))

;; Assume
(assert (dynamic_invariant3 zhi true false true true))

;; H
(assert (dynamic_invariant3 (lo zu) true false true true))

;; H
(assert
  (= (lo zu) ((_ extract 63 0) (bvand zu #x0000000000000000FFFFFFFFFFFFFFFF))))

(declare-const zlo (_ BitVec 64))

;; H
(assert (= zlo (lo zu)))

;; Assume
(assert (dynamic_invariant3 zlo true false true true))

;; Assume
(assert true)

;; Assume
(assert (dynamic_invariant3 s1 false false true true))

;; Assume
(assert true)

;; Assume
(assert (dynamic_invariant3 s2 false false true true))

;; Assume
(assert true)

;; Assume
(assert (dynamic_invariant3 s3 false false true true))

;; Assume
(assert true)

;; Assume
(assert (dynamic_invariant2 qu false false true true))

;; Assume
(assert true)

;; Assume
(assert (dynamic_invariant2 ru false false true true))

;; Assume
(assert true)

;; Assume
(assert (dynamic_invariant3 mask false false true true))

;; Assume
(assert true)

;; Assume
(assert (dynamic_invariant scale false false true true))

;; Assume
(assert true)

;; Assume
(assert (dynamic_invariant shift false false true true))

;; Assume
(assert true)

;; Assume
(assert (dynamic_invariant2 t1 false false true true))

;; Assume
(assert true)

;; Assume
(assert (dynamic_invariant2 t2 false false true true))

;; Assume
(assert true)

;; Assume
(assert (dynamic_invariant2 t3 false false true true))

;; H
(assert true)

;; H
(assert (= (big y) y))

;; Assert
(assert true)

;; H
(assert true)

;; H
(assert (= (big x) x))

;; Assert
(assert true)

;; Assume
(assert (= (abs1 (* (big x) (big y))) mult))

;; Assume
(assert true)

;; Assume
(assert true)

;; Assume
(assert true)

;; Assume
(assert true)

;; Assume
(assert true)

;; Assume
(assert true)

;; Assume
(assert true)

;; Assume
(assert true)

;; Assume
(assert (dynamic_invariant inter false false true true))

(declare-const spark__branch Bool)

;; H
(assert (= spark__branch (ite (= z 0) true false)))

;; H
(assert (not (= spark__branch true)))

;; H
(assert true)

;; H
(assert (= (big z) z))

;; Assert
(assert true)

;; H
(assert true)

;; H
(assert (= (big y) y))

;; Assert
(assert true)

;; H
(assert true)

;; H
(assert (= (big x) x))

;; Assert
(assert true)

(declare-const quot1 Int)

;; H
(assert (= quot1 (div1 (* (big x) (big y)) (big z))))

;; H
(assert true)

;; H
(assert (= (big z) z))

;; Assert
(assert true)

;; H
(assert true)

;; H
(assert (= (big y) y))

;; Assert
(assert true)

;; H
(assert true)

;; H
(assert (= (big x) x))

;; Assert
(assert true)

(declare-const big_r1 Int)

;; H
(assert (= big_r1 (mod1 (* (big x) (big y)) (big z))))

(declare-const spark__branch1 Bool)

;; H
(assert (= spark__branch1 round))

;; H
(assert
  (or
    (not (= spark__branch1 true))
    (let ((o z))
      (let ((o1 (big o)))
        (and
          (= o1 o)
          (let ((o2 y))
            (let ((o3 (big o2)))
              (and
                (= o3 o2)
                (let ((o4 x))
                  (let ((o5 (big o4)))
                    (and
                      (= o5 o4)
                      (let ((o6 (* o5 o3)))
                        (= (round_quotient o6 o1 quot1 big_r1) (ite (< 
                                                                 (div1
                                                                   (- 
                                                                   (abs1
                                                                    o1) 
                                                                   (big
                                                                    1))
                                                                   (big 2)) 
                                                                 (abs1
                                                                   big_r1))
                                                                 (ite (= 
                                                                   (same_sign
                                                                    o6
                                                                    o1) true)
                                                                   (+ 
                                                                   quot1 
                                                                   (big
                                                                    1))
                                                                   (- 
                                                                   quot1 
                                                                   (big
                                                                    1)))
                                                                 quot1))))))))))))))

;; H
(assert (dynamic_invariant2 (omultiply xlo ylo) true false true true))

;; H
(assert
  (= (omultiply xlo ylo) (bvmul ((_ zero_extend 64) xlo) ((_ zero_extend 64) 
  ylo))))

(declare-const t11 (_ BitVec 128))

;; H
(assert (= t11 (omultiply xlo ylo)))

;; H
(assert (dynamic_invariant3 (lo t11) true false true true))

;; H
(assert
  (= (lo t11) ((_ extract 63 0) (bvand t11 #x0000000000000000FFFFFFFFFFFFFFFF))))

(declare-const o uns64)

;; Ensures
(assert (= (to_rep1 o) (lo t11)))

(declare-const d1 (Array Int uns64__init_wrapper))

;; H
(assert (= d1 (store d 4 (uns64__init_wrapperqtmk o true))))

;; H
(assert (hi__function_guard (hi t11) t11))

;; H
(assert (dynamic_invariant3 (hi t11) true false true true))

;; H
(assert (= (hi t11) ((_ extract 63 0) (bvlshr t11 ((_ int2bv 128) 64)))))

(declare-const o1 uns64)

;; Ensures
(assert (= (to_rep1 o1) (hi t11)))

(declare-const d2 (Array Int uns64__init_wrapper))

;; H
(assert (= d2 (store d1 3 (uns64__init_wrapperqtmk o1 true))))

(declare-const spark__branch2 Bool)

(declare-const d3 (Array Int uns64__init_wrapper))

(declare-const t12 (_ BitVec 128))

(declare-const t21 (_ BitVec 128))

(declare-const t31 (_ BitVec 128))

(declare-const spark__branch3 Bool)

;; H
(assert (= spark__branch3 (ite (not (= yhi #x0000000000000000)) true false)))

(declare-const d4 (Array Int uns64__init_wrapper))

(declare-const o2 uns64)

(declare-const o3 uns64)

(declare-const o4 (_ BitVec 64))

(declare-const o5 uns64)

(declare-const d5 (Array Int uns64__init_wrapper))

(declare-const o6 uns64)

(declare-const t13 (_ BitVec 128))

(declare-const o7 (_ BitVec 64))

(declare-const t22 (_ BitVec 128))

(declare-const o8 uns64)

(declare-const d6 (Array Int uns64__init_wrapper))

(declare-const o9 uns64)

(declare-const d7 (Array Int uns64__init_wrapper))

(declare-const o10 uns64)

(declare-const t14 (_ BitVec 128))

(declare-const o11 (_ BitVec 64))

(declare-const t23 (_ BitVec 128))

(declare-const o12 uns64)

(declare-const d8 (Array Int uns64__init_wrapper))

(declare-const o13 (_ BitVec 64))

(declare-const t32 (_ BitVec 128))

(declare-const o14 uns64)

(declare-const d9 (Array Int uns64__init_wrapper))

(declare-const o15 uns64)

;; H
(assert
  (ite (= spark__branch3 true)
    (let ((o16 yhi))
      (let ((o17 xlo))
        (let ((o18 (omultiply o17 o16)))
          (and
            (and
              (dynamic_invariant2 o18 true false true true)
              (= o18 (bvmul ((_ zero_extend 64) o17) ((_ zero_extend 64) o16))))
            (and
              (= t13 o18)
              (let ((o19 (lo t13)))
                (and
                  (and
                    (dynamic_invariant3 o19 true false true true)
                    (= o19 ((_ extract 63 0) (bvand t13 #x0000000000000000FFFFFFFFFFFFFFFF))))
                  (let ((temp___740 (select d2 3)))
                    (and
                      (= (us_attr__init temp___740) true)
                      (and
                        (= (to_rep1 (rec__value temp___740)) o7)
                        (let ((o20 (oadd o7 o19)))
                          (and
                            (and
                              (dynamic_invariant2 o20 true false true true)
                              (= o20 (bvadd ((_ zero_extend 64) o7) ((_ zero_extend 64) o19))))
                            (and
                              (= t22 o20)
                              (let ((o21 (lo t22)))
                                (and
                                  (and
                                    (dynamic_invariant3
                                      o21
                                      true
                                      false
                                      true
                                      true)
                                    (= o21 ((_ extract 63 0) (bvand t22 #x0000000000000000FFFFFFFFFFFFFFFF))))
                                  (and
                                    (= (to_rep1 o8) o21)
                                    (and
                                      (= d6 (store d2 3 (uns64__init_wrapperqtmk
                                                          o8
                                                          true)))
                                      (let ((o22 (hi t22)))
                                        (and
                                          (and
                                            (hi__function_guard o22 t22)
                                            (and
                                              (dynamic_invariant3
                                                o22
                                                true
                                                false
                                                true
                                                true)
                                              (= o22 ((_ extract 63 0) (bvlshr 
                                              t22 ((_ int2bv 128) 64))))))
                                          (let ((o23 (hi t13)))
                                            (and
                                              (and
                                                (hi__function_guard o23 t13)
                                                (and
                                                  (dynamic_invariant3
                                                    o23
                                                    true
                                                    false
                                                    true
                                                    true)
                                                  (= o23 ((_ extract 63 0) (bvlshr 
                                                  t13 ((_ int2bv 128) 64))))))
                                              (and
                                                (= (to_rep1 o9) (bvadd o23 o22))
                                                (and
                                                  (= d7 (store d6 2 (uns64__init_wrapperqtmk
                                                                    o9
                                                                    true)))
                                                  (and
                                                    (= spark__branch2 
                                                    (ite (not
                                                           (= xhi #x0000000000000000))
                                                      true
                                                      false))
                                                    (ite (= spark__branch2 true)
                                                      (let ((o24 ylo))
                                                        (let ((o25 xhi))
                                                          (let ((o26 
                                                            (omultiply
                                                              o25
                                                              o24)))
                                                            (and
                                                              (and
                                                                (dynamic_invariant2
                                                                  o26
                                                                  true
                                                                  false
                                                                  true
                                                                  true)
                                                                (= o26 (bvmul ((_ zero_extend 64) o25) ((_ zero_extend 64) o24))))
                                                              (and
                                                                (= t14 o26)
                                                                (let ((o27 
                                                                  (lo
                                                                    t14)))
                                                                  (and
                                                                    (and
                                                                    (dynamic_invariant3
                                                                    o27
                                                                    true
                                                                    false
                                                                    true
                                                                    true)
                                                                    (= o27 ((_ extract 63 0) (bvand 
                                                                    t14 #x0000000000000000FFFFFFFFFFFFFFFF))))
                                                                    (let ((temp___746 (select 
                                                                    d7 3)))
                                                                    (and
                                                                    (= 
                                                                    (us_attr__init
                                                                    temp___746) true)
                                                                    (and
                                                                    (= 
                                                                    (to_rep1
                                                                    (rec__value
                                                                    temp___746)) 
                                                                    o11)
                                                                    (let ((o28 
                                                                    (oadd
                                                                    o11
                                                                    o27)))
                                                                    (and
                                                                    (and
                                                                    (dynamic_invariant2
                                                                    o28
                                                                    true
                                                                    false
                                                                    true
                                                                    true)
                                                                    (= o28 (bvadd ((_ zero_extend 64) 
                                                                    o11) ((_ zero_extend 64) o27))))
                                                                    (and
                                                                    (= 
                                                                    t23 o28)
                                                                    (let ((o29 
                                                                    (lo
                                                                    t23)))
                                                                    (and
                                                                    (and
                                                                    (dynamic_invariant3
                                                                    o29
                                                                    true
                                                                    false
                                                                    true
                                                                    true)
                                                                    (= o29 ((_ extract 63 0) (bvand 
                                                                    t23 #x0000000000000000FFFFFFFFFFFFFFFF))))
                                                                    (and
                                                                    (= 
                                                                    (to_rep1
                                                                    o12) o29)
                                                                    (and
                                                                    (= 
                                                                    d8 (store 
                                                                    d7 3 
                                                                    (uns64__init_wrapperqtmk
                                                                    o12
                                                                    true)))
                                                                    (let ((o30 
                                                                    (hi
                                                                    t14)))
                                                                    (and
                                                                    (and
                                                                    (hi__function_guard
                                                                    o30
                                                                    t14)
                                                                    (and
                                                                    (dynamic_invariant3
                                                                    o30
                                                                    true
                                                                    false
                                                                    true
                                                                    true)
                                                                    (= o30 ((_ extract 63 0) (bvlshr 
                                                                    t14 ((_ int2bv 128) 64))))))
                                                                    (let ((temp___750 (select 
                                                                    d8 2)))
                                                                    (and
                                                                    (= 
                                                                    (us_attr__init
                                                                    temp___750) true)
                                                                    (and
                                                                    (= 
                                                                    (to_rep1
                                                                    (rec__value
                                                                    temp___750)) 
                                                                    o13)
                                                                    (let ((o31 
                                                                    (oadd
                                                                    o13
                                                                    o30)))
                                                                    (and
                                                                    (and
                                                                    (dynamic_invariant2
                                                                    o31
                                                                    true
                                                                    false
                                                                    true
                                                                    true)
                                                                    (= o31 (bvadd ((_ zero_extend 64) 
                                                                    o13) ((_ zero_extend 64) o30))))
                                                                    (and
                                                                    (= 
                                                                    t32 o31)
                                                                    (let ((o32 
                                                                    (hi
                                                                    t23)))
                                                                    (and
                                                                    (and
                                                                    (hi__function_guard
                                                                    o32
                                                                    t23)
                                                                    (and
                                                                    (dynamic_invariant3
                                                                    o32
                                                                    true
                                                                    false
                                                                    true
                                                                    true)
                                                                    (= o32 ((_ extract 63 0) (bvlshr 
                                                                    t23 ((_ int2bv 128) 64))))))
                                                                    (let ((o33 
                                                                    (oadd1
                                                                    t32
                                                                    o32)))
                                                                    (and
                                                                    (and
                                                                    (dynamic_invariant2
                                                                    o33
                                                                    true
                                                                    false
                                                                    true
                                                                    true)
                                                                    (= o33 (bvadd 
                                                                    t32 ((_ zero_extend 64) o32))))
                                                                    (and
                                                                    (= 
                                                                    t31 o33)
                                                                    (let ((o34 
                                                                    yhi))
                                                                    (let ((o35 
                                                                    xhi))
                                                                    (let ((o36 
                                                                    (omultiply
                                                                    o35
                                                                    o34)))
                                                                    (and
                                                                    (and
                                                                    (dynamic_invariant2
                                                                    o36
                                                                    true
                                                                    false
                                                                    true
                                                                    true)
                                                                    (= o36 (bvmul ((_ zero_extend 64) o35) ((_ zero_extend 64) o34))))
                                                                    (and
                                                                    (= 
                                                                    t21 o36)
                                                                    (let ((o37 
                                                                    (lo
                                                                    t21)))
                                                                    (and
                                                                    (and
                                                                    (dynamic_invariant3
                                                                    o37
                                                                    true
                                                                    false
                                                                    true
                                                                    true)
                                                                    (= o37 ((_ extract 63 0) (bvand 
                                                                    t21 #x0000000000000000FFFFFFFFFFFFFFFF))))
                                                                    (let ((o38 
                                                                    (oadd1
                                                                    t31
                                                                    o37)))
                                                                    (and
                                                                    (and
                                                                    (dynamic_invariant2
                                                                    o38
                                                                    true
                                                                    false
                                                                    true
                                                                    true)
                                                                    (= o38 (bvadd 
                                                                    t31 ((_ zero_extend 64) o37))))
                                                                    (and
                                                                    (= 
                                                                    t12 o38)
                                                                    (let ((o39 
                                                                    (lo
                                                                    t12)))
                                                                    (and
                                                                    (and
                                                                    (dynamic_invariant3
                                                                    o39
                                                                    true
                                                                    false
                                                                    true
                                                                    true)
                                                                    (= o39 ((_ extract 63 0) (bvand 
                                                                    t12 #x0000000000000000FFFFFFFFFFFFFFFF))))
                                                                    (and
                                                                    (= 
                                                                    (to_rep1
                                                                    o14) o39)
                                                                    (and
                                                                    (= 
                                                                    d9 (store 
                                                                    d8 2 
                                                                    (uns64__init_wrapperqtmk
                                                                    o14
                                                                    true)))
                                                                    (let ((o40 
                                                                    (hi
                                                                    t12)))
                                                                    (and
                                                                    (and
                                                                    (hi__function_guard
                                                                    o40
                                                                    t12)
                                                                    (and
                                                                    (dynamic_invariant3
                                                                    o40
                                                                    true
                                                                    false
                                                                    true
                                                                    true)
                                                                    (= o40 ((_ extract 63 0) (bvlshr 
                                                                    t12 ((_ int2bv 128) 64))))))
                                                                    (let ((o41 
                                                                    (hi
                                                                    t21)))
                                                                    (and
                                                                    (and
                                                                    (hi__function_guard
                                                                    o41
                                                                    t21)
                                                                    (and
                                                                    (dynamic_invariant3
                                                                    o41
                                                                    true
                                                                    false
                                                                    true
                                                                    true)
                                                                    (= o41 ((_ extract 63 0) (bvlshr 
                                                                    t21 ((_ int2bv 128) 64))))))
                                                                    (and
                                                                    (= 
                                                                    (to_rep1
                                                                    o15) (bvadd o41 o40))
                                                                    (= 
                                                                    d3 (store 
                                                                    d9 1 
                                                                    (uns64__init_wrapperqtmk
                                                                    o15
                                                                    true))))))))))))))))))))))))))))))))))))))))))))))))))))
                                                      (and
                                                        (and
                                                          (and
                                                            (and
                                                              (= (to_rep1
                                                                   o10) #x0000000000000000)
                                                              (= d3 (store 
                                                              d7 1 (uns64__init_wrapperqtmk
                                                                    o10
                                                                    true))))
                                                            (= t12 t13))
                                                          (= t21 t22))
                                                        (= t31 t3)))))))))))))))))))))))))))
    (and
      (and
        (and
          (= spark__branch2 (ite (not (= xhi #x0000000000000000)) true false))
          (ite (= spark__branch2 true)
            (let ((o16 ylo))
              (let ((o17 xhi))
                (let ((o18 (omultiply o17 o16)))
                  (and
                    (and
                      (dynamic_invariant2 o18 true false true true)
                      (= o18 (bvmul ((_ zero_extend 64) o17) ((_ zero_extend 64) o16))))
                    (and
                      (= t12 o18)
                      (let ((o19 (lo t12)))
                        (and
                          (and
                            (dynamic_invariant3 o19 true false true true)
                            (= o19 ((_ extract 63 0) (bvand t12 #x0000000000000000FFFFFFFFFFFFFFFF))))
                          (let ((temp___760 (select d2 3)))
                            (and
                              (= (us_attr__init temp___760) true)
                              (and
                                (= (to_rep1 (rec__value temp___760)) 
                                o4)
                                (let ((o20 (oadd o4 o19)))
                                  (and
                                    (and
                                      (dynamic_invariant2
                                        o20
                                        true
                                        false
                                        true
                                        true)
                                      (= o20 (bvadd ((_ zero_extend 64) 
                                      o4) ((_ zero_extend 64) o19))))
                                    (and
                                      (= t21 o20)
                                      (let ((o21 (lo t21)))
                                        (and
                                          (and
                                            (dynamic_invariant3
                                              o21
                                              true
                                              false
                                              true
                                              true)
                                            (= o21 ((_ extract 63 0) (bvand 
                                            t21 #x0000000000000000FFFFFFFFFFFFFFFF))))
                                          (and
                                            (= (to_rep1 o5) o21)
                                            (and
                                              (= d5 (store d2 3 (uns64__init_wrapperqtmk
                                                                  o5
                                                                  true)))
                                              (let ((o22 (hi t21)))
                                                (and
                                                  (and
                                                    (hi__function_guard
                                                      o22
                                                      t21)
                                                    (and
                                                      (dynamic_invariant3
                                                        o22
                                                        true
                                                        false
                                                        true
                                                        true)
                                                      (= o22 ((_ extract 63 0) (bvlshr 
                                                      t21 ((_ int2bv 128) 64))))))
                                                  (let ((o23 (hi t12)))
                                                    (and
                                                      (and
                                                        (hi__function_guard
                                                          o23
                                                          t12)
                                                        (and
                                                          (dynamic_invariant3
                                                            o23
                                                            true
                                                            false
                                                            true
                                                            true)
                                                          (= o23 ((_ extract 63 0) (bvlshr 
                                                          t12 ((_ int2bv 128) 64))))))
                                                      (and
                                                        (= (to_rep1 o6) (bvadd o23 o22))
                                                        (= d4 (store 
                                                        d5 2 (uns64__init_wrapperqtmk
                                                               o6
                                                               true)))))))))))))))))))))))))
            (and
              (and
                (and
                  (= (to_rep1 o3) #x0000000000000000)
                  (= d4 (store d2 2 (uns64__init_wrapperqtmk o3 true))))
                (= t12 t11))
              (= t21 t2))))
        (and
          (= (to_rep1 o2) #x0000000000000000)
          (= d3 (store d4 1 (uns64__init_wrapperqtmk o2 true)))))
      (= t31 t3))))

;; eq'result'unused'unused
(define-fun eqqtresultqtunusedqtunused () Bool
  (ite (= zhi #x0000000000000000) true false))

(declare-const spark__branch4 Bool)

;; H
(assert (= spark__branch4 (ite (= zhi #x0000000000000000) true false)))

;; H
(assert (not (= spark__branch4 true)))

;; Assert
(assert (= (us_attr__init (select d3 2)) true))

;; Assert
(assert (= (us_attr__init (select d3 1)) true))

;; H
(assert
  (oconcat__function_guard
    (oconcat
      (to_rep1 (rec__value (select d3 1)))
      (to_rep1 (rec__value (select d3 2))))
    (to_rep1 (rec__value (select d3 1)))
    (to_rep1 (rec__value (select d3 2)))))

;; H
(assert
  (dynamic_invariant2
    (oconcat
      (to_rep1 (rec__value (select d3 1)))
      (to_rep1 (rec__value (select d3 2))))
    true
    false
    true
    true))

;; H
(assert
  (= (oconcat
       (to_rep1 (rec__value (select d3 1)))
       (to_rep1 (rec__value (select d3 2)))) (bvor (bvshl ((_ zero_extend 64) 
  (to_rep1
    (rec__value (select d3 1)))) ((_ int2bv 128) 64)) ((_ zero_extend 64) 
  (to_rep1
    (rec__value (select d3 2)))))))

(declare-const spark__branch5 Bool)

;; H
(assert
  (= spark__branch5 (ite (bvuge (oconcat
                                  (to_rep1 (rec__value (select d3 1)))
                                  (to_rep1 (rec__value (select d3 2)))) 
                      zu)
                      true
                      false)))

;; H
(assert (not (= spark__branch5 true)))

(declare-const shift1 Int)

;; H
(assert (= shift1 64))

(declare-const mask1 (_ BitVec 64))

;; H
(assert (= mask1 #xFFFFFFFFFFFFFFFF))

(declare-const scale1 Int)

;; H
(assert (= scale1 0))

(declare-const inter1 Int)

;; H
(assert (= inter1 0))

;; H
(assert (< 1 shift1))

(declare-const zu1 (_ BitVec 128))

(declare-const mask2 (_ BitVec 64))

(declare-const scale2 Int)

(declare-const shift2 Int)

(declare-const inter2 Int)

;; LoopInvariant
(assert (<= scale2 (- 64 shift2)))

;; LoopInvariant
(assert
  (and
    (hi__function_guard (hi zu1) zu1)
    (not (= (bvand (hi zu1) mask2) #x0000000000000000))))

;; LoopInvariant
(assert (= mask2 (bvshl #xFFFFFFFFFFFFFFFF ((_ int2bv 64) (- 64 shift2)))))

;; LoopInvariant
(assert (= zu1 (bvshl (oabs z) ((_ int2bv 128) scale2))))

;; LoopInvariant
(assert
  (and
    (big_2xx__function_guard (big_2xx scale2) scale2)
    (= (big1 zu1) (* (big1 (oabs z)) (big_2xx scale2)))))

;; LoopInvariant
(assert (and (<= 0 inter2) (<= inter2 (- log_single_size 1))))

;; LoopInvariant
(assert (= shift2 (power 2 (- log_single_size inter2))))

;; LoopInvariant
(assert (= (mod2 shift2 2) 0))

;; H
(assert
  (= (and (ite (and
                 (and
                   (and
                     (and
                       (dynamic_invariant inter2 false true true true)
                       (dynamic_invariant3 mask2 false true true true))
                     (dynamic_invariant2 zu1 true true true true))
                   (dynamic_invariant scale2 false true true true))
                 (dynamic_invariant shift2 false true true true))
            true
            false) (ite (< 1 shift2) true false)) true))

;; Assume
(assert (= shift2 shift_prev))

;; Assume
(assert (dynamic_invariant shift_prev true false true true))

;; Assume
(assert (= mask2 mask_prev))

;; Assume
(assert (dynamic_invariant3 mask_prev true false true true))

;; Assume
(assert (= zu1 zu_prev))

;; Assume
(assert (dynamic_invariant2 zu_prev true false true true))

(declare-const shift3 Int)

;; H
(assert (= shift3 (div1 shift2 2)))

;; Ensures
(assert (in_range1 (+ inter2 1)))

(declare-const inter3 Int)

;; H
(assert (= inter3 (+ inter2 1)))

;; Assert
(assert (= shift_prev (* 2 shift3)))

(declare-const mask3 (_ BitVec 64))

;; H
(assert (= mask3 (bvshl mask2 ((_ int2bv 64) shift3))))

(declare-const spark__branch6 Bool)

(declare-const zu2 (_ BitVec 128))

(declare-const scale3 Int)

;; H
(assert (hi__function_guard (hi zu1) zu1))

;; H
(assert (dynamic_invariant3 (hi zu1) true false true true))

;; H
(assert (= (hi zu1) ((_ extract 63 0) (bvlshr zu1 ((_ int2bv 128) 64)))))

;; H
(assert
  (= spark__branch6 (ite (= (bvand (hi zu1) mask3) #x0000000000000000)
                      true
                      false)))

;; H
(assert
  (and
    (big_2xx__function_guard (big_2xx shift3) shift3)
    (and
      (big_2xx__function_guard (big_2xx shift3) shift3)
      (and
        (big_2xx__function_guard (big_2xx scale2) scale2)
        (and
          (big_2xx__function_guard
            (big_2xx (+ shift3 scale2))
            (+ shift3 scale2))
          (ite (= spark__branch6 true)
            (and
              (= zu2 (bvshl zu1 ((_ int2bv 128) shift3)))
              (and
                (= (big1 zu2) (* (big_2xx shift3) (big1 zu_prev)))
                (and
                  (= (* (big_2xx shift3) (big_2xx scale2)) (ite (= (+ 
                                                             shift3 scale2) 128)
                                                             big_2xxdouble
                                                             (big_2xx
                                                               (+ shift3 
                                                               scale2))))
                  (let ((o16 (+ scale2 shift3)))
                    (and (in_range1 o16) (= scale3 o16))))))
            (and (= zu2 zu1) (= scale3 scale2))))))))

;; H
(assert (< 1 shift3))

;; H
(assert (hi__function_guard (hi zu2) zu2))

;; H
(assert (dynamic_invariant3 (hi zu2) true false true true))

;; H
(assert (= (hi zu2) ((_ extract 63 0) (bvlshr zu2 ((_ int2bv 128) 64)))))

;; neq'result'unused'unused
(define-fun neqqtresultqtunusedqtunused () Bool
  (ite (not (= (bvand (hi zu2) mask3) #x0000000000000000)) true false))

;; Ensures
(assert (in_range2 (- 64 shift3)))

;; eq'result'unused'unused
(define-fun eqqtresultqtunusedqtunused1 () Bool
  (ite (= mask3 (bvshl #xFFFFFFFFFFFFFFFF ((_ int2bv 64) (- 64 shift3))))
    true
    false))

;; H
(assert (dynamic_invariant2 (oabs z) true false true true))

;; H
(assert
  (= (oabs z) (ite (= z (- 170141183460469231731687303715884105728))
                #x80000000000000000000000000000000
                ((_ int2bv 128) (abs1 z)))))

;; eq'result'unused'unused
(define-fun eqqtresultqtunusedqtunused2 () Bool
  (ite (= zu2 (bvshl (oabs z) ((_ int2bv 128) scale3))) true false))

;; H
(assert (big_2xx__function_guard (big_2xx scale3) scale3))

;; H
(assert true)

;; H
(assert
  (= (big_2xx scale3) (big1
                        (ite (< scale3 340282366920938463463374607431768211456)
                          (bvshl #x00000000000000000000000000000001 ((_ int2bv 128) 
                          scale3))
                          #x00000000000000000000000000000000))))

;; H
(assert (< 0 (big_2xx scale3)))

;; Assert
(assert true)

;; H
(assert (dynamic_invariant2 (oabs z) true false true true))

;; H
(assert
  (= (oabs z) (ite (= z (- 170141183460469231731687303715884105728))
                #x80000000000000000000000000000000
                ((_ int2bv 128) (abs1 z)))))

;; H
(assert true)

;; H
(assert (= (big1 (oabs z)) (bv2nat (oabs z))))

;; Assert
(assert true)

;; H
(assert true)

;; H
(assert (= (big1 zu2) (bv2nat zu2)))

;; Assert
(assert true)

;; (=)'result'unused'unused
(define-fun lpeqrpqtresultqtunusedqtunused () Bool
  (ite (= (big1 zu2) (* (big1 (oabs z)) (big_2xx scale3))) true false))

;; Ensures
(assert (in_range1 (- log_single_size inter3)))

;; Ensures
(assert (in_range2 (- log_single_size inter3)))

;; Goal def'vc
;; File "s-aridou.ads", line 125, characters 0-0
(assert
  (not (<= (- 2147483648) (power 2 (- log_single_size inter3)))))

(check-sat)
(exit)
