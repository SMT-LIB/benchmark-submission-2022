(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTNIRA)
(set-info :source |
Generated by: Yannick Moy
Generated on: 2022-02-14
Generator: GNATprove
Application: GNAT light runtime library
Target solver: Alt-Ergo, CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)

;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
  (((Tuple0))))

(declare-sort us_private 0)

;; private__bool_eq
(declare-fun private__bool_eq (us_private
  us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
  (((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))

(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
  (((int__refqtmk (int__content Int)))))

(declare-datatypes ((bool__ref 0))
  (((bool__refqtmk (bool__content Bool)))))

(declare-datatypes ((us_fixed__ref 0))
  (((us_fixed__refqtmk (us_fixed__content Int)))))

(declare-datatypes ((real__ref 0))
  (((real__refqtmk (real__content Real)))))

(declare-datatypes ((us_private__ref 0))
  (((us_private__refqtmk (us_private__content us_private)))))

;; int__ref___projection
(define-fun int__ref___projection ((a int__ref)) Int
  (int__content a))

;; __fixed__ref___projection
(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int
  (us_fixed__content a))

;; bool__ref___projection
(define-fun bool__ref___projection ((a bool__ref)) Bool
  (bool__content a))

;; real__ref___projection
(define-fun real__ref___projection ((a real__ref)) Real
  (real__content a))

;; __private__ref___projection
(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

;; abs
(define-fun abs1 ((x Int)) Int
  (ite (<= 0 x) x (- x)))

;; Abs_le
(assert
  (forall ((x Int) (y Int)) (= (<= (abs1 x) y) (and (<= (- y) x) (<= x y)))))

;; Abs_pos
(assert (forall ((x Int)) (<= 0 (abs1 x))))

;; div
(declare-fun div1 (Int
  Int) Int)

;; mod
(declare-fun mod1 (Int
  Int) Int)

;; Div_mod
(assert
  (forall ((x Int) (y Int))
    (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))

;; Div_bound
(assert
  (forall ((x Int) (y Int))
    (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))

;; Mod_bound
(assert
  (forall ((x Int) (y Int))
    (=>
      (not (= y 0))
      (and (< (- (abs1 y)) (mod1 x y)) (< (mod1 x y) (abs1 y))))))

;; Div_sign_pos
(assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))

;; Div_sign_neg
(assert
  (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))

;; Mod_sign_pos
(assert
  (forall ((x Int) (y Int))
    (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))

;; Mod_sign_neg
(assert
  (forall ((x Int) (y Int))
    (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))

;; Rounds_toward_zero
(assert
  (forall ((x Int) (y Int))
    (=> (not (= y 0)) (<= (abs1 (* (div1 x y) y)) (abs1 x)))))

;; Div_1
(assert (forall ((x Int)) (= (div1 x 1) x)))

;; Mod_1
(assert (forall ((x Int)) (= (mod1 x 1) 0)))

;; Div_inf
(assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))

;; Mod_inf
(assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))

;; Div_mult
(assert
  (forall ((x Int) (y Int) (z Int))
    (! (=>
         (and (< 0 x) (and (<= 0 y) (<= 0 z)))
         (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1
                                                                  (+ (* x y) z)
                                                                  x)) )))

;; Mod_mult
(assert
  (forall ((x Int) (y Int) (z Int))
    (! (=>
         (and (< 0 x) (and (<= 0 y) (<= 0 z)))
         (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1
                                                            (+ (* x y) z)
                                                            x)) )))

;; Div_unique
(assert
  (forall ((x Int) (y Int) (q Int))
    (=>
      (< 0 y)
      (=> (and (<= (* q y) x) (< x (+ (* q y) y))) (= (div x y) q)))))

;; Div_bound
(assert
  (forall ((x Int) (y Int))
    (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div x y)) (<= (div x y) x)))))

;; Div_inf
(assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div x y) 0))))

;; Div_inf_neg
(assert
  (forall ((x Int) (y Int))
    (=> (and (< 0 x) (<= x y)) (= (div (- x) y) (- 1)))))

;; Mod_0
(assert (forall ((y Int)) (=> (not (= y 0)) (= (mod 0 y) 0))))

;; Div_1_left
(assert (forall ((y Int)) (=> (< 1 y) (= (div 1 y) 0))))

;; Div_minus1_left
(assert (forall ((y Int)) (=> (< 1 y) (= (div (- 1) y) (- 1)))))

;; Mod_1_left
(assert (forall ((y Int)) (=> (< 1 y) (= (mod 1 y) 1))))

;; Mod_minus1_left
(assert
  (forall ((y Int))
    (! (=> (< 1 y) (= (mod (- 1) y) (- y 1))) :pattern ((mod (- 1) y)) )))

;; Div_mult
(assert
  (forall ((x Int) (y Int) (z Int))
    (! (=> (< 0 x) (= (div (+ (* x y) z) x) (+ y (div z x)))) :pattern ((div (+ (* x y) z) x)) )))

;; Mod_mult
(assert
  (forall ((x Int) (y Int) (z Int))
    (! (=> (< 0 x) (= (mod (+ (* x y) z) x) (mod z x))) :pattern ((mod (+ (* x y) z) x)) )))

;; mod
(define-fun mod2 ((x Int) (y Int)) Int
  (ite (or (and (< 0 x) (< 0 y)) (and (< x 0) (< y 0)))
    (mod1 x y)
    (ite (= (mod1 x y) 0) 0 (+ (mod1 x y) y))))

;; nth
(declare-fun nth ((_ BitVec 32)
  Int) Bool)

;; lsr
(declare-fun lsr ((_ BitVec 32)
  Int) (_ BitVec 32))

;; asr
(declare-fun asr ((_ BitVec 32)
  Int) (_ BitVec 32))

;; lsl
(declare-fun lsl ((_ BitVec 32)
  Int) (_ BitVec 32))

;; rotate_right
(declare-fun rotate_right1 ((_ BitVec 32)
  Int) (_ BitVec 32))

;; rotate_left
(declare-fun rotate_left1 ((_ BitVec 32)
  Int) (_ BitVec 32))

;; pow2
(declare-fun pow2 (Int) Int)

(declare-const two_power_size_minus_one Int)

;; two_power_size_minus_one_val
(assert (= two_power_size_minus_one (pow2 (- 32 1))))

;; to_int
(define-fun to_int1 ((x (_ BitVec 32))) Int
  (ite (bvsge x (_ bv0 32)) (bv2nat x) (- (- 4294967296 (bv2nat x)))))

;; uint_in_range
(define-fun uint_in_range ((i Int)) Bool
  (and (<= 0 i) (<= i 4294967295)))

;; lsr_bv_is_lsr
(assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
    (= (bvlshr x n) (lsr x (bv2nat n)))))

;; asr_bv_is_asr
(assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
    (= (bvashr x n) (asr x (bv2nat n)))))

;; lsl_bv_is_lsl
(assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
    (= (bvshl x n) (lsl x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
(assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
    (= (bvor (bvshl v (bvurem n (_ bv32 32))) (bvlshr v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) 
    (rotate_left1
      v
      (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
(assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
    (= (bvor (bvlshr v (bvurem n (_ bv32 32))) (bvshl v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) 
    (rotate_right1
      v
      (bv2nat n)))))

;; nth_bv
(declare-fun nth_bv ((_ BitVec 32)
  (_ BitVec 32)) Bool)

;; nth_bv_def
(assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
    (=
      (= (nth_bv x i) true)
      (not (= (bvand (bvlshr x i) #x00000001) #x00000000)))))

;; Nth_bv_is_nth
(assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
    (= (nth x (bv2nat i)) (nth_bv x i))))

;; Nth_bv_is_nth2
(assert
  (forall ((x (_ BitVec 32)) (i Int))
    (=>
      (and (<= 0 i) (< i 4294967296))
      (= (nth_bv x ((_ int2bv 32) i)) (nth x i)))))

;; eq_sub_bv
(declare-fun eq_sub_bv ((_ BitVec 32)
  (_ BitVec 32)
  (_ BitVec 32)
  (_ BitVec 32)) Bool)

;; eq_sub_bv_def
(assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32)) (n (_ BitVec 32)))
    (let ((mask (bvshl (bvsub (bvshl #x00000001 n) #x00000001) i)))
      (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))

;; eq_sub
(define-fun eq_sub ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int) (n Int)) Bool
  (forall ((j Int))
    (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

;; eq_sub_equiv
(assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32)) (n (_ BitVec 32)))
    (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))

(declare-datatypes ((t__ref 0))
  (((t__refqtmk (t__content (_ BitVec 32))))))

;; bool_eq
(define-fun bool_eq ((x (_ BitVec 32)) (y (_ BitVec 32))) Bool
  (ite (= x y) true false))

;; bool_ne
(define-fun bool_ne ((x (_ BitVec 32)) (y (_ BitVec 32))) Bool
  (ite (not (= x y)) true false))

;; bool_lt
(define-fun bool_lt ((x (_ BitVec 32)) (y (_ BitVec 32))) Bool
  (ite (bvult x y) true false))

;; bool_le
(define-fun bool_le ((x (_ BitVec 32)) (y (_ BitVec 32))) Bool
  (ite (bvule x y) true false))

;; bool_gt
(define-fun bool_gt ((x (_ BitVec 32)) (y (_ BitVec 32))) Bool
  (ite (bvugt x y) true false))

;; bool_ge
(define-fun bool_ge ((x (_ BitVec 32)) (y (_ BitVec 32))) Bool
  (ite (bvuge x y) true false))

;; power
(declare-fun power ((_ BitVec 32)
  Int) (_ BitVec 32))

;; Power_0
(assert (forall ((x (_ BitVec 32))) (= (power x 0) #x00000001)))

;; Power_1
(assert (forall ((x (_ BitVec 32))) (= (power x 1) x)))

;; Power_s
(assert
  (forall ((x (_ BitVec 32)) (n Int))
    (=> (<= 0 n) (= (power x (+ n 1)) (bvmul x (power x n))))))

;; Power_s_alt
(assert
  (forall ((x (_ BitVec 32)) (n Int))
    (=> (< 0 n) (= (power x n) (bvmul x (power x (- n 1)))))))

;; Power_sum
(assert
  (forall ((x (_ BitVec 32)) (n Int) (m Int))
    (=>
      (<= 0 n)
      (=> (<= 0 m) (= (power x (+ n m)) (bvmul (power x n) (power x m)))))))

;; Power_mult
(assert
  (forall ((x (_ BitVec 32)) (n Int) (m Int))
    (=> (<= 0 n) (=> (<= 0 m) (= (power x (* n m)) (power (power x n) m))))))

;; Power_mult2
(assert
  (forall ((x (_ BitVec 32)) (y (_ BitVec 32)) (n Int))
    (=> (<= 0 n) (= (power (bvmul x y) n) (bvmul (power x n) (power y n))))))

;; bv_min
(define-fun bv_min ((x (_ BitVec 32)) (y (_ BitVec 32))) (_ BitVec 32)
  (ite (bvule x y) x y))

;; bv_max
(define-fun bv_max ((x (_ BitVec 32)) (y (_ BitVec 32))) (_ BitVec 32)
  (ite (bvule x y) y x))

;; min
(define-fun min ((x Int) (y Int)) Int
  (ite (<= x y) x y))

;; max
(define-fun max ((x Int) (y Int)) Int
  (ite (<= x y) y x))

;; Min_r
(assert (forall ((x Int) (y Int)) (=> (<= y x) (= (min x y) y))))

;; Max_l
(assert (forall ((x Int) (y Int)) (=> (<= y x) (= (max x y) x))))

;; Min_comm
(assert (forall ((x Int) (y Int)) (= (min x y) (min y x))))

;; Max_comm
(assert (forall ((x Int) (y Int)) (= (max x y) (max y x))))

;; Min_assoc
(assert
  (forall ((x Int) (y Int) (z Int)) (= (min (min x y) z) (min x (min y z)))))

;; Max_assoc
(assert
  (forall ((x Int) (y Int) (z Int)) (= (max (max x y) z) (max x (max y z)))))

;; bv_min_to_uint
(assert
  (forall ((x (_ BitVec 32)) (y (_ BitVec 32)))
    (= (bv2nat (bv_min x y)) (min (bv2nat x) (bv2nat y)))))

;; bv_max_to_uint
(assert
  (forall ((x (_ BitVec 32)) (y (_ BitVec 32)))
    (= (bv2nat (bv_max x y)) (max (bv2nat x) (bv2nat y)))))

;; uc_of_int
(define-fun uc_of_int ((x Int)) (_ BitVec 32)
  (ite (<= 0 x) ((_ int2bv 32) x) (bvneg ((_ int2bv 32) (- x)))))

;; uc_to_int
(define-fun uc_to_int ((x (_ BitVec 32))) Int
  (ite (= (bool_lt x ((_ int2bv 32) two_power_size_minus_one)) true)
    (bv2nat x)
    (- (bv2nat (bvneg x)))))

;; nth
(declare-fun nth1 ((_ BitVec 64)
  Int) Bool)

;; lsr
(declare-fun lsr1 ((_ BitVec 64)
  Int) (_ BitVec 64))

;; asr
(declare-fun asr1 ((_ BitVec 64)
  Int) (_ BitVec 64))

;; lsl
(declare-fun lsl1 ((_ BitVec 64)
  Int) (_ BitVec 64))

;; rotate_right
(declare-fun rotate_right2 ((_ BitVec 64)
  Int) (_ BitVec 64))

;; rotate_left
(declare-fun rotate_left2 ((_ BitVec 64)
  Int) (_ BitVec 64))

(declare-const two_power_size_minus_one1 Int)

;; two_power_size_minus_one_val
(assert (= two_power_size_minus_one1 (pow2 (- 64 1))))

;; to_int
(define-fun to_int2 ((x (_ BitVec 64))) Int
  (ite (bvsge x (_ bv0 64))
    (bv2nat x)
    (- (- 18446744073709551616 (bv2nat x)))))

;; uint_in_range
(define-fun uint_in_range1 ((i Int)) Bool
  (and (<= 0 i) (<= i 18446744073709551615)))

;; lsr_bv_is_lsr
(assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
    (= (bvlshr x n) (lsr1 x (bv2nat n)))))

;; asr_bv_is_asr
(assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
    (= (bvashr x n) (asr1 x (bv2nat n)))))

;; lsl_bv_is_lsl
(assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
    (= (bvshl x n) (lsl1 x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
(assert
  (forall ((v (_ BitVec 64)) (n (_ BitVec 64)))
    (= (bvor (bvshl v (bvurem n (_ bv64 64))) (bvlshr v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) 
    (rotate_left2
      v
      (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
(assert
  (forall ((v (_ BitVec 64)) (n (_ BitVec 64)))
    (= (bvor (bvlshr v (bvurem n (_ bv64 64))) (bvshl v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) 
    (rotate_right2
      v
      (bv2nat n)))))

;; nth_bv
(declare-fun nth_bv1 ((_ BitVec 64)
  (_ BitVec 64)) Bool)

;; nth_bv_def
(assert
  (forall ((x (_ BitVec 64)) (i (_ BitVec 64)))
    (=
      (= (nth_bv1 x i) true)
      (not (= (bvand (bvlshr x i) #x0000000000000001) #x0000000000000000)))))

;; Nth_bv_is_nth
(assert
  (forall ((x (_ BitVec 64)) (i (_ BitVec 64)))
    (= (nth1 x (bv2nat i)) (nth_bv1 x i))))

;; Nth_bv_is_nth2
(assert
  (forall ((x (_ BitVec 64)) (i Int))
    (=>
      (and (<= 0 i) (< i 18446744073709551616))
      (= (nth_bv1 x ((_ int2bv 64) i)) (nth1 x i)))))

;; eq_sub_bv
(declare-fun eq_sub_bv1 ((_ BitVec 64)
  (_ BitVec 64)
  (_ BitVec 64)
  (_ BitVec 64)) Bool)

;; eq_sub_bv_def
(assert
  (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64)))
    (let ((mask (bvshl (bvsub (bvshl #x0000000000000001 n) #x0000000000000001) i)))
      (= (eq_sub_bv1 a b i n) (= (bvand b mask) (bvand a mask))))))

;; eq_sub
(define-fun eq_sub1 ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int) (n Int)) Bool
  (forall ((j Int))
    (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))

;; eq_sub_equiv
(assert
  (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64)))
    (= (eq_sub1 a b (bv2nat i) (bv2nat n)) (eq_sub_bv1 a b i n))))

(declare-datatypes ((t__ref1 0))
  (((t__refqtmk1 (t__content1 (_ BitVec 64))))))

;; bool_eq
(define-fun bool_eq1 ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool
  (ite (= x y) true false))

;; bool_ne
(define-fun bool_ne1 ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool
  (ite (not (= x y)) true false))

;; bool_lt
(define-fun bool_lt1 ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool
  (ite (bvult x y) true false))

;; bool_le
(define-fun bool_le1 ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool
  (ite (bvule x y) true false))

;; bool_gt
(define-fun bool_gt1 ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool
  (ite (bvugt x y) true false))

;; bool_ge
(define-fun bool_ge1 ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool
  (ite (bvuge x y) true false))

;; power
(declare-fun power1 ((_ BitVec 64)
  Int) (_ BitVec 64))

;; Power_0
(assert (forall ((x (_ BitVec 64))) (= (power1 x 0) #x0000000000000001)))

;; Power_1
(assert (forall ((x (_ BitVec 64))) (= (power1 x 1) x)))

;; Power_s
(assert
  (forall ((x (_ BitVec 64)) (n Int))
    (=> (<= 0 n) (= (power1 x (+ n 1)) (bvmul x (power1 x n))))))

;; Power_s_alt
(assert
  (forall ((x (_ BitVec 64)) (n Int))
    (=> (< 0 n) (= (power1 x n) (bvmul x (power1 x (- n 1)))))))

;; Power_sum
(assert
  (forall ((x (_ BitVec 64)) (n Int) (m Int))
    (=>
      (<= 0 n)
      (=> (<= 0 m) (= (power1 x (+ n m)) (bvmul (power1 x n) (power1 x m)))))))

;; Power_mult
(assert
  (forall ((x (_ BitVec 64)) (n Int) (m Int))
    (=>
      (<= 0 n)
      (=> (<= 0 m) (= (power1 x (* n m)) (power1 (power1 x n) m))))))

;; Power_mult2
(assert
  (forall ((x (_ BitVec 64)) (y (_ BitVec 64)) (n Int))
    (=>
      (<= 0 n)
      (= (power1 (bvmul x y) n) (bvmul (power1 x n) (power1 y n))))))

;; bv_min
(define-fun bv_min1 ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)
  (ite (bvule x y) x y))

;; bv_max
(define-fun bv_max1 ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)
  (ite (bvule x y) y x))

;; bv_min_to_uint
(assert
  (forall ((x (_ BitVec 64)) (y (_ BitVec 64)))
    (= (bv2nat (bv_min1 x y)) (min (bv2nat x) (bv2nat y)))))

;; bv_max_to_uint
(assert
  (forall ((x (_ BitVec 64)) (y (_ BitVec 64)))
    (= (bv2nat (bv_max1 x y)) (max (bv2nat x) (bv2nat y)))))

;; uc_of_int
(define-fun uc_of_int1 ((x Int)) (_ BitVec 64)
  (ite (<= 0 x) ((_ int2bv 64) x) (bvneg ((_ int2bv 64) (- x)))))

;; uc_to_int
(define-fun uc_to_int1 ((x (_ BitVec 64))) Int
  (ite (= (bool_lt1 x ((_ int2bv 64) two_power_size_minus_one1)) true)
    (bv2nat x)
    (- (bv2nat (bvneg x)))))

;; bool_eq
(define-fun bool_eq2 ((x Bool) (y Bool)) Bool
  (ite (= x y) true false))

;; to_int
(define-fun to_int3 ((b Bool)) Int
  (ite (= b true) 1 0))

;; of_int
(define-fun of_int ((i Int)) Bool
  (ite (= i 0) false true))

;; in_range
(define-fun in_range ((x Int)) Bool
  (or (= x 0) (= x 1)))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

;; bool_eq
(declare-fun bool_eq3 (Int
  Int) Bool)

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
(assert (<= 0 value__size))

;; object__size_axiom
(assert (<= 0 object__size))

;; alignment_axiom
(assert (<= 0 alignment))

;; user_eq
(declare-fun user_eq (Int
  Int) Bool)

(declare-const dummy Int)

(declare-datatypes ((big_integer__ref 0))
  (((big_integer__refqtmk (big_integer__content Int)))))

;; big_integer__ref_big_integer__content__projection
(define-fun big_integer__ref_big_integer__content__projection ((a big_integer__ref)) Int
  (big_integer__content a))

(declare-datatypes ((valid_big_integer__ref 0))
  (((valid_big_integer__refqtmk (valid_big_integer__content Int)))))

;; valid_big_integer__ref_valid_big_integer__content__projection
(define-fun valid_big_integer__ref_valid_big_integer__content__projection 
  ((a valid_big_integer__ref)) Int
  (valid_big_integer__content a))

;; big
(declare-fun big (Int) Int)

;; big__function_guard
(declare-fun big__function_guard (Int
  Int) Bool)

(declare-sort int64 0)

;; int64'int
(declare-fun int64qtint (int64) Int)

;; int64'axiom
(assert
  (forall ((i int64))
    (and
      (<= (- 9223372036854775808) (int64qtint i))
      (<= (int64qtint i) 9223372036854775807))))

;; in_range
(define-fun in_range1 ((x Int)) Bool
  (and (<= (- 9223372036854775808) x) (<= x 9223372036854775807)))

;; bool_eq
(define-fun bool_eq4 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

;; user_eq
(declare-fun user_eq1 (int64
  int64) Bool)

(declare-const dummy1 int64)

(declare-datatypes ((int64__ref 0))
  (((int64__refqtmk (int64__content int64)))))

;; int64__ref_int64__content__projection
(define-fun int64__ref_int64__content__projection ((a int64__ref)) int64
  (int64__content a))

;; dynamic_invariant
(define-fun dynamic_invariant ((temp___expr_235 Int) (temp___is_init_231 Bool) (temp___skip_constant_232 Bool) (temp___do_toplevel_233 Bool) (temp___do_typ_inv_234 Bool)) Bool
  (=>
    (or
      (= temp___is_init_231 true)
      (<= (- 9223372036854775808) 9223372036854775807))
    (in_range1 temp___expr_235)))

;; big__post_axiom
(assert true)

;; big__def_axiom
(assert
  (forall ((arg Int))
    (! (=> (dynamic_invariant arg true true true true) (= (big arg) arg)) :pattern (
    (big
      arg)) )))

;; in_double_int_range
(declare-fun in_double_int_range (Int) Bool)

;; in_double_int_range__function_guard
(declare-fun in_double_int_range__function_guard (Bool
  Int) Bool)

;; in_range
(declare-fun in_range2 (Int
  Int
  Int) Bool)

;; in_range__function_guard
(declare-fun in_range__function_guard (Bool
  Int
  Int
  Int) Bool)

;; in_double_int_range__post_axiom
(assert true)

;; in_double_int_range__def_axiom
(assert
  (forall ((arg Int))
    (! (=
         (= (in_double_int_range arg) true)
         (= (in_range2
              arg
              (big (- 9223372036854775808))
              (big 9223372036854775807)) true)) :pattern ((in_double_int_range
                                                            arg)) )))

;; round_quotient
(declare-fun round_quotient (Int
  Int
  Int
  Int) Int)

;; round_quotient__function_guard
(declare-fun round_quotient__function_guard (Int
  Int
  Int
  Int
  Int) Bool)

;; same_sign
(declare-fun same_sign (Int
  Int) Bool)

;; same_sign__function_guard
(declare-fun same_sign__function_guard (Bool
  Int
  Int) Bool)

;; round_quotient__post_axiom
(assert true)

;; round_quotient__def_axiom
(assert
  (forall ((x Int) (y Int) (q Int) (r Int))
    (! (= (round_quotient x y q r) (ite (< (div1
                                             (- (abs1 y) (big 1))
                                             (big 2)) (abs1 r))
                                     (ite (= (same_sign x y) true)
                                       (+ q (big 1))
                                       (- q (big 1)))
                                     q)) :pattern ((round_quotient x y q r)) )))

(declare-const x Int)

(declare-const y Int)

(declare-const z Int)

(declare-const round Bool)

;; to_int__function_guard
(declare-fun to_int__function_guard (Int
  (_ BitVec 64)) Bool)

(declare-sort uns64 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 64))

;; bool_eq
(define-fun bool_eq5 ((x1 (_ BitVec 64)) (y1 (_ BitVec 64))) Bool
  (ite (= x1 y1) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 64)) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 64))

;; user_eq
(declare-fun user_eq2 (uns64
  uns64) Bool)

(declare-const dummy2 uns64)

(declare-datatypes ((uns64__ref 0))
  (((uns64__refqtmk (uns64__content uns64)))))

;; uns64__ref_uns64__content__projection
(define-fun uns64__ref_uns64__content__projection ((a uns64__ref)) uns64
  (uns64__content a))

;; dynamic_invariant
(define-fun dynamic_invariant1 ((temp___expr_282 (_ BitVec 64)) (temp___is_init_278 Bool) (temp___skip_constant_279 Bool) (temp___do_toplevel_280 Bool) (temp___do_typ_inv_281 Bool)) Bool
  true)

;; to_int__post_axiom
(assert
  (forall ((s (_ BitVec 64)))
    (! (=>
         (dynamic_invariant1 s true true true true)
         (let ((result (uc_to_int1 s)))
           (=>
             (to_int__function_guard result s)
             (dynamic_invariant result true false true true)))) :pattern (
    (uc_to_int1
      s)) )))

;; oadd
(define-fun oadd ((a (_ BitVec 64)) (b (_ BitVec 32))) (_ BitVec 64)
  (bvadd a ((_ zero_extend 32) b)))

;; oadd__function_guard
(declare-fun oadd__function_guard ((_ BitVec 64)
  (_ BitVec 64)
  (_ BitVec 32)) Bool)

;; omultiply
(define-fun omultiply ((a (_ BitVec 32)) (b (_ BitVec 32))) (_ BitVec 64)
  (bvmul ((_ zero_extend 32) a) ((_ zero_extend 32) b)))

;; omultiply__function_guard
(declare-fun omultiply__function_guard ((_ BitVec 64)
  (_ BitVec 32)
  (_ BitVec 32)) Bool)

;; oconcat
(declare-fun oconcat ((_ BitVec 32)
  (_ BitVec 32)) (_ BitVec 64))

;; oconcat__function_guard
(declare-fun oconcat__function_guard ((_ BitVec 64)
  (_ BitVec 32)
  (_ BitVec 32)) Bool)

(declare-sort uns32 0)

(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 32))

;; bool_eq
(define-fun bool_eq6 ((x1 (_ BitVec 32)) (y1 (_ BitVec 32))) Bool
  (ite (= x1 y1) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 32)) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 32))

;; user_eq
(declare-fun user_eq3 (uns32
  uns32) Bool)

(declare-const dummy3 uns32)

(declare-datatypes ((uns32__ref 0))
  (((uns32__refqtmk (uns32__content uns32)))))

;; uns32__ref_uns32__content__projection
(define-fun uns32__ref_uns32__content__projection ((a uns32__ref)) uns32
  (uns32__content a))

;; dynamic_invariant
(define-fun dynamic_invariant2 ((temp___expr_296 (_ BitVec 32)) (temp___is_init_292 Bool) (temp___skip_constant_293 Bool) (temp___do_toplevel_294 Bool) (temp___do_typ_inv_295 Bool)) Bool
  true)

;; oconcat__post_axiom
(assert
  (forall ((hi (_ BitVec 32)) (lo (_ BitVec 32)))
    (! (=>
         (and
           (dynamic_invariant2 hi true true true true)
           (dynamic_invariant2 lo true true true true))
         (let ((result (oconcat hi lo)))
           (=>
             (oconcat__function_guard result hi lo)
             (dynamic_invariant1 result true false true true)))) :pattern (
    (oconcat
      hi
      lo)) )))

;; oconcat__def_axiom
(assert
  (forall ((hi (_ BitVec 32)) (lo (_ BitVec 32)))
    (! (=>
         (and
           (dynamic_invariant2 hi true true true true)
           (dynamic_invariant2 lo true true true true))
         (= (oconcat hi lo) (bvor (bvshl ((_ zero_extend 32) hi) ((_ int2bv 64) 32)) ((_ zero_extend 32) lo)))) :pattern (
    (oconcat
      hi
      lo)) )))

;; oabs
(define-fun oabs ((x1 Int)) (_ BitVec 64)
  (ite (= x1 (- 9223372036854775808))
    #x8000000000000000
    ((_ int2bv 64) (abs1 x1))))

;; oabs__function_guard
(declare-fun oabs__function_guard ((_ BitVec 64)
  Int) Bool)

;; lo
(define-fun lo ((a (_ BitVec 64))) (_ BitVec 32)
  ((_ extract 31 0) (bvand a #x00000000FFFFFFFF)))

;; lo__function_guard
(declare-fun lo__function_guard ((_ BitVec 32)
  (_ BitVec 64)) Bool)

;; hi
(declare-fun hi ((_ BitVec 64)) (_ BitVec 32))

;; hi__function_guard
(declare-fun hi__function_guard ((_ BitVec 32)
  (_ BitVec 64)) Bool)

;; hi__post_axiom
(assert
  (forall ((a (_ BitVec 64)))
    (! (=>
         (dynamic_invariant1 a true true true true)
         (let ((result (hi a)))
           (=>
             (hi__function_guard result a)
             (dynamic_invariant2 result true false true true)))) :pattern (
    (hi
      a)) )))

;; hi__def_axiom
(assert
  (forall ((a (_ BitVec 64)))
    (! (=>
         (dynamic_invariant1 a true true true true)
         (= (hi a) ((_ extract 31 0) (bvlshr a ((_ int2bv 64) 32))))) :pattern (
    (hi
      a)) )))

(declare-const xu (_ BitVec 64))

(declare-const yu (_ BitVec 64))

(declare-const yhi (_ BitVec 32))

(declare-const ylo (_ BitVec 32))

(declare-const zu (_ BitVec 64))

(declare-const zhi (_ BitVec 32))

(declare-const zlo (_ BitVec 32))

(declare-const den_pos Bool)

(declare-const mult Int)

;; big
(declare-fun big1 ((_ BitVec 64)) Int)

;; big__function_guard
(declare-fun big__function_guard1 (Int
  (_ BitVec 64)) Bool)

;; dynamic_invariant
(define-fun dynamic_invariant3 ((temp___expr_256 Int) (temp___is_init_252 Bool) (temp___skip_constant_253 Bool) (temp___do_toplevel_254 Bool) (temp___do_typ_inv_255 Bool)) Bool
  true)

;; in_range__post_axiom
(assert true)

;; in_range__def_axiom
(assert
  (forall ((arg Int))
    (forall ((low Int) (high Int))
      (! (=
           (= (in_range2 arg low high) true)
           (and (<= low arg) (<= arg high))) :pattern ((in_range2
                                                         arg
                                                         low
                                                         high)) ))))

;; big__post_axiom
(assert true)

;; big__def_axiom
(assert
  (forall ((arg (_ BitVec 64)))
    (! (=>
         (dynamic_invariant1 arg true true true true)
         (= (big1 arg) (bv2nat arg))) :pattern ((big1 arg)) )))

;; same_sign__post_axiom
(assert true)

;; same_sign__def_axiom
(assert
  (forall ((x1 Int) (y1 Int))
    (! (=
         (= (same_sign x1 y1) true)
         (or
           (or (= x1 (big 0)) (= y1 (big 0)))
           (= (< x1 (big 0)) (< y1 (big 0))))) :pattern ((same_sign x1 y1)) )))

;; xu__def_axiom
(assert (= xu (oabs x)))

;; yu__def_axiom
(assert (= yu (oabs y)))

;; yhi__def_axiom
(assert (and (hi__function_guard (hi yu) yu) (= yhi (hi yu))))

;; ylo__def_axiom
(assert (= ylo (lo yu)))

;; zu__def_axiom
(assert (= zu (oabs z)))

;; zhi__def_axiom
(assert (and (hi__function_guard (hi zu) zu) (= zhi (hi zu))))

;; zlo__def_axiom
(assert (= zlo (lo zu)))

;; bool_eq
(declare-fun bool_eq7 (Int
  Int) Bool)

;; bool_ne
(declare-fun bool_ne2 (Int
  Int) Bool)

;; bool_lt
(declare-fun bool_lt2 (Int
  Int) Bool)

;; bool_le
(declare-fun bool_le2 (Int
  Int) Bool)

;; bool_gt
(declare-fun bool_gt2 (Int
  Int) Bool)

;; bool_ge
(declare-fun bool_ge2 (Int
  Int) Bool)

;; bool_eq_axiom
(assert
  (forall ((x1 Int))
    (forall ((y1 Int)) (= (= (bool_eq7 x1 y1) true) (= x1 y1)))))

;; bool_ne_axiom
(assert
  (forall ((x1 Int))
    (forall ((y1 Int)) (= (= (bool_ne2 x1 y1) true) (not (= x1 y1))))))

;; bool_lt_axiom
(assert
  (forall ((x1 Int))
    (forall ((y1 Int)) (= (= (bool_lt2 x1 y1) true) (< x1 y1)))))

;; bool_int__le_axiom
(assert
  (forall ((x1 Int))
    (forall ((y1 Int)) (= (= (bool_le2 x1 y1) true) (<= x1 y1)))))

;; bool_gt_axiom
(assert
  (forall ((x1 Int))
    (forall ((y1 Int)) (= (= (bool_gt2 x1 y1) true) (< y1 x1)))))

;; bool_ge_axiom
(assert
  (forall ((x1 Int))
    (forall ((y1 Int)) (= (= (bool_ge2 x1 y1) true) (<= y1 x1)))))

;; length
(define-fun length ((x1 Int) (y1 Int)) Int
  (ite (<= x1 y1) (+ (- y1 x1) 1) 0))

;; den_pos__def_axiom
(assert
  (= den_pos (bool_eq7 (to_int3 (bool_lt2 y 0)) (to_int3 (bool_lt2 z 0)))))

;; mult__def_axiom
(assert (= mult (abs1 (* (big y) (big z)))))

(declare-const q Int)

(declare-const r Int)

(declare-const t1 (_ BitVec 64))

(declare-const t2 (_ BitVec 64))

(declare-const du (_ BitVec 64))

(declare-const qu (_ BitVec 64))

(declare-const ru (_ BitVec 64))

(declare-const quot Int)

(declare-const big_r Int)

(declare-const big_q Int)

;; Assume
(assert (dynamic_invariant x true false true true))

;; Assume
(assert (dynamic_invariant y true false true true))

;; Assume
(assert (dynamic_invariant z true false true true))

;; Assume
(assert (dynamic_invariant q false false true true))

;; Assume
(assert (dynamic_invariant r false false true true))

;; Assume
(assert
  (and
    (and (not (= y 0)) (not (= z 0)))
    (= (in_double_int_range
         (ite (= round true)
           (round_quotient
             (big x)
             (* (big y) (big z))
             (div1 (big x) (* (big y) (big z)))
             (mod1 (big x) (* (big y) (big z))))
           (div1 (big x) (* (big y) (big z))))) true)))

(declare-const q1 Int)

(declare-const r1 Int)

;; H
(assert (dynamic_invariant1 (oabs x) true false true true))

;; H
(assert
  (let ((o x))
    (= (oabs o) (ite (= o (- 9223372036854775808))
                  #x8000000000000000
                  ((_ int2bv 64) (abs1 o))))))

;; H
(assert (= (oabs x) xu))

;; H
(assert (dynamic_invariant1 xu true false true true))

;; H
(assert (dynamic_invariant1 (oabs y) true false true true))

;; H
(assert
  (let ((o y))
    (= (oabs o) (ite (= o (- 9223372036854775808))
                  #x8000000000000000
                  ((_ int2bv 64) (abs1 o))))))

;; H
(assert (= (oabs y) yu))

;; H
(assert (dynamic_invariant1 yu true false true true))

;; H
(assert (let ((o yu)) (hi__function_guard (hi o) o)))

;; H
(assert (dynamic_invariant2 (hi yu) true false true true))

;; H
(assert
  (let ((o yu)) (= (hi o) ((_ extract 31 0) (bvlshr o ((_ int2bv 64) 32))))))

;; H
(assert (= (hi yu) yhi))

;; H
(assert (dynamic_invariant2 yhi true false true true))

;; H
(assert (dynamic_invariant2 (lo yu) true false true true))

;; H
(assert
  (let ((o yu)) (= (lo o) ((_ extract 31 0) (bvand o #x00000000FFFFFFFF)))))

;; H
(assert (= (lo yu) ylo))

;; H
(assert (dynamic_invariant2 ylo true false true true))

;; H
(assert (dynamic_invariant1 (oabs z) true false true true))

;; H
(assert
  (let ((o z))
    (= (oabs o) (ite (= o (- 9223372036854775808))
                  #x8000000000000000
                  ((_ int2bv 64) (abs1 o))))))

;; H
(assert (= (oabs z) zu))

;; H
(assert (dynamic_invariant1 zu true false true true))

;; H
(assert (let ((o zu)) (hi__function_guard (hi o) o)))

;; H
(assert (dynamic_invariant2 (hi zu) true false true true))

;; H
(assert
  (let ((o zu)) (= (hi o) ((_ extract 31 0) (bvlshr o ((_ int2bv 64) 32))))))

;; H
(assert (= (hi zu) zhi))

;; H
(assert (dynamic_invariant2 zhi true false true true))

;; H
(assert (dynamic_invariant2 (lo zu) true false true true))

;; H
(assert
  (let ((o zu)) (= (lo o) ((_ extract 31 0) (bvand o #x00000000FFFFFFFF)))))

;; H
(assert (= (lo zu) zlo))

;; H
(assert (dynamic_invariant2 zlo true false true true))

;; H
(assert true)

;; H
(assert (dynamic_invariant1 t1 false false true true))

;; H
(assert true)

;; H
(assert (dynamic_invariant1 t2 false false true true))

;; H
(assert true)

;; H
(assert (dynamic_invariant1 du false false true true))

;; H
(assert true)

;; H
(assert (dynamic_invariant1 qu false false true true))

;; H
(assert true)

;; H
(assert (dynamic_invariant1 ru false false true true))

;; H
(assert
  (= (ite (= (to_int3 (ite (< y 0) true false)) (to_int3
                                                  (ite (< z 0) true false)))
       true
       false) den_pos))

;; H
(assert true)

;; H
(assert (let ((o z)) (= (big o) o)))

;; H
(assert true)

;; H
(assert true)

;; H
(assert (let ((o y)) (= (big o) o)))

;; H
(assert true)

;; H
(assert (= (abs1 (* (big y) (big z))) mult))

;; H
(assert true)

;; H
(assert true)

;; H
(assert true)

;; H
(assert true)

;; H
(assert true)

;; H
(assert true)

;; H
(assert true)

(declare-const spark__branch Bool)

(declare-const o Bool)

;; H
(assert
  (ite (= yu #x0000000000000000)
    (= o true)
    (= o (ite (= zu #x0000000000000000) true false))))

;; H
(assert (= spark__branch o))

;; H
(assert (not (= spark__branch true)))

;; H
(assert true)

;; H
(assert (let ((o1 z)) (= (big o1) o1)))

;; H
(assert true)

;; H
(assert true)

;; H
(assert (let ((o1 y)) (= (big o1) o1)))

;; H
(assert true)

;; H
(assert true)

;; H
(assert (let ((o1 x)) (= (big o1) o1)))

;; H
(assert true)

(declare-const quot1 Int)

;; H
(assert (= quot1 (div1 (big x) (* (big y) (big z)))))

;; H
(assert true)

;; H
(assert (let ((o1 z)) (= (big o1) o1)))

;; H
(assert true)

;; H
(assert true)

;; H
(assert (let ((o1 y)) (= (big o1) o1)))

;; H
(assert true)

;; H
(assert true)

;; H
(assert (let ((o1 x)) (= (big o1) o1)))

;; H
(assert true)

(declare-const big_r1 Int)

;; H
(assert (= big_r1 (mod1 (big x) (* (big y) (big z)))))

(declare-const spark__branch1 Bool)

(declare-const big_q1 Int)

;; H
(assert (= spark__branch1 round))

;; H
(assert
  (ite (= spark__branch1 true)
    (let ((o1 z))
      (let ((o2 (big o1)))
        (and
          (= o2 o1)
          (let ((o3 y))
            (let ((o4 (big o3)))
              (and
                (= o4 o3)
                (let ((o5 (* o4 o2)))
                  (let ((o6 x))
                    (let ((o7 (big o6)))
                      (and
                        (= o7 o6)
                        (let ((o8 (round_quotient o7 o5 quot1 big_r1)))
                          (and
                            (= o8 (ite (< (div1
                                            (- (abs1 o5) (big 1))
                                            (big 2)) (abs1 big_r1))
                                    (ite (= (same_sign o7 o5) true)
                                      (+ quot1 (big 1))
                                      (- quot1 (big 1)))
                                    quot1))
                            (= big_q1 o8)))))))))))))
    (= big_q1 quot1)))

;; H
(assert
  (or
    (exists ((spark__branch2 Bool))
      (and
        (= spark__branch2 (ite (not (= yhi #x00000000)) true false))
        (and
          (= spark__branch2 true)
          (exists ((spark__branch3 Bool))
            (and
              (= spark__branch3 (ite (not (= zhi #x00000000)) true false))
              (and
                (= spark__branch3 true)
                (and
                  (= r1 x)
                  (exists ((o1 Bool))
                    (and
                      (exists ((o2 Bool))
                        (and
                          (exists ((o3 Bool))
                            (and
                              (exists ((o4 Bool))
                                (and
                                  (ite (= yhi #x00000001)
                                    (= o4 (ite (= zhi #x00000001) true false))
                                    (= o4 false))
                                  (ite (= o4 true)
                                    (= o3 (ite (= ylo #x00000000) true false))
                                    (= o3 false))))
                              (ite (= o3 true)
                                (= o2 (ite (= zlo #x00000000) true false))
                                (= o2 false))))
                          (ite (= o2 true)
                            (= o1 (ite (= x (- 9223372036854775808))
                                    true
                                    false))
                            (= o1 false))))
                      (exists ((spark__branch4 Bool))
                        (and
                          (= spark__branch4 (ite (= o1 true) round false))
                          (ite (= spark__branch4 true)
                            (exists ((o2 Int))
                              (and
                                (ite (= den_pos true) (= o2 (- 1)) (= o2 1))
                                (= q1 o2)))
                            (= q1 0)))))))))))))
    (exists ((spark__branch2 Bool) (t21 (_ BitVec 64)))
      (and
        (exists ((spark__branch3 Bool))
          (and
            (= spark__branch3 (ite (not (= yhi #x00000000)) true false))
            (ite (= spark__branch3 true)
              (and
                (= spark__branch2 (ite (not (= zhi #x00000000)) true false))
                (and
                  (not (= spark__branch2 true))
                  (let ((o1 zlo))
                    (let ((o2 yhi))
                      (let ((o3 (omultiply o2 o1)))
                        (and
                          (and
                            (dynamic_invariant1 o3 true false true true)
                            (= o3 (bvmul ((_ zero_extend 32) o2) ((_ zero_extend 32) o1))))
                          (= t21 o3)))))))
              (and
                (let ((o1 zhi))
                  (let ((o2 ylo))
                    (let ((o3 (omultiply o2 o1)))
                      (and
                        (and
                          (dynamic_invariant1 o3 true false true true)
                          (= o3 (bvmul ((_ zero_extend 32) o2) ((_ zero_extend 32) o1))))
                        (= t21 o3)))))
                (= spark__branch2 spark__branch3)))))
        (let ((o1 zlo))
          (let ((o2 ylo))
            (let ((o3 (omultiply o2 o1)))
              (and
                (and
                  (dynamic_invariant1 o3 true false true true)
                  (= o3 (bvmul ((_ zero_extend 32) o2) ((_ zero_extend 32) o1))))
                (exists ((t11 (_ BitVec 64)))
                  (and
                    (= t11 o3)
                    (let ((o4 (hi t11)))
                      (and
                        (and
                          (hi__function_guard o4 t11)
                          (and
                            (dynamic_invariant2 o4 true false true true)
                            (= o4 ((_ extract 31 0) (bvlshr t11 ((_ int2bv 64) 32))))))
                        (let ((o5 (oadd t21 o4)))
                          (and
                            (and
                              (dynamic_invariant1 o5 true false true true)
                              (= o5 (bvadd t21 ((_ zero_extend 32) o4))))
                            (exists ((t22 (_ BitVec 64)))
                              (and
                                (= t22 o5)
                                (let ((o6 (hi t22)))
                                  (and
                                    (and
                                      (hi__function_guard o6 t22)
                                      (and
                                        (dynamic_invariant2
                                          o6
                                          true
                                          false
                                          true
                                          true)
                                        (= o6 ((_ extract 31 0) (bvlshr t22 ((_ int2bv 64) 32))))))
                                    (exists ((spark__branch3 Bool))
                                      (and
                                        (= spark__branch3 (ite (not
                                                                 (= o6 #x00000000))
                                                            true
                                                            false))
                                        (ite (= spark__branch3 true)
                                          (and
                                            (= r1 x)
                                            (exists ((o7 Bool))
                                              (and
                                                (exists ((o8 Bool))
                                                  (and
                                                    (exists ((o9 Bool))
                                                      (and
                                                        (let ((o10 (hi t22)))
                                                          (and
                                                            (and
                                                              (hi__function_guard
                                                                o10
                                                                t22)
                                                              (and
                                                                (dynamic_invariant2
                                                                  o10
                                                                  true
                                                                  false
                                                                  true
                                                                  true)
                                                                (= o10 ((_ extract 31 0) (bvlshr t22 ((_ int2bv 64) 32))))))
                                                            (ite (= o10 #x00000001)
                                                              (let ((o11 
                                                                (lo
                                                                  t22)))
                                                                (and
                                                                  (and
                                                                    (dynamic_invariant2
                                                                    o11
                                                                    true
                                                                    false
                                                                    true
                                                                    true)
                                                                    (= o11 ((_ extract 31 0) (bvand t22 #x00000000FFFFFFFF))))
                                                                  (= o9 
                                                                  (ite (= o11 #x00000000)
                                                                    true
                                                                    false))))
                                                              (= o9 false))))
                                                        (ite (= o9 true)
                                                          (let ((o10 
                                                            (lo t11)))
                                                            (and
                                                              (and
                                                                (dynamic_invariant2
                                                                  o10
                                                                  true
                                                                  false
                                                                  true
                                                                  true)
                                                                (= o10 ((_ extract 31 0) (bvand t11 #x00000000FFFFFFFF))))
                                                              (= o8 (ite (= o10 #x00000000)
                                                                    true
                                                                    false))))
                                                          (= o8 false))))
                                                    (ite (= o8 true)
                                                      (= o7 (ite (= x (- 9223372036854775808))
                                                              true
                                                              false))
                                                      (= o7 false))))
                                                (exists ((spark__branch4 Bool))
                                                  (and
                                                    (= spark__branch4 
                                                    (ite (= o7 true)
                                                      round
                                                      false))
                                                    (ite (= spark__branch4 true)
                                                      (exists ((o8 Int))
                                                        (and
                                                          (ite (= den_pos true)
                                                            (= o8 (- 1))
                                                            (= o8 1))
                                                          (= q1 o8)))
                                                      (= q1 0)))))))
                                          (let ((o7 (lo t11)))
                                            (and
                                              (and
                                                (dynamic_invariant2
                                                  o7
                                                  true
                                                  false
                                                  true
                                                  true)
                                                (= o7 ((_ extract 31 0) (bvand t11 #x00000000FFFFFFFF))))
                                              (let ((o8 (lo t22)))
                                                (and
                                                  (and
                                                    (dynamic_invariant2
                                                      o8
                                                      true
                                                      false
                                                      true
                                                      true)
                                                    (= o8 ((_ extract 31 0) (bvand t22 #x00000000FFFFFFFF))))
                                                  (let ((o9 (oconcat o8 o7)))
                                                    (and
                                                      (and
                                                        (oconcat__function_guard
                                                          o9
                                                          o8
                                                          o7)
                                                        (and
                                                          (dynamic_invariant1
                                                            o9
                                                            true
                                                            false
                                                            true
                                                            true)
                                                          (= o9 (bvor (bvshl ((_ zero_extend 32) o8) ((_ int2bv 64) 32)) ((_ zero_extend 32) o7)))))
                                                      (exists ((du1 (_ BitVec 64)))
                                                        (and
                                                          (= du1 o9)
                                                          (exists ((spark__branch4 Bool))
                                                            (and
                                                              (exists 
                                                                ((o10 Bool))
                                                                (and
                                                                  (exists 
                                                                    ((o11 Bool))
                                                                    (and
                                                                    (ite (= 
                                                                    x (- 9223372036854775808))
                                                                    (= o11 
                                                                    (ite (= du1 #x0000000000000001)
                                                                    true
                                                                    false))
                                                                    (= o11 false))
                                                                    (ite (= o11 true)
                                                                    (= o10 
                                                                    (ite (= 
                                                                    den_pos true)
                                                                    false
                                                                    true))
                                                                    (= o10 false))))
                                                                  (and
                                                                    (= spark__branch4 o10)
                                                                    (not
                                                                    (= spark__branch4 true)))))
                                                              (exists 
                                                                ((qu1 (_ BitVec 64)))
                                                                (and
                                                                  (= qu1 (bvudiv 
                                                                  xu du1))
                                                                  (exists 
                                                                    ((ru1 (_ BitVec 64)))
                                                                    (and
                                                                    (= ru1 (bvurem 
                                                                    xu du1))
                                                                    (exists 
                                                                    ((spark__branch5 Bool) (qu2 (_ BitVec 64)))
                                                                    (and
                                                                    (exists 
                                                                    ((spark__branch6 Bool))
                                                                    (and
                                                                    (= spark__branch6 
                                                                    round)
                                                                    (ite (= spark__branch6 true)
                                                                    (and
                                                                    (= spark__branch5 
                                                                    (ite (bvugt ru1 (bvudiv (bvsub du1 #x0000000000000001) #x0000000000000002))
                                                                    true
                                                                    false))
                                                                    (ite (= spark__branch5 true)
                                                                    (= qu2 (bvadd qu1 #x0000000000000001))
                                                                    (= qu2 qu1)))
                                                                    (and
                                                                    (= spark__branch5 spark__branch6)
                                                                    (= qu2 qu1)))))
                                                                    (and
                                                                    (exists 
                                                                    ((spark__branch6 Bool))
                                                                    (and
                                                                    (= spark__branch6 
                                                                    (ite (<= 0 
                                                                    x)
                                                                    true
                                                                    false))
                                                                    (ite (= spark__branch6 true)
                                                                    (let ((o10 
                                                                    (uc_to_int1
                                                                    ru1)))
                                                                    (and
                                                                    (and
                                                                    (to_int__function_guard
                                                                    o10
                                                                    ru1)
                                                                    (dynamic_invariant
                                                                    o10
                                                                    true
                                                                    false
                                                                    true
                                                                    true))
                                                                    (and
                                                                    (= 
                                                                    r1 o10)
                                                                    (exists 
                                                                    ((o11 Int))
                                                                    (and
                                                                    (ite (= 
                                                                    den_pos true)
                                                                    (and
                                                                    (= o11 
                                                                    (uc_to_int1
                                                                    qu2))
                                                                    (and
                                                                    (to_int__function_guard
                                                                    o11
                                                                    qu2)
                                                                    (dynamic_invariant
                                                                    o11
                                                                    true
                                                                    false
                                                                    true
                                                                    true)))
                                                                    (let ((o12 (bvneg qu2)))
                                                                    (and
                                                                    (= o11 
                                                                    (uc_to_int1
                                                                    o12))
                                                                    (and
                                                                    (to_int__function_guard
                                                                    o11
                                                                    o12)
                                                                    (dynamic_invariant
                                                                    o11
                                                                    true
                                                                    false
                                                                    true
                                                                    true)))))
                                                                    (= 
                                                                    q1 o11))))))
                                                                    (let ((o10 (bvneg ru1)))
                                                                    (let ((o11 
                                                                    (uc_to_int1
                                                                    o10)))
                                                                    (and
                                                                    (and
                                                                    (to_int__function_guard
                                                                    o11
                                                                    o10)
                                                                    (dynamic_invariant
                                                                    o11
                                                                    true
                                                                    false
                                                                    true
                                                                    true))
                                                                    (and
                                                                    (= 
                                                                    r1 o11)
                                                                    (exists 
                                                                    ((o12 Int))
                                                                    (and
                                                                    (ite (= 
                                                                    den_pos true)
                                                                    (let ((o13 (bvneg qu2)))
                                                                    (and
                                                                    (= o12 
                                                                    (uc_to_int1
                                                                    o13))
                                                                    (and
                                                                    (to_int__function_guard
                                                                    o12
                                                                    o13)
                                                                    (dynamic_invariant
                                                                    o12
                                                                    true
                                                                    false
                                                                    true
                                                                    true))))
                                                                    (and
                                                                    (= o12 
                                                                    (uc_to_int1
                                                                    qu2))
                                                                    (and
                                                                    (to_int__function_guard
                                                                    o12
                                                                    qu2)
                                                                    (dynamic_invariant
                                                                    o12
                                                                    true
                                                                    false
                                                                    true
                                                                    true))))
                                                                    (= 
                                                                    q1 o12))))))))))
                                                                    (and
                                                                    (= 
                                                                    (big
                                                                    r1) 
                                                                    big_r1)
                                                                    (= 
                                                                    (big
                                                                    q1) 
                                                                    big_q1))))))))))))))))))))))))))))))))))))))))

;; H
(assert true)

;; H
(assert (= (big z) z))

;; Assert
(assert true)

;; H
(assert true)

;; H
(assert (= (big y) y))

;; Assert
(assert true)

;; H
(assert true)

;; H
(assert (= (big x) x))

;; Assert
(assert true)

;; H
(assert true)

;; H
(assert (= (big r1) r1))

;; Assert
(assert true)

;; (=)'result'unused'unused
(define-fun lpeqrpqtresultqtunusedqtunused () Bool
  (ite (= (big r1) (mod1 (big x) (* (big y) (big z)))) true false))

;; H
(assert (= (big r1) (mod1 (big x) (* (big y) (big z)))))

;; H
(assert (= round true))

;; H
(assert true)

;; H
(assert (= (big r1) r1))

;; H
(assert true)

;; H
(assert (= (big z) z))

;; Assert
(assert true)

;; H
(assert true)

;; H
(assert (= (big y) y))

;; Assert
(assert true)

;; H
(assert true)

;; H
(assert (= (big x) x))

;; Assert
(assert true)

;; Goal def'vc
;; File "s-aridou.ads", line 151, characters 0-0
(assert
  (not (not (= (* (big y) (big z)) 0))))

(check-sat)
(exit)
