(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTNIRA)
(set-info :source |
Generated by: Yannick Moy
Generated on: 2022-02-14
Generator: GNATprove
Application: GNAT light runtime library
Target solver: Alt-Ergo, CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)

(define-fun bv2nat8 ((a (_ BitVec 8))) Int
  (+ (+ (+ (+ (+ (+ (+
  (ite (= ((_ extract 0 0) a) (_ bv0 1)) 0 1)
  (ite (= ((_ extract 1 1) a) (_ bv0 1)) 0 2))
  (ite (= ((_ extract 2 2) a) (_ bv0 1)) 0 4))
  (ite (= ((_ extract 3 3) a) (_ bv0 1)) 0 8))
  (ite (= ((_ extract 4 4) a) (_ bv0 1)) 0 16))
  (ite (= ((_ extract 5 5) a) (_ bv0 1)) 0 32))
  (ite (= ((_ extract 6 6) a) (_ bv0 1)) 0 64))
  (ite (= ((_ extract 7 7) a) (_ bv0 1)) 0 128))
)

(define-fun bv2nat16 ((a (_ BitVec 16))) Int
  (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+
  (ite (= ((_ extract 0 0) a) (_ bv0 1)) 0 1)
  (ite (= ((_ extract 1 1) a) (_ bv0 1)) 0 2))
  (ite (= ((_ extract 2 2) a) (_ bv0 1)) 0 4))
  (ite (= ((_ extract 3 3) a) (_ bv0 1)) 0 8))
  (ite (= ((_ extract 4 4) a) (_ bv0 1)) 0 16))
  (ite (= ((_ extract 5 5) a) (_ bv0 1)) 0 32))
  (ite (= ((_ extract 6 6) a) (_ bv0 1)) 0 64))
  (ite (= ((_ extract 7 7) a) (_ bv0 1)) 0 128))
  (ite (= ((_ extract 8 8) a) (_ bv0 1)) 0 256))
  (ite (= ((_ extract 9 9) a) (_ bv0 1)) 0 512))
  (ite (= ((_ extract 10 10) a) (_ bv0 1)) 0 1024))
  (ite (= ((_ extract 11 11) a) (_ bv0 1)) 0 2048))
  (ite (= ((_ extract 12 12) a) (_ bv0 1)) 0 4096))
  (ite (= ((_ extract 13 13) a) (_ bv0 1)) 0 8192))
  (ite (= ((_ extract 14 14) a) (_ bv0 1)) 0 16384))
  (ite (= ((_ extract 15 15) a) (_ bv0 1)) 0 32768))
)

(define-fun bv2nat32 ((a (_ BitVec 32))) Int
  (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+
  (ite (= ((_ extract 0 0) a) (_ bv0 1)) 0 1)
  (ite (= ((_ extract 1 1) a) (_ bv0 1)) 0 2))
  (ite (= ((_ extract 2 2) a) (_ bv0 1)) 0 4))
  (ite (= ((_ extract 3 3) a) (_ bv0 1)) 0 8))
  (ite (= ((_ extract 4 4) a) (_ bv0 1)) 0 16))
  (ite (= ((_ extract 5 5) a) (_ bv0 1)) 0 32))
  (ite (= ((_ extract 6 6) a) (_ bv0 1)) 0 64))
  (ite (= ((_ extract 7 7) a) (_ bv0 1)) 0 128))
  (ite (= ((_ extract 8 8) a) (_ bv0 1)) 0 256))
  (ite (= ((_ extract 9 9) a) (_ bv0 1)) 0 512))
  (ite (= ((_ extract 10 10) a) (_ bv0 1)) 0 1024))
  (ite (= ((_ extract 11 11) a) (_ bv0 1)) 0 2048))
  (ite (= ((_ extract 12 12) a) (_ bv0 1)) 0 4096))
  (ite (= ((_ extract 13 13) a) (_ bv0 1)) 0 8192))
  (ite (= ((_ extract 14 14) a) (_ bv0 1)) 0 16384))
  (ite (= ((_ extract 15 15) a) (_ bv0 1)) 0 32768))
  (ite (= ((_ extract 16 16) a) (_ bv0 1)) 0 65536))
  (ite (= ((_ extract 17 17) a) (_ bv0 1)) 0 131072))
  (ite (= ((_ extract 18 18) a) (_ bv0 1)) 0 262144))
  (ite (= ((_ extract 19 19) a) (_ bv0 1)) 0 524288))
  (ite (= ((_ extract 20 20) a) (_ bv0 1)) 0 1048576))
  (ite (= ((_ extract 21 21) a) (_ bv0 1)) 0 2097152))
  (ite (= ((_ extract 22 22) a) (_ bv0 1)) 0 4194304))
  (ite (= ((_ extract 23 23) a) (_ bv0 1)) 0 8388608))
  (ite (= ((_ extract 24 24) a) (_ bv0 1)) 0 16777216))
  (ite (= ((_ extract 25 25) a) (_ bv0 1)) 0 33554432))
  (ite (= ((_ extract 26 26) a) (_ bv0 1)) 0 67108864))
  (ite (= ((_ extract 27 27) a) (_ bv0 1)) 0 134217728))
  (ite (= ((_ extract 28 28) a) (_ bv0 1)) 0 268435456))
  (ite (= ((_ extract 29 29) a) (_ bv0 1)) 0 536870912))
  (ite (= ((_ extract 30 30) a) (_ bv0 1)) 0 1073741824))
  (ite (= ((_ extract 31 31) a) (_ bv0 1)) 0 2147483648))
)

(define-fun bv2nat64 ((a (_ BitVec 64))) Int
  (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+
  (ite (= ((_ extract 0 0) a) (_ bv0 1)) 0 1)
  (ite (= ((_ extract 1 1) a) (_ bv0 1)) 0 2))
  (ite (= ((_ extract 2 2) a) (_ bv0 1)) 0 4))
  (ite (= ((_ extract 3 3) a) (_ bv0 1)) 0 8))
  (ite (= ((_ extract 4 4) a) (_ bv0 1)) 0 16))
  (ite (= ((_ extract 5 5) a) (_ bv0 1)) 0 32))
  (ite (= ((_ extract 6 6) a) (_ bv0 1)) 0 64))
  (ite (= ((_ extract 7 7) a) (_ bv0 1)) 0 128))
  (ite (= ((_ extract 8 8) a) (_ bv0 1)) 0 256))
  (ite (= ((_ extract 9 9) a) (_ bv0 1)) 0 512))
  (ite (= ((_ extract 10 10) a) (_ bv0 1)) 0 1024))
  (ite (= ((_ extract 11 11) a) (_ bv0 1)) 0 2048))
  (ite (= ((_ extract 12 12) a) (_ bv0 1)) 0 4096))
  (ite (= ((_ extract 13 13) a) (_ bv0 1)) 0 8192))
  (ite (= ((_ extract 14 14) a) (_ bv0 1)) 0 16384))
  (ite (= ((_ extract 15 15) a) (_ bv0 1)) 0 32768))
  (ite (= ((_ extract 16 16) a) (_ bv0 1)) 0 65536))
  (ite (= ((_ extract 17 17) a) (_ bv0 1)) 0 131072))
  (ite (= ((_ extract 18 18) a) (_ bv0 1)) 0 262144))
  (ite (= ((_ extract 19 19) a) (_ bv0 1)) 0 524288))
  (ite (= ((_ extract 20 20) a) (_ bv0 1)) 0 1048576))
  (ite (= ((_ extract 21 21) a) (_ bv0 1)) 0 2097152))
  (ite (= ((_ extract 22 22) a) (_ bv0 1)) 0 4194304))
  (ite (= ((_ extract 23 23) a) (_ bv0 1)) 0 8388608))
  (ite (= ((_ extract 24 24) a) (_ bv0 1)) 0 16777216))
  (ite (= ((_ extract 25 25) a) (_ bv0 1)) 0 33554432))
  (ite (= ((_ extract 26 26) a) (_ bv0 1)) 0 67108864))
  (ite (= ((_ extract 27 27) a) (_ bv0 1)) 0 134217728))
  (ite (= ((_ extract 28 28) a) (_ bv0 1)) 0 268435456))
  (ite (= ((_ extract 29 29) a) (_ bv0 1)) 0 536870912))
  (ite (= ((_ extract 30 30) a) (_ bv0 1)) 0 1073741824))
  (ite (= ((_ extract 31 31) a) (_ bv0 1)) 0 2147483648))
  (ite (= ((_ extract 32 32) a) (_ bv0 1)) 0 4294967296))
  (ite (= ((_ extract 33 33) a) (_ bv0 1)) 0 8589934592))
  (ite (= ((_ extract 34 34) a) (_ bv0 1)) 0 17179869184))
  (ite (= ((_ extract 35 35) a) (_ bv0 1)) 0 34359738368))
  (ite (= ((_ extract 36 36) a) (_ bv0 1)) 0 68719476736))
  (ite (= ((_ extract 37 37) a) (_ bv0 1)) 0 137438953472))
  (ite (= ((_ extract 38 38) a) (_ bv0 1)) 0 274877906944))
  (ite (= ((_ extract 39 39) a) (_ bv0 1)) 0 549755813888))
  (ite (= ((_ extract 40 40) a) (_ bv0 1)) 0 1099511627776))
  (ite (= ((_ extract 41 41) a) (_ bv0 1)) 0 2199023255552))
  (ite (= ((_ extract 42 42) a) (_ bv0 1)) 0 4398046511104))
  (ite (= ((_ extract 43 43) a) (_ bv0 1)) 0 8796093022208))
  (ite (= ((_ extract 44 44) a) (_ bv0 1)) 0 17592186044416))
  (ite (= ((_ extract 45 45) a) (_ bv0 1)) 0 35184372088832))
  (ite (= ((_ extract 46 46) a) (_ bv0 1)) 0 70368744177664))
  (ite (= ((_ extract 47 47) a) (_ bv0 1)) 0 140737488355328))
  (ite (= ((_ extract 48 48) a) (_ bv0 1)) 0 281474976710656))
  (ite (= ((_ extract 49 49) a) (_ bv0 1)) 0 562949953421312))
  (ite (= ((_ extract 50 50) a) (_ bv0 1)) 0 1125899906842624))
  (ite (= ((_ extract 51 51) a) (_ bv0 1)) 0 2251799813685248))
  (ite (= ((_ extract 52 52) a) (_ bv0 1)) 0 4503599627370496))
  (ite (= ((_ extract 53 53) a) (_ bv0 1)) 0 9007199254740992))
  (ite (= ((_ extract 54 54) a) (_ bv0 1)) 0 18014398509481984))
  (ite (= ((_ extract 55 55) a) (_ bv0 1)) 0 36028797018963968))
  (ite (= ((_ extract 56 56) a) (_ bv0 1)) 0 72057594037927936))
  (ite (= ((_ extract 57 57) a) (_ bv0 1)) 0 144115188075855872))
  (ite (= ((_ extract 58 58) a) (_ bv0 1)) 0 288230376151711744))
  (ite (= ((_ extract 59 59) a) (_ bv0 1)) 0 576460752303423488))
  (ite (= ((_ extract 60 60) a) (_ bv0 1)) 0 1152921504606846976))
  (ite (= ((_ extract 61 61) a) (_ bv0 1)) 0 2305843009213693952))
  (ite (= ((_ extract 62 62) a) (_ bv0 1)) 0 4611686018427387904))
  (ite (= ((_ extract 63 63) a) (_ bv0 1)) 0 9223372036854775808))
)

(define-fun bv2nat128 ((a (_ BitVec 128))) Int
  (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+
  (ite (= ((_ extract 0 0) a) (_ bv0 1)) 0 1)
  (ite (= ((_ extract 1 1) a) (_ bv0 1)) 0 2))
  (ite (= ((_ extract 2 2) a) (_ bv0 1)) 0 4))
  (ite (= ((_ extract 3 3) a) (_ bv0 1)) 0 8))
  (ite (= ((_ extract 4 4) a) (_ bv0 1)) 0 16))
  (ite (= ((_ extract 5 5) a) (_ bv0 1)) 0 32))
  (ite (= ((_ extract 6 6) a) (_ bv0 1)) 0 64))
  (ite (= ((_ extract 7 7) a) (_ bv0 1)) 0 128))
  (ite (= ((_ extract 8 8) a) (_ bv0 1)) 0 256))
  (ite (= ((_ extract 9 9) a) (_ bv0 1)) 0 512))
  (ite (= ((_ extract 10 10) a) (_ bv0 1)) 0 1024))
  (ite (= ((_ extract 11 11) a) (_ bv0 1)) 0 2048))
  (ite (= ((_ extract 12 12) a) (_ bv0 1)) 0 4096))
  (ite (= ((_ extract 13 13) a) (_ bv0 1)) 0 8192))
  (ite (= ((_ extract 14 14) a) (_ bv0 1)) 0 16384))
  (ite (= ((_ extract 15 15) a) (_ bv0 1)) 0 32768))
  (ite (= ((_ extract 16 16) a) (_ bv0 1)) 0 65536))
  (ite (= ((_ extract 17 17) a) (_ bv0 1)) 0 131072))
  (ite (= ((_ extract 18 18) a) (_ bv0 1)) 0 262144))
  (ite (= ((_ extract 19 19) a) (_ bv0 1)) 0 524288))
  (ite (= ((_ extract 20 20) a) (_ bv0 1)) 0 1048576))
  (ite (= ((_ extract 21 21) a) (_ bv0 1)) 0 2097152))
  (ite (= ((_ extract 22 22) a) (_ bv0 1)) 0 4194304))
  (ite (= ((_ extract 23 23) a) (_ bv0 1)) 0 8388608))
  (ite (= ((_ extract 24 24) a) (_ bv0 1)) 0 16777216))
  (ite (= ((_ extract 25 25) a) (_ bv0 1)) 0 33554432))
  (ite (= ((_ extract 26 26) a) (_ bv0 1)) 0 67108864))
  (ite (= ((_ extract 27 27) a) (_ bv0 1)) 0 134217728))
  (ite (= ((_ extract 28 28) a) (_ bv0 1)) 0 268435456))
  (ite (= ((_ extract 29 29) a) (_ bv0 1)) 0 536870912))
  (ite (= ((_ extract 30 30) a) (_ bv0 1)) 0 1073741824))
  (ite (= ((_ extract 31 31) a) (_ bv0 1)) 0 2147483648))
  (ite (= ((_ extract 32 32) a) (_ bv0 1)) 0 4294967296))
  (ite (= ((_ extract 33 33) a) (_ bv0 1)) 0 8589934592))
  (ite (= ((_ extract 34 34) a) (_ bv0 1)) 0 17179869184))
  (ite (= ((_ extract 35 35) a) (_ bv0 1)) 0 34359738368))
  (ite (= ((_ extract 36 36) a) (_ bv0 1)) 0 68719476736))
  (ite (= ((_ extract 37 37) a) (_ bv0 1)) 0 137438953472))
  (ite (= ((_ extract 38 38) a) (_ bv0 1)) 0 274877906944))
  (ite (= ((_ extract 39 39) a) (_ bv0 1)) 0 549755813888))
  (ite (= ((_ extract 40 40) a) (_ bv0 1)) 0 1099511627776))
  (ite (= ((_ extract 41 41) a) (_ bv0 1)) 0 2199023255552))
  (ite (= ((_ extract 42 42) a) (_ bv0 1)) 0 4398046511104))
  (ite (= ((_ extract 43 43) a) (_ bv0 1)) 0 8796093022208))
  (ite (= ((_ extract 44 44) a) (_ bv0 1)) 0 17592186044416))
  (ite (= ((_ extract 45 45) a) (_ bv0 1)) 0 35184372088832))
  (ite (= ((_ extract 46 46) a) (_ bv0 1)) 0 70368744177664))
  (ite (= ((_ extract 47 47) a) (_ bv0 1)) 0 140737488355328))
  (ite (= ((_ extract 48 48) a) (_ bv0 1)) 0 281474976710656))
  (ite (= ((_ extract 49 49) a) (_ bv0 1)) 0 562949953421312))
  (ite (= ((_ extract 50 50) a) (_ bv0 1)) 0 1125899906842624))
  (ite (= ((_ extract 51 51) a) (_ bv0 1)) 0 2251799813685248))
  (ite (= ((_ extract 52 52) a) (_ bv0 1)) 0 4503599627370496))
  (ite (= ((_ extract 53 53) a) (_ bv0 1)) 0 9007199254740992))
  (ite (= ((_ extract 54 54) a) (_ bv0 1)) 0 18014398509481984))
  (ite (= ((_ extract 55 55) a) (_ bv0 1)) 0 36028797018963968))
  (ite (= ((_ extract 56 56) a) (_ bv0 1)) 0 72057594037927936))
  (ite (= ((_ extract 57 57) a) (_ bv0 1)) 0 144115188075855872))
  (ite (= ((_ extract 58 58) a) (_ bv0 1)) 0 288230376151711744))
  (ite (= ((_ extract 59 59) a) (_ bv0 1)) 0 576460752303423488))
  (ite (= ((_ extract 60 60) a) (_ bv0 1)) 0 1152921504606846976))
  (ite (= ((_ extract 61 61) a) (_ bv0 1)) 0 2305843009213693952))
  (ite (= ((_ extract 62 62) a) (_ bv0 1)) 0 4611686018427387904))
  (ite (= ((_ extract 63 63) a) (_ bv0 1)) 0 9223372036854775808))
  (ite (= ((_ extract 64 64) a) (_ bv0 1)) 0 18446744073709551616))
  (ite (= ((_ extract 65 65) a) (_ bv0 1)) 0 36893488147419103232))
  (ite (= ((_ extract 66 66) a) (_ bv0 1)) 0 73786976294838206464))
  (ite (= ((_ extract 67 67) a) (_ bv0 1)) 0 147573952589676412928))
  (ite (= ((_ extract 68 68) a) (_ bv0 1)) 0 295147905179352825856))
  (ite (= ((_ extract 69 69) a) (_ bv0 1)) 0 590295810358705651712))
  (ite (= ((_ extract 70 70) a) (_ bv0 1)) 0 1180591620717411303424))
  (ite (= ((_ extract 71 71) a) (_ bv0 1)) 0 2361183241434822606848))
  (ite (= ((_ extract 72 72) a) (_ bv0 1)) 0 4722366482869645213696))
  (ite (= ((_ extract 73 73) a) (_ bv0 1)) 0 9444732965739290427392))
  (ite (= ((_ extract 74 74) a) (_ bv0 1)) 0 18889465931478580854784))
  (ite (= ((_ extract 75 75) a) (_ bv0 1)) 0 37778931862957161709568))
  (ite (= ((_ extract 76 76) a) (_ bv0 1)) 0 75557863725914323419136))
  (ite (= ((_ extract 77 77) a) (_ bv0 1)) 0 151115727451828646838272))
  (ite (= ((_ extract 78 78) a) (_ bv0 1)) 0 302231454903657293676544))
  (ite (= ((_ extract 79 79) a) (_ bv0 1)) 0 604462909807314587353088))
  (ite (= ((_ extract 80 80) a) (_ bv0 1)) 0 1208925819614629174706176))
  (ite (= ((_ extract 81 81) a) (_ bv0 1)) 0 2417851639229258349412352))
  (ite (= ((_ extract 82 82) a) (_ bv0 1)) 0 4835703278458516698824704))
  (ite (= ((_ extract 83 83) a) (_ bv0 1)) 0 9671406556917033397649408))
  (ite (= ((_ extract 84 84) a) (_ bv0 1)) 0 19342813113834066795298816))
  (ite (= ((_ extract 85 85) a) (_ bv0 1)) 0 38685626227668133590597632))
  (ite (= ((_ extract 86 86) a) (_ bv0 1)) 0 77371252455336267181195264))
  (ite (= ((_ extract 87 87) a) (_ bv0 1)) 0 154742504910672534362390528))
  (ite (= ((_ extract 88 88) a) (_ bv0 1)) 0 309485009821345068724781056))
  (ite (= ((_ extract 89 89) a) (_ bv0 1)) 0 618970019642690137449562112))
  (ite (= ((_ extract 90 90) a) (_ bv0 1)) 0 1237940039285380274899124224))
  (ite (= ((_ extract 91 91) a) (_ bv0 1)) 0 2475880078570760549798248448))
  (ite (= ((_ extract 92 92) a) (_ bv0 1)) 0 4951760157141521099596496896))
  (ite (= ((_ extract 93 93) a) (_ bv0 1)) 0 9903520314283042199192993792))
  (ite (= ((_ extract 94 94) a) (_ bv0 1)) 0 19807040628566084398385987584))
  (ite (= ((_ extract 95 95) a) (_ bv0 1)) 0 39614081257132168796771975168))
  (ite (= ((_ extract 96 96) a) (_ bv0 1)) 0 79228162514264337593543950336))
  (ite (= ((_ extract 97 97) a) (_ bv0 1)) 0 158456325028528675187087900672))
  (ite (= ((_ extract 98 98) a) (_ bv0 1)) 0 316912650057057350374175801344))
  (ite (= ((_ extract 99 99) a) (_ bv0 1)) 0 633825300114114700748351602688))
  (ite (= ((_ extract 100 100) a) (_ bv0 1)) 0 1267650600228229401496703205376))
  (ite (= ((_ extract 101 101) a) (_ bv0 1)) 0 2535301200456458802993406410752))
  (ite (= ((_ extract 102 102) a) (_ bv0 1)) 0 5070602400912917605986812821504))
  (ite (= ((_ extract 103 103) a) (_ bv0 1)) 0 10141204801825835211973625643008))
  (ite (= ((_ extract 104 104) a) (_ bv0 1)) 0 20282409603651670423947251286016))
  (ite (= ((_ extract 105 105) a) (_ bv0 1)) 0 40564819207303340847894502572032))
  (ite (= ((_ extract 106 106) a) (_ bv0 1)) 0 81129638414606681695789005144064))
  (ite (= ((_ extract 107 107) a) (_ bv0 1)) 0 162259276829213363391578010288128))
  (ite (= ((_ extract 108 108) a) (_ bv0 1)) 0 324518553658426726783156020576256))
  (ite (= ((_ extract 109 109) a) (_ bv0 1)) 0 649037107316853453566312041152512))
  (ite (= ((_ extract 110 110) a) (_ bv0 1)) 0 1298074214633706907132624082305024))
  (ite (= ((_ extract 111 111) a) (_ bv0 1)) 0 2596148429267413814265248164610048))
  (ite (= ((_ extract 112 112) a) (_ bv0 1)) 0 5192296858534827628530496329220096))
  (ite (= ((_ extract 113 113) a) (_ bv0 1)) 0 10384593717069655257060992658440192))
  (ite (= ((_ extract 114 114) a) (_ bv0 1)) 0 20769187434139310514121985316880384))
  (ite (= ((_ extract 115 115) a) (_ bv0 1)) 0 41538374868278621028243970633760768))
  (ite (= ((_ extract 116 116) a) (_ bv0 1)) 0 83076749736557242056487941267521536))
  (ite (= ((_ extract 117 117) a) (_ bv0 1)) 0 166153499473114484112975882535043072))
  (ite (= ((_ extract 118 118) a) (_ bv0 1)) 0 332306998946228968225951765070086144))
  (ite (= ((_ extract 119 119) a) (_ bv0 1)) 0 664613997892457936451903530140172288))
  (ite (= ((_ extract 120 120) a) (_ bv0 1)) 0 1329227995784915872903807060280344576))
  (ite (= ((_ extract 121 121) a) (_ bv0 1)) 0 2658455991569831745807614120560689152))
  (ite (= ((_ extract 122 122) a) (_ bv0 1)) 0 5316911983139663491615228241121378304))
  (ite (= ((_ extract 123 123) a) (_ bv0 1)) 0 10633823966279326983230456482242756608))
  (ite (= ((_ extract 124 124) a) (_ bv0 1)) 0 21267647932558653966460912964485513216))
  (ite (= ((_ extract 125 125) a) (_ bv0 1)) 0 42535295865117307932921825928971026432))
  (ite (= ((_ extract 126 126) a) (_ bv0 1)) 0 85070591730234615865843651857942052864))
  (ite (= ((_ extract 127 127) a) (_ bv0 1)) 0 170141183460469231731687303715884105728))
)

(define-fun bv2nat256 ((a (_ BitVec 256))) Int
  (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+
  (ite (= ((_ extract 0 0) a) (_ bv0 1)) 0 1)
  (ite (= ((_ extract 1 1) a) (_ bv0 1)) 0 2))
  (ite (= ((_ extract 2 2) a) (_ bv0 1)) 0 4))
  (ite (= ((_ extract 3 3) a) (_ bv0 1)) 0 8))
  (ite (= ((_ extract 4 4) a) (_ bv0 1)) 0 16))
  (ite (= ((_ extract 5 5) a) (_ bv0 1)) 0 32))
  (ite (= ((_ extract 6 6) a) (_ bv0 1)) 0 64))
  (ite (= ((_ extract 7 7) a) (_ bv0 1)) 0 128))
  (ite (= ((_ extract 8 8) a) (_ bv0 1)) 0 256))
  (ite (= ((_ extract 9 9) a) (_ bv0 1)) 0 512))
  (ite (= ((_ extract 10 10) a) (_ bv0 1)) 0 1024))
  (ite (= ((_ extract 11 11) a) (_ bv0 1)) 0 2048))
  (ite (= ((_ extract 12 12) a) (_ bv0 1)) 0 4096))
  (ite (= ((_ extract 13 13) a) (_ bv0 1)) 0 8192))
  (ite (= ((_ extract 14 14) a) (_ bv0 1)) 0 16384))
  (ite (= ((_ extract 15 15) a) (_ bv0 1)) 0 32768))
  (ite (= ((_ extract 16 16) a) (_ bv0 1)) 0 65536))
  (ite (= ((_ extract 17 17) a) (_ bv0 1)) 0 131072))
  (ite (= ((_ extract 18 18) a) (_ bv0 1)) 0 262144))
  (ite (= ((_ extract 19 19) a) (_ bv0 1)) 0 524288))
  (ite (= ((_ extract 20 20) a) (_ bv0 1)) 0 1048576))
  (ite (= ((_ extract 21 21) a) (_ bv0 1)) 0 2097152))
  (ite (= ((_ extract 22 22) a) (_ bv0 1)) 0 4194304))
  (ite (= ((_ extract 23 23) a) (_ bv0 1)) 0 8388608))
  (ite (= ((_ extract 24 24) a) (_ bv0 1)) 0 16777216))
  (ite (= ((_ extract 25 25) a) (_ bv0 1)) 0 33554432))
  (ite (= ((_ extract 26 26) a) (_ bv0 1)) 0 67108864))
  (ite (= ((_ extract 27 27) a) (_ bv0 1)) 0 134217728))
  (ite (= ((_ extract 28 28) a) (_ bv0 1)) 0 268435456))
  (ite (= ((_ extract 29 29) a) (_ bv0 1)) 0 536870912))
  (ite (= ((_ extract 30 30) a) (_ bv0 1)) 0 1073741824))
  (ite (= ((_ extract 31 31) a) (_ bv0 1)) 0 2147483648))
  (ite (= ((_ extract 32 32) a) (_ bv0 1)) 0 4294967296))
  (ite (= ((_ extract 33 33) a) (_ bv0 1)) 0 8589934592))
  (ite (= ((_ extract 34 34) a) (_ bv0 1)) 0 17179869184))
  (ite (= ((_ extract 35 35) a) (_ bv0 1)) 0 34359738368))
  (ite (= ((_ extract 36 36) a) (_ bv0 1)) 0 68719476736))
  (ite (= ((_ extract 37 37) a) (_ bv0 1)) 0 137438953472))
  (ite (= ((_ extract 38 38) a) (_ bv0 1)) 0 274877906944))
  (ite (= ((_ extract 39 39) a) (_ bv0 1)) 0 549755813888))
  (ite (= ((_ extract 40 40) a) (_ bv0 1)) 0 1099511627776))
  (ite (= ((_ extract 41 41) a) (_ bv0 1)) 0 2199023255552))
  (ite (= ((_ extract 42 42) a) (_ bv0 1)) 0 4398046511104))
  (ite (= ((_ extract 43 43) a) (_ bv0 1)) 0 8796093022208))
  (ite (= ((_ extract 44 44) a) (_ bv0 1)) 0 17592186044416))
  (ite (= ((_ extract 45 45) a) (_ bv0 1)) 0 35184372088832))
  (ite (= ((_ extract 46 46) a) (_ bv0 1)) 0 70368744177664))
  (ite (= ((_ extract 47 47) a) (_ bv0 1)) 0 140737488355328))
  (ite (= ((_ extract 48 48) a) (_ bv0 1)) 0 281474976710656))
  (ite (= ((_ extract 49 49) a) (_ bv0 1)) 0 562949953421312))
  (ite (= ((_ extract 50 50) a) (_ bv0 1)) 0 1125899906842624))
  (ite (= ((_ extract 51 51) a) (_ bv0 1)) 0 2251799813685248))
  (ite (= ((_ extract 52 52) a) (_ bv0 1)) 0 4503599627370496))
  (ite (= ((_ extract 53 53) a) (_ bv0 1)) 0 9007199254740992))
  (ite (= ((_ extract 54 54) a) (_ bv0 1)) 0 18014398509481984))
  (ite (= ((_ extract 55 55) a) (_ bv0 1)) 0 36028797018963968))
  (ite (= ((_ extract 56 56) a) (_ bv0 1)) 0 72057594037927936))
  (ite (= ((_ extract 57 57) a) (_ bv0 1)) 0 144115188075855872))
  (ite (= ((_ extract 58 58) a) (_ bv0 1)) 0 288230376151711744))
  (ite (= ((_ extract 59 59) a) (_ bv0 1)) 0 576460752303423488))
  (ite (= ((_ extract 60 60) a) (_ bv0 1)) 0 1152921504606846976))
  (ite (= ((_ extract 61 61) a) (_ bv0 1)) 0 2305843009213693952))
  (ite (= ((_ extract 62 62) a) (_ bv0 1)) 0 4611686018427387904))
  (ite (= ((_ extract 63 63) a) (_ bv0 1)) 0 9223372036854775808))
  (ite (= ((_ extract 64 64) a) (_ bv0 1)) 0 18446744073709551616))
  (ite (= ((_ extract 65 65) a) (_ bv0 1)) 0 36893488147419103232))
  (ite (= ((_ extract 66 66) a) (_ bv0 1)) 0 73786976294838206464))
  (ite (= ((_ extract 67 67) a) (_ bv0 1)) 0 147573952589676412928))
  (ite (= ((_ extract 68 68) a) (_ bv0 1)) 0 295147905179352825856))
  (ite (= ((_ extract 69 69) a) (_ bv0 1)) 0 590295810358705651712))
  (ite (= ((_ extract 70 70) a) (_ bv0 1)) 0 1180591620717411303424))
  (ite (= ((_ extract 71 71) a) (_ bv0 1)) 0 2361183241434822606848))
  (ite (= ((_ extract 72 72) a) (_ bv0 1)) 0 4722366482869645213696))
  (ite (= ((_ extract 73 73) a) (_ bv0 1)) 0 9444732965739290427392))
  (ite (= ((_ extract 74 74) a) (_ bv0 1)) 0 18889465931478580854784))
  (ite (= ((_ extract 75 75) a) (_ bv0 1)) 0 37778931862957161709568))
  (ite (= ((_ extract 76 76) a) (_ bv0 1)) 0 75557863725914323419136))
  (ite (= ((_ extract 77 77) a) (_ bv0 1)) 0 151115727451828646838272))
  (ite (= ((_ extract 78 78) a) (_ bv0 1)) 0 302231454903657293676544))
  (ite (= ((_ extract 79 79) a) (_ bv0 1)) 0 604462909807314587353088))
  (ite (= ((_ extract 80 80) a) (_ bv0 1)) 0 1208925819614629174706176))
  (ite (= ((_ extract 81 81) a) (_ bv0 1)) 0 2417851639229258349412352))
  (ite (= ((_ extract 82 82) a) (_ bv0 1)) 0 4835703278458516698824704))
  (ite (= ((_ extract 83 83) a) (_ bv0 1)) 0 9671406556917033397649408))
  (ite (= ((_ extract 84 84) a) (_ bv0 1)) 0 19342813113834066795298816))
  (ite (= ((_ extract 85 85) a) (_ bv0 1)) 0 38685626227668133590597632))
  (ite (= ((_ extract 86 86) a) (_ bv0 1)) 0 77371252455336267181195264))
  (ite (= ((_ extract 87 87) a) (_ bv0 1)) 0 154742504910672534362390528))
  (ite (= ((_ extract 88 88) a) (_ bv0 1)) 0 309485009821345068724781056))
  (ite (= ((_ extract 89 89) a) (_ bv0 1)) 0 618970019642690137449562112))
  (ite (= ((_ extract 90 90) a) (_ bv0 1)) 0 1237940039285380274899124224))
  (ite (= ((_ extract 91 91) a) (_ bv0 1)) 0 2475880078570760549798248448))
  (ite (= ((_ extract 92 92) a) (_ bv0 1)) 0 4951760157141521099596496896))
  (ite (= ((_ extract 93 93) a) (_ bv0 1)) 0 9903520314283042199192993792))
  (ite (= ((_ extract 94 94) a) (_ bv0 1)) 0 19807040628566084398385987584))
  (ite (= ((_ extract 95 95) a) (_ bv0 1)) 0 39614081257132168796771975168))
  (ite (= ((_ extract 96 96) a) (_ bv0 1)) 0 79228162514264337593543950336))
  (ite (= ((_ extract 97 97) a) (_ bv0 1)) 0 158456325028528675187087900672))
  (ite (= ((_ extract 98 98) a) (_ bv0 1)) 0 316912650057057350374175801344))
  (ite (= ((_ extract 99 99) a) (_ bv0 1)) 0 633825300114114700748351602688))
  (ite (= ((_ extract 100 100) a) (_ bv0 1)) 0 1267650600228229401496703205376))
  (ite (= ((_ extract 101 101) a) (_ bv0 1)) 0 2535301200456458802993406410752))
  (ite (= ((_ extract 102 102) a) (_ bv0 1)) 0 5070602400912917605986812821504))
  (ite (= ((_ extract 103 103) a) (_ bv0 1)) 0 10141204801825835211973625643008))
  (ite (= ((_ extract 104 104) a) (_ bv0 1)) 0 20282409603651670423947251286016))
  (ite (= ((_ extract 105 105) a) (_ bv0 1)) 0 40564819207303340847894502572032))
  (ite (= ((_ extract 106 106) a) (_ bv0 1)) 0 81129638414606681695789005144064))
  (ite (= ((_ extract 107 107) a) (_ bv0 1)) 0 162259276829213363391578010288128))
  (ite (= ((_ extract 108 108) a) (_ bv0 1)) 0 324518553658426726783156020576256))
  (ite (= ((_ extract 109 109) a) (_ bv0 1)) 0 649037107316853453566312041152512))
  (ite (= ((_ extract 110 110) a) (_ bv0 1)) 0 1298074214633706907132624082305024))
  (ite (= ((_ extract 111 111) a) (_ bv0 1)) 0 2596148429267413814265248164610048))
  (ite (= ((_ extract 112 112) a) (_ bv0 1)) 0 5192296858534827628530496329220096))
  (ite (= ((_ extract 113 113) a) (_ bv0 1)) 0 10384593717069655257060992658440192))
  (ite (= ((_ extract 114 114) a) (_ bv0 1)) 0 20769187434139310514121985316880384))
  (ite (= ((_ extract 115 115) a) (_ bv0 1)) 0 41538374868278621028243970633760768))
  (ite (= ((_ extract 116 116) a) (_ bv0 1)) 0 83076749736557242056487941267521536))
  (ite (= ((_ extract 117 117) a) (_ bv0 1)) 0 166153499473114484112975882535043072))
  (ite (= ((_ extract 118 118) a) (_ bv0 1)) 0 332306998946228968225951765070086144))
  (ite (= ((_ extract 119 119) a) (_ bv0 1)) 0 664613997892457936451903530140172288))
  (ite (= ((_ extract 120 120) a) (_ bv0 1)) 0 1329227995784915872903807060280344576))
  (ite (= ((_ extract 121 121) a) (_ bv0 1)) 0 2658455991569831745807614120560689152))
  (ite (= ((_ extract 122 122) a) (_ bv0 1)) 0 5316911983139663491615228241121378304))
  (ite (= ((_ extract 123 123) a) (_ bv0 1)) 0 10633823966279326983230456482242756608))
  (ite (= ((_ extract 124 124) a) (_ bv0 1)) 0 21267647932558653966460912964485513216))
  (ite (= ((_ extract 125 125) a) (_ bv0 1)) 0 42535295865117307932921825928971026432))
  (ite (= ((_ extract 126 126) a) (_ bv0 1)) 0 85070591730234615865843651857942052864))
  (ite (= ((_ extract 127 127) a) (_ bv0 1)) 0 170141183460469231731687303715884105728))
  (ite (= ((_ extract 128 128) a) (_ bv0 1)) 0 340282366920938463463374607431768211456))
  (ite (= ((_ extract 129 129) a) (_ bv0 1)) 0 680564733841876926926749214863536422912))
  (ite (= ((_ extract 130 130) a) (_ bv0 1)) 0 1361129467683753853853498429727072845824))
  (ite (= ((_ extract 131 131) a) (_ bv0 1)) 0 2722258935367507707706996859454145691648))
  (ite (= ((_ extract 132 132) a) (_ bv0 1)) 0 5444517870735015415413993718908291383296))
  (ite (= ((_ extract 133 133) a) (_ bv0 1)) 0 10889035741470030830827987437816582766592))
  (ite (= ((_ extract 134 134) a) (_ bv0 1)) 0 21778071482940061661655974875633165533184))
  (ite (= ((_ extract 135 135) a) (_ bv0 1)) 0 43556142965880123323311949751266331066368))
  (ite (= ((_ extract 136 136) a) (_ bv0 1)) 0 87112285931760246646623899502532662132736))
  (ite (= ((_ extract 137 137) a) (_ bv0 1)) 0 174224571863520493293247799005065324265472))
  (ite (= ((_ extract 138 138) a) (_ bv0 1)) 0 348449143727040986586495598010130648530944))
  (ite (= ((_ extract 139 139) a) (_ bv0 1)) 0 696898287454081973172991196020261297061888))
  (ite (= ((_ extract 140 140) a) (_ bv0 1)) 0 1393796574908163946345982392040522594123776))
  (ite (= ((_ extract 141 141) a) (_ bv0 1)) 0 2787593149816327892691964784081045188247552))
  (ite (= ((_ extract 142 142) a) (_ bv0 1)) 0 5575186299632655785383929568162090376495104))
  (ite (= ((_ extract 143 143) a) (_ bv0 1)) 0 11150372599265311570767859136324180752990208))
  (ite (= ((_ extract 144 144) a) (_ bv0 1)) 0 22300745198530623141535718272648361505980416))
  (ite (= ((_ extract 145 145) a) (_ bv0 1)) 0 44601490397061246283071436545296723011960832))
  (ite (= ((_ extract 146 146) a) (_ bv0 1)) 0 89202980794122492566142873090593446023921664))
  (ite (= ((_ extract 147 147) a) (_ bv0 1)) 0 178405961588244985132285746181186892047843328))
  (ite (= ((_ extract 148 148) a) (_ bv0 1)) 0 356811923176489970264571492362373784095686656))
  (ite (= ((_ extract 149 149) a) (_ bv0 1)) 0 713623846352979940529142984724747568191373312))
  (ite (= ((_ extract 150 150) a) (_ bv0 1)) 0 1427247692705959881058285969449495136382746624))
  (ite (= ((_ extract 151 151) a) (_ bv0 1)) 0 2854495385411919762116571938898990272765493248))
  (ite (= ((_ extract 152 152) a) (_ bv0 1)) 0 5708990770823839524233143877797980545530986496))
  (ite (= ((_ extract 153 153) a) (_ bv0 1)) 0 11417981541647679048466287755595961091061972992))
  (ite (= ((_ extract 154 154) a) (_ bv0 1)) 0 22835963083295358096932575511191922182123945984))
  (ite (= ((_ extract 155 155) a) (_ bv0 1)) 0 45671926166590716193865151022383844364247891968))
  (ite (= ((_ extract 156 156) a) (_ bv0 1)) 0 91343852333181432387730302044767688728495783936))
  (ite (= ((_ extract 157 157) a) (_ bv0 1)) 0 182687704666362864775460604089535377456991567872))
  (ite (= ((_ extract 158 158) a) (_ bv0 1)) 0 365375409332725729550921208179070754913983135744))
  (ite (= ((_ extract 159 159) a) (_ bv0 1)) 0 730750818665451459101842416358141509827966271488))
  (ite (= ((_ extract 160 160) a) (_ bv0 1)) 0 1461501637330902918203684832716283019655932542976))
  (ite (= ((_ extract 161 161) a) (_ bv0 1)) 0 2923003274661805836407369665432566039311865085952))
  (ite (= ((_ extract 162 162) a) (_ bv0 1)) 0 5846006549323611672814739330865132078623730171904))
  (ite (= ((_ extract 163 163) a) (_ bv0 1)) 0 11692013098647223345629478661730264157247460343808))
  (ite (= ((_ extract 164 164) a) (_ bv0 1)) 0 23384026197294446691258957323460528314494920687616))
  (ite (= ((_ extract 165 165) a) (_ bv0 1)) 0 46768052394588893382517914646921056628989841375232))
  (ite (= ((_ extract 166 166) a) (_ bv0 1)) 0 93536104789177786765035829293842113257979682750464))
  (ite (= ((_ extract 167 167) a) (_ bv0 1)) 0 187072209578355573530071658587684226515959365500928))
  (ite (= ((_ extract 168 168) a) (_ bv0 1)) 0 374144419156711147060143317175368453031918731001856))
  (ite (= ((_ extract 169 169) a) (_ bv0 1)) 0 748288838313422294120286634350736906063837462003712))
  (ite (= ((_ extract 170 170) a) (_ bv0 1)) 0 1496577676626844588240573268701473812127674924007424))
  (ite (= ((_ extract 171 171) a) (_ bv0 1)) 0 2993155353253689176481146537402947624255349848014848))
  (ite (= ((_ extract 172 172) a) (_ bv0 1)) 0 5986310706507378352962293074805895248510699696029696))
  (ite (= ((_ extract 173 173) a) (_ bv0 1)) 0 11972621413014756705924586149611790497021399392059392))
  (ite (= ((_ extract 174 174) a) (_ bv0 1)) 0 23945242826029513411849172299223580994042798784118784))
  (ite (= ((_ extract 175 175) a) (_ bv0 1)) 0 47890485652059026823698344598447161988085597568237568))
  (ite (= ((_ extract 176 176) a) (_ bv0 1)) 0 95780971304118053647396689196894323976171195136475136))
  (ite (= ((_ extract 177 177) a) (_ bv0 1)) 0 191561942608236107294793378393788647952342390272950272))
  (ite (= ((_ extract 178 178) a) (_ bv0 1)) 0 383123885216472214589586756787577295904684780545900544))
  (ite (= ((_ extract 179 179) a) (_ bv0 1)) 0 766247770432944429179173513575154591809369561091801088))
  (ite (= ((_ extract 180 180) a) (_ bv0 1)) 0 1532495540865888858358347027150309183618739122183602176))
  (ite (= ((_ extract 181 181) a) (_ bv0 1)) 0 3064991081731777716716694054300618367237478244367204352))
  (ite (= ((_ extract 182 182) a) (_ bv0 1)) 0 6129982163463555433433388108601236734474956488734408704))
  (ite (= ((_ extract 183 183) a) (_ bv0 1)) 0 12259964326927110866866776217202473468949912977468817408))
  (ite (= ((_ extract 184 184) a) (_ bv0 1)) 0 24519928653854221733733552434404946937899825954937634816))
  (ite (= ((_ extract 185 185) a) (_ bv0 1)) 0 49039857307708443467467104868809893875799651909875269632))
  (ite (= ((_ extract 186 186) a) (_ bv0 1)) 0 98079714615416886934934209737619787751599303819750539264))
  (ite (= ((_ extract 187 187) a) (_ bv0 1)) 0 196159429230833773869868419475239575503198607639501078528))
  (ite (= ((_ extract 188 188) a) (_ bv0 1)) 0 392318858461667547739736838950479151006397215279002157056))
  (ite (= ((_ extract 189 189) a) (_ bv0 1)) 0 784637716923335095479473677900958302012794430558004314112))
  (ite (= ((_ extract 190 190) a) (_ bv0 1)) 0 1569275433846670190958947355801916604025588861116008628224))
  (ite (= ((_ extract 191 191) a) (_ bv0 1)) 0 3138550867693340381917894711603833208051177722232017256448))
  (ite (= ((_ extract 192 192) a) (_ bv0 1)) 0 6277101735386680763835789423207666416102355444464034512896))
  (ite (= ((_ extract 193 193) a) (_ bv0 1)) 0 12554203470773361527671578846415332832204710888928069025792))
  (ite (= ((_ extract 194 194) a) (_ bv0 1)) 0 25108406941546723055343157692830665664409421777856138051584))
  (ite (= ((_ extract 195 195) a) (_ bv0 1)) 0 50216813883093446110686315385661331328818843555712276103168))
  (ite (= ((_ extract 196 196) a) (_ bv0 1)) 0 100433627766186892221372630771322662657637687111424552206336))
  (ite (= ((_ extract 197 197) a) (_ bv0 1)) 0 200867255532373784442745261542645325315275374222849104412672))
  (ite (= ((_ extract 198 198) a) (_ bv0 1)) 0 401734511064747568885490523085290650630550748445698208825344))
  (ite (= ((_ extract 199 199) a) (_ bv0 1)) 0 803469022129495137770981046170581301261101496891396417650688))
  (ite (= ((_ extract 200 200) a) (_ bv0 1)) 0 1606938044258990275541962092341162602522202993782792835301376))
  (ite (= ((_ extract 201 201) a) (_ bv0 1)) 0 3213876088517980551083924184682325205044405987565585670602752))
  (ite (= ((_ extract 202 202) a) (_ bv0 1)) 0 6427752177035961102167848369364650410088811975131171341205504))
  (ite (= ((_ extract 203 203) a) (_ bv0 1)) 0 12855504354071922204335696738729300820177623950262342682411008))
  (ite (= ((_ extract 204 204) a) (_ bv0 1)) 0 25711008708143844408671393477458601640355247900524685364822016))
  (ite (= ((_ extract 205 205) a) (_ bv0 1)) 0 51422017416287688817342786954917203280710495801049370729644032))
  (ite (= ((_ extract 206 206) a) (_ bv0 1)) 0 102844034832575377634685573909834406561420991602098741459288064))
  (ite (= ((_ extract 207 207) a) (_ bv0 1)) 0 205688069665150755269371147819668813122841983204197482918576128))
  (ite (= ((_ extract 208 208) a) (_ bv0 1)) 0 411376139330301510538742295639337626245683966408394965837152256))
  (ite (= ((_ extract 209 209) a) (_ bv0 1)) 0 822752278660603021077484591278675252491367932816789931674304512))
  (ite (= ((_ extract 210 210) a) (_ bv0 1)) 0 1645504557321206042154969182557350504982735865633579863348609024))
  (ite (= ((_ extract 211 211) a) (_ bv0 1)) 0 3291009114642412084309938365114701009965471731267159726697218048))
  (ite (= ((_ extract 212 212) a) (_ bv0 1)) 0 6582018229284824168619876730229402019930943462534319453394436096))
  (ite (= ((_ extract 213 213) a) (_ bv0 1)) 0 13164036458569648337239753460458804039861886925068638906788872192))
  (ite (= ((_ extract 214 214) a) (_ bv0 1)) 0 26328072917139296674479506920917608079723773850137277813577744384))
  (ite (= ((_ extract 215 215) a) (_ bv0 1)) 0 52656145834278593348959013841835216159447547700274555627155488768))
  (ite (= ((_ extract 216 216) a) (_ bv0 1)) 0 105312291668557186697918027683670432318895095400549111254310977536))
  (ite (= ((_ extract 217 217) a) (_ bv0 1)) 0 210624583337114373395836055367340864637790190801098222508621955072))
  (ite (= ((_ extract 218 218) a) (_ bv0 1)) 0 421249166674228746791672110734681729275580381602196445017243910144))
  (ite (= ((_ extract 219 219) a) (_ bv0 1)) 0 842498333348457493583344221469363458551160763204392890034487820288))
  (ite (= ((_ extract 220 220) a) (_ bv0 1)) 0 1684996666696914987166688442938726917102321526408785780068975640576))
  (ite (= ((_ extract 221 221) a) (_ bv0 1)) 0 3369993333393829974333376885877453834204643052817571560137951281152))
  (ite (= ((_ extract 222 222) a) (_ bv0 1)) 0 6739986666787659948666753771754907668409286105635143120275902562304))
  (ite (= ((_ extract 223 223) a) (_ bv0 1)) 0 13479973333575319897333507543509815336818572211270286240551805124608))
  (ite (= ((_ extract 224 224) a) (_ bv0 1)) 0 26959946667150639794667015087019630673637144422540572481103610249216))
  (ite (= ((_ extract 225 225) a) (_ bv0 1)) 0 53919893334301279589334030174039261347274288845081144962207220498432))
  (ite (= ((_ extract 226 226) a) (_ bv0 1)) 0 107839786668602559178668060348078522694548577690162289924414440996864))
  (ite (= ((_ extract 227 227) a) (_ bv0 1)) 0 215679573337205118357336120696157045389097155380324579848828881993728))
  (ite (= ((_ extract 228 228) a) (_ bv0 1)) 0 431359146674410236714672241392314090778194310760649159697657763987456))
  (ite (= ((_ extract 229 229) a) (_ bv0 1)) 0 862718293348820473429344482784628181556388621521298319395315527974912))
  (ite (= ((_ extract 230 230) a) (_ bv0 1)) 0 1725436586697640946858688965569256363112777243042596638790631055949824))
  (ite (= ((_ extract 231 231) a) (_ bv0 1)) 0 3450873173395281893717377931138512726225554486085193277581262111899648))
  (ite (= ((_ extract 232 232) a) (_ bv0 1)) 0 6901746346790563787434755862277025452451108972170386555162524223799296))
  (ite (= ((_ extract 233 233) a) (_ bv0 1)) 0 13803492693581127574869511724554050904902217944340773110325048447598592))
  (ite (= ((_ extract 234 234) a) (_ bv0 1)) 0 27606985387162255149739023449108101809804435888681546220650096895197184))
  (ite (= ((_ extract 235 235) a) (_ bv0 1)) 0 55213970774324510299478046898216203619608871777363092441300193790394368))
  (ite (= ((_ extract 236 236) a) (_ bv0 1)) 0 110427941548649020598956093796432407239217743554726184882600387580788736))
  (ite (= ((_ extract 237 237) a) (_ bv0 1)) 0 220855883097298041197912187592864814478435487109452369765200775161577472))
  (ite (= ((_ extract 238 238) a) (_ bv0 1)) 0 441711766194596082395824375185729628956870974218904739530401550323154944))
  (ite (= ((_ extract 239 239) a) (_ bv0 1)) 0 883423532389192164791648750371459257913741948437809479060803100646309888))
  (ite (= ((_ extract 240 240) a) (_ bv0 1)) 0 1766847064778384329583297500742918515827483896875618958121606201292619776))
  (ite (= ((_ extract 241 241) a) (_ bv0 1)) 0 3533694129556768659166595001485837031654967793751237916243212402585239552))
  (ite (= ((_ extract 242 242) a) (_ bv0 1)) 0 7067388259113537318333190002971674063309935587502475832486424805170479104))
  (ite (= ((_ extract 243 243) a) (_ bv0 1)) 0 14134776518227074636666380005943348126619871175004951664972849610340958208))
  (ite (= ((_ extract 244 244) a) (_ bv0 1)) 0 28269553036454149273332760011886696253239742350009903329945699220681916416))
  (ite (= ((_ extract 245 245) a) (_ bv0 1)) 0 56539106072908298546665520023773392506479484700019806659891398441363832832))
  (ite (= ((_ extract 246 246) a) (_ bv0 1)) 0 113078212145816597093331040047546785012958969400039613319782796882727665664))
  (ite (= ((_ extract 247 247) a) (_ bv0 1)) 0 226156424291633194186662080095093570025917938800079226639565593765455331328))
  (ite (= ((_ extract 248 248) a) (_ bv0 1)) 0 452312848583266388373324160190187140051835877600158453279131187530910662656))
  (ite (= ((_ extract 249 249) a) (_ bv0 1)) 0 904625697166532776746648320380374280103671755200316906558262375061821325312))
  (ite (= ((_ extract 250 250) a) (_ bv0 1)) 0 1809251394333065553493296640760748560207343510400633813116524750123642650624))
  (ite (= ((_ extract 251 251) a) (_ bv0 1)) 0 3618502788666131106986593281521497120414687020801267626233049500247285301248))
  (ite (= ((_ extract 252 252) a) (_ bv0 1)) 0 7237005577332262213973186563042994240829374041602535252466099000494570602496))
  (ite (= ((_ extract 253 253) a) (_ bv0 1)) 0 14474011154664524427946373126085988481658748083205070504932198000989141204992))
  (ite (= ((_ extract 254 254) a) (_ bv0 1)) 0 28948022309329048855892746252171976963317496166410141009864396001978282409984))
  (ite (= ((_ extract 255 255) a) (_ bv0 1)) 0 57896044618658097711785492504343953926634992332820282019728792003956564819968))
)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
  (((Tuple0))))

(declare-sort us_private 0)

;; private__bool_eq
(declare-fun private__bool_eq (us_private
  us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
  (((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))

(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
  (((int__refqtmk (int__content Int)))))

(declare-datatypes ((bool__ref 0))
  (((bool__refqtmk (bool__content Bool)))))

(declare-datatypes ((us_fixed__ref 0))
  (((us_fixed__refqtmk (us_fixed__content Int)))))

(declare-datatypes ((real__ref 0))
  (((real__refqtmk (real__content Real)))))

(declare-datatypes ((us_private__ref 0))
  (((us_private__refqtmk (us_private__content us_private)))))

;; int__ref___projection
(define-fun int__ref___projection ((a int__ref)) Int
  (int__content a))

;; __fixed__ref___projection
(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int
  (us_fixed__content a))

;; bool__ref___projection
(define-fun bool__ref___projection ((a bool__ref)) Bool
  (bool__content a))

;; real__ref___projection
(define-fun real__ref___projection ((a real__ref)) Real
  (real__content a))

;; __private__ref___projection
(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

;; nth
(declare-fun nth ((_ BitVec 64)
  Int) Bool)

;; lsr
(declare-fun lsr ((_ BitVec 64)
  Int) (_ BitVec 64))

;; asr
(declare-fun asr ((_ BitVec 64)
  Int) (_ BitVec 64))

;; lsl
(declare-fun lsl ((_ BitVec 64)
  Int) (_ BitVec 64))

;; abs
(define-fun abs1 ((x Int)) Int
  (ite (<= 0 x) x (- x)))

;; Abs_le
(assert
  (forall ((x Int) (y Int)) (= (<= (abs1 x) y) (and (<= (- y) x) (<= x y)))))

;; Abs_pos
(assert (forall ((x Int)) (<= 0 (abs1 x))))

;; Div_unique
(assert
  (forall ((x Int) (y Int) (q Int))
    (=>
      (< 0 y)
      (=> (and (<= (* q y) x) (< x (+ (* q y) y))) (= (div x y) q)))))

;; Div_bound
(assert
  (forall ((x Int) (y Int))
    (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div x y)) (<= (div x y) x)))))

;; Div_inf
(assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div x y) 0))))

;; Div_inf_neg
(assert
  (forall ((x Int) (y Int))
    (=> (and (< 0 x) (<= x y)) (= (div (- x) y) (- 1)))))

;; Mod_0
(assert (forall ((y Int)) (=> (not (= y 0)) (= (mod 0 y) 0))))

;; Div_1_left
(assert (forall ((y Int)) (=> (< 1 y) (= (div 1 y) 0))))

;; Div_minus1_left
(assert (forall ((y Int)) (=> (< 1 y) (= (div (- 1) y) (- 1)))))

;; Mod_1_left
(assert (forall ((y Int)) (=> (< 1 y) (= (mod 1 y) 1))))

;; Mod_minus1_left
(assert
  (forall ((y Int))
    (! (=> (< 1 y) (= (mod (- 1) y) (- y 1))) :pattern ((mod (- 1) y)) )))

;; Div_mult
(assert
  (forall ((x Int) (y Int) (z Int))
    (! (=> (< 0 x) (= (div (+ (* x y) z) x) (+ y (div z x)))) :pattern ((div (+ (* x y) z) x)) )))

;; Mod_mult
(assert
  (forall ((x Int) (y Int) (z Int))
    (! (=> (< 0 x) (= (mod (+ (* x y) z) x) (mod z x))) :pattern ((mod (+ (* x y) z) x)) )))

;; rotate_right
(declare-fun rotate_right1 ((_ BitVec 64)
  Int) (_ BitVec 64))

;; rotate_left
(declare-fun rotate_left1 ((_ BitVec 64)
  Int) (_ BitVec 64))

;; pow2
(declare-fun pow2 (Int) Int)

(declare-const two_power_size_minus_one Int)

;; two_power_size_minus_one_val
(assert (= two_power_size_minus_one (pow2 (- 64 1))))

;; of_int
(declare-fun of_int (Int) (_ BitVec 64))

;; to_int
(define-fun to_int1 ((x (_ BitVec 64))) Int
  (ite (bvsge x (_ bv0 64))
    (bv2nat64 x)
    (- (- 18446744073709551616 (bv2nat64 x)))))

;; uint_in_range
(define-fun uint_in_range ((i Int)) Bool
  (and (<= 0 i) (<= i 18446744073709551615)))

;; lsr_bv_is_lsr
(assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
    (= (bvlshr x n) (lsr x (bv2nat64 n)))))

;; asr_bv_is_asr
(assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
    (= (bvashr x n) (asr x (bv2nat64 n)))))

;; lsl_bv_is_lsl
(assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
    (= (bvshl x n) (lsl x (bv2nat64 n)))))

;; rotate_left_bv_is_rotate_left
(assert
  (forall ((v (_ BitVec 64)) (n (_ BitVec 64)))
    (= (bvor (bvshl v (bvurem n (_ bv64 64))) (bvlshr v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) 
    (rotate_left1
      v
      (bv2nat64 n)))))

;; rotate_right_bv_is_rotate_right
(assert
  (forall ((v (_ BitVec 64)) (n (_ BitVec 64)))
    (= (bvor (bvlshr v (bvurem n (_ bv64 64))) (bvshl v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) 
    (rotate_right1
      v
      (bv2nat64 n)))))

;; nth_bv
(declare-fun nth_bv ((_ BitVec 64)
  (_ BitVec 64)) Bool)

;; nth_bv_def
(assert
  (forall ((x (_ BitVec 64)) (i (_ BitVec 64)))
    (=
      (= (nth_bv x i) true)
      (not (= (bvand (bvlshr x i) #x0000000000000001) #x0000000000000000)))))

;; Nth_bv_is_nth
(assert
  (forall ((x (_ BitVec 64)) (i (_ BitVec 64)))
    (= (nth x (bv2nat64 i)) (nth_bv x i))))

;; Nth_bv_is_nth2
(assert
  (forall ((x (_ BitVec 64)) (i Int))
    (=>
      (and (<= 0 i) (< i 18446744073709551616))
      (= (nth_bv x (of_int i)) (nth x i)))))

;; eq_sub_bv
(declare-fun eq_sub_bv ((_ BitVec 64)
  (_ BitVec 64)
  (_ BitVec 64)
  (_ BitVec 64)) Bool)

;; eq_sub_bv_def
(assert
  (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64)))
    (let ((mask (bvshl (bvsub (bvshl #x0000000000000001 n) #x0000000000000001) i)))
      (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))

;; eq_sub
(define-fun eq_sub ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int) (n Int)) Bool
  (forall ((j Int))
    (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

;; eq_sub_equiv
(assert
  (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64)))
    (= (eq_sub a b (bv2nat64 i) (bv2nat64 n)) (eq_sub_bv a b i n))))

(declare-datatypes ((t__ref 0))
  (((t__refqtmk (t__content (_ BitVec 64))))))

;; bool_eq
(define-fun bool_eq ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool
  (ite (= x y) true false))

;; bool_ne
(define-fun bool_ne ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool
  (ite (not (= x y)) true false))

;; bool_lt
(define-fun bool_lt ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool
  (ite (bvult x y) true false))

;; bool_le
(define-fun bool_le ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool
  (ite (bvule x y) true false))

;; bool_gt
(define-fun bool_gt ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool
  (ite (bvugt x y) true false))

;; bool_ge
(define-fun bool_ge ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool
  (ite (bvuge x y) true false))

;; power
(declare-fun power ((_ BitVec 64)
  Int) (_ BitVec 64))

;; Power_0
(assert (forall ((x (_ BitVec 64))) (= (power x 0) #x0000000000000001)))

;; Power_1
(assert (forall ((x (_ BitVec 64))) (= (power x 1) x)))

;; Power_s
(assert
  (forall ((x (_ BitVec 64)) (n Int))
    (=> (<= 0 n) (= (power x (+ n 1)) (bvmul x (power x n))))))

;; Power_s_alt
(assert
  (forall ((x (_ BitVec 64)) (n Int))
    (=> (< 0 n) (= (power x n) (bvmul x (power x (- n 1)))))))

;; Power_sum
(assert
  (forall ((x (_ BitVec 64)) (n Int) (m Int))
    (=>
      (<= 0 n)
      (=> (<= 0 m) (= (power x (+ n m)) (bvmul (power x n) (power x m)))))))

;; Power_mult
(assert
  (forall ((x (_ BitVec 64)) (n Int) (m Int))
    (=> (<= 0 n) (=> (<= 0 m) (= (power x (* n m)) (power (power x n) m))))))

;; Power_mult2
(assert
  (forall ((x (_ BitVec 64)) (y (_ BitVec 64)) (n Int))
    (=> (<= 0 n) (= (power (bvmul x y) n) (bvmul (power x n) (power y n))))))

;; bv_min
(define-fun bv_min ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)
  (ite (bvule x y) x y))

;; bv_max
(define-fun bv_max ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)
  (ite (bvule x y) y x))

;; min
(define-fun min ((x Int) (y Int)) Int
  (ite (<= x y) x y))

;; max
(define-fun max ((x Int) (y Int)) Int
  (ite (<= x y) y x))

;; Min_r
(assert (forall ((x Int) (y Int)) (=> (<= y x) (= (min x y) y))))

;; Max_l
(assert (forall ((x Int) (y Int)) (=> (<= y x) (= (max x y) x))))

;; Min_comm
(assert (forall ((x Int) (y Int)) (= (min x y) (min y x))))

;; Max_comm
(assert (forall ((x Int) (y Int)) (= (max x y) (max y x))))

;; Min_assoc
(assert
  (forall ((x Int) (y Int) (z Int)) (= (min (min x y) z) (min x (min y z)))))

;; Max_assoc
(assert
  (forall ((x Int) (y Int) (z Int)) (= (max (max x y) z) (max x (max y z)))))

;; bv_min_to_uint
(assert
  (forall ((x (_ BitVec 64)) (y (_ BitVec 64)))
    (= (bv2nat64 (bv_min x y)) (min (bv2nat64 x) (bv2nat64 y)))))

;; bv_max_to_uint
(assert
  (forall ((x (_ BitVec 64)) (y (_ BitVec 64)))
    (= (bv2nat64 (bv_max x y)) (max (bv2nat64 x) (bv2nat64 y)))))

;; uc_of_int
(define-fun uc_of_int ((x Int)) (_ BitVec 64)
  (ite (<= 0 x) (of_int x) (bvneg (of_int (- x)))))

;; uc_to_int
(define-fun uc_to_int ((x (_ BitVec 64))) Int
  (ite (= (bool_lt x (of_int two_power_size_minus_one)) true)
    (bv2nat64 x)
    (- (bv2nat64 (bvneg x)))))

;; bool_eq
(define-fun bool_eq1 ((x Bool) (y Bool)) Bool
  (ite (= x y) true false))

;; to_int
(define-fun to_int2 ((b Bool)) Int
  (ite (= b true) 1 0))

;; of_int
(define-fun of_int1 ((i Int)) Bool
  (ite (= i 0) false true))

;; in_range
(define-fun in_range ((x Int)) Bool
  (or (= x 0) (= x 1)))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

;; integer'int
(declare-fun integerqtint (integer) Int)

;; integer'axiom
(assert
  (forall ((i integer))
    (and
      (<= (- 2147483648) (integerqtint i))
      (<= (integerqtint i) 2147483647))))

;; in_range
(define-fun in_range1 ((x Int)) Bool
  (and (<= (- 2147483648) x) (<= x 2147483647)))

;; bool_eq
(define-fun bool_eq2 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

;; user_eq
(declare-fun user_eq (integer
  integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
  (((integer__refqtmk (integer__content integer)))))

;; integer__ref_integer__content__projection
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer
  (integer__content a))

;; dynamic_invariant
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool
  (=>
    (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647))
    (in_range1 temp___expr_18)))

(declare-sort natural 0)

;; natural'int
(declare-fun naturalqtint (natural) Int)

;; natural'axiom
(assert
  (forall ((i natural))
    (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

;; in_range
(define-fun in_range2 ((x Int)) Bool
  (and (<= 0 x) (<= x 2147483647)))

;; bool_eq
(define-fun bool_eq3 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

;; user_eq
(declare-fun user_eq1 (natural
  natural) Bool)

(declare-const dummy1 natural)

(declare-datatypes ((natural__ref 0))
  (((natural__refqtmk (natural__content natural)))))

;; natural__ref_natural__content__projection
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural
  (natural__content a))

;; dynamic_invariant
(define-fun dynamic_invariant1 ((temp___expr_46 Int) (temp___is_init_42 Bool) (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool) (temp___do_typ_inv_45 Bool)) Bool
  (=>
    (or (= temp___is_init_42 true) (<= 0 2147483647))
    (in_range2 temp___expr_46)))

(declare-sort positive 0)

;; positive'int
(declare-fun positiveqtint (positive) Int)

;; positive'axiom
(assert
  (forall ((i positive))
    (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

;; in_range
(define-fun in_range3 ((x Int)) Bool
  (and (<= 1 x) (<= x 2147483647)))

;; bool_eq
(define-fun bool_eq4 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

;; user_eq
(declare-fun user_eq2 (positive
  positive) Bool)

(declare-const dummy2 positive)

(declare-datatypes ((positive__ref 0))
  (((positive__refqtmk (positive__content positive)))))

;; positive__ref_positive__content__projection
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive
  (positive__content a))

;; dynamic_invariant
(define-fun dynamic_invariant2 ((temp___expr_53 Int) (temp___is_init_49 Bool) (temp___skip_constant_50 Bool) (temp___do_toplevel_51 Bool) (temp___do_typ_inv_52 Bool)) Bool
  (=>
    (or (= temp___is_init_49 true) (<= 1 2147483647))
    (in_range3 temp___expr_53)))

(declare-sort character 0)

;; in_range
(define-fun in_range4 ((x Int)) Bool
  (and (<= 0 x) (<= x 255)))

;; bool_eq
(define-fun bool_eq5 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

;; user_eq
(declare-fun user_eq3 (character
  character) Bool)

(declare-const dummy3 character)

(declare-datatypes ((character__ref 0))
  (((character__refqtmk (character__content character)))))

;; character__ref_character__content__projection
(define-fun character__ref_character__content__projection ((a character__ref)) character
  (character__content a))

;; to_rep
(declare-fun to_rep (character) Int)

;; of_rep
(declare-fun of_rep (Int) character)

;; inversion_axiom
(assert
  (forall ((x character))
    (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
(assert
  (forall ((x character)) (! (in_range4 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
(assert
  (forall ((x Int))
    (! (=> (in_range4 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                                (of_rep x))) )))

(declare-datatypes ((map__ref 0))
  (((map__refqtmk (map__content (Array Int character))))))

;; slide
(declare-fun slide ((Array Int character)
  Int
  Int) (Array Int character))

;; slide_eq
(assert
  (forall ((a (Array Int character)))
    (forall ((first Int))
      (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
(assert
  (forall ((a (Array Int character)))
    (forall ((old_first Int))
      (forall ((new_first Int))
        (forall ((i Int))
          (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
          (slide
            a
            old_first
            new_first) i)) ))))))

;; const
(declare-fun const1 (character) (Array Int character))

;; const_def
(assert
  (forall ((v character))
    (forall ((i Int))
      (! (= (select (const1 v) i) v) :pattern ((select (const1 v) i)) ))))

;; bool_eq
(define-fun bool_eq6 ((a (Array Int character)) (a__first Int) (a__last Int) (b (Array Int character)) (b__first Int) (b__last Int)) Bool
  (ite (and
         (ite (<= a__first a__last)
           (and
             (<= b__first b__last)
             (= (- a__last a__first) (- b__last b__first)))
           (< b__last b__first))
         (forall ((temp___idx_105 Int))
           (=>
             (and (<= a__first temp___idx_105) (<= temp___idx_105 a__last))
             (= (to_rep (select a temp___idx_105)) (to_rep
                                                     (select b (+ (- b__first a__first) temp___idx_105)))))))
    true
    false))

;; bool_eq_rev
(assert
  (forall ((a (Array Int character)) (b (Array Int character)))
    (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
      (=>
        (= (bool_eq6 b b__first b__last a a__first a__last) true)
        (and
          (ite (<= a__first a__last)
            (and
              (<= b__first b__last)
              (= (- a__last a__first) (- b__last b__first)))
            (< b__last b__first))
          (forall ((temp___idx_105 Int))
            (=>
              (and (<= a__first temp___idx_105) (<= temp___idx_105 a__last))
              (= (to_rep (select a temp___idx_105)) (to_rep
                                                      (select b (+ (- b__first a__first) temp___idx_105)))))))))))

;; to_rep
(define-fun to_rep1 ((x integer)) Int
  (integerqtint x))

;; of_rep
(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
(assert
  (forall ((x integer))
    (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
(assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
(assert
  (forall ((x Int))
    (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                                  (of_rep1 x))) )))

(declare-datatypes ((t 0))
  (((tqtmk (rec__first integer)(rec__last integer)))))

;; mk
(declare-fun mk (Int
  Int) t)

;; mk_def
(assert
  (forall ((f Int) (l Int))
    (! (=>
         (in_range1 f)
         (=>
           (in_range1 l)
           (and
             (= (to_rep1 (rec__first (mk f l))) f)
             (= (to_rep1 (rec__last (mk f l))) l)))) :pattern ((mk f l)) )))

;; dynamic_property
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool
  (and
    (in_range1 low)
    (and
      (in_range1 high)
      (=> (<= low high) (and (in_range3 low) (in_range3 high))))))

(declare-datatypes ((us_t 0))
  (((us_tqtmk (elts (Array Int character))(rt t)))))

;; to_array
(define-fun to_array ((a us_t)) (Array Int character)
  (elts a))

;; of_array
(define-fun of_array ((a (Array Int character)) (f Int) (l Int)) us_t
  (us_tqtmk a (mk f l)))

;; first
(define-fun first ((a us_t)) Int
  (to_rep1 (rec__first (rt a))))

;; last
(define-fun last ((a us_t)) Int
  (to_rep1 (rec__last (rt a))))

;; length
(define-fun length ((a us_t)) Int
  (ite (<= (first a) (last a)) (+ (- (last a) (first a)) 1) 0))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
(assert (<= 0 value__size))

;; object__size_axiom
(assert (<= 0 object__size))

;; component__size_axiom
(assert (<= 0 component__size))

;; alignment_axiom
(assert (<= 0 alignment))

;; bool_eq
(define-fun bool_eq7 ((x us_t) (y us_t)) Bool
  (bool_eq6
    (elts x)
    (to_rep1 (rec__first (rt x)))
    (to_rep1 (rec__last (rt x)))
    (elts y)
    (to_rep1 (rec__first (rt y)))
    (to_rep1 (rec__last (rt y)))))

;; user_eq
(declare-fun user_eq4 (us_t
  us_t) Bool)

(declare-const dummy4 us_t)

(declare-datatypes ((string____ref 0))
  (((string____refqtmk (string____content us_t)))))

;; string____ref_string____content__projection
(define-fun string____ref_string____content__projection ((a string____ref)) us_t
  (string____content a))

;; width
(declare-fun width ((_ BitVec 64)
  (_ BitVec 64)) Int)

;; width__function_guard
(declare-fun width__function_guard (Int
  (_ BitVec 64)
  (_ BitVec 64)) Bool)

(declare-const unsigned_width_ghost Int)

(declare-const v Int)

(declare-const s__first integer)

(declare-const s__last integer)

;; value_integer
(declare-fun value_integer (us_t) Int)

;; value_integer__function_guard
(declare-fun value_integer__function_guard (Int
  us_t) Bool)

(declare-sort long_long_integer 0)

;; long_long_integer'int
(declare-fun long_long_integerqtint (long_long_integer) Int)

;; long_long_integer'axiom
(assert
  (forall ((i long_long_integer))
    (and
      (<= (- 9223372036854775808) (long_long_integerqtint i))
      (<= (long_long_integerqtint i) 9223372036854775807))))

;; in_range
(define-fun in_range5 ((x Int)) Bool
  (and (<= (- 9223372036854775808) x) (<= x 9223372036854775807)))

;; bool_eq
(define-fun bool_eq8 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

;; user_eq
(declare-fun user_eq5 (long_long_integer
  long_long_integer) Bool)

(declare-const dummy5 long_long_integer)

(declare-datatypes ((long_long_integer__ref 0))
  (((long_long_integer__refqtmk
    (long_long_integer__content long_long_integer)))))

;; long_long_integer__ref_long_long_integer__content__projection
(define-fun long_long_integer__ref_long_long_integer__content__projection 
  ((a long_long_integer__ref)) long_long_integer
  (long_long_integer__content a))

;; dynamic_invariant
(define-fun dynamic_invariant3 ((temp___expr_32 Int) (temp___is_init_28 Bool) (temp___skip_constant_29 Bool) (temp___do_toplevel_30 Bool) (temp___do_typ_inv_31 Bool)) Bool
  (=>
    (or
      (= temp___is_init_28 true)
      (<= (- 9223372036854775808) 9223372036854775807))
    (in_range5 temp___expr_32)))

;; only_space_ghost
(declare-fun only_space_ghost (us_t
  Int
  Int) Bool)

;; only_space_ghost__function_guard
(declare-fun only_space_ghost__function_guard (Bool
  us_t
  Int
  Int) Bool)

;; slide_if_necessary
(declare-fun slide_if_necessary (us_t) us_t)

;; slide_if_necessary__function_guard
(declare-fun slide_if_necessary__function_guard (us_t
  us_t) Bool)

;; is_integer_ghost
(declare-fun is_integer_ghost (us_t) Bool)

;; is_integer_ghost__function_guard
(declare-fun is_integer_ghost__function_guard (Bool
  us_t) Bool)

;; is_value_integer_ghost
(declare-fun is_value_integer_ghost (us_t
  Int) Bool)

;; is_value_integer_ghost__function_guard
(declare-fun is_value_integer_ghost__function_guard (Bool
  us_t
  Int) Bool)

;; bool_eq
(declare-fun bool_eq9 (Int
  Int) Bool)

;; bool_ne
(declare-fun bool_ne1 (Int
  Int) Bool)

;; bool_lt
(declare-fun bool_lt1 (Int
  Int) Bool)

;; bool_le
(declare-fun bool_le1 (Int
  Int) Bool)

;; bool_gt
(declare-fun bool_gt1 (Int
  Int) Bool)

;; bool_ge
(declare-fun bool_ge1 (Int
  Int) Bool)

;; bool_eq_axiom
(assert
  (forall ((x Int)) (forall ((y Int)) (= (= (bool_eq9 x y) true) (= x y)))))

;; bool_ne_axiom
(assert
  (forall ((x Int))
    (forall ((y Int)) (= (= (bool_ne1 x y) true) (not (= x y))))))

;; bool_lt_axiom
(assert
  (forall ((x Int)) (forall ((y Int)) (= (= (bool_lt1 x y) true) (< x y)))))

;; bool_int__le_axiom
(assert
  (forall ((x Int)) (forall ((y Int)) (= (= (bool_le1 x y) true) (<= x y)))))

;; bool_gt_axiom
(assert
  (forall ((x Int)) (forall ((y Int)) (= (= (bool_gt1 x y) true) (< y x)))))

;; bool_ge_axiom
(assert
  (forall ((x Int)) (forall ((y Int)) (= (= (bool_ge1 x y) true) (<= y x)))))

;; length
(define-fun length1 ((x Int) (y Int)) Int
  (ite (<= x y) (+ (- y x) 1) 0))

;; dynamic_invariant
(define-fun dynamic_invariant4 ((temp___expr_110 us_t) (temp___is_init_106 Bool) (temp___skip_constant_107 Bool) (temp___do_toplevel_108 Bool) (temp___do_typ_inv_109 Bool)) Bool
  (=>
    (not (= temp___skip_constant_107 true))
    (dynamic_property
      1
      2147483647
      (first temp___expr_110)
      (last temp___expr_110))))

(declare-sort long_long_unsigned 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 64))

;; bool_eq
(define-fun bool_eq10 ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE6 ((_ BitVec 64)) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) (_ BitVec 64))

;; user_eq
(declare-fun user_eq6 (long_long_unsigned
  long_long_unsigned) Bool)

(declare-const dummy6 long_long_unsigned)

(declare-datatypes ((long_long_unsigned__ref 0))
  (((long_long_unsigned__refqtmk
    (long_long_unsigned__content long_long_unsigned)))))

;; long_long_unsigned__ref_long_long_unsigned__content__3__projection
(define-fun long_long_unsigned__ref_long_long_unsigned__content__3__projection 
  ((a long_long_unsigned__ref)) long_long_unsigned
  (long_long_unsigned__content a))

;; to_rep
(declare-fun to_rep2 (long_long_unsigned) (_ BitVec 64))

;; of_rep
(declare-fun of_rep2 ((_ BitVec 64)) long_long_unsigned)

;; inversion_axiom
(assert
  (forall ((x long_long_unsigned))
    (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
(assert true)

;; coerce_axiom
(assert
  (forall ((x (_ BitVec 64)))
    (! (= (to_rep2 (of_rep2 x)) x) :pattern ((to_rep2 (of_rep2 x))) )))

;; to_int
(define-fun to_int3 ((x long_long_unsigned)) Int
  (bv2nat64 (to_rep2 x)))

;; range_int_axiom
(assert
  (forall ((x long_long_unsigned))
    (! (uint_in_range (to_int3 x)) :pattern ((to_int3 x)) )))

(declare-datatypes ((us_split_discrs 0))
  (((us_split_discrsqtmk
    (rec__ada___system__val_llu__impl__uns_option__overflow Bool)))))

;; __split_discrs_rec__ada___system__val_llu__impl__uns_option__overflow__projection
(define-fun us_split_discrs_rec__ada___system__val_llu__impl__uns_option__overflow__projection 
  ((a us_split_discrs)) Bool
  (rec__ada___system__val_llu__impl__uns_option__overflow a))

(declare-datatypes ((us_split_discrs__ref 0))
  (((us_split_discrs__refqtmk (us_split_discrs__content us_split_discrs)))))

;; __split_discrs__ref___split_discrs__content__projection
(define-fun us_split_discrs__ref___split_discrs__content__projection 
  ((a us_split_discrs__ref)) us_split_discrs
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields 0))
  (((us_split_fieldsqtmk
    (rec__ada___system__val_llu__impl__uns_option__value long_long_unsigned)))))

;; __split_fields_rec__ada___system__val_llu__impl__uns_option__value__projection
(define-fun us_split_fields_rec__ada___system__val_llu__impl__uns_option__value__projection 
  ((a us_split_fields)) long_long_unsigned
  (rec__ada___system__val_llu__impl__uns_option__value a))

(declare-datatypes ((us_split_fields__ref 0))
  (((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))

;; __split_fields__ref___split_fields__content__projection
(define-fun us_split_fields__ref___split_fields__content__projection 
  ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
  (((us_repqtmk
    (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))

;; __rep___split_discrs__projection
(define-fun us_rep___split_discrs__projection ((a us_rep)) us_split_discrs
  (us_split_discrs1 a))

;; __rep___split_fields__projection
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields
  (us_split_fields1 a))

;; ada___system__val_llu__impl__uns_option__value__pred
(define-fun ada___system__val_llu__impl__uns_option__value__pred ((a us_rep)) Bool
  (= (to_int2
       (rec__ada___system__val_llu__impl__uns_option__overflow
         (us_split_discrs1 a))) 0))

;; bool_eq
(define-fun bool_eq11 ((a us_rep) (b us_rep)) Bool
  (ite (and
         (= (to_int2
              (rec__ada___system__val_llu__impl__uns_option__overflow
                (us_split_discrs1 a))) (to_int2
                                         (rec__ada___system__val_llu__impl__uns_option__overflow
                                           (us_split_discrs1 b))))
         (=>
           (ada___system__val_llu__impl__uns_option__value__pred a)
           (= (to_rep2
                (rec__ada___system__val_llu__impl__uns_option__value
                  (us_split_fields1 a))) (to_rep2
                                           (rec__ada___system__val_llu__impl__uns_option__value
                                             (us_split_fields1 b))))))
    true
    false))

;; in_range
(define-fun in_range6 ((rec__ada___system__val_llu__impl__uns_option__overflow1 Bool) (a us_split_discrs)) Bool
  (= rec__ada___system__val_llu__impl__uns_option__overflow1 (rec__ada___system__val_llu__impl__uns_option__overflow
                                                               a)))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
(assert (<= 0 value__size1))

;; object__size_axiom
(assert (<= 0 object__size1))

;; alignment_axiom
(assert (<= 0 alignment1))

(declare-const ada___system__val_llu__impl__uns_option__overflow__first__bit Int)

(declare-const ada___system__val_llu__impl__uns_option__overflow__last__bit Int)

(declare-const ada___system__val_llu__impl__uns_option__overflow__position Int)

;; ada___system__val_llu__impl__uns_option__overflow__first__bit_axiom
(assert (<= 0 ada___system__val_llu__impl__uns_option__overflow__first__bit))

;; ada___system__val_llu__impl__uns_option__overflow__last__bit_axiom
(assert
  (< ada___system__val_llu__impl__uns_option__overflow__first__bit ada___system__val_llu__impl__uns_option__overflow__last__bit))

;; ada___system__val_llu__impl__uns_option__overflow__position_axiom
(assert (<= 0 ada___system__val_llu__impl__uns_option__overflow__position))

(declare-const ada___system__val_llu__impl__uns_option__value__first__bit Int)

(declare-const ada___system__val_llu__impl__uns_option__value__last__bit Int)

(declare-const ada___system__val_llu__impl__uns_option__value__position Int)

;; ada___system__val_llu__impl__uns_option__value__first__bit_axiom
(assert (<= 0 ada___system__val_llu__impl__uns_option__value__first__bit))

;; ada___system__val_llu__impl__uns_option__value__last__bit_axiom
(assert
  (< ada___system__val_llu__impl__uns_option__value__first__bit ada___system__val_llu__impl__uns_option__value__last__bit))

;; ada___system__val_llu__impl__uns_option__value__position_axiom
(assert (<= 0 ada___system__val_llu__impl__uns_option__value__position))

;; user_eq
(declare-fun user_eq7 (us_rep
  us_rep) Bool)

(declare-const dummy7 us_rep)

(declare-datatypes ((uns_option__ref 0))
  (((uns_option__refqtmk (uns_option__content us_rep)))))

;; uns_option__ref_uns_option__content__projection
(define-fun uns_option__ref_uns_option__content__projection ((a uns_option__ref)) us_rep
  (uns_option__content a))

;; scan_based_number_ghost
(declare-fun scan_based_number_ghost (us_t
  Int
  Int
  (_ BitVec 64)
  (_ BitVec 64)) us_rep)

;; scan_based_number_ghost__function_guard
(declare-fun scan_based_number_ghost__function_guard (us_rep
  us_t
  Int
  Int
  (_ BitVec 64)
  (_ BitVec 64)) Bool)

;; abs_uns_of_int
(declare-fun abs_uns_of_int (Int) (_ BitVec 64))

;; abs_uns_of_int__function_guard
(declare-fun abs_uns_of_int__function_guard ((_ BitVec 64)
  Int) Bool)

;; only_decimal_ghost
(declare-fun only_decimal_ghost (us_t
  Int
  Int) Bool)

;; only_decimal_ghost__function_guard
(declare-fun only_decimal_ghost__function_guard (Bool
  us_t
  Int
  Int) Bool)

;; wrap_option
(declare-fun wrap_option ((_ BitVec 64)) us_rep)

;; wrap_option__function_guard
(declare-fun wrap_option__function_guard (us_rep
  (_ BitVec 64)) Bool)

(declare-datatypes ((t9s__ref 0))
  (((t9s__refqtmk (t9s__content us_t)))))

;; t9s__ref_t9s__content__projection
(define-fun t9s__ref_t9s__content__projection ((a t9s__ref)) us_t
  (t9s__content a))

(declare-datatypes ((t11s__ref 0))
  (((t11s__refqtmk (t11s__content us_t)))))

;; t11s__ref_t11s__content__projection
(define-fun t11s__ref_t11s__content__projection ((a t11s__ref)) us_t
  (t11s__content a))

(declare-datatypes ((s29s__ref 0))
  (((s29s__refqtmk (s29s__content us_t)))))

;; s29s__ref_s29s__content__projection
(define-fun s29s__ref_s29s__content__projection ((a s29s__ref)) us_t
  (s29s__content a))

(declare-datatypes ((t33s__ref 0))
  (((t33s__refqtmk (t33s__content us_t)))))

;; t33s__ref_t33s__content__projection
(define-fun t33s__ref_t33s__content__projection ((a t33s__ref)) us_t
  (t33s__content a))

(declare-datatypes ((t35s__ref 0))
  (((t35s__refqtmk (t35s__content us_t)))))

;; t35s__ref_t35s__content__projection
(define-fun t35s__ref_t35s__content__projection ((a t35s__ref)) us_t
  (t35s__content a))

(declare-const p_prev Int)

(declare-const offset Int)

(declare-sort int__ 0)

;; int__'int
(declare-fun int__qtint (int__) Int)

;; int__'axiom
(assert
  (forall ((i int__))
    (and
      (<= (- 9223372036854775808) (int__qtint i))
      (<= (int__qtint i) 9223372036854775807))))

;; in_range
(define-fun in_range7 ((x Int)) Bool
  (and (<= (- 9223372036854775808) x) (<= x 9223372036854775807)))

;; bool_eq
(define-fun bool_eq12 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

;; user_eq
(declare-fun user_eq8 (int__
  int__) Bool)

(declare-const dummy8 int__)

(declare-datatypes ((int____ref 0))
  (((int____refqtmk (int____content int__)))))

;; int____ref_int____content__projection
(define-fun int____ref_int____content__projection ((a int____ref)) int__
  (int____content a))

;; dynamic_invariant
(define-fun dynamic_invariant5 ((temp___expr_271 Int) (temp___is_init_267 Bool) (temp___skip_constant_268 Bool) (temp___do_toplevel_269 Bool) (temp___do_typ_inv_270 Bool)) Bool
  (=>
    (or
      (= temp___is_init_267 true)
      (<= (- 9223372036854775808) 9223372036854775807))
    (in_range7 temp___expr_271)))

(declare-datatypes ((t6s__ref 0))
  (((t6s__refqtmk (t6s__content us_t)))))

;; t6s__ref_t6s__content__projection
(define-fun t6s__ref_t6s__content__projection ((a t6s__ref)) us_t
  (t6s__content a))

;; dynamic_invariant
(define-fun dynamic_invariant6 ((temp___expr_88 Int) (temp___is_init_84 Bool) (temp___skip_constant_85 Bool) (temp___do_toplevel_86 Bool) (temp___do_typ_inv_87 Bool)) Bool
  (=> (or (= temp___is_init_84 true) (<= 0 255)) (in_range4 temp___expr_88)))

;; only_space_ghost__post_axiom
(assert true)

;; only_space_ghost__def_axiom
(assert
  (forall ((s us_t))
    (forall ((from Int) (to__ Int))
      (! (=
           (= (only_space_ghost s from to__) true)
           (forall ((j Int))
             (=>
               (and (<= from j) (<= j to__))
               (= (to_rep (select (to_array s) j)) 32)))) :pattern ((only_space_ghost
                                                                    s
                                                                    from
                                                                    to__)) ))))

;; first_non_space_ghost
(declare-fun first_non_space_ghost (us_t
  Int
  Int) Int)

;; first_non_space_ghost__function_guard
(declare-fun first_non_space_ghost__function_guard (Int
  us_t
  Int
  Int) Bool)

;; first_non_space_ghost__post_axiom
(assert
  (forall ((s us_t))
    (forall ((from Int) (to__ Int))
      (! (and
           (forall ((s1 us_t) (from1 Int) (to__1 Int))
             (only_space_ghost__function_guard
               (only_space_ghost s1 from1 to__1)
               s1
               from1
               to__1))
           (=>
             (and
               (and
                 (and
                   (dynamic_invariant4 s true true true true)
                   (dynamic_invariant from true true true true))
                 (dynamic_invariant to__ true true true true))
               (and
                 (and
                   (and (<= (first s) from) (<= from (last s)))
                   (and (<= (first s) to__) (<= to__ (last s))))
                 (not (= (only_space_ghost s from to__) true))))
             (let ((result (first_non_space_ghost s from to__)))
               (and
                 (forall ((s1 us_t) (from1 Int) (result1 Int))
                   (only_space_ghost__function_guard
                     (only_space_ghost s1 from1 (- result1 1))
                     s1
                     from1
                     (- result1 1)))
                 (=>
                   (first_non_space_ghost__function_guard result s from to__)
                   (and
                     (and
                       (and
                         (and (<= from result) (<= result to__))
                         (not (= (to_rep (select (to_array s) result)) 32)))
                       (= (only_space_ghost s from (- result 1)) true))
                     (dynamic_invariant2 result true false true true))))))) :pattern (
      (first_non_space_ghost
        s
        from
        to__)) ))))

;; only_number_ghost
(declare-fun only_number_ghost (us_t
  Int
  Int) Bool)

;; only_number_ghost__function_guard
(declare-fun only_number_ghost__function_guard (Bool
  us_t
  Int
  Int) Bool)

;; only_number_ghost__post_axiom
(assert true)

;; only_number_ghost__def_axiom
(assert
  (forall ((str us_t))
    (forall ((from Int) (to__ Int))
      (! (=
           (= (only_number_ghost str from to__) true)
           (forall ((j Int))
             (=>
               (and (<= from j) (<= j to__))
               (let ((temp___334 (to_rep (select (to_array str) j))))
                 (or
                   (and (<= 48 temp___334) (<= temp___334 57))
                   (= temp___334 95)))))) :pattern ((only_number_ghost
                                                      str
                                                      from
                                                      to__)) ))))

;; last_number_ghost
(declare-fun last_number_ghost (us_t) Int)

;; last_number_ghost__function_guard
(declare-fun last_number_ghost__function_guard (Int
  us_t) Bool)

;; temp___String_Literal_336
(declare-fun temp___String_Literal_336 (tuple0) (Array Int character))

;; temp___String_Literal_336__def_axiom
(assert true)

;; last_number_ghost__post_axiom
(assert
  (forall ((str us_t))
    (! (=>
         (and
           (dynamic_invariant4 str true true true true)
           (and
             (not
               (= (let ((temp___345 (temp___String_Literal_336 Tuple0)))
                    (bool_eq6
                      (to_array str)
                      (first str)
                      (last str)
                      temp___345
                      1
                      0)) true))
             (let ((temp___346 (to_rep (select (to_array str) (first str)))))
               (and (<= 48 temp___346) (<= temp___346 57)))))
         (let ((result (last_number_ghost str)))
           (=>
             (last_number_ghost__function_guard result str)
             (and
               (and
                 (and
                   (and (<= (first str) result) (<= result (last str)))
                   (=>
                     (< result (last str))
                     (= (not (let ((temp___348 (to_rep
                                                 (select (to_array str) (+ result 1)))))
                               (or (let ((temp___349 temp___348))
                                     (and (ite (<= 48 temp___349) true false) 
                                     (ite (<= temp___349 57)
                                       true
                                       false))) (ite (= temp___348 95)
                                                  true
                                                  false)))) true)))
                 (= (only_number_ghost str (first str) result) true))
               (dynamic_invariant2 result true false true true))))) :pattern (
    (last_number_ghost
      str)) )))

;; is_natural_format_ghost
(declare-fun is_natural_format_ghost (us_t) Bool)

;; is_natural_format_ghost__function_guard
(declare-fun is_natural_format_ghost__function_guard (Bool
  us_t) Bool)

;; temp___String_Literal_351
(declare-fun temp___String_Literal_351 (tuple0) (Array Int character))

;; temp___String_Literal_351__def_axiom
(assert true)

;; is_natural_format_ghost__post_axiom
(assert true)

;; is_natural_format_ghost__def_axiom
(assert
  (forall ((str us_t))
    (! (and
         (forall ((str1 us_t))
           (last_number_ghost__function_guard (last_number_ghost str1) str1))
         (=
           (= (is_natural_format_ghost str) true)
           (and
             (and
               (not
                 (= (let ((temp___360 (temp___String_Literal_351 Tuple0)))
                      (bool_eq6
                        (to_array str)
                        (first str)
                        (last str)
                        temp___360
                        1
                        0)) true))
               (let ((temp___361 (to_rep (select (to_array str) (first str)))))
                 (and (<= 48 temp___361) (<= temp___361 57))))
             (let ((l (last_number_ghost str)))
               (and
                 (let ((temp___362 (to_rep (select (to_array str) l))))
                   (and (<= 48 temp___362) (<= temp___362 57)))
                 (forall ((j Int))
                   (=>
                     (and (<= (first str) j) (<= j l))
                     (=>
                       (= (to_rep (select (to_array str) j)) 95)
                       (not (= (to_rep (select (to_array str) (+ j 1))) 95)))))))))) :pattern (
    (is_natural_format_ghost
      str)) )))

;; starts_as_exponent_format_ghost
(declare-fun starts_as_exponent_format_ghost (us_t
  Bool) Bool)

;; starts_as_exponent_format_ghost__function_guard
(declare-fun starts_as_exponent_format_ghost__function_guard (Bool
  us_t
  Bool) Bool)

;; starts_as_exponent_format_ghost__post_axiom
(assert true)

;; starts_as_exponent_format_ghost__def_axiom
(assert
  (forall ((str us_t))
    (forall ((real__ Bool))
      (! (=
           (= (starts_as_exponent_format_ghost str real__) true)
           (and
             (and
               (< 1 (length str))
               (let ((temp___424 (to_rep (select (to_array str) (first str)))))
                 (or (= temp___424 69) (= temp___424 101))))
             (let ((minus_sign (bool_eq9
                                 (to_rep
                                   (select (to_array str) (+ (first str) 1)))
                                 45)))
               (let ((sign (or (bool_eq9
                                 (to_rep
                                   (select (to_array str) (+ (first str) 1)))
                                 43) minus_sign)))
                 (and
                   (and
                     (=> (= minus_sign true) (= real__ true))
                     (=> (= sign true) (< 2 (length str))))
                   (let ((temp___425 (to_rep
                                       (select (to_array str) (ite (= sign true)
                                                                (+ (first
                                                                    str) 2)
                                                                (+ (first
                                                                    str) 1))))))
                     (and (<= 48 temp___425) (<= temp___425 57)))))))) :pattern (
      (starts_as_exponent_format_ghost
        str
        real__)) ))))

;; is_opt_exponent_format_ghost
(declare-fun is_opt_exponent_format_ghost (us_t
  Bool) Bool)

;; is_opt_exponent_format_ghost__function_guard
(declare-fun is_opt_exponent_format_ghost__function_guard (Bool
  us_t
  Bool) Bool)

(declare-datatypes ((t89s__ref 0))
  (((t89s__refqtmk (t89s__content us_t)))))

;; t89s__ref_t89s__content__projection
(define-fun t89s__ref_t89s__content__projection ((a t89s__ref)) us_t
  (t89s__content a))

;; is_opt_exponent_format_ghost__post_axiom
(assert true)

;; is_opt_exponent_format_ghost__def_axiom
(assert
  (forall ((str us_t))
    (forall ((real__ Bool))
      (! (=
           (= (is_opt_exponent_format_ghost str real__) true)
           (or
             (not (= (starts_as_exponent_format_ghost str real__) true))
             (= (is_natural_format_ghost
                  (let ((temp___434 (let ((temp___433 (last str)))
                                      (of_array
                                        (to_array str)
                                        (ite (let ((temp___437 (to_rep
                                                                 (select 
                                                                 (to_array
                                                                   str) (+ 
                                                                 (first
                                                                   str) 1)))))
                                               (or
                                                 (= temp___437 43)
                                                 (= temp___437 45)))
                                          (+ (first str) 2)
                                          (+ (first str) 1))
                                        temp___433))))
                    (let ((temp___435 (to_array temp___434)))
                      (of_array
                        temp___435
                        (first temp___434)
                        (last temp___434))))) true))) :pattern ((is_opt_exponent_format_ghost
                                                                  str
                                                                  real__)) ))))

;; scan_natural_ghost
(declare-fun scan_natural_ghost (us_t
  Int
  Int) Int)

;; scan_natural_ghost__function_guard
(declare-fun scan_natural_ghost__function_guard (Int
  us_t
  Int
  Int) Bool)

;; temp___String_Literal_490
(declare-fun temp___String_Literal_490 (tuple0) (Array Int character))

;; temp___String_Literal_490__def_axiom
(assert true)

;; scan_natural_ghost__def_axiom
(assert
  (forall ((str us_t))
    (forall ((p Int) (acc Int))
      (! (=>
           (and
             (and
               (and
                 (dynamic_invariant4 str true true true true)
                 (dynamic_invariant1 p true true true true))
               (dynamic_invariant1 acc true true true true))
             (scan_natural_ghost__function_guard
               (scan_natural_ghost str p acc)
               str
               p
               acc))
           (and
             (forall ((str1 us_t) (p1 Int) (acc1 Int))
               (scan_natural_ghost__function_guard
                 (scan_natural_ghost str1 (+ p1 1) acc1)
                 str1
                 (+ p1 1)
                 acc1))
             (and
               (forall ((str1 us_t) (p1 Int) (shift_acc Int))
                 (scan_natural_ghost__function_guard
                   (scan_natural_ghost str1 (+ p1 1) shift_acc)
                   str1
                   (+ p1 1)
                   shift_acc))
               (= (scan_natural_ghost str p acc) (ite (or
                                                        (or
                                                          (< (last str) p)
                                                          (= (not (let ((temp___509 
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    str) p))))
                                                                    (or 
                                                                    (let ((temp___510 temp___509))
                                                                    (and 
                                                                    (ite (<= 48 temp___510)
                                                                    true
                                                                    false) 
                                                                    (ite (<= temp___510 57)
                                                                    true
                                                                    false))) 
                                                                    (ite (= temp___509 95)
                                                                    true
                                                                    false)))) true))
                                                        (<= 214748364 acc))
                                                   acc
                                                   (ite (= (to_rep
                                                             (select 
                                                             (to_array
                                                               str) p)) 95)
                                                     (scan_natural_ghost
                                                       str
                                                       (+ p 1)
                                                       acc)
                                                     (let ((shift_acc (+ (* acc 10) (- 
                                                       (to_rep
                                                         (select (to_array
                                                                   str) p)) 48))))
                                                       (scan_natural_ghost
                                                         str
                                                         (+ p 1)
                                                         shift_acc)))))))) :pattern (
      (scan_natural_ghost
        str
        p
        acc)) ))))

;; scan_natural_ghost__post_axiom
(assert
  (forall ((str us_t))
    (forall ((p Int) (acc Int))
      (! (and
           (forall ((str1 us_t))
             (last_number_ghost__function_guard
               (last_number_ghost str1)
               str1))
           (=>
             (and
               (and
                 (and
                   (dynamic_invariant4 str true true true true)
                   (dynamic_invariant1 p true true true true))
                 (dynamic_invariant1 acc true true true true))
               (and
                 (and
                   (and
                     (not
                       (= (let ((temp___502 (temp___String_Literal_490
                                              Tuple0)))
                            (bool_eq6
                              (to_array str)
                              (first str)
                              (last str)
                              temp___502
                              1
                              0)) true))
                     (let ((temp___503 (to_rep
                                         (select (to_array str) (first str)))))
                       (and (<= 48 temp___503) (<= temp___503 57))))
                   (< (last str) 2147483647))
                 (and
                   (<= (first str) p)
                   (<= p (+ (last_number_ghost str) 1)))))
             (let ((result (scan_natural_ghost str p acc)))
               (=>
                 (scan_natural_ghost__function_guard result str p acc)
                 (dynamic_invariant1 result true false true true))))) :pattern (
      (scan_natural_ghost
        str
        p
        acc)) ))))

;; scan_exponent_ghost
(declare-fun scan_exponent_ghost (us_t
  Bool) Int)

;; scan_exponent_ghost__function_guard
(declare-fun scan_exponent_ghost__function_guard (Int
  us_t
  Bool) Bool)

(declare-datatypes ((t94s__ref 0))
  (((t94s__refqtmk (t94s__content us_t)))))

;; t94s__ref_t94s__content__projection
(define-fun t94s__ref_t94s__content__projection ((a t94s__ref)) us_t
  (t94s__content a))

;; scan_exponent_ghost__post_axiom
(assert
  (forall ((str us_t))
    (forall ((real__ Bool))
      (! (=>
           (and
             (dynamic_invariant4 str true true true true)
             (and
               (< (last str) 2147483647)
               (= (starts_as_exponent_format_ghost str real__) true)))
           (let ((result (scan_exponent_ghost str real__)))
             (=>
               (scan_exponent_ghost__function_guard result str real__)
               (and
                 (=> (not (= real__ true)) (<= 0 result))
                 (dynamic_invariant result true false true true))))) :pattern (
      (scan_exponent_ghost
        str
        real__)) ))))

;; scan_exponent_ghost__def_axiom
(assert
  (forall ((str us_t))
    (forall ((real__ Bool))
      (! (=>
           (dynamic_invariant4 str true true true true)
           (and
             (forall ((str1 us_t) (start Int))
               (scan_natural_ghost__function_guard
                 (scan_natural_ghost
                   (let ((temp___518 (let ((temp___517 (last str1)))
                                       (of_array
                                         (to_array str1)
                                         start
                                         temp___517))))
                     (let ((temp___519 (to_array temp___518)))
                       (of_array
                         temp___519
                         (first temp___518)
                         (last temp___518))))
                   start
                   0)
                 (let ((temp___518 (let ((temp___517 (last str1)))
                                     (of_array
                                       (to_array str1)
                                       start
                                       temp___517))))
                   (let ((temp___519 (to_array temp___518)))
                     (of_array
                       temp___519
                       (first temp___518)
                       (last temp___518))))
                 start
                 0))
             (= (scan_exponent_ghost str real__) (let ((plus_sign (bool_eq9
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    str) (+ 
                                                                    (first
                                                                    str) 1)))
                                                                    43)))
                                                   (let ((minus_sign 
                                                     (bool_eq9
                                                       (to_rep
                                                         (select (to_array
                                                                   str) (+ 
                                                         (first
                                                           str) 1)))
                                                       45)))
                                                     (let ((sign (or plus_sign minus_sign)))
                                                       (let ((start (ite (= sign true)
                                                                    (+ 
                                                                    (first
                                                                    str) 2)
                                                                    (+ 
                                                                    (first
                                                                    str) 1))))
                                                         (let ((value 
                                                           (scan_natural_ghost
                                                             (let ((temp___518 
                                                               (let ((temp___517 
                                                                 (last
                                                                   str)))
                                                                 (of_array
                                                                   (to_array
                                                                    str)
                                                                   start
                                                                   temp___517))))
                                                               (let ((temp___519 
                                                                 (to_array
                                                                   temp___518)))
                                                                 (of_array
                                                                   temp___519
                                                                   (first
                                                                    temp___518)
                                                                   (last
                                                                    temp___518))))
                                                             start
                                                             0)))
                                                           (ite (= minus_sign true)
                                                             (- value)
                                                             value))))))))) :pattern (
      (scan_exponent_ghost
        str
        real__)) ))))

(declare-sort long_long_unsigned1 0)

(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 64))

;; bool_eq
(define-fun bool_eq13 ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE8 ((_ BitVec 64)) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) (_ BitVec 64))

;; user_eq
(declare-fun user_eq9 (long_long_unsigned1
  long_long_unsigned1) Bool)

(declare-const dummy9 long_long_unsigned1)

(declare-datatypes ((long_long_unsigned__ref1 0))
  (((long_long_unsigned__refqtmk1
    (long_long_unsigned__content1 long_long_unsigned1)))))

;; long_long_unsigned__ref_long_long_unsigned__content__5__projection
(define-fun long_long_unsigned__ref_long_long_unsigned__content__5__projection 
  ((a long_long_unsigned__ref1)) long_long_unsigned1
  (long_long_unsigned__content1 a))

;; dynamic_invariant
(define-fun dynamic_invariant7 ((temp___expr_623 (_ BitVec 64)) (temp___is_init_619 Bool) (temp___skip_constant_620 Bool) (temp___do_toplevel_621 Bool) (temp___do_typ_inv_622 Bool)) Bool
  true)

;; dynamic_invariant
(define-fun dynamic_invariant8 ((temp___expr_229 (_ BitVec 64)) (temp___is_init_225 Bool) (temp___skip_constant_226 Bool) (temp___do_toplevel_227 Bool) (temp___do_typ_inv_228 Bool)) Bool
  true)

(declare-sort long_long_unsigned2 0)

(declare-const attr__ATTRIBUTE_MODULUS2 (_ BitVec 64))

;; bool_eq
(define-fun bool_eq14 ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE9 ((_ BitVec 64)) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) (_ BitVec 64))

;; user_eq
(declare-fun user_eq10 (long_long_unsigned2
  long_long_unsigned2) Bool)

(declare-const dummy10 long_long_unsigned2)

(declare-datatypes ((long_long_unsigned__ref2 0))
  (((long_long_unsigned__refqtmk2
    (long_long_unsigned__content2 long_long_unsigned2)))))

;; long_long_unsigned__ref_long_long_unsigned__content__4__projection
(define-fun long_long_unsigned__ref_long_long_unsigned__content__4__projection 
  ((a long_long_unsigned__ref2)) long_long_unsigned2
  (long_long_unsigned__content2 a))

;; dynamic_invariant
(define-fun dynamic_invariant9 ((temp___expr_245 (_ BitVec 64)) (temp___is_init_241 Bool) (temp___skip_constant_242 Bool) (temp___do_toplevel_243 Bool) (temp___do_typ_inv_244 Bool)) Bool
  true)

;; bool_eq
(declare-fun bool_eq15 (Int
  Int) Bool)

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
(assert (<= 0 value__size2))

;; object__size_axiom
(assert (<= 0 object__size2))

;; alignment_axiom
(assert (<= 0 alignment2))

;; user_eq
(declare-fun user_eq11 (Int
  Int) Bool)

(declare-const dummy11 Int)

(declare-datatypes ((big_integer__ref 0))
  (((big_integer__refqtmk (big_integer__content Int)))))

;; big_integer__ref_big_integer__content__projection
(define-fun big_integer__ref_big_integer__content__projection ((a big_integer__ref)) Int
  (big_integer__content a))

(declare-datatypes ((valid_big_integer__ref 0))
  (((valid_big_integer__refqtmk (valid_big_integer__content Int)))))

;; valid_big_integer__ref_valid_big_integer__content__projection
(define-fun valid_big_integer__ref_valid_big_integer__content__projection 
  ((a valid_big_integer__ref)) Int
  (valid_big_integer__content a))

;; dynamic_invariant
(define-fun dynamic_invariant10 ((temp___expr_261 Int) (temp___is_init_257 Bool) (temp___skip_constant_258 Bool) (temp___do_toplevel_259 Bool) (temp___do_typ_inv_260 Bool)) Bool
  true)

;; default_initial_assumption
(define-fun default_initial_assumption ((temp___expr_238 us_rep) (temp___skip_top_level_239 Bool)) Bool
  (and
    (= (rec__ada___system__val_llu__impl__uns_option__overflow
         (us_split_discrs1 temp___expr_238)) (of_int1 0))
    (=>
      (ada___system__val_llu__impl__uns_option__value__pred temp___expr_238)
      (= (to_rep2
           (rec__ada___system__val_llu__impl__uns_option__value
             (us_split_fields1 temp___expr_238))) #x0000000000000000))))

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; value__size_axiom
(assert (<= 0 value__size3))

;; object__size_axiom
(assert (<= 0 object__size3))

;; alignment_axiom
(assert (<= 0 alignment3))

(declare-const ada___system__val_llu__impl__uns_option__overflow__first__bit1 Int)

(declare-const ada___system__val_llu__impl__uns_option__overflow__last__bit1 Int)

(declare-const ada___system__val_llu__impl__uns_option__overflow__position1 Int)

;; ada___system__val_llu__impl__uns_option__overflow__first__bit_axiom
(assert
  (<= 0 ada___system__val_llu__impl__uns_option__overflow__first__bit1))

;; ada___system__val_llu__impl__uns_option__overflow__last__bit_axiom
(assert
  (< ada___system__val_llu__impl__uns_option__overflow__first__bit1 ada___system__val_llu__impl__uns_option__overflow__last__bit1))

;; ada___system__val_llu__impl__uns_option__overflow__position_axiom
(assert (<= 0 ada___system__val_llu__impl__uns_option__overflow__position1))

(declare-const ada___system__val_llu__impl__uns_option__value__first__bit1 Int)

(declare-const ada___system__val_llu__impl__uns_option__value__last__bit1 Int)

(declare-const ada___system__val_llu__impl__uns_option__value__position1 Int)

;; ada___system__val_llu__impl__uns_option__value__first__bit_axiom
(assert (<= 0 ada___system__val_llu__impl__uns_option__value__first__bit1))

;; ada___system__val_llu__impl__uns_option__value__last__bit_axiom
(assert
  (< ada___system__val_llu__impl__uns_option__value__first__bit1 ada___system__val_llu__impl__uns_option__value__last__bit1))

;; ada___system__val_llu__impl__uns_option__value__position_axiom
(assert (<= 0 ada___system__val_llu__impl__uns_option__value__position1))

;; user_eq
(declare-fun user_eq12 (us_rep
  us_rep) Bool)

(declare-const dummy12 us_rep)

(declare-datatypes ((t134s__ref 0))
  (((t134s__refqtmk (t134s__content us_rep)))))

;; t134s__ref_t134s__content__projection
(define-fun t134s__ref_t134s__content__projection ((a t134s__ref)) us_rep
  (t134s__content a))

;; wrap_option__post_axiom
(assert true)

;; wrap_option__def_axiom
(assert
  (forall ((value (_ BitVec 64)))
    (! (=>
         (dynamic_invariant8 value true true true true)
         (= (wrap_option value) (let ((temp___overflow_757 (of_int1 0)))
                                  (us_repqtmk
                                    (us_split_discrsqtmk temp___overflow_757)
                                    (us_split_fieldsqtmk (of_rep2 value)))))) :pattern (
    (wrap_option
      value)) )))

;; only_decimal_ghost__post_axiom
(assert true)

;; only_decimal_ghost__def_axiom
(assert
  (forall ((str us_t))
    (forall ((from Int) (to__ Int))
      (! (=
           (= (only_decimal_ghost str from to__) true)
           (forall ((j Int))
             (=>
               (and (<= from j) (<= j to__))
               (let ((temp___753 (to_rep (select (to_array str) j))))
                 (and (<= 48 temp___753) (<= temp___753 57)))))) :pattern (
      (only_decimal_ghost
        str
        from
        to__)) ))))

;; only_hexa_ghost
(declare-fun only_hexa_ghost (us_t
  Int
  Int) Bool)

;; only_hexa_ghost__function_guard
(declare-fun only_hexa_ghost__function_guard (Bool
  us_t
  Int
  Int) Bool)

;; only_hexa_ghost__post_axiom
(assert true)

;; only_hexa_ghost__def_axiom
(assert
  (forall ((str us_t))
    (forall ((from Int) (to__ Int))
      (! (=
           (= (only_hexa_ghost str from to__) true)
           (forall ((j Int))
             (=>
               (and (<= from j) (<= j to__))
               (let ((temp___372 (to_rep (select (to_array str) j))))
                 (or
                   (and (<= 48 temp___372) (<= temp___372 57))
                   (or
                     (and (<= 97 temp___372) (<= temp___372 102))
                     (or
                       (and (<= 65 temp___372) (<= temp___372 70))
                       (= temp___372 95)))))))) :pattern ((only_hexa_ghost
                                                            str
                                                            from
                                                            to__)) ))))

;; last_hexa_ghost
(declare-fun last_hexa_ghost (us_t) Int)

;; last_hexa_ghost__function_guard
(declare-fun last_hexa_ghost__function_guard (Int
  us_t) Bool)

;; temp___String_Literal_376
(declare-fun temp___String_Literal_376 (tuple0) (Array Int character))

;; temp___String_Literal_376__def_axiom
(assert true)

;; last_hexa_ghost__post_axiom
(assert
  (forall ((str us_t))
    (! (=>
         (and
           (dynamic_invariant4 str true true true true)
           (and
             (not
               (= (let ((temp___390 (temp___String_Literal_376 Tuple0)))
                    (bool_eq6
                      (to_array str)
                      (first str)
                      (last str)
                      temp___390
                      1
                      0)) true))
             (let ((temp___391 (to_rep (select (to_array str) (first str)))))
               (or
                 (and (<= 48 temp___391) (<= temp___391 57))
                 (or
                   (and (<= 97 temp___391) (<= temp___391 102))
                   (and (<= 65 temp___391) (<= temp___391 70)))))))
         (let ((result (last_hexa_ghost str)))
           (=>
             (last_hexa_ghost__function_guard result str)
             (and
               (and
                 (and
                   (and (<= (first str) result) (<= result (last str)))
                   (=>
                     (< result (last str))
                     (= (not (let ((temp___396 (to_rep
                                                 (select (to_array str) (+ result 1)))))
                               (or (let ((temp___399 temp___396))
                                     (and (ite (<= 48 temp___399) true false) 
                                     (ite (<= temp___399 57)
                                       true
                                       false))) (or (let ((temp___398 temp___396))
                                                      (and (ite (<= 97 temp___398)
                                                             true
                                                             false) (ite (<= temp___398 102)
                                                                    true
                                                                    false))) (or 
                               (let ((temp___397 temp___396))
                                 (and (ite (<= 65 temp___397) true false) 
                                 (ite (<= temp___397 70)
                                   true
                                   false))) (ite (= temp___396 95)
                                              true
                                              false)))))) true)))
                 (= (only_hexa_ghost str (first str) result) true))
               (dynamic_invariant2 result true false true true))))) :pattern (
    (last_hexa_ghost
      str)) )))

;; is_based_format_ghost
(declare-fun is_based_format_ghost (us_t) Bool)

;; is_based_format_ghost__function_guard
(declare-fun is_based_format_ghost__function_guard (Bool
  us_t) Bool)

;; temp___String_Literal_401
(declare-fun temp___String_Literal_401 (tuple0) (Array Int character))

;; temp___String_Literal_401__def_axiom
(assert true)

;; is_based_format_ghost__post_axiom
(assert true)

;; is_based_format_ghost__def_axiom
(assert
  (forall ((str us_t))
    (! (and
         (forall ((str1 us_t))
           (last_hexa_ghost__function_guard (last_hexa_ghost str1) str1))
         (=
           (= (is_based_format_ghost str) true)
           (and
             (and
               (not
                 (= (let ((temp___412 (temp___String_Literal_401 Tuple0)))
                      (bool_eq6
                        (to_array str)
                        (first str)
                        (last str)
                        temp___412
                        1
                        0)) true))
               (let ((temp___413 (to_rep (select (to_array str) (first str)))))
                 (or
                   (and (<= 48 temp___413) (<= temp___413 57))
                   (or
                     (and (<= 97 temp___413) (<= temp___413 102))
                     (and (<= 65 temp___413) (<= temp___413 70))))))
             (let ((l (last_hexa_ghost str)))
               (and
                 (not (= (to_rep (select (to_array str) l)) 95))
                 (forall ((j Int))
                   (=>
                     (and (<= (first str) j) (<= j l))
                     (=>
                       (= (to_rep (select (to_array str) j)) 95)
                       (not (= (to_rep (select (to_array str) (+ j 1))) 95)))))))))) :pattern (
    (is_based_format_ghost
      str)) )))

;; hexa_to_unsigned_ghost
(declare-fun hexa_to_unsigned_ghost (Int) (_ BitVec 64))

;; hexa_to_unsigned_ghost__function_guard
(declare-fun hexa_to_unsigned_ghost__function_guard ((_ BitVec 64)
  Int) Bool)

;; hexa_to_unsigned_ghost__post_axiom
(assert
  (forall ((x Int))
    (! (=>
         (and
           (dynamic_invariant6 x true true true true)
           (or
             (and (<= 48 x) (<= x 57))
             (or (and (<= 97 x) (<= x 102)) (and (<= 65 x) (<= x 70)))))
         (let ((result (hexa_to_unsigned_ghost x)))
           (=>
             (hexa_to_unsigned_ghost__function_guard result x)
             (dynamic_invariant8 result true false true true)))) :pattern (
    (hexa_to_unsigned_ghost
      x)) )))

;; hexa_to_unsigned_ghost__def_axiom
(assert
  (forall ((x Int))
    (! (=>
         (dynamic_invariant6 x true true true true)
         (= (hexa_to_unsigned_ghost x) (ite (and (<= 48 x) (<= x 57))
                                         (bvsub (of_int x) #x0000000000000030)
                                         (ite (and (<= 97 x) (<= x 102))
                                           (bvadd (bvsub (of_int x) #x0000000000000061) #x000000000000000A)
                                           (ite (and (<= 65 x) (<= x 70))
                                             (bvadd (bvsub (of_int x) #x0000000000000041) #x000000000000000A)
                                             (to_rep2 dummy6)))))) :pattern (
    (hexa_to_unsigned_ghost
      x)) )))

;; scan_overflows_ghost
(declare-fun scan_overflows_ghost ((_ BitVec 64)
  (_ BitVec 64)
  (_ BitVec 64)) Bool)

;; scan_overflows_ghost__function_guard
(declare-fun scan_overflows_ghost__function_guard (Bool
  (_ BitVec 64)
  (_ BitVec 64)
  (_ BitVec 64)) Bool)

;; scan_overflows_ghost__post_axiom
(assert true)

;; scan_overflows_ghost__def_axiom
(assert
  (forall ((digit (_ BitVec 64)) (base (_ BitVec 64)) (acc (_ BitVec 64)))
    (! (=
         (= (scan_overflows_ghost digit base acc) true)
         (or
           (or
             (bvuge digit base)
             (bvugt acc (bvudiv #xFFFFFFFFFFFFFFFF base)))
           (bvult (bvsub #xFFFFFFFFFFFFFFFF digit) (bvmul base acc)))) :pattern (
    (scan_overflows_ghost
      digit
      base
      acc)) )))

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const alignment4 Int)

;; value__size_axiom
(assert (<= 0 value__size4))

;; object__size_axiom
(assert (<= 0 object__size4))

;; alignment_axiom
(assert (<= 0 alignment4))

(declare-const ada___system__val_llu__impl__uns_option__overflow__first__bit2 Int)

(declare-const ada___system__val_llu__impl__uns_option__overflow__last__bit2 Int)

(declare-const ada___system__val_llu__impl__uns_option__overflow__position2 Int)

;; ada___system__val_llu__impl__uns_option__overflow__first__bit_axiom
(assert
  (<= 0 ada___system__val_llu__impl__uns_option__overflow__first__bit2))

;; ada___system__val_llu__impl__uns_option__overflow__last__bit_axiom
(assert
  (< ada___system__val_llu__impl__uns_option__overflow__first__bit2 ada___system__val_llu__impl__uns_option__overflow__last__bit2))

;; ada___system__val_llu__impl__uns_option__overflow__position_axiom
(assert (<= 0 ada___system__val_llu__impl__uns_option__overflow__position2))

(declare-const ada___system__val_llu__impl__uns_option__value__first__bit2 Int)

(declare-const ada___system__val_llu__impl__uns_option__value__last__bit2 Int)

(declare-const ada___system__val_llu__impl__uns_option__value__position2 Int)

;; ada___system__val_llu__impl__uns_option__value__first__bit_axiom
(assert (<= 0 ada___system__val_llu__impl__uns_option__value__first__bit2))

;; ada___system__val_llu__impl__uns_option__value__last__bit_axiom
(assert
  (< ada___system__val_llu__impl__uns_option__value__first__bit2 ada___system__val_llu__impl__uns_option__value__last__bit2))

;; ada___system__val_llu__impl__uns_option__value__position_axiom
(assert (<= 0 ada___system__val_llu__impl__uns_option__value__position2))

;; user_eq
(declare-fun user_eq13 (us_rep
  us_rep) Bool)

(declare-const dummy13 us_rep)

(declare-datatypes ((t128s__ref 0))
  (((t128s__refqtmk (t128s__content us_rep)))))

;; t128s__ref_t128s__content__projection
(define-fun t128s__ref_t128s__content__projection ((a t128s__ref)) us_rep
  (t128s__content a))

(declare-const value__size5 Int)

(declare-const object__size5 Int)

(declare-const alignment5 Int)

;; value__size_axiom
(assert (<= 0 value__size5))

;; object__size_axiom
(assert (<= 0 object__size5))

;; alignment_axiom
(assert (<= 0 alignment5))

(declare-const ada___system__val_llu__impl__uns_option__overflow__first__bit3 Int)

(declare-const ada___system__val_llu__impl__uns_option__overflow__last__bit3 Int)

(declare-const ada___system__val_llu__impl__uns_option__overflow__position3 Int)

;; ada___system__val_llu__impl__uns_option__overflow__first__bit_axiom
(assert
  (<= 0 ada___system__val_llu__impl__uns_option__overflow__first__bit3))

;; ada___system__val_llu__impl__uns_option__overflow__last__bit_axiom
(assert
  (< ada___system__val_llu__impl__uns_option__overflow__first__bit3 ada___system__val_llu__impl__uns_option__overflow__last__bit3))

;; ada___system__val_llu__impl__uns_option__overflow__position_axiom
(assert (<= 0 ada___system__val_llu__impl__uns_option__overflow__position3))

(declare-const ada___system__val_llu__impl__uns_option__value__first__bit3 Int)

(declare-const ada___system__val_llu__impl__uns_option__value__last__bit3 Int)

(declare-const ada___system__val_llu__impl__uns_option__value__position3 Int)

;; ada___system__val_llu__impl__uns_option__value__first__bit_axiom
(assert (<= 0 ada___system__val_llu__impl__uns_option__value__first__bit3))

;; ada___system__val_llu__impl__uns_option__value__last__bit_axiom
(assert
  (< ada___system__val_llu__impl__uns_option__value__first__bit3 ada___system__val_llu__impl__uns_option__value__last__bit3))

;; ada___system__val_llu__impl__uns_option__value__position_axiom
(assert (<= 0 ada___system__val_llu__impl__uns_option__value__position3))

;; user_eq
(declare-fun user_eq14 (us_rep
  us_rep) Bool)

(declare-const dummy14 us_rep)

(declare-datatypes ((t129s__ref 0))
  (((t129s__refqtmk (t129s__content us_rep)))))

;; t129s__ref_t129s__content__projection
(define-fun t129s__ref_t129s__content__projection ((a t129s__ref)) us_rep
  (t129s__content a))

;; scan_based_number_ghost__def_axiom
(assert
  (forall ((str us_t))
    (forall ((from Int) (to__ Int))
      (forall ((base (_ BitVec 64)) (acc (_ BitVec 64)))
        (! (=>
             (and
               (and
                 (and
                   (and
                     (dynamic_invariant4 str true true true true)
                     (dynamic_invariant from true true true true))
                   (dynamic_invariant to__ true true true true))
                 (dynamic_invariant8 base true true true true))
               (dynamic_invariant8 acc true true true true))
             (and
               (forall ((str1 us_t) (from1 Int))
                 (hexa_to_unsigned_ghost__function_guard
                   (hexa_to_unsigned_ghost
                     (to_rep (select (to_array str1) from1)))
                   (to_rep (select (to_array str1) from1))))
               (and
                 (forall ((str1 us_t) (from1 Int))
                   (hexa_to_unsigned_ghost__function_guard
                     (hexa_to_unsigned_ghost
                       (to_rep (select (to_array str1) from1)))
                     (to_rep (select (to_array str1) from1))))
                 (= (scan_based_number_ghost str from to__ base acc) 
                 (ite (< to__ from)
                   (let ((temp___overflow_486 (of_int1 0)))
                     (us_repqtmk
                       (us_split_discrsqtmk temp___overflow_486)
                       (us_split_fieldsqtmk (of_rep2 acc))))
                   (ite (= (to_rep (select (to_array str) from)) 95)
                     (scan_based_number_ghost str (+ from 1) to__ base acc)
                     (ite (= (scan_overflows_ghost
                               (hexa_to_unsigned_ghost
                                 (to_rep (select (to_array str) from)))
                               base
                               acc) true)
                       (let ((temp___overflow_487 (of_int1 1)))
                         (us_repqtmk
                           (us_split_discrsqtmk temp___overflow_487)
                           (us_split_fieldsqtmk dummy6)))
                       (scan_based_number_ghost
                         str
                         (+ from 1)
                         to__
                         base
                         (bvadd (bvmul base acc) (hexa_to_unsigned_ghost
                                                   (to_rep
                                                     (select (to_array str) from)))))))))))) :pattern (
        (scan_based_number_ghost
          str
          from
          to__
          base
          acc)) )))))

;; scan_based_number_ghost__post_axiom
(assert true)

;; exponent_unsigned_ghost
(declare-fun exponent_unsigned_ghost ((_ BitVec 64)
  Int
  (_ BitVec 64)) us_rep)

;; exponent_unsigned_ghost__function_guard
(declare-fun exponent_unsigned_ghost__function_guard (us_rep
  (_ BitVec 64)
  Int
  (_ BitVec 64)) Bool)

(declare-const value__size6 Int)

(declare-const object__size6 Int)

(declare-const alignment6 Int)

;; value__size_axiom
(assert (<= 0 value__size6))

;; object__size_axiom
(assert (<= 0 object__size6))

;; alignment_axiom
(assert (<= 0 alignment6))

(declare-const ada___system__val_llu__impl__uns_option__overflow__first__bit4 Int)

(declare-const ada___system__val_llu__impl__uns_option__overflow__last__bit4 Int)

(declare-const ada___system__val_llu__impl__uns_option__overflow__position4 Int)

;; ada___system__val_llu__impl__uns_option__overflow__first__bit_axiom
(assert
  (<= 0 ada___system__val_llu__impl__uns_option__overflow__first__bit4))

;; ada___system__val_llu__impl__uns_option__overflow__last__bit_axiom
(assert
  (< ada___system__val_llu__impl__uns_option__overflow__first__bit4 ada___system__val_llu__impl__uns_option__overflow__last__bit4))

;; ada___system__val_llu__impl__uns_option__overflow__position_axiom
(assert (<= 0 ada___system__val_llu__impl__uns_option__overflow__position4))

(declare-const ada___system__val_llu__impl__uns_option__value__first__bit4 Int)

(declare-const ada___system__val_llu__impl__uns_option__value__last__bit4 Int)

(declare-const ada___system__val_llu__impl__uns_option__value__position4 Int)

;; ada___system__val_llu__impl__uns_option__value__first__bit_axiom
(assert (<= 0 ada___system__val_llu__impl__uns_option__value__first__bit4))

;; ada___system__val_llu__impl__uns_option__value__last__bit_axiom
(assert
  (< ada___system__val_llu__impl__uns_option__value__first__bit4 ada___system__val_llu__impl__uns_option__value__last__bit4))

;; ada___system__val_llu__impl__uns_option__value__position_axiom
(assert (<= 0 ada___system__val_llu__impl__uns_option__value__position4))

;; user_eq
(declare-fun user_eq15 (us_rep
  us_rep) Bool)

(declare-const dummy15 us_rep)

(declare-datatypes ((t123s__ref 0))
  (((t123s__refqtmk (t123s__content us_rep)))))

;; t123s__ref_t123s__content__projection
(define-fun t123s__ref_t123s__content__projection ((a t123s__ref)) us_rep
  (t123s__content a))

(declare-const value__size7 Int)

(declare-const object__size7 Int)

(declare-const alignment7 Int)

;; value__size_axiom
(assert (<= 0 value__size7))

;; object__size_axiom
(assert (<= 0 object__size7))

;; alignment_axiom
(assert (<= 0 alignment7))

(declare-const ada___system__val_llu__impl__uns_option__overflow__first__bit5 Int)

(declare-const ada___system__val_llu__impl__uns_option__overflow__last__bit5 Int)

(declare-const ada___system__val_llu__impl__uns_option__overflow__position5 Int)

;; ada___system__val_llu__impl__uns_option__overflow__first__bit_axiom
(assert
  (<= 0 ada___system__val_llu__impl__uns_option__overflow__first__bit5))

;; ada___system__val_llu__impl__uns_option__overflow__last__bit_axiom
(assert
  (< ada___system__val_llu__impl__uns_option__overflow__first__bit5 ada___system__val_llu__impl__uns_option__overflow__last__bit5))

;; ada___system__val_llu__impl__uns_option__overflow__position_axiom
(assert (<= 0 ada___system__val_llu__impl__uns_option__overflow__position5))

(declare-const ada___system__val_llu__impl__uns_option__value__first__bit5 Int)

(declare-const ada___system__val_llu__impl__uns_option__value__last__bit5 Int)

(declare-const ada___system__val_llu__impl__uns_option__value__position5 Int)

;; ada___system__val_llu__impl__uns_option__value__first__bit_axiom
(assert (<= 0 ada___system__val_llu__impl__uns_option__value__first__bit5))

;; ada___system__val_llu__impl__uns_option__value__last__bit_axiom
(assert
  (< ada___system__val_llu__impl__uns_option__value__first__bit5 ada___system__val_llu__impl__uns_option__value__last__bit5))

;; ada___system__val_llu__impl__uns_option__value__position_axiom
(assert (<= 0 ada___system__val_llu__impl__uns_option__value__position5))

;; user_eq
(declare-fun user_eq16 (us_rep
  us_rep) Bool)

(declare-const dummy16 us_rep)

(declare-datatypes ((t124s__ref 0))
  (((t124s__refqtmk (t124s__content us_rep)))))

;; t124s__ref_t124s__content__projection
(define-fun t124s__ref_t124s__content__projection ((a t124s__ref)) us_rep
  (t124s__content a))

;; exponent_unsigned_ghost__def_axiom
(assert
  (forall ((value (_ BitVec 64)) (base (_ BitVec 64)))
    (forall ((exp1 Int))
      (! (=>
           (and
             (and
               (dynamic_invariant8 value true true true true)
               (dynamic_invariant1 exp1 true true true true))
             (dynamic_invariant8 base true true true true))
           (= (exponent_unsigned_ghost value exp1 base) (ite (or
                                                               (= exp1 0)
                                                               (= value #x0000000000000000))
                                                          (let ((temp___overflow_525 
                                                            (of_int1
                                                              0)))
                                                            (us_repqtmk
                                                              (us_split_discrsqtmk
                                                                temp___overflow_525)
                                                              (us_split_fieldsqtmk
                                                                (of_rep2
                                                                  value))))
                                                          (ite (= (scan_overflows_ghost
                                                                    #x0000000000000000
                                                                    base
                                                                    value) true)
                                                            (let ((temp___overflow_526 
                                                              (of_int1
                                                                1)))
                                                              (us_repqtmk
                                                                (us_split_discrsqtmk
                                                                  temp___overflow_526)
                                                                (us_split_fieldsqtmk
                                                                  dummy6)))
                                                            (exponent_unsigned_ghost
                                                              (bvmul value base)
                                                              (- exp1 1)
                                                              base))))) :pattern (
      (exponent_unsigned_ghost
        value
        exp1
        base)) ))))

;; exponent_unsigned_ghost__post_axiom
(assert true)

;; is_raw_unsigned_format_ghost
(declare-fun is_raw_unsigned_format_ghost (us_t) Bool)

;; is_raw_unsigned_format_ghost__function_guard
(declare-fun is_raw_unsigned_format_ghost__function_guard (Bool
  us_t) Bool)

(declare-datatypes ((t152s__ref 0))
  (((t152s__refqtmk (t152s__content us_t)))))

;; t152s__ref_t152s__content__projection
(define-fun t152s__ref_t152s__content__projection ((a t152s__ref)) us_t
  (t152s__content a))

(declare-datatypes ((t155s__ref 0))
  (((t155s__refqtmk (t155s__content us_t)))))

;; t155s__ref_t155s__content__projection
(define-fun t155s__ref_t155s__content__projection ((a t155s__ref)) us_t
  (t155s__content a))

(declare-datatypes ((t158s__ref 0))
  (((t158s__refqtmk (t158s__content us_t)))))

;; t158s__ref_t158s__content__projection
(define-fun t158s__ref_t158s__content__projection ((a t158s__ref)) us_t
  (t158s__content a))

;; is_raw_unsigned_format_ghost__post_axiom
(assert true)

;; is_raw_unsigned_format_ghost__def_axiom
(assert
  (forall ((str us_t))
    (! (and
         (forall ((str1 us_t))
           (last_number_ghost__function_guard (last_number_ghost str1) str1))
         (and
           (forall ((str1 us_t) (last_num_init Int))
             (last_hexa_ghost__function_guard
               (last_hexa_ghost
                 (let ((temp___468 (let ((temp___467 (last str1)))
                                     (let ((temp___466 (+ last_num_init 2)))
                                       (of_array
                                         (to_array str1)
                                         temp___466
                                         temp___467)))))
                   (let ((temp___469 (to_array temp___468)))
                     (of_array
                       temp___469
                       (first temp___468)
                       (last temp___468)))))
               (let ((temp___468 (let ((temp___467 (last str1)))
                                   (let ((temp___466 (+ last_num_init 2)))
                                     (of_array
                                       (to_array str1)
                                       temp___466
                                       temp___467)))))
                 (let ((temp___469 (to_array temp___468)))
                   (of_array temp___469 (first temp___468) (last temp___468))))))
           (=
             (= (is_raw_unsigned_format_ghost str) true)
             (and
               (= (is_natural_format_ghost str) true)
               (let ((last_num_init (last_number_ghost str)))
                 (let ((starts_as_based (and (and (bool_lt1
                                                    last_num_init
                                                    (- (last str) 1)) 
                   (let ((temp___472 (to_rep
                                       (select (to_array str) (+ last_num_init 1)))))
                     (or (ite (= temp___472 35) true false) (ite (= temp___472 58)
                                                              true
                                                              false)))) 
                   (let ((temp___473 (to_rep
                                       (select (to_array str) (+ last_num_init 2)))))
                     (or (let ((temp___476 temp___473))
                           (and (ite (<= 48 temp___476) true false) (ite (<= temp___476 57)
                                                                    true
                                                                    false))) (or 
                     (let ((temp___475 temp___473))
                       (and (ite (<= 97 temp___475) true false) (ite (<= temp___475 102)
                                                                  true
                                                                  false))) 
                     (let ((temp___474 temp___473))
                       (and (ite (<= 65 temp___474) true false) (ite (<= temp___474 70)
                                                                  true
                                                                  false)))))))))
                   (let ((last_num_based (ite (= starts_as_based true)
                                           (last_hexa_ghost
                                             (let ((temp___468 (let ((temp___467 
                                                                 (last
                                                                   str)))
                                                                 (let ((temp___466 (+ last_num_init 2)))
                                                                   (of_array
                                                                    (to_array
                                                                    str)
                                                                    temp___466
                                                                    temp___467)))))
                                               (let ((temp___469 (to_array
                                                                   temp___468)))
                                                 (of_array
                                                   temp___469
                                                   (first temp___468)
                                                   (last temp___468)))))
                                           last_num_init)))
                     (and
                       (=>
                         (= starts_as_based true)
                         (and
                           (= (is_based_format_ghost
                                (let ((temp___461 (let ((temp___460 (last
                                                                    str)))
                                                    (let ((temp___459 (+ last_num_init 2)))
                                                      (of_array
                                                        (to_array str)
                                                        temp___459
                                                        temp___460)))))
                                  (let ((temp___462 (to_array temp___461)))
                                    (of_array
                                      temp___462
                                      (first temp___461)
                                      (last temp___461))))) true)
                           (< last_num_based (last str))))
                       (= (is_opt_exponent_format_ghost
                            (let ((temp___464 (let ((temp___463 (last str)))
                                                (of_array
                                                  (to_array str)
                                                  (ite (= (and (and starts_as_based 
                                                    (bool_lt1
                                                      last_num_based
                                                      (last str))) (bool_eq9
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    str) (+ last_num_based 1)))
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    str) (+ last_num_init 1))))) true)
                                                    (+ last_num_based 2)
                                                    (+ last_num_init 1))
                                                  temp___463))))
                              (let ((temp___465 (to_array temp___464)))
                                (of_array
                                  temp___465
                                  (first temp___464)
                                  (last temp___464))))
                            (of_int1 0)) true))))))))) :pattern ((is_raw_unsigned_format_ghost
                                                                   str)) )))

;; raw_unsigned_overflows_ghost
(declare-fun raw_unsigned_overflows_ghost (us_t
  Int
  Int) Bool)

;; raw_unsigned_overflows_ghost__function_guard
(declare-fun raw_unsigned_overflows_ghost__function_guard (Bool
  us_t
  Int
  Int) Bool)

(declare-datatypes ((t163s__ref 0))
  (((t163s__refqtmk (t163s__content us_t)))))

;; t163s__ref_t163s__content__projection
(define-fun t163s__ref_t163s__content__projection ((a t163s__ref)) us_t
  (t163s__content a))

(declare-datatypes ((t166s__ref 0))
  (((t166s__refqtmk (t166s__content us_t)))))

;; t166s__ref_t166s__content__projection
(define-fun t166s__ref_t166s__content__projection ((a t166s__ref)) us_t
  (t166s__content a))

(declare-datatypes ((t169s__ref 0))
  (((t169s__refqtmk (t169s__content us_t)))))

;; t169s__ref_t169s__content__projection
(define-fun t169s__ref_t169s__content__projection ((a t169s__ref)) us_t
  (t169s__content a))

(declare-datatypes ((t172s__ref 0))
  (((t172s__refqtmk (t172s__content us_t)))))

;; t172s__ref_t172s__content__projection
(define-fun t172s__ref_t172s__content__projection ((a t172s__ref)) us_t
  (t172s__content a))

(declare-datatypes ((t176s__ref 0))
  (((t176s__refqtmk (t176s__content us_t)))))

;; t176s__ref_t176s__content__projection
(define-fun t176s__ref_t176s__content__projection ((a t176s__ref)) us_t
  (t176s__content a))

;; raw_unsigned_overflows_ghost__post_axiom
(assert true)

;; raw_unsigned_overflows_ghost__def_axiom
(assert
  (forall ((str us_t))
    (forall ((from Int) (to__ Int))
      (! (and
           (forall ((str1 us_t) (from1 Int) (to__1 Int))
             (last_number_ghost__function_guard
               (last_number_ghost
                 (let ((temp___574 (of_array (to_array str1) from1 to__1)))
                   (let ((temp___575 (to_array temp___574)))
                     (of_array
                       temp___575
                       (first temp___574)
                       (last temp___574)))))
               (let ((temp___574 (of_array (to_array str1) from1 to__1)))
                 (let ((temp___575 (to_array temp___574)))
                   (of_array temp___575 (first temp___574) (last temp___574))))))
           (and
             (forall ((str1 us_t) (to__1 Int) (last_num_init Int))
               (last_hexa_ghost__function_guard
                 (last_hexa_ghost
                   (let ((temp___565 (let ((temp___564 (+ last_num_init 2)))
                                       (of_array
                                         (to_array str1)
                                         temp___564
                                         to__1))))
                     (let ((temp___566 (to_array temp___565)))
                       (of_array
                         temp___566
                         (first temp___565)
                         (last temp___565)))))
                 (let ((temp___565 (let ((temp___564 (+ last_num_init 2)))
                                     (of_array
                                       (to_array str1)
                                       temp___564
                                       to__1))))
                   (let ((temp___566 (to_array temp___565)))
                     (of_array
                       temp___566
                       (first temp___565)
                       (last temp___565))))))
             (and
               (forall ((str1 us_t) (to__1 Int) (first_exp Int))
                 (scan_exponent_ghost__function_guard
                   (scan_exponent_ghost
                     (let ((temp___559 (of_array
                                         (to_array str1)
                                         first_exp
                                         to__1)))
                       (let ((temp___560 (to_array temp___559)))
                         (of_array
                           temp___560
                           (first temp___559)
                           (last temp___559))))
                     (of_int1 0))
                   (let ((temp___559 (of_array
                                       (to_array str1)
                                       first_exp
                                       to__1)))
                     (let ((temp___560 (to_array temp___559)))
                       (of_array
                         temp___560
                         (first temp___559)
                         (last temp___559))))
                   (of_int1 0)))
               (=
                 (= (raw_unsigned_overflows_ghost str from to__) true)
                 (let ((last_num_init (last_number_ghost
                                        (let ((temp___574 (of_array
                                                            (to_array str)
                                                            from
                                                            to__)))
                                          (let ((temp___575 (to_array
                                                              temp___574)))
                                            (of_array
                                              temp___575
                                              (first temp___574)
                                              (last temp___574)))))))
                   (let ((init_val (scan_based_number_ghost
                                     str
                                     from
                                     last_num_init
                                     #x000000000000000A
                                     #x0000000000000000)))
                     (let ((starts_as_based (and (and (bool_lt1
                                                        last_num_init
                                                        (- to__ 1)) (let ((temp___569 
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    str) (+ last_num_init 1)))))
                                                                    (or 
                                                                    (ite (= temp___569 35)
                                                                    true
                                                                    false) 
                                                                    (ite (= temp___569 58)
                                                                    true
                                                                    false)))) 
                       (let ((temp___570 (to_rep
                                           (select (to_array str) (+ last_num_init 2)))))
                         (or (let ((temp___573 temp___570))
                               (and (ite (<= 48 temp___573) true false) 
                               (ite (<= temp___573 57)
                                 true
                                 false))) (or (let ((temp___572 temp___570))
                                                (and (ite (<= 97 temp___572)
                                                       true
                                                       false) (ite (<= temp___572 102)
                                                                true
                                                                false))) 
                         (let ((temp___571 temp___570))
                           (and (ite (<= 65 temp___571) true false) (ite (<= temp___571 70)
                                                                    true
                                                                    false)))))))))
                       (let ((last_num_based (ite (= starts_as_based true)
                                               (last_hexa_ghost
                                                 (let ((temp___565 (let ((temp___564 (+ last_num_init 2)))
                                                                    (of_array
                                                                    (to_array
                                                                    str)
                                                                    temp___564
                                                                    to__))))
                                                   (let ((temp___566 
                                                     (to_array
                                                       temp___565)))
                                                     (of_array
                                                       temp___566
                                                       (first temp___565)
                                                       (last temp___565)))))
                                               last_num_init)))
                         (let ((is_based (and (and starts_as_based (bool_lt1
                                                                    last_num_based
                                                                    to__)) 
                           (bool_eq9
                             (to_rep
                               (select (to_array str) (+ last_num_based 1)))
                             (to_rep
                               (select (to_array str) (+ last_num_init 1)))))))
                           (let ((based_val (ite (and
                                                   (= starts_as_based true)
                                                   (not
                                                     (= (rec__ada___system__val_llu__impl__uns_option__overflow
                                                          (us_split_discrs1
                                                            init_val)) true)))
                                              (scan_based_number_ghost
                                                str
                                                (+ last_num_init 2)
                                                last_num_based
                                                (to_rep2
                                                  (rec__ada___system__val_llu__impl__uns_option__value
                                                    (us_split_fields1
                                                      init_val)))
                                                #x0000000000000000)
                                              init_val)))
                             (let ((first_exp (ite (= is_based true)
                                                (+ last_num_based 2)
                                                (+ last_num_init 1))))
                               (or
                                 (or
                                   (or
                                     (= (rec__ada___system__val_llu__impl__uns_option__overflow
                                          (us_split_discrs1 init_val)) true)
                                     (and
                                       (and
                                         (< last_num_init (- to__ 1))
                                         (let ((temp___555 (to_rep
                                                             (select 
                                                             (to_array
                                                               str) (+ last_num_init 1)))))
                                           (or
                                             (= temp___555 35)
                                             (= temp___555 58))))
                                       (= (not (let ((temp___556 (to_rep2
                                                                   (rec__ada___system__val_llu__impl__uns_option__value
                                                                    (us_split_fields1
                                                                    init_val)))))
                                                 (and (ite (bvule #x0000000000000002 temp___556)
                                                        true
                                                        false) (ite (bvule temp___556 #x0000000000000010)
                                                                 true
                                                                 false)))) true)))
                                   (and
                                     (= starts_as_based true)
                                     (= (rec__ada___system__val_llu__impl__uns_option__overflow
                                          (us_split_discrs1 based_val)) true)))
                                 (and
                                   (= (starts_as_exponent_format_ghost
                                        (let ((temp___557 (of_array
                                                            (to_array str)
                                                            first_exp
                                                            to__)))
                                          (let ((temp___558 (to_array
                                                              temp___557)))
                                            (of_array
                                              temp___558
                                              (first temp___557)
                                              (last temp___557))))
                                        (of_int1 0)) true)
                                   (= (rec__ada___system__val_llu__impl__uns_option__overflow
                                        (us_split_discrs1
                                          (exponent_unsigned_ghost
                                            (ite (= is_based true)
                                              (to_rep2
                                                (rec__ada___system__val_llu__impl__uns_option__value
                                                  (us_split_fields1
                                                    based_val)))
                                              (to_rep2
                                                (rec__ada___system__val_llu__impl__uns_option__value
                                                  (us_split_fields1 init_val))))
                                            (ite (= (starts_as_exponent_format_ghost
                                                      (let ((temp___562 
                                                        (of_array
                                                          (to_array str)
                                                          first_exp
                                                          to__)))
                                                        (let ((temp___563 
                                                          (to_array
                                                            temp___562)))
                                                          (of_array
                                                            temp___563
                                                            (first
                                                              temp___562)
                                                            (last temp___562))))
                                                      (of_int1 0)) true)
                                              (scan_exponent_ghost
                                                (let ((temp___559 (of_array
                                                                    (to_array
                                                                    str)
                                                                    first_exp
                                                                    to__)))
                                                  (let ((temp___560 (to_array
                                                                    temp___559)))
                                                    (of_array
                                                      temp___560
                                                      (first temp___559)
                                                      (last temp___559))))
                                                (of_int1 0))
                                              0)
                                            (ite (= is_based true)
                                              (to_rep2
                                                (rec__ada___system__val_llu__impl__uns_option__value
                                                  (us_split_fields1 init_val)))
                                              #x000000000000000A)))) true)))))))))))))) :pattern (
      (raw_unsigned_overflows_ghost
        str
        from
        to__)) ))))

;; scan_raw_unsigned_ghost
(declare-fun scan_raw_unsigned_ghost (us_t
  Int
  Int) (_ BitVec 64))

;; scan_raw_unsigned_ghost__function_guard
(declare-fun scan_raw_unsigned_ghost__function_guard ((_ BitVec 64)
  us_t
  Int
  Int) Bool)

(declare-datatypes ((t181s__ref 0))
  (((t181s__refqtmk (t181s__content us_t)))))

;; t181s__ref_t181s__content__projection
(define-fun t181s__ref_t181s__content__projection ((a t181s__ref)) us_t
  (t181s__content a))

(declare-datatypes ((t184s__ref 0))
  (((t184s__refqtmk (t184s__content us_t)))))

;; t184s__ref_t184s__content__projection
(define-fun t184s__ref_t184s__content__projection ((a t184s__ref)) us_t
  (t184s__content a))

(declare-datatypes ((t187s__ref 0))
  (((t187s__refqtmk (t187s__content us_t)))))

;; t187s__ref_t187s__content__projection
(define-fun t187s__ref_t187s__content__projection ((a t187s__ref)) us_t
  (t187s__content a))

(declare-datatypes ((t190s__ref 0))
  (((t190s__refqtmk (t190s__content us_t)))))

;; t190s__ref_t190s__content__projection
(define-fun t190s__ref_t190s__content__projection ((a t190s__ref)) us_t
  (t190s__content a))

;; scan_raw_unsigned_ghost__post_axiom
(assert
  (forall ((str us_t))
    (forall ((from Int) (to__ Int))
      (! (and
           (forall ((str1 us_t) (from1 Int) (to__1 Int))
             (raw_unsigned_overflows_ghost__function_guard
               (raw_unsigned_overflows_ghost str1 from1 to__1)
               str1
               from1
               to__1))
           (=>
             (and
               (and
                 (and
                   (dynamic_invariant4 str true true true true)
                   (dynamic_invariant from true true true true))
                 (dynamic_invariant to__ true true true true))
               (and
                 (and
                   (and
                     (and
                       (not (= (last str) 2147483647))
                       (and (<= (first str) from) (<= from (last str))))
                     (and (<= from to__) (<= to__ (last str))))
                   (let ((temp___598 (to_rep (select (to_array str) from))))
                     (and (<= 48 temp___598) (<= temp___598 57))))
                 (not (= (raw_unsigned_overflows_ghost str from to__) true))))
             (let ((result (scan_raw_unsigned_ghost str from to__)))
               (=>
                 (scan_raw_unsigned_ghost__function_guard
                   result
                   str
                   from
                   to__)
                 (dynamic_invariant8 result true false true true))))) :pattern (
      (scan_raw_unsigned_ghost
        str
        from
        to__)) ))))

;; scan_raw_unsigned_ghost__def_axiom
(assert
  (forall ((str us_t))
    (forall ((from Int) (to__ Int))
      (! (=>
           (and
             (and
               (dynamic_invariant4 str true true true true)
               (dynamic_invariant from true true true true))
             (dynamic_invariant to__ true true true true))
           (and
             (forall ((str1 us_t) (from1 Int) (to__1 Int))
               (last_number_ghost__function_guard
                 (last_number_ghost
                   (let ((temp___616 (of_array (to_array str1) from1 to__1)))
                     (let ((temp___617 (to_array temp___616)))
                       (of_array
                         temp___617
                         (first temp___616)
                         (last temp___616)))))
                 (let ((temp___616 (of_array (to_array str1) from1 to__1)))
                   (let ((temp___617 (to_array temp___616)))
                     (of_array
                       temp___617
                       (first temp___616)
                       (last temp___616))))))
             (and
               (forall ((str1 us_t) (to__1 Int) (last_num_init Int))
                 (last_hexa_ghost__function_guard
                   (last_hexa_ghost
                     (let ((temp___607 (let ((temp___606 (+ last_num_init 2)))
                                         (of_array
                                           (to_array str1)
                                           temp___606
                                           to__1))))
                       (let ((temp___608 (to_array temp___607)))
                         (of_array
                           temp___608
                           (first temp___607)
                           (last temp___607)))))
                   (let ((temp___607 (let ((temp___606 (+ last_num_init 2)))
                                       (of_array
                                         (to_array str1)
                                         temp___606
                                         to__1))))
                     (let ((temp___608 (to_array temp___607)))
                       (of_array
                         temp___608
                         (first temp___607)
                         (last temp___607))))))
               (and
                 (forall ((str1 us_t) (to__1 Int) (first_exp Int))
                   (scan_exponent_ghost__function_guard
                     (scan_exponent_ghost
                       (let ((temp___601 (of_array
                                           (to_array str1)
                                           first_exp
                                           to__1)))
                         (let ((temp___602 (to_array temp___601)))
                           (of_array
                             temp___602
                             (first temp___601)
                             (last temp___601))))
                       (of_int1 0))
                     (let ((temp___601 (of_array
                                         (to_array str1)
                                         first_exp
                                         to__1)))
                       (let ((temp___602 (to_array temp___601)))
                         (of_array
                           temp___602
                           (first temp___601)
                           (last temp___601))))
                     (of_int1 0)))
                 (= (scan_raw_unsigned_ghost str from to__) (let ((last_num_init 
                                                              (last_number_ghost
                                                                (let ((temp___616 
                                                                  (of_array
                                                                    (to_array
                                                                    str)
                                                                    from
                                                                    to__)))
                                                                  (let ((temp___617 
                                                                    (to_array
                                                                    temp___616)))
                                                                    (of_array
                                                                    temp___617
                                                                    (first
                                                                    temp___616)
                                                                    (last
                                                                    temp___616)))))))
                                                              (let ((init_val 
                                                                (scan_based_number_ghost
                                                                  str
                                                                  from
                                                                  last_num_init
                                                                  #x000000000000000A
                                                                  #x0000000000000000)))
                                                                (let ((starts_as_based (and (and 
                                                                  (bool_lt1
                                                                    last_num_init
                                                                    (- to__ 1)) 
                                                                  (let ((temp___611 
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    str) (+ last_num_init 1)))))
                                                                    (or 
                                                                    (ite (= temp___611 35)
                                                                    true
                                                                    false) 
                                                                    (ite (= temp___611 58)
                                                                    true
                                                                    false)))) 
                                                                  (let ((temp___612 
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    str) (+ last_num_init 2)))))
                                                                    (or 
                                                                    (let ((temp___615 temp___612))
                                                                    (and 
                                                                    (ite (<= 48 temp___615)
                                                                    true
                                                                    false) 
                                                                    (ite (<= temp___615 57)
                                                                    true
                                                                    false))) (or 
                                                                    (let ((temp___614 temp___612))
                                                                    (and 
                                                                    (ite (<= 97 temp___614)
                                                                    true
                                                                    false) 
                                                                    (ite (<= temp___614 102)
                                                                    true
                                                                    false))) 
                                                                    (let ((temp___613 temp___612))
                                                                    (and 
                                                                    (ite (<= 65 temp___613)
                                                                    true
                                                                    false) 
                                                                    (ite (<= temp___613 70)
                                                                    true
                                                                    false)))))))))
                                                                  (let ((last_num_based 
                                                                    (ite (= starts_as_based true)
                                                                    (last_hexa_ghost
                                                                    (let ((temp___607 
                                                                    (let ((temp___606 (+ last_num_init 2)))
                                                                    (of_array
                                                                    (to_array
                                                                    str)
                                                                    temp___606
                                                                    to__))))
                                                                    (let ((temp___608 
                                                                    (to_array
                                                                    temp___607)))
                                                                    (of_array
                                                                    temp___608
                                                                    (first
                                                                    temp___607)
                                                                    (last
                                                                    temp___607)))))
                                                                    last_num_init)))
                                                                    (let ((is_based (and (and starts_as_based 
                                                                    (bool_lt1
                                                                    last_num_based
                                                                    to__)) 
                                                                    (bool_eq9
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    str) (+ last_num_based 1)))
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    str) (+ last_num_init 1)))))))
                                                                    (let ((based_val 
                                                                    (ite 
                                                                    (and
                                                                    (= starts_as_based true)
                                                                    (not
                                                                    (= 
                                                                    (rec__ada___system__val_llu__impl__uns_option__overflow
                                                                    (us_split_discrs1
                                                                    init_val)) true)))
                                                                    (scan_based_number_ghost
                                                                    str
                                                                    (+ last_num_init 2)
                                                                    last_num_based
                                                                    (to_rep2
                                                                    (rec__ada___system__val_llu__impl__uns_option__value
                                                                    (us_split_fields1
                                                                    init_val)))
                                                                    #x0000000000000000)
                                                                    init_val)))
                                                                    (let ((first_exp 
                                                                    (ite (= is_based true)
                                                                    (+ last_num_based 2)
                                                                    (+ last_num_init 1))))
                                                                    (let ((expon 
                                                                    (ite (= 
                                                                    (starts_as_exponent_format_ghost
                                                                    (let ((temp___604 
                                                                    (of_array
                                                                    (to_array
                                                                    str)
                                                                    first_exp
                                                                    to__)))
                                                                    (let ((temp___605 
                                                                    (to_array
                                                                    temp___604)))
                                                                    (of_array
                                                                    temp___605
                                                                    (first
                                                                    temp___604)
                                                                    (last
                                                                    temp___604))))
                                                                    (of_int1
                                                                    0)) true)
                                                                    (scan_exponent_ghost
                                                                    (let ((temp___601 
                                                                    (of_array
                                                                    (to_array
                                                                    str)
                                                                    first_exp
                                                                    to__)))
                                                                    (let ((temp___602 
                                                                    (to_array
                                                                    temp___601)))
                                                                    (of_array
                                                                    temp___602
                                                                    (first
                                                                    temp___601)
                                                                    (last
                                                                    temp___601))))
                                                                    (of_int1
                                                                    0))
                                                                    0)))
                                                                    (let ((base 
                                                                    (ite (= is_based true)
                                                                    (to_rep2
                                                                    (rec__ada___system__val_llu__impl__uns_option__value
                                                                    (us_split_fields1
                                                                    init_val)))
                                                                    #x000000000000000A)))
                                                                    (let ((value 
                                                                    (ite (= is_based true)
                                                                    (to_rep2
                                                                    (rec__ada___system__val_llu__impl__uns_option__value
                                                                    (us_split_fields1
                                                                    based_val)))
                                                                    (to_rep2
                                                                    (rec__ada___system__val_llu__impl__uns_option__value
                                                                    (us_split_fields1
                                                                    init_val))))))
                                                                    (to_rep2
                                                                    (rec__ada___system__val_llu__impl__uns_option__value
                                                                    (us_split_fields1
                                                                    (exponent_unsigned_ghost
                                                                    value
                                                                    expon
                                                                    base))))))))))))))))))) :pattern (
      (scan_raw_unsigned_ghost
        str
        from
        to__)) ))))

;; raw_unsigned_last_ghost
(declare-fun raw_unsigned_last_ghost (us_t
  Int
  Int) Int)

;; raw_unsigned_last_ghost__function_guard
(declare-fun raw_unsigned_last_ghost__function_guard (Int
  us_t
  Int
  Int) Bool)

(declare-datatypes ((t195s__ref 0))
  (((t195s__refqtmk (t195s__content us_t)))))

;; t195s__ref_t195s__content__projection
(define-fun t195s__ref_t195s__content__projection ((a t195s__ref)) us_t
  (t195s__content a))

(declare-datatypes ((t198s__ref 0))
  (((t198s__refqtmk (t198s__content us_t)))))

;; t198s__ref_t198s__content__projection
(define-fun t198s__ref_t198s__content__projection ((a t198s__ref)) us_t
  (t198s__content a))

(declare-datatypes ((t201s__ref 0))
  (((t201s__refqtmk (t201s__content us_t)))))

;; t201s__ref_t201s__content__projection
(define-fun t201s__ref_t201s__content__projection ((a t201s__ref)) us_t
  (t201s__content a))

(declare-datatypes ((t204s__ref 0))
  (((t204s__refqtmk (t204s__content us_t)))))

;; t204s__ref_t204s__content__projection
(define-fun t204s__ref_t204s__content__projection ((a t204s__ref)) us_t
  (t204s__content a))

(declare-datatypes ((t207s__ref 0))
  (((t207s__refqtmk (t207s__content us_t)))))

;; t207s__ref_t207s__content__projection
(define-fun t207s__ref_t207s__content__projection ((a t207s__ref)) us_t
  (t207s__content a))

;; raw_unsigned_last_ghost__post_axiom
(assert
  (forall ((str us_t))
    (forall ((from Int) (to__ Int))
      (! (=>
           (and
             (and
               (and
                 (dynamic_invariant4 str true true true true)
                 (dynamic_invariant from true true true true))
               (dynamic_invariant to__ true true true true))
             (and
               (and
                 (and
                   (not (= (last str) 2147483647))
                   (and (<= (first str) from) (<= from (last str))))
                 (and (<= from to__) (<= to__ (last str))))
               (let ((temp___653 (to_rep (select (to_array str) from))))
                 (and (<= 48 temp___653) (<= temp___653 57)))))
           (let ((result (raw_unsigned_last_ghost str from to__)))
             (=>
               (raw_unsigned_last_ghost__function_guard result str from to__)
               (and
                 (and (<= from result) (<= result (+ to__ 1)))
                 (dynamic_invariant2 result true false true true))))) :pattern (
      (raw_unsigned_last_ghost
        str
        from
        to__)) ))))

;; raw_unsigned_last_ghost__def_axiom
(assert
  (forall ((str us_t))
    (forall ((from Int) (to__ Int))
      (! (=>
           (and
             (and
               (dynamic_invariant4 str true true true true)
               (dynamic_invariant from true true true true))
             (dynamic_invariant to__ true true true true))
           (and
             (forall ((str1 us_t) (from1 Int) (to__1 Int))
               (last_number_ghost__function_guard
                 (last_number_ghost
                   (let ((temp___677 (of_array (to_array str1) from1 to__1)))
                     (let ((temp___678 (to_array temp___677)))
                       (of_array
                         temp___678
                         (first temp___677)
                         (last temp___677)))))
                 (let ((temp___677 (of_array (to_array str1) from1 to__1)))
                   (let ((temp___678 (to_array temp___677)))
                     (of_array
                       temp___678
                       (first temp___677)
                       (last temp___677))))))
             (and
               (forall ((str1 us_t) (to__1 Int) (last_num_init Int))
                 (last_hexa_ghost__function_guard
                   (last_hexa_ghost
                     (let ((temp___668 (let ((temp___667 (+ last_num_init 2)))
                                         (of_array
                                           (to_array str1)
                                           temp___667
                                           to__1))))
                       (let ((temp___669 (to_array temp___668)))
                         (of_array
                           temp___669
                           (first temp___668)
                           (last temp___668)))))
                   (let ((temp___668 (let ((temp___667 (+ last_num_init 2)))
                                       (of_array
                                         (to_array str1)
                                         temp___667
                                         to__1))))
                     (let ((temp___669 (to_array temp___668)))
                       (of_array
                         temp___669
                         (first temp___668)
                         (last temp___668))))))
               (and
                 (forall ((str1 us_t) (to__1 Int) (first_exp Int))
                   (last_number_ghost__function_guard
                     (last_number_ghost
                       (let ((temp___656 (let ((temp___655 (+ first_exp 2)))
                                           (of_array
                                             (to_array str1)
                                             temp___655
                                             to__1))))
                         (let ((temp___657 (to_array temp___656)))
                           (of_array
                             temp___657
                             (first temp___656)
                             (last temp___656)))))
                     (let ((temp___656 (let ((temp___655 (+ first_exp 2)))
                                         (of_array
                                           (to_array str1)
                                           temp___655
                                           to__1))))
                       (let ((temp___657 (to_array temp___656)))
                         (of_array
                           temp___657
                           (first temp___656)
                           (last temp___656))))))
                 (and
                   (forall ((str1 us_t) (to__1 Int) (first_exp Int))
                     (last_number_ghost__function_guard
                       (last_number_ghost
                         (let ((temp___660 (let ((temp___659 (+ first_exp 1)))
                                             (of_array
                                               (to_array str1)
                                               temp___659
                                               to__1))))
                           (let ((temp___661 (to_array temp___660)))
                             (of_array
                               temp___661
                               (first temp___660)
                               (last temp___660)))))
                       (let ((temp___660 (let ((temp___659 (+ first_exp 1)))
                                           (of_array
                                             (to_array str1)
                                             temp___659
                                             to__1))))
                         (let ((temp___661 (to_array temp___660)))
                           (of_array
                             temp___661
                             (first temp___660)
                             (last temp___660))))))
                   (= (raw_unsigned_last_ghost str from to__) (let ((last_num_init 
                                                                (last_number_ghost
                                                                  (let ((temp___677 
                                                                    (of_array
                                                                    (to_array
                                                                    str)
                                                                    from
                                                                    to__)))
                                                                    (let ((temp___678 
                                                                    (to_array
                                                                    temp___677)))
                                                                    (of_array
                                                                    temp___678
                                                                    (first
                                                                    temp___677)
                                                                    (last
                                                                    temp___677)))))))
                                                                (let ((starts_as_based (and (and 
                                                                  (bool_lt1
                                                                    last_num_init
                                                                    (- to__ 1)) 
                                                                  (let ((temp___672 
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    str) (+ last_num_init 1)))))
                                                                    (or 
                                                                    (ite (= temp___672 35)
                                                                    true
                                                                    false) 
                                                                    (ite (= temp___672 58)
                                                                    true
                                                                    false)))) 
                                                                  (let ((temp___673 
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    str) (+ last_num_init 2)))))
                                                                    (or 
                                                                    (let ((temp___676 temp___673))
                                                                    (and 
                                                                    (ite (<= 48 temp___676)
                                                                    true
                                                                    false) 
                                                                    (ite (<= temp___676 57)
                                                                    true
                                                                    false))) (or 
                                                                    (let ((temp___675 temp___673))
                                                                    (and 
                                                                    (ite (<= 97 temp___675)
                                                                    true
                                                                    false) 
                                                                    (ite (<= temp___675 102)
                                                                    true
                                                                    false))) 
                                                                    (let ((temp___674 temp___673))
                                                                    (and 
                                                                    (ite (<= 65 temp___674)
                                                                    true
                                                                    false) 
                                                                    (ite (<= temp___674 70)
                                                                    true
                                                                    false)))))))))
                                                                  (let ((last_num_based 
                                                                    (ite (= starts_as_based true)
                                                                    (last_hexa_ghost
                                                                    (let ((temp___668 
                                                                    (let ((temp___667 (+ last_num_init 2)))
                                                                    (of_array
                                                                    (to_array
                                                                    str)
                                                                    temp___667
                                                                    to__))))
                                                                    (let ((temp___669 
                                                                    (to_array
                                                                    temp___668)))
                                                                    (of_array
                                                                    temp___669
                                                                    (first
                                                                    temp___668)
                                                                    (last
                                                                    temp___668)))))
                                                                    last_num_init)))
                                                                    (let ((is_based (and (and starts_as_based 
                                                                    (bool_lt1
                                                                    last_num_based
                                                                    to__)) 
                                                                    (bool_eq9
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    str) (+ last_num_based 1)))
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    str) (+ last_num_init 1)))))))
                                                                    (let ((first_exp 
                                                                    (ite (= is_based true)
                                                                    (+ last_num_based 2)
                                                                    (+ last_num_init 1))))
                                                                    (ite 
                                                                    (not
                                                                    (= 
                                                                    (starts_as_exponent_format_ghost
                                                                    (let ((temp___665 
                                                                    (of_array
                                                                    (to_array
                                                                    str)
                                                                    first_exp
                                                                    to__)))
                                                                    (let ((temp___666 
                                                                    (to_array
                                                                    temp___665)))
                                                                    (of_array
                                                                    temp___666
                                                                    (first
                                                                    temp___665)
                                                                    (last
                                                                    temp___665))))
                                                                    (of_int1
                                                                    0)) true))
                                                                    first_exp
                                                                    (ite 
                                                                    (let ((temp___664 
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    str) (+ first_exp 1)))))
                                                                    (or
                                                                    (= temp___664 45)
                                                                    (= temp___664 43)))
                                                                    (+ 
                                                                    (last_number_ghost
                                                                    (let ((temp___656 
                                                                    (let ((temp___655 (+ first_exp 2)))
                                                                    (of_array
                                                                    (to_array
                                                                    str)
                                                                    temp___655
                                                                    to__))))
                                                                    (let ((temp___657 
                                                                    (to_array
                                                                    temp___656)))
                                                                    (of_array
                                                                    temp___657
                                                                    (first
                                                                    temp___656)
                                                                    (last
                                                                    temp___656))))) 1)
                                                                    (+ 
                                                                    (last_number_ghost
                                                                    (let ((temp___660 
                                                                    (let ((temp___659 (+ first_exp 1)))
                                                                    (of_array
                                                                    (to_array
                                                                    str)
                                                                    temp___659
                                                                    to__))))
                                                                    (let ((temp___661 
                                                                    (to_array
                                                                    temp___660)))
                                                                    (of_array
                                                                    temp___661
                                                                    (first
                                                                    temp___660)
                                                                    (last
                                                                    temp___660))))) 1)))))))))))))) :pattern (
      (raw_unsigned_last_ghost
        str
        from
        to__)) ))))

;; uns_is_valid_int
(declare-fun uns_is_valid_int (Bool
  (_ BitVec 64)) Bool)

;; uns_is_valid_int__function_guard
(declare-fun uns_is_valid_int__function_guard (Bool
  Bool
  (_ BitVec 64)) Bool)

;; uns_is_valid_int__post_axiom
(assert true)

;; uns_is_valid_int__def_axiom
(assert
  (forall ((minus Bool))
    (forall ((uval (_ BitVec 64)))
      (! (=
           (= (uns_is_valid_int minus uval) true)
           (ite (= minus true)
             (bvule uval #x8000000000000000)
             (bvule uval #x7FFFFFFFFFFFFFFF))) :pattern ((uns_is_valid_int
                                                           minus
                                                           uval)) ))))

;; is_int_of_uns
(declare-fun is_int_of_uns (Bool
  (_ BitVec 64)
  Int) Bool)

;; is_int_of_uns__function_guard
(declare-fun is_int_of_uns__function_guard (Bool
  Bool
  (_ BitVec 64)
  Int) Bool)

;; is_int_of_uns__post_axiom
(assert
  (forall ((minus Bool) (uval (_ BitVec 64)))
    (uns_is_valid_int__function_guard
      (uns_is_valid_int minus uval)
      minus
      uval)))

;; is_int_of_uns__def_axiom
(assert
  (forall ((minus Bool))
    (forall ((uval (_ BitVec 64)))
      (forall ((val__ Int))
        (! (=
             (= (is_int_of_uns minus uval val__) true)
             (ite (and (= minus true) (= uval #x8000000000000000))
               (= val__ (- 9223372036854775808))
               (ite (= minus true)
                 (= val__ (- (bv2nat64 uval)))
                 (= val__ (bv2nat64 uval))))) :pattern ((is_int_of_uns
                                                          minus
                                                          uval
                                                          val__)) )))))

;; abs_uns_of_int__post_axiom
(assert
  (forall ((val__ Int))
    (! (=>
         (dynamic_invariant3 val__ true true true true)
         (let ((result (abs_uns_of_int val__)))
           (=>
             (abs_uns_of_int__function_guard result val__)
             (dynamic_invariant7 result true false true true)))) :pattern (
    (abs_uns_of_int
      val__)) )))

;; abs_uns_of_int__def_axiom
(assert
  (forall ((val__ Int))
    (! (=>
         (dynamic_invariant3 val__ true true true true)
         (= (abs_uns_of_int val__) (ite (= val__ (- 9223372036854775808))
                                     #x8000000000000000
                                     (ite (< val__ 0)
                                       (of_int (- val__))
                                       (of_int val__))))) :pattern ((abs_uns_of_int
                                                                    val__)) )))

;; slide_to_1
(declare-fun slide_to_1 (us_t) us_t)

;; slide_to_1__function_guard
(declare-fun slide_to_1__function_guard (us_t
  us_t) Bool)

(declare-datatypes ((tresS__ref 0))
  (((tresS__refqtmk (tresS__content us_t)))))

;; tresS__ref_tresS__content__projection
(define-fun tresS__ref_tresS__content__projection ((a tresS__ref)) us_t
  (tresS__content a))

;; slide_to_1__post_axiom
(assert
  (forall ((str us_t))
    (! (=>
         (dynamic_invariant4 str true true true true)
         (let ((result (slide_to_1 str)))
           (and
             (forall ((str1 us_t))
               (only_space_ghost__function_guard
                 (only_space_ghost str1 (first str1) (last str1))
                 str1
                 (first str1)
                 (last str1)))
             (=>
               (slide_to_1__function_guard result str)
               (and
                 (=
                   (= (only_space_ghost str (first str) (last str)) true)
                   (forall ((j Int))
                     (=>
                       (and (<= (first str) j) (<= j (last str)))
                       (= (to_rep
                            (select (to_array result) (+ (- j (first str)) 1))) 32))))
                 (dynamic_invariant4 result true false true true)))))) :pattern (
    (slide_to_1
      str)) )))

;; slide_to_1__def_axiom
(assert
  (forall ((str us_t))
    (! (=>
         (dynamic_invariant4 str true true true true)
         (= (slide_to_1 str) (let ((res (let ((temp___311 (slide
                                                            (to_array str)
                                                            (first str)
                                                            1)))
                                          (of_array
                                            temp___311
                                            1
                                            (length str)))))
                               (let ((temp___310 (to_array res)))
                                 (of_array temp___310 (first res) (last res)))))) :pattern (
    (slide_to_1
      str)) )))

;; slide_if_necessary__post_axiom
(assert
  (forall ((str us_t))
    (! (=>
         (dynamic_invariant4 str true true true true)
         (let ((result (slide_if_necessary str)))
           (and
             (forall ((str1 us_t))
               (only_space_ghost__function_guard
                 (only_space_ghost str1 (first str1) (last str1))
                 str1
                 (first str1)
                 (last str1)))
             (and
               (forall ((result1 us_t))
                 (only_space_ghost__function_guard
                   (only_space_ghost result1 (first result1) (last result1))
                   result1
                   (first result1)
                   (last result1)))
               (=>
                 (slide_if_necessary__function_guard result str)
                 (and
                   (=
                     (= (only_space_ghost str (first str) (last str)) true)
                     (= (only_space_ghost
                          result
                          (first result)
                          (last result)) true))
                   (dynamic_invariant4 result true false true true))))))) :pattern (
    (slide_if_necessary
      str)) )))

;; slide_if_necessary__def_axiom
(assert
  (forall ((str us_t))
    (! (=>
         (dynamic_invariant4 str true true true true)
         (and
           (forall ((str1 us_t))
             (slide_to_1__function_guard (slide_to_1 str1) str1))
           (= (slide_if_necessary str) (ite (= (last str) 2147483647)
                                         (slide_to_1 str)
                                         str)))) :pattern ((slide_if_necessary
                                                             str)) )))

(declare-datatypes ((t39s__ref 0))
  (((t39s__refqtmk (t39s__content us_t)))))

;; t39s__ref_t39s__content__projection
(define-fun t39s__ref_t39s__content__projection ((a t39s__ref)) us_t
  (t39s__content a))

;; is_integer_ghost__post_axiom
(assert
  (forall ((str us_t))
    (only_space_ghost__function_guard
      (only_space_ghost str (first str) (last str))
      str
      (first str)
      (last str))))

;; is_integer_ghost__def_axiom
(assert
  (forall ((str us_t))
    (! (and
         (forall ((str1 us_t))
           (first_non_space_ghost__function_guard
             (first_non_space_ghost str1 (first str1) (last str1))
             str1
             (first str1)
             (last str1)))
         (and
           (forall ((str1 us_t) (fst_num Int))
             (is_raw_unsigned_format_ghost__function_guard
               (is_raw_unsigned_format_ghost
                 (let ((temp___697 (let ((temp___696 (last str1)))
                                     (of_array
                                       (to_array str1)
                                       fst_num
                                       temp___696))))
                   (let ((temp___698 (to_array temp___697)))
                     (of_array
                       temp___698
                       (first temp___697)
                       (last temp___697)))))
               (let ((temp___697 (let ((temp___696 (last str1)))
                                   (of_array
                                     (to_array str1)
                                     fst_num
                                     temp___696))))
                 (let ((temp___698 (to_array temp___697)))
                   (of_array temp___698 (first temp___697) (last temp___697))))))
           (and
             (forall ((str1 us_t) (fst_num Int))
               (raw_unsigned_overflows_ghost__function_guard
                 (raw_unsigned_overflows_ghost str1 fst_num (last str1))
                 str1
                 fst_num
                 (last str1)))
             (and
               (forall ((str1 us_t) (fst_num Int))
                 (scan_raw_unsigned_ghost__function_guard
                   (scan_raw_unsigned_ghost str1 fst_num (last str1))
                   str1
                   fst_num
                   (last str1)))
               (and
                 (forall ((str1 us_t) (fst_num Int))
                   (scan_raw_unsigned_ghost__function_guard
                     (scan_raw_unsigned_ghost str1 fst_num (last str1))
                     str1
                     fst_num
                     (last str1)))
                 (and
                   (forall ((str1 us_t) (non_blank Int) (fst_num Int))
                     (uns_is_valid_int__function_guard
                       (uns_is_valid_int
                         (bool_eq9
                           (to_rep (select (to_array str1) non_blank))
                           45)
                         (scan_raw_unsigned_ghost str1 fst_num (last str1)))
                       (bool_eq9
                         (to_rep (select (to_array str1) non_blank))
                         45)
                       (scan_raw_unsigned_ghost str1 fst_num (last str1))))
                   (and
                     (forall ((str1 us_t) (fst_num Int))
                       (raw_unsigned_last_ghost__function_guard
                         (raw_unsigned_last_ghost str1 fst_num (last str1))
                         str1
                         fst_num
                         (last str1)))
                     (and
                       (forall ((str1 us_t) (fst_num Int))
                         (raw_unsigned_last_ghost__function_guard
                           (raw_unsigned_last_ghost str1 fst_num (last str1))
                           str1
                           fst_num
                           (last str1)))
                       (and
                         (forall ((str1 us_t) (fst_num Int))
                           (only_space_ghost__function_guard
                             (only_space_ghost
                               str1
                               (raw_unsigned_last_ghost
                                 str1
                                 fst_num
                                 (last str1))
                               (last str1))
                             str1
                             (raw_unsigned_last_ghost
                               str1
                               fst_num
                               (last str1))
                             (last str1)))
                         (=
                           (= (is_integer_ghost str) true)
                           (let ((non_blank (first_non_space_ghost
                                              str
                                              (first str)
                                              (last str))))
                             (let ((fst_num (ite (let ((temp___706 (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    str) non_blank))))
                                                   (or
                                                     (= temp___706 43)
                                                     (= temp___706 45)))
                                              (+ non_blank 1)
                                              non_blank)))
                               (and
                                 (and
                                   (and
                                     (= (is_raw_unsigned_format_ghost
                                          (let ((temp___697 (let ((temp___696 
                                                              (last
                                                                str)))
                                                              (of_array
                                                                (to_array
                                                                  str)
                                                                fst_num
                                                                temp___696))))
                                            (let ((temp___698 (to_array
                                                                temp___697)))
                                              (of_array
                                                temp___698
                                                (first temp___697)
                                                (last temp___697))))) true)
                                     (not
                                       (= (raw_unsigned_overflows_ghost
                                            str
                                            fst_num
                                            (last str)) true)))
                                   (= (uns_is_valid_int
                                        (bool_eq9
                                          (to_rep
                                            (select (to_array str) non_blank))
                                          45)
                                        (scan_raw_unsigned_ghost
                                          str
                                          fst_num
                                          (last str))) true))
                                 (= (only_space_ghost
                                      str
                                      (raw_unsigned_last_ghost
                                        str
                                        fst_num
                                        (last str))
                                      (last str)) true)))))))))))))) :pattern (
    (is_integer_ghost
      str)) )))

;; is_value_integer_ghost__post_axiom
(assert
  (and
    (forall ((str us_t))
      (only_space_ghost__function_guard
        (only_space_ghost str (first str) (last str))
        str
        (first str)
        (last str)))
    (forall ((str us_t))
      (is_integer_ghost__function_guard (is_integer_ghost str) str))))

;; is_value_integer_ghost__def_axiom
(assert
  (forall ((str us_t))
    (forall ((val__ Int))
      (! (and
           (forall ((str1 us_t))
             (first_non_space_ghost__function_guard
               (first_non_space_ghost str1 (first str1) (last str1))
               str1
               (first str1)
               (last str1)))
           (and
             (forall ((str1 us_t) (fst_num Int))
               (scan_raw_unsigned_ghost__function_guard
                 (scan_raw_unsigned_ghost str1 fst_num (last str1))
                 str1
                 fst_num
                 (last str1)))
             (and
               (forall ((str1 us_t) (val__1 Int) (non_blank Int) (uval (_ BitVec 64)))
                 (is_int_of_uns__function_guard
                   (is_int_of_uns
                     (bool_eq9
                       (to_rep (select (to_array str1) non_blank))
                       45)
                     uval
                     val__1)
                   (bool_eq9 (to_rep (select (to_array str1) non_blank)) 45)
                   uval
                   val__1))
               (=
                 (= (is_value_integer_ghost str val__) true)
                 (let ((non_blank (first_non_space_ghost
                                    str
                                    (first str)
                                    (last str))))
                   (= (is_int_of_uns
                        (bool_eq9
                          (to_rep (select (to_array str) non_blank))
                          45)
                        (scan_raw_unsigned_ghost
                          str
                          (ite (let ((temp___724 (to_rep
                                                   (select (to_array str) non_blank))))
                                 (or (= temp___724 43) (= temp___724 45)))
                            (+ non_blank 1)
                            non_blank)
                          (last str))
                        val__) true)))))) :pattern ((is_value_integer_ghost
                                                      str
                                                      val__)) ))))

;; value_integer__post_axiom
(assert
  (forall ((str us_t))
    (! (and
         (forall ((str1 us_t))
           (only_space_ghost__function_guard
             (only_space_ghost str1 (first str1) (last str1))
             str1
             (first str1)
             (last str1)))
         (and
           (forall ((str1 us_t))
             (slide_if_necessary__function_guard
               (slide_if_necessary str1)
               str1))
           (and
             (forall ((str1 us_t))
               (slide_if_necessary__function_guard
                 (slide_if_necessary str1)
                 str1))
             (and
               (forall ((str1 us_t))
                 (is_integer_ghost__function_guard
                   (is_integer_ghost (slide_if_necessary str1))
                   (slide_if_necessary str1)))
               (=>
                 (and
                   (dynamic_invariant4 str true true true true)
                   (and
                     (and
                       (not
                         (= (only_space_ghost str (first str) (last str)) true))
                       (not (= (length str) 2147483647)))
                     (= (is_integer_ghost (slide_if_necessary str)) true)))
                 (let ((result (value_integer str)))
                   (and
                     (forall ((str1 us_t))
                       (slide_if_necessary__function_guard
                         (slide_if_necessary str1)
                         str1))
                     (and
                       (forall ((str1 us_t))
                         (slide_if_necessary__function_guard
                           (slide_if_necessary str1)
                           str1))
                       (and
                         (forall ((str1 us_t) (result1 Int))
                           (is_value_integer_ghost__function_guard
                             (is_value_integer_ghost
                               (slide_if_necessary str1)
                               result1)
                             (slide_if_necessary str1)
                             result1))
                         (=>
                           (value_integer__function_guard result str)
                           (and
                             (= (is_value_integer_ghost
                                  (slide_if_necessary str)
                                  result) true)
                             (dynamic_invariant3 result true false true true)))))))))))) :pattern (
    (value_integer
      str)) )))

(declare-const str us_t)

;; dynamic_invariant
(define-fun dynamic_invariant11 ((temp___expr_296 us_t) (temp___is_init_292 Bool) (temp___skip_constant_293 Bool) (temp___do_toplevel_294 Bool) (temp___do_typ_inv_295 Bool)) Bool
  (=>
    (not (= temp___skip_constant_293 true))
    (and
      (and
        (dynamic_property
          1
          (length str)
          (first temp___expr_296)
          (last temp___expr_296))
        (= (first temp___expr_296) 1))
      (= (last temp___expr_296) (length str)))))

;; default_initial_assumption
(define-fun default_initial_assumption1 ((temp___expr_298 us_t) (temp___skip_top_level_299 Bool)) Bool
  (and (= (first temp___expr_298) 1) (= (last temp___expr_298) (length str))))

(declare-const big_10 Int)

;; big_10__def_axiom
(assert (= big_10 (bv2nat64 #x000000000000000A)))

;; to_rep
(define-fun to_rep3 ((x natural)) Int
  (naturalqtint x))

;; of_rep
(declare-fun of_rep3 (Int) natural)

;; inversion_axiom
(assert
  (forall ((x natural))
    (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
(assert
  (forall ((x natural)) (! (in_range2 (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
(assert
  (forall ((x Int))
    (! (=> (in_range2 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                                  (of_rep3 x))) )))

;; max_log10
(declare-fun max_log10 (tuple0) Int)

;; max_log10__function_guard
(declare-fun max_log10__function_guard (Int
  tuple0) Bool)

;; max_log10__post_axiom
(assert
  (forall ((us_void_param tuple0))
    (! (let ((result (max_log10 us_void_param)))
         (=>
           (max_log10__function_guard result us_void_param)
           (dynamic_invariant1 result true false true true))) :pattern (
    (max_log10
      us_void_param)) )))

;; max_log10__def_axiom
(assert
  (forall ((us_void_param tuple0))
    (! (= (max_log10 us_void_param) (let ((temp___249 64))
                                      (ite (= temp___249 8)
                                        2
                                        (ite (= temp___249 16)
                                          4
                                          (ite (= temp___249 32)
                                            9
                                            (ite (= temp___249 64)
                                              19
                                              (ite (= temp___249 128)
                                                38
                                                (to_rep3 dummy1)))))))) :pattern (
    (max_log10
      us_void_param)) )))

;; power
(declare-fun power1 (Int
  Int) Int)

;; Power_0
(assert (forall ((x Int)) (= (power1 x 0) 1)))

;; Power_s
(assert
  (forall ((x Int) (n Int))
    (=> (<= 0 n) (= (power1 x (+ n 1)) (* x (power1 x n))))))

;; Power_s_alt
(assert
  (forall ((x Int) (n Int))
    (=> (< 0 n) (= (power1 x n) (* x (power1 x (- n 1)))))))

;; Power_1
(assert (forall ((x Int)) (= (power1 x 1) x)))

;; Power_sum
(assert
  (forall ((x Int) (n Int) (m Int))
    (=>
      (<= 0 n)
      (=> (<= 0 m) (= (power1 x (+ n m)) (* (power1 x n) (power1 x m)))))))

;; Power_mult
(assert
  (forall ((x Int) (n Int) (m Int))
    (=>
      (<= 0 n)
      (=> (<= 0 m) (= (power1 x (* n m)) (power1 (power1 x n) m))))))

;; Power_comm1
(assert
  (forall ((x Int) (y Int))
    (=>
      (= (* x y) (* y x))
      (forall ((n Int))
        (=> (<= 0 n) (= (* (power1 x n) y) (* y (power1 x n))))))))

;; Power_comm2
(assert
  (forall ((x Int) (y Int))
    (=>
      (= (* x y) (* y x))
      (forall ((n Int))
        (=> (<= 0 n) (= (power1 (* x y) n) (* (power1 x n) (power1 y n))))))))

;; Power_non_neg
(assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (<= 0 y)) (<= 0 (power1 x y)))))

;; Power_pos
(assert
  (forall ((x Int) (y Int)) (=> (and (< 0 x) (<= 0 y)) (< 0 (power1 x y)))))

;; Power_monotonic
(assert
  (forall ((x Int) (n Int) (m Int))
    (=> (and (< 0 x) (and (<= 0 n) (<= n m))) (<= (power1 x n) (power1 x m)))))

;; width__post_axiom
(assert
  (forall ((lo (_ BitVec 64)) (hi (_ BitVec 64)))
    (! (=>
         (and
           (dynamic_invariant9 lo true true true true)
           (dynamic_invariant9 hi true true true true))
         (let ((result (width lo hi)))
           (and
             (max_log10__function_guard (max_log10 Tuple0) Tuple0)
             (=>
               (width__function_guard result lo hi)
               (and
                 (ite (bvugt lo hi)
                   (= result 0)
                   (and
                     (and
                       (and
                         (< 0 result)
                         (<= result (+ (max_log10 Tuple0) 2)))
                       (< (bv2nat64 lo) (power1 big_10 (- result 1))))
                     (< (bv2nat64 hi) (power1 big_10 (- result 1)))))
                 (dynamic_invariant1 result true false true true)))))) :pattern (
    (width
      lo
      hi)) )))

;; unsigned_width_ghost__def_axiom
(assert
  (and
    (width__function_guard
      (width #x0000000000000000 #xFFFFFFFFFFFFFFFF)
      #x0000000000000000
      #xFFFFFFFFFFFFFFFF)
    (= unsigned_width_ghost (width #x0000000000000000 #xFFFFFFFFFFFFFFFF))))

;; offset__def_axiom
(assert (= offset (ite (<= 0 v) 1 2)))

;; dynamic_invariant
(define-fun dynamic_invariant12 ((temp___expr_833 us_t) (temp___is_init_829 Bool) (temp___skip_constant_830 Bool) (temp___do_toplevel_831 Bool) (temp___do_typ_inv_832 Bool)) Bool
  (=>
    (not (= temp___skip_constant_830 true))
    (and
      (and
        (dynamic_property
          (to_rep1 s__first)
          (to_rep1 s__last)
          (first temp___expr_833)
          (last temp___expr_833))
        (= (first temp___expr_833) (to_rep1 s__first)))
      (= (last temp___expr_833) (to_rep1 s__last)))))

;; default_initial_assumption
(define-fun default_initial_assumption2 ((temp___expr_839 us_t) (temp___skip_top_level_840 Bool)) Bool
  (and
    (= (first temp___expr_839) (to_rep1 s__first))
    (= (last temp___expr_839) (to_rep1 s__last))))

(declare-const s (Array Int character))

(declare-const p Int)

;; Assume
(assert (dynamic_invariant1 unsigned_width_ghost true false true true))

;; Assume
(assert
  (width__function_guard
    (width #x0000000000000000 #xFFFFFFFFFFFFFFFF)
    #x0000000000000000
    #xFFFFFFFFFFFFFFFF))

;; Assume
(assert
  (= (width #x0000000000000000 #xFFFFFFFFFFFFFFFF) unsigned_width_ghost))

;; Assume
(assert (dynamic_invariant5 v true false true true))

;; Assume
(assert
  (dynamic_property
    1
    2147483647
    (first (of_array s (to_rep1 s__first) (to_rep1 s__last)))
    (last (of_array s (to_rep1 s__first) (to_rep1 s__last)))))

;; Assume
(assert (dynamic_invariant1 p false false true true))

;; Assume
(assert
  (and
    (and (= (to_rep1 s__first) 1) (< (to_rep1 s__last) 2147483647))
    (<= unsigned_width_ghost (to_rep1 s__last))))

;; Assert
(assert (= (to_rep1 s__first) 1))

(declare-const s1 (Array Int character))

(declare-const p1 Int)

(declare-const spark__branch Bool)

;; H
(assert (= spark__branch (ite (<= 0 v) true false)))

(declare-const o Int)

(declare-const o1 Int)

(declare-const o2 character)

;; H
(assert
  (ite (= spark__branch true)
    (and
      (= (to_rep1 s__last) o)
      (and
        (= (to_rep1 s__first) o1)
        (let ((temp___963 (of_array s o1 o)))
          (and
            (= (to_rep o2) 32)
            (and
              (and (<= (first temp___963) 1) (<= 1 (last temp___963)))
              (and
                (= s1 (to_array
                        (us_tqtmk
                          (store (to_array temp___963) 1 o2)
                          (rt temp___963))))
                (and (= p1 1) (< p1 (to_rep1 s__last)))))))))
    (and (and (= p1 0) (< p1 (- (to_rep1 s__last) 1))) (= s1 s))))

;; Assume
(assert (= p1 p_prev))

;; Assume
(assert (dynamic_invariant p_prev true false true true))

(declare-const ada___system__img_lli__impl__image_integer__B_1__offset__assume Int)

;; H
(assert
  (ite (<= 0 v)
    (= ada___system__img_lli__impl__image_integer__B_1__offset__assume 1)
    (= ada___system__img_lli__impl__image_integer__B_1__offset__assume 2)))

;; Assume
(assert
  (= ada___system__img_lli__impl__image_integer__B_1__offset__assume 
  offset))

;; Assume
(assert (dynamic_invariant2 offset true false true true))

(declare-const s2 (Array Int character))

(declare-const p2 Int)

;; H
(assert
  (= (let ((temp___775 (of_array
                         (to_array
                           (of_array s1 (to_rep1 s__first) (to_rep1 s__last)))
                         (to_rep1 s__first)
                         p1)))
       (let ((temp___773 (of_array
                           (to_array
                             (of_array
                               s2
                               (to_rep1 s__first)
                               (to_rep1 s__last)))
                           (to_rep1 s__first)
                           p1)))
         (bool_eq6
           (to_array temp___773)
           (first temp___773)
           (last temp___773)
           (to_array temp___775)
           (first temp___775)
           (last temp___775)))) true))

;; H
(assert
  (let ((offset1 (ite (<= 0 v) 1 2)))
    (and
      (abs_uns_of_int__function_guard (abs_uns_of_int v) v)
      (and
        (and
          (and
            (=
              (= (bool_eq9
                   (to_rep
                     (select (to_array
                               (of_array
                                 s2
                                 (to_rep1 s__first)
                                 (to_rep1 s__last))) (+ p1 1)))
                   45) true)
              (< v 0))
            (and (<= (+ p1 offset1) p2) (<= p2 (to_rep1 s__last))))
          (= (only_decimal_ghost
               (of_array s2 (to_rep1 s__first) (to_rep1 s__last))
               (+ p1 offset1)
               p2) true))
        (and
          (abs_uns_of_int__function_guard (abs_uns_of_int v) v)
          (= (bool_eq11
               (scan_based_number_ghost
                 (of_array s2 (to_rep1 s__first) (to_rep1 s__last))
                 (+ p1 offset1)
                 p2
                 #x000000000000000A
                 #x0000000000000000)
               (wrap_option (abs_uns_of_int v))) true))))))

;; H
(assert
  (dynamic_invariant4
    (of_array s2 (to_rep1 s__first) (to_rep1 s__last))
    true
    true
    true
    true))

;; H
(assert (dynamic_invariant1 p2 true true true true))

;; Assert
(assert (= (+ p_prev offset) 2))

;; Goal def'vc
;; File "s-imagei.ads", line 65, characters 0-0
(assert
  (not
  (let ((temp___850 (to_rep
                      (select (to_array
                                (of_array
                                  s2
                                  (to_rep1 s__first)
                                  (to_rep1 s__last))) 1))))
    (or (= temp___850 32) (= temp___850 45)))))

(check-sat)
(exit)
