(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTNIRA)
(set-info :source |
Generated by: Yannick Moy
Generated on: 2022-02-14
Generator: GNATprove
Application: GNAT light runtime library
Target solver: Alt-Ergo, CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)

;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
  (((Tuple0))))

(declare-sort us_private 0)

;; private__bool_eq
(declare-fun private__bool_eq (us_private
  us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
  (((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))

(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
  (((int__refqtmk (int__content Int)))))

(declare-datatypes ((bool__ref 0))
  (((bool__refqtmk (bool__content Bool)))))

(declare-datatypes ((us_fixed__ref 0))
  (((us_fixed__refqtmk (us_fixed__content Int)))))

(declare-datatypes ((real__ref 0))
  (((real__refqtmk (real__content Real)))))

(declare-datatypes ((us_private__ref 0))
  (((us_private__refqtmk (us_private__content us_private)))))

;; int__ref___projection
(define-fun int__ref___projection ((a int__ref)) Int
  (int__content a))

;; __fixed__ref___projection
(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int
  (us_fixed__content a))

;; bool__ref___projection
(define-fun bool__ref___projection ((a bool__ref)) Bool
  (bool__content a))

;; real__ref___projection
(define-fun real__ref___projection ((a real__ref)) Real
  (real__content a))

;; __private__ref___projection
(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

;; power
(declare-fun power (Int
  Int) Int)

;; Power_0
(assert (forall ((x Int)) (= (power x 0) 1)))

;; Power_s
(assert
  (forall ((x Int) (n Int))
    (=> (<= 0 n) (= (power x (+ n 1)) (* x (power x n))))))

;; Power_s_alt
(assert
  (forall ((x Int) (n Int))
    (=> (< 0 n) (= (power x n) (* x (power x (- n 1)))))))

;; Power_1
(assert (forall ((x Int)) (= (power x 1) x)))

;; Power_sum
(assert
  (forall ((x Int) (n Int) (m Int))
    (=>
      (<= 0 n)
      (=> (<= 0 m) (= (power x (+ n m)) (* (power x n) (power x m)))))))

;; Power_mult
(assert
  (forall ((x Int) (n Int) (m Int))
    (=> (<= 0 n) (=> (<= 0 m) (= (power x (* n m)) (power (power x n) m))))))

;; Power_comm1
(assert
  (forall ((x Int) (y Int))
    (=>
      (= (* x y) (* y x))
      (forall ((n Int))
        (=> (<= 0 n) (= (* (power x n) y) (* y (power x n))))))))

;; Power_comm2
(assert
  (forall ((x Int) (y Int))
    (=>
      (= (* x y) (* y x))
      (forall ((n Int))
        (=> (<= 0 n) (= (power (* x y) n) (* (power x n) (power y n))))))))

;; Power_non_neg
(assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (<= 0 y)) (<= 0 (power x y)))))

;; Power_pos
(assert
  (forall ((x Int) (y Int)) (=> (and (< 0 x) (<= 0 y)) (< 0 (power x y)))))

;; Power_monotonic
(assert
  (forall ((x Int) (n Int) (m Int))
    (=> (and (< 0 x) (and (<= 0 n) (<= n m))) (<= (power x n) (power x m)))))

;; abs
(define-fun abs1 ((x Int)) Int
  (ite (<= 0 x) x (- x)))

;; Abs_le
(assert
  (forall ((x Int) (y Int)) (= (<= (abs1 x) y) (and (<= (- y) x) (<= x y)))))

;; Abs_pos
(assert (forall ((x Int)) (<= 0 (abs1 x))))

;; div
(declare-fun div1 (Int
  Int) Int)

;; mod
(declare-fun mod1 (Int
  Int) Int)

;; Div_mod
(assert
  (forall ((x Int) (y Int))
    (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))

;; Div_bound
(assert
  (forall ((x Int) (y Int))
    (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))

;; Mod_bound
(assert
  (forall ((x Int) (y Int))
    (=>
      (not (= y 0))
      (and (< (- (abs1 y)) (mod1 x y)) (< (mod1 x y) (abs1 y))))))

;; Div_sign_pos
(assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))

;; Div_sign_neg
(assert
  (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))

;; Mod_sign_pos
(assert
  (forall ((x Int) (y Int))
    (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))

;; Mod_sign_neg
(assert
  (forall ((x Int) (y Int))
    (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))

;; Rounds_toward_zero
(assert
  (forall ((x Int) (y Int))
    (=> (not (= y 0)) (<= (abs1 (* (div1 x y) y)) (abs1 x)))))

;; Div_1
(assert (forall ((x Int)) (= (div1 x 1) x)))

;; Mod_1
(assert (forall ((x Int)) (= (mod1 x 1) 0)))

;; Div_inf
(assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))

;; Mod_inf
(assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))

;; Div_mult
(assert
  (forall ((x Int) (y Int) (z Int))
    (! (=>
         (and (< 0 x) (and (<= 0 y) (<= 0 z)))
         (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1
                                                                  (+ (* x y) z)
                                                                  x)) )))

;; Mod_mult
(assert
  (forall ((x Int) (y Int) (z Int))
    (! (=>
         (and (< 0 x) (and (<= 0 y) (<= 0 z)))
         (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1
                                                            (+ (* x y) z)
                                                            x)) )))

;; Div_unique
(assert
  (forall ((x Int) (y Int) (q Int))
    (=>
      (< 0 y)
      (=> (and (<= (* q y) x) (< x (+ (* q y) y))) (= (div x y) q)))))

;; Div_bound
(assert
  (forall ((x Int) (y Int))
    (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div x y)) (<= (div x y) x)))))

;; Div_inf
(assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div x y) 0))))

;; Div_inf_neg
(assert
  (forall ((x Int) (y Int))
    (=> (and (< 0 x) (<= x y)) (= (div (- x) y) (- 1)))))

;; Mod_0
(assert (forall ((y Int)) (=> (not (= y 0)) (= (mod 0 y) 0))))

;; Div_1_left
(assert (forall ((y Int)) (=> (< 1 y) (= (div 1 y) 0))))

;; Div_minus1_left
(assert (forall ((y Int)) (=> (< 1 y) (= (div (- 1) y) (- 1)))))

;; Mod_1_left
(assert (forall ((y Int)) (=> (< 1 y) (= (mod 1 y) 1))))

;; Mod_minus1_left
(assert
  (forall ((y Int))
    (! (=> (< 1 y) (= (mod (- 1) y) (- y 1))) :pattern ((mod (- 1) y)) )))

;; Div_mult
(assert
  (forall ((x Int) (y Int) (z Int))
    (! (=> (< 0 x) (= (div (+ (* x y) z) x) (+ y (div z x)))) :pattern ((div (+ (* x y) z) x)) )))

;; Mod_mult
(assert
  (forall ((x Int) (y Int) (z Int))
    (! (=> (< 0 x) (= (mod (+ (* x y) z) x) (mod z x))) :pattern ((mod (+ (* x y) z) x)) )))

;; mod
(define-fun mod2 ((x Int) (y Int)) Int
  (ite (or (and (< 0 x) (< 0 y)) (and (< x 0) (< y 0)))
    (mod1 x y)
    (ite (= (mod1 x y) 0) 0 (+ (mod1 x y) y))))

;; nth
(declare-fun nth ((_ BitVec 128)
  Int) Bool)

;; lsr
(declare-fun lsr ((_ BitVec 128)
  Int) (_ BitVec 128))

;; asr
(declare-fun asr ((_ BitVec 128)
  Int) (_ BitVec 128))

;; lsl
(declare-fun lsl ((_ BitVec 128)
  Int) (_ BitVec 128))

;; rotate_right
(declare-fun rotate_right1 ((_ BitVec 128)
  Int) (_ BitVec 128))

;; rotate_left
(declare-fun rotate_left1 ((_ BitVec 128)
  Int) (_ BitVec 128))

;; pow2
(declare-fun pow2 (Int) Int)

(declare-const two_power_size_minus_one Int)

;; two_power_size_minus_one_val
(assert (= two_power_size_minus_one (pow2 (- 128 1))))

;; to_int
(define-fun to_int1 ((x (_ BitVec 128))) Int
  (ite (bvsge x (_ bv0 128))
    (bv2nat x)
    (- (- 340282366920938463463374607431768211456 (bv2nat x)))))

;; uint_in_range
(define-fun uint_in_range ((i Int)) Bool
  (and (<= 0 i) (<= i 340282366920938463463374607431768211455)))

;; lsr_bv_is_lsr
(assert
  (forall ((x (_ BitVec 128)) (n (_ BitVec 128)))
    (= (bvlshr x n) (lsr x (bv2nat n)))))

;; asr_bv_is_asr
(assert
  (forall ((x (_ BitVec 128)) (n (_ BitVec 128)))
    (= (bvashr x n) (asr x (bv2nat n)))))

;; lsl_bv_is_lsl
(assert
  (forall ((x (_ BitVec 128)) (n (_ BitVec 128)))
    (= (bvshl x n) (lsl x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
(assert
  (forall ((v (_ BitVec 128)) (n (_ BitVec 128)))
    (= (bvor (bvshl v (bvurem n (_ bv128 128))) (bvlshr v (bvsub (_ bv128 128) (bvurem n (_ bv128 128))))) 
    (rotate_left1
      v
      (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
(assert
  (forall ((v (_ BitVec 128)) (n (_ BitVec 128)))
    (= (bvor (bvlshr v (bvurem n (_ bv128 128))) (bvshl v (bvsub (_ bv128 128) (bvurem n (_ bv128 128))))) 
    (rotate_right1
      v
      (bv2nat n)))))

;; nth_bv
(declare-fun nth_bv ((_ BitVec 128)
  (_ BitVec 128)) Bool)

;; nth_bv_def
(assert
  (forall ((x (_ BitVec 128)) (i (_ BitVec 128)))
    (=
      (= (nth_bv x i) true)
      (not
        (= (bvand (bvlshr x i) #x00000000000000000000000000000001) #x00000000000000000000000000000000)))))

;; Nth_bv_is_nth
(assert
  (forall ((x (_ BitVec 128)) (i (_ BitVec 128)))
    (= (nth x (bv2nat i)) (nth_bv x i))))

;; Nth_bv_is_nth2
(assert
  (forall ((x (_ BitVec 128)) (i Int))
    (=>
      (and (<= 0 i) (< i 340282366920938463463374607431768211456))
      (= (nth_bv x ((_ int2bv 128) i)) (nth x i)))))

;; eq_sub_bv
(declare-fun eq_sub_bv ((_ BitVec 128)
  (_ BitVec 128)
  (_ BitVec 128)
  (_ BitVec 128)) Bool)

;; eq_sub_bv_def
(assert
  (forall ((a (_ BitVec 128)) (b (_ BitVec 128)) (i (_ BitVec 128)) (n (_ BitVec 128)))
    (let ((mask (bvshl (bvsub (bvshl #x00000000000000000000000000000001 n) #x00000000000000000000000000000001) i)))
      (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))

;; eq_sub
(define-fun eq_sub ((a (_ BitVec 128)) (b (_ BitVec 128)) (i Int) (n Int)) Bool
  (forall ((j Int))
    (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

;; eq_sub_equiv
(assert
  (forall ((a (_ BitVec 128)) (b (_ BitVec 128)) (i (_ BitVec 128)) (n (_ BitVec 128)))
    (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))

(declare-datatypes ((t__ref 0))
  (((t__refqtmk (t__content (_ BitVec 128))))))

;; bool_eq
(define-fun bool_eq ((x (_ BitVec 128)) (y (_ BitVec 128))) Bool
  (ite (= x y) true false))

;; bool_ne
(define-fun bool_ne ((x (_ BitVec 128)) (y (_ BitVec 128))) Bool
  (ite (not (= x y)) true false))

;; bool_lt
(define-fun bool_lt ((x (_ BitVec 128)) (y (_ BitVec 128))) Bool
  (ite (bvult x y) true false))

;; bool_le
(define-fun bool_le ((x (_ BitVec 128)) (y (_ BitVec 128))) Bool
  (ite (bvule x y) true false))

;; bool_gt
(define-fun bool_gt ((x (_ BitVec 128)) (y (_ BitVec 128))) Bool
  (ite (bvugt x y) true false))

;; bool_ge
(define-fun bool_ge ((x (_ BitVec 128)) (y (_ BitVec 128))) Bool
  (ite (bvuge x y) true false))

;; power
(declare-fun power1 ((_ BitVec 128)
  Int) (_ BitVec 128))

;; Power_0
(assert
  (forall ((x (_ BitVec 128)))
    (= (power1 x 0) #x00000000000000000000000000000001)))

;; Power_1
(assert (forall ((x (_ BitVec 128))) (= (power1 x 1) x)))

;; Power_s
(assert
  (forall ((x (_ BitVec 128)) (n Int))
    (=> (<= 0 n) (= (power1 x (+ n 1)) (bvmul x (power1 x n))))))

;; Power_s_alt
(assert
  (forall ((x (_ BitVec 128)) (n Int))
    (=> (< 0 n) (= (power1 x n) (bvmul x (power1 x (- n 1)))))))

;; Power_sum
(assert
  (forall ((x (_ BitVec 128)) (n Int) (m Int))
    (=>
      (<= 0 n)
      (=> (<= 0 m) (= (power1 x (+ n m)) (bvmul (power1 x n) (power1 x m)))))))

;; Power_mult
(assert
  (forall ((x (_ BitVec 128)) (n Int) (m Int))
    (=>
      (<= 0 n)
      (=> (<= 0 m) (= (power1 x (* n m)) (power1 (power1 x n) m))))))

;; Power_mult2
(assert
  (forall ((x (_ BitVec 128)) (y (_ BitVec 128)) (n Int))
    (=>
      (<= 0 n)
      (= (power1 (bvmul x y) n) (bvmul (power1 x n) (power1 y n))))))

;; bv_min
(define-fun bv_min ((x (_ BitVec 128)) (y (_ BitVec 128))) (_ BitVec 128)
  (ite (bvule x y) x y))

;; bv_max
(define-fun bv_max ((x (_ BitVec 128)) (y (_ BitVec 128))) (_ BitVec 128)
  (ite (bvule x y) y x))

;; min
(define-fun min ((x Int) (y Int)) Int
  (ite (<= x y) x y))

;; max
(define-fun max ((x Int) (y Int)) Int
  (ite (<= x y) y x))

;; Min_r
(assert (forall ((x Int) (y Int)) (=> (<= y x) (= (min x y) y))))

;; Max_l
(assert (forall ((x Int) (y Int)) (=> (<= y x) (= (max x y) x))))

;; Min_comm
(assert (forall ((x Int) (y Int)) (= (min x y) (min y x))))

;; Max_comm
(assert (forall ((x Int) (y Int)) (= (max x y) (max y x))))

;; Min_assoc
(assert
  (forall ((x Int) (y Int) (z Int)) (= (min (min x y) z) (min x (min y z)))))

;; Max_assoc
(assert
  (forall ((x Int) (y Int) (z Int)) (= (max (max x y) z) (max x (max y z)))))

;; bv_min_to_uint
(assert
  (forall ((x (_ BitVec 128)) (y (_ BitVec 128)))
    (= (bv2nat (bv_min x y)) (min (bv2nat x) (bv2nat y)))))

;; bv_max_to_uint
(assert
  (forall ((x (_ BitVec 128)) (y (_ BitVec 128)))
    (= (bv2nat (bv_max x y)) (max (bv2nat x) (bv2nat y)))))

;; uc_of_int
(define-fun uc_of_int ((x Int)) (_ BitVec 128)
  (ite (<= 0 x) ((_ int2bv 128) x) (bvneg ((_ int2bv 128) (- x)))))

;; uc_to_int
(define-fun uc_to_int ((x (_ BitVec 128))) Int
  (ite (= (bool_lt x ((_ int2bv 128) two_power_size_minus_one)) true)
    (bv2nat x)
    (- (bv2nat (bvneg x)))))

;; bool_eq
(define-fun bool_eq1 ((x Bool) (y Bool)) Bool
  (ite (= x y) true false))

;; to_int
(define-fun to_int2 ((b Bool)) Int
  (ite (= b true) 1 0))

;; of_int
(define-fun of_int ((i Int)) Bool
  (ite (= i 0) false true))

;; in_range
(define-fun in_range ((x Int)) Bool
  (or (= x 0) (= x 1)))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

;; integer'int
(declare-fun integerqtint (integer) Int)

;; integer'axiom
(assert
  (forall ((i integer))
    (and
      (<= (- 2147483648) (integerqtint i))
      (<= (integerqtint i) 2147483647))))

;; in_range
(define-fun in_range1 ((x Int)) Bool
  (and (<= (- 2147483648) x) (<= x 2147483647)))

;; bool_eq
(define-fun bool_eq2 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

;; user_eq
(declare-fun user_eq (integer
  integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
  (((integer__refqtmk (integer__content integer)))))

;; integer__ref_integer__content__projection
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer
  (integer__content a))

(declare-sort natural 0)

;; natural'int
(declare-fun naturalqtint (natural) Int)

;; natural'axiom
(assert
  (forall ((i natural))
    (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

;; in_range
(define-fun in_range2 ((x Int)) Bool
  (and (<= 0 x) (<= x 2147483647)))

;; bool_eq
(define-fun bool_eq3 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

;; user_eq
(declare-fun user_eq1 (natural
  natural) Bool)

(declare-const dummy1 natural)

(declare-datatypes ((natural__ref 0))
  (((natural__refqtmk (natural__content natural)))))

;; natural__ref_natural__content__projection
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural
  (natural__content a))

;; dynamic_invariant
(define-fun dynamic_invariant ((temp___expr_46 Int) (temp___is_init_42 Bool) (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool) (temp___do_typ_inv_45 Bool)) Bool
  (=>
    (or (= temp___is_init_42 true) (<= 0 2147483647))
    (in_range2 temp___expr_46)))

(declare-sort positive 0)

;; positive'int
(declare-fun positiveqtint (positive) Int)

;; positive'axiom
(assert
  (forall ((i positive))
    (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

;; in_range
(define-fun in_range3 ((x Int)) Bool
  (and (<= 1 x) (<= x 2147483647)))

;; bool_eq
(define-fun bool_eq4 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

;; user_eq
(declare-fun user_eq2 (positive
  positive) Bool)

(declare-const dummy2 positive)

(declare-datatypes ((positive__ref 0))
  (((positive__refqtmk (positive__content positive)))))

;; positive__ref_positive__content__projection
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive
  (positive__content a))

(declare-sort character 0)

;; in_range
(define-fun in_range4 ((x Int)) Bool
  (and (<= 0 x) (<= x 255)))

;; bool_eq
(define-fun bool_eq5 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

;; user_eq
(declare-fun user_eq3 (character
  character) Bool)

(declare-const dummy3 character)

(declare-datatypes ((character__ref 0))
  (((character__refqtmk (character__content character)))))

;; character__ref_character__content__projection
(define-fun character__ref_character__content__projection ((a character__ref)) character
  (character__content a))

;; to_rep
(declare-fun to_rep (character) Int)

;; of_rep
(declare-fun of_rep (Int) character)

;; inversion_axiom
(assert
  (forall ((x character))
    (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
(assert
  (forall ((x character)) (! (in_range4 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
(assert
  (forall ((x Int))
    (! (=> (in_range4 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                                (of_rep x))) )))

(declare-datatypes ((map__ref 0))
  (((map__refqtmk (map__content (Array Int character))))))

;; slide
(declare-fun slide ((Array Int character)
  Int
  Int) (Array Int character))

;; slide_eq
(assert
  (forall ((a (Array Int character)))
    (forall ((first Int))
      (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
(assert
  (forall ((a (Array Int character)))
    (forall ((old_first Int))
      (forall ((new_first Int))
        (forall ((i Int))
          (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
          (slide
            a
            old_first
            new_first) i)) ))))))

;; const
(declare-fun const1 (character) (Array Int character))

;; const_def
(assert
  (forall ((v character))
    (forall ((i Int))
      (! (= (select (const1 v) i) v) :pattern ((select (const1 v) i)) ))))

;; bool_eq
(define-fun bool_eq6 ((a (Array Int character)) (a__first Int) (a__last Int) (b (Array Int character)) (b__first Int) (b__last Int)) Bool
  (ite (and
         (ite (<= a__first a__last)
           (and
             (<= b__first b__last)
             (= (- a__last a__first) (- b__last b__first)))
           (< b__last b__first))
         (forall ((temp___idx_105 Int))
           (=>
             (and (<= a__first temp___idx_105) (<= temp___idx_105 a__last))
             (= (to_rep (select a temp___idx_105)) (to_rep
                                                     (select b (+ (- b__first a__first) temp___idx_105)))))))
    true
    false))

;; bool_eq_rev
(assert
  (forall ((a (Array Int character)) (b (Array Int character)))
    (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
      (=>
        (= (bool_eq6 b b__first b__last a a__first a__last) true)
        (and
          (ite (<= a__first a__last)
            (and
              (<= b__first b__last)
              (= (- a__last a__first) (- b__last b__first)))
            (< b__last b__first))
          (forall ((temp___idx_105 Int))
            (=>
              (and (<= a__first temp___idx_105) (<= temp___idx_105 a__last))
              (= (to_rep (select a temp___idx_105)) (to_rep
                                                      (select b (+ (- b__first a__first) temp___idx_105)))))))))))

;; to_rep
(define-fun to_rep1 ((x integer)) Int
  (integerqtint x))

;; of_rep
(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
(assert
  (forall ((x integer))
    (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
(assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
(assert
  (forall ((x Int))
    (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                                  (of_rep1 x))) )))

(declare-datatypes ((t 0))
  (((tqtmk (rec__first integer)(rec__last integer)))))

;; mk
(declare-fun mk (Int
  Int) t)

;; mk_def
(assert
  (forall ((f Int) (l Int))
    (! (=>
         (in_range1 f)
         (=>
           (in_range1 l)
           (and
             (= (to_rep1 (rec__first (mk f l))) f)
             (= (to_rep1 (rec__last (mk f l))) l)))) :pattern ((mk f l)) )))

;; dynamic_property
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool
  (and
    (in_range1 low)
    (and
      (in_range1 high)
      (=> (<= low high) (and (in_range3 low) (in_range3 high))))))

(declare-datatypes ((us_t 0))
  (((us_tqtmk (elts (Array Int character))(rt t)))))

;; to_array
(define-fun to_array ((a us_t)) (Array Int character)
  (elts a))

;; of_array
(define-fun of_array ((a (Array Int character)) (f Int) (l Int)) us_t
  (us_tqtmk a (mk f l)))

;; first
(define-fun first ((a us_t)) Int
  (to_rep1 (rec__first (rt a))))

;; last
(define-fun last ((a us_t)) Int
  (to_rep1 (rec__last (rt a))))

;; length
(define-fun length ((a us_t)) Int
  (ite (<= (first a) (last a)) (+ (- (last a) (first a)) 1) 0))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
(assert (<= 0 value__size))

;; object__size_axiom
(assert (<= 0 object__size))

;; component__size_axiom
(assert (<= 0 component__size))

;; alignment_axiom
(assert (<= 0 alignment))

;; bool_eq
(define-fun bool_eq7 ((x us_t) (y us_t)) Bool
  (bool_eq6
    (elts x)
    (to_rep1 (rec__first (rt x)))
    (to_rep1 (rec__last (rt x)))
    (elts y)
    (to_rep1 (rec__first (rt y)))
    (to_rep1 (rec__last (rt y)))))

;; user_eq
(declare-fun user_eq4 (us_t
  us_t) Bool)

(declare-const dummy4 us_t)

(declare-datatypes ((string____ref 0))
  (((string____refqtmk (string____content us_t)))))

;; string____ref_string____content__projection
(define-fun string____ref_string____content__projection ((a string____ref)) us_t
  (string____content a))

;; dynamic_invariant
(define-fun dynamic_invariant1 ((temp___expr_110 us_t) (temp___is_init_106 Bool) (temp___skip_constant_107 Bool) (temp___do_toplevel_108 Bool) (temp___do_typ_inv_109 Bool)) Bool
  (=>
    (not (= temp___skip_constant_107 true))
    (dynamic_property
      1
      2147483647
      (first temp___expr_110)
      (last temp___expr_110))))

;; bool_eq
(declare-fun bool_eq8 (Int
  Int) Bool)

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
(assert (<= 0 value__size1))

;; object__size_axiom
(assert (<= 0 object__size1))

;; alignment_axiom
(assert (<= 0 alignment1))

;; user_eq
(declare-fun user_eq5 (Int
  Int) Bool)

(declare-const dummy5 Int)

(declare-datatypes ((big_integer__ref 0))
  (((big_integer__refqtmk (big_integer__content Int)))))

;; big_integer__ref_big_integer__content__projection
(define-fun big_integer__ref_big_integer__content__projection ((a big_integer__ref)) Int
  (big_integer__content a))

(declare-datatypes ((valid_big_integer__ref 0))
  (((valid_big_integer__refqtmk (valid_big_integer__content Int)))))

;; valid_big_integer__ref_valid_big_integer__content__projection
(define-fun valid_big_integer__ref_valid_big_integer__content__projection 
  ((a valid_big_integer__ref)) Int
  (valid_big_integer__content a))

(declare-const unsigned_width_ghost Int)

(declare-sort long_long_long_unsigned 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 128))

;; bool_eq
(define-fun bool_eq9 ((x (_ BitVec 128)) (y (_ BitVec 128))) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE5 ((_ BitVec 128)) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) (_ BitVec 128))

;; user_eq
(declare-fun user_eq6 (long_long_long_unsigned
  long_long_long_unsigned) Bool)

(declare-const dummy6 long_long_long_unsigned)

(declare-datatypes ((long_long_long_unsigned__ref 0))
  (((long_long_long_unsigned__refqtmk
    (long_long_long_unsigned__content long_long_long_unsigned)))))

;; long_long_long_unsigned__ref_long_long_long_unsigned__content__3__projection
(define-fun long_long_long_unsigned__ref_long_long_long_unsigned__content__3__projection 
  ((a long_long_long_unsigned__ref)) long_long_long_unsigned
  (long_long_long_unsigned__content a))

;; to_rep
(declare-fun to_rep2 (long_long_long_unsigned) (_ BitVec 128))

;; of_rep
(declare-fun of_rep2 ((_ BitVec 128)) long_long_long_unsigned)

;; inversion_axiom
(assert
  (forall ((x long_long_long_unsigned))
    (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
(assert true)

;; coerce_axiom
(assert
  (forall ((x (_ BitVec 128)))
    (! (= (to_rep2 (of_rep2 x)) x) :pattern ((to_rep2 (of_rep2 x))) )))

;; to_int
(define-fun to_int3 ((x long_long_long_unsigned)) Int
  (bv2nat (to_rep2 x)))

;; range_int_axiom
(assert
  (forall ((x long_long_long_unsigned))
    (! (uint_in_range (to_int3 x)) :pattern ((to_int3 x)) )))

(declare-datatypes ((us_split_discrs 0))
  (((us_split_discrsqtmk
    (rec__ada___system__val_lllu__impl__uns_option__overflow Bool)))))

;; __split_discrs_rec__ada___system__val_lllu__impl__uns_option__overflow__projection
(define-fun us_split_discrs_rec__ada___system__val_lllu__impl__uns_option__overflow__projection 
  ((a us_split_discrs)) Bool
  (rec__ada___system__val_lllu__impl__uns_option__overflow a))

(declare-datatypes ((us_split_discrs__ref 0))
  (((us_split_discrs__refqtmk (us_split_discrs__content us_split_discrs)))))

;; __split_discrs__ref___split_discrs__content__projection
(define-fun us_split_discrs__ref___split_discrs__content__projection 
  ((a us_split_discrs__ref)) us_split_discrs
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields 0))
  (((us_split_fieldsqtmk
    (rec__ada___system__val_lllu__impl__uns_option__value long_long_long_unsigned)))))

;; __split_fields_rec__ada___system__val_lllu__impl__uns_option__value__projection
(define-fun us_split_fields_rec__ada___system__val_lllu__impl__uns_option__value__projection 
  ((a us_split_fields)) long_long_long_unsigned
  (rec__ada___system__val_lllu__impl__uns_option__value a))

(declare-datatypes ((us_split_fields__ref 0))
  (((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))

;; __split_fields__ref___split_fields__content__projection
(define-fun us_split_fields__ref___split_fields__content__projection 
  ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
  (((us_repqtmk
    (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))

;; __rep___split_discrs__projection
(define-fun us_rep___split_discrs__projection ((a us_rep)) us_split_discrs
  (us_split_discrs1 a))

;; __rep___split_fields__projection
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields
  (us_split_fields1 a))

;; ada___system__val_lllu__impl__uns_option__value__pred
(define-fun ada___system__val_lllu__impl__uns_option__value__pred ((a us_rep)) Bool
  (= (to_int2
       (rec__ada___system__val_lllu__impl__uns_option__overflow
         (us_split_discrs1 a))) 0))

;; bool_eq
(define-fun bool_eq10 ((a us_rep) (b us_rep)) Bool
  (ite (and
         (= (to_int2
              (rec__ada___system__val_lllu__impl__uns_option__overflow
                (us_split_discrs1 a))) (to_int2
                                         (rec__ada___system__val_lllu__impl__uns_option__overflow
                                           (us_split_discrs1 b))))
         (=>
           (ada___system__val_lllu__impl__uns_option__value__pred a)
           (= (to_rep2
                (rec__ada___system__val_lllu__impl__uns_option__value
                  (us_split_fields1 a))) (to_rep2
                                           (rec__ada___system__val_lllu__impl__uns_option__value
                                             (us_split_fields1 b))))))
    true
    false))

;; in_range
(define-fun in_range5 ((rec__ada___system__val_lllu__impl__uns_option__overflow1 Bool) (a us_split_discrs)) Bool
  (= rec__ada___system__val_lllu__impl__uns_option__overflow1 (rec__ada___system__val_lllu__impl__uns_option__overflow
                                                                a)))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
(assert (<= 0 value__size2))

;; object__size_axiom
(assert (<= 0 object__size2))

;; alignment_axiom
(assert (<= 0 alignment2))

(declare-const ada___system__val_lllu__impl__uns_option__overflow__first__bit Int)

(declare-const ada___system__val_lllu__impl__uns_option__overflow__last__bit Int)

(declare-const ada___system__val_lllu__impl__uns_option__overflow__position Int)

;; ada___system__val_lllu__impl__uns_option__overflow__first__bit_axiom
(assert
  (<= 0 ada___system__val_lllu__impl__uns_option__overflow__first__bit))

;; ada___system__val_lllu__impl__uns_option__overflow__last__bit_axiom
(assert
  (< ada___system__val_lllu__impl__uns_option__overflow__first__bit ada___system__val_lllu__impl__uns_option__overflow__last__bit))

;; ada___system__val_lllu__impl__uns_option__overflow__position_axiom
(assert (<= 0 ada___system__val_lllu__impl__uns_option__overflow__position))

(declare-const ada___system__val_lllu__impl__uns_option__value__first__bit Int)

(declare-const ada___system__val_lllu__impl__uns_option__value__last__bit Int)

(declare-const ada___system__val_lllu__impl__uns_option__value__position Int)

;; ada___system__val_lllu__impl__uns_option__value__first__bit_axiom
(assert (<= 0 ada___system__val_lllu__impl__uns_option__value__first__bit))

;; ada___system__val_lllu__impl__uns_option__value__last__bit_axiom
(assert
  (< ada___system__val_lllu__impl__uns_option__value__first__bit ada___system__val_lllu__impl__uns_option__value__last__bit))

;; ada___system__val_lllu__impl__uns_option__value__position_axiom
(assert (<= 0 ada___system__val_lllu__impl__uns_option__value__position))

;; user_eq
(declare-fun user_eq7 (us_rep
  us_rep) Bool)

(declare-const dummy7 us_rep)

(declare-datatypes ((uns_option__ref 0))
  (((uns_option__refqtmk (uns_option__content us_rep)))))

;; uns_option__ref_uns_option__content__projection
(define-fun uns_option__ref_uns_option__content__projection ((a uns_option__ref)) us_rep
  (uns_option__content a))

;; scan_based_number_ghost
(declare-fun scan_based_number_ghost (us_t
  Int
  Int
  (_ BitVec 128)
  (_ BitVec 128)) us_rep)

;; scan_based_number_ghost__function_guard
(declare-fun scan_based_number_ghost__function_guard (us_rep
  us_t
  Int
  Int
  (_ BitVec 128)
  (_ BitVec 128)) Bool)

;; dynamic_invariant
(define-fun dynamic_invariant2 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool
  (=>
    (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647))
    (in_range1 temp___expr_18)))

;; only_hexa_ghost
(declare-fun only_hexa_ghost (us_t
  Int
  Int) Bool)

;; only_hexa_ghost__function_guard
(declare-fun only_hexa_ghost__function_guard (Bool
  us_t
  Int
  Int) Bool)

;; hexa_to_unsigned_ghost
(declare-fun hexa_to_unsigned_ghost (Int) (_ BitVec 128))

;; hexa_to_unsigned_ghost__function_guard
(declare-fun hexa_to_unsigned_ghost__function_guard ((_ BitVec 128)
  Int) Bool)

;; scan_overflows_ghost
(declare-fun scan_overflows_ghost ((_ BitVec 128)
  (_ BitVec 128)
  (_ BitVec 128)) Bool)

;; scan_overflows_ghost__function_guard
(declare-fun scan_overflows_ghost__function_guard (Bool
  (_ BitVec 128)
  (_ BitVec 128)
  (_ BitVec 128)) Bool)

;; default_initial_assumption
(define-fun default_initial_assumption ((temp___expr_238 us_rep) (temp___skip_top_level_239 Bool)) Bool
  (and
    (= (rec__ada___system__val_lllu__impl__uns_option__overflow
         (us_split_discrs1 temp___expr_238)) (of_int 0))
    (=>
      (ada___system__val_lllu__impl__uns_option__value__pred temp___expr_238)
      (= (to_rep2
           (rec__ada___system__val_lllu__impl__uns_option__value
             (us_split_fields1 temp___expr_238))) #x00000000000000000000000000000000))))

;; dynamic_invariant
(define-fun dynamic_invariant3 ((temp___expr_229 (_ BitVec 128)) (temp___is_init_225 Bool) (temp___skip_constant_226 Bool) (temp___do_toplevel_227 Bool) (temp___do_typ_inv_228 Bool)) Bool
  true)

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; value__size_axiom
(assert (<= 0 value__size3))

;; object__size_axiom
(assert (<= 0 object__size3))

;; alignment_axiom
(assert (<= 0 alignment3))

(declare-const ada___system__val_lllu__impl__uns_option__overflow__first__bit1 Int)

(declare-const ada___system__val_lllu__impl__uns_option__overflow__last__bit1 Int)

(declare-const ada___system__val_lllu__impl__uns_option__overflow__position1 Int)

;; ada___system__val_lllu__impl__uns_option__overflow__first__bit_axiom
(assert
  (<= 0 ada___system__val_lllu__impl__uns_option__overflow__first__bit1))

;; ada___system__val_lllu__impl__uns_option__overflow__last__bit_axiom
(assert
  (< ada___system__val_lllu__impl__uns_option__overflow__first__bit1 
  ada___system__val_lllu__impl__uns_option__overflow__last__bit1))

;; ada___system__val_lllu__impl__uns_option__overflow__position_axiom
(assert (<= 0 ada___system__val_lllu__impl__uns_option__overflow__position1))

(declare-const ada___system__val_lllu__impl__uns_option__value__first__bit1 Int)

(declare-const ada___system__val_lllu__impl__uns_option__value__last__bit1 Int)

(declare-const ada___system__val_lllu__impl__uns_option__value__position1 Int)

;; ada___system__val_lllu__impl__uns_option__value__first__bit_axiom
(assert (<= 0 ada___system__val_lllu__impl__uns_option__value__first__bit1))

;; ada___system__val_lllu__impl__uns_option__value__last__bit_axiom
(assert
  (< ada___system__val_lllu__impl__uns_option__value__first__bit1 ada___system__val_lllu__impl__uns_option__value__last__bit1))

;; ada___system__val_lllu__impl__uns_option__value__position_axiom
(assert (<= 0 ada___system__val_lllu__impl__uns_option__value__position1))

;; user_eq
(declare-fun user_eq8 (us_rep
  us_rep) Bool)

(declare-const dummy8 us_rep)

(declare-datatypes ((t128s__ref 0))
  (((t128s__refqtmk (t128s__content us_rep)))))

;; t128s__ref_t128s__content__projection
(define-fun t128s__ref_t128s__content__projection ((a t128s__ref)) us_rep
  (t128s__content a))

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const alignment4 Int)

;; value__size_axiom
(assert (<= 0 value__size4))

;; object__size_axiom
(assert (<= 0 object__size4))

;; alignment_axiom
(assert (<= 0 alignment4))

(declare-const ada___system__val_lllu__impl__uns_option__overflow__first__bit2 Int)

(declare-const ada___system__val_lllu__impl__uns_option__overflow__last__bit2 Int)

(declare-const ada___system__val_lllu__impl__uns_option__overflow__position2 Int)

;; ada___system__val_lllu__impl__uns_option__overflow__first__bit_axiom
(assert
  (<= 0 ada___system__val_lllu__impl__uns_option__overflow__first__bit2))

;; ada___system__val_lllu__impl__uns_option__overflow__last__bit_axiom
(assert
  (< ada___system__val_lllu__impl__uns_option__overflow__first__bit2 
  ada___system__val_lllu__impl__uns_option__overflow__last__bit2))

;; ada___system__val_lllu__impl__uns_option__overflow__position_axiom
(assert (<= 0 ada___system__val_lllu__impl__uns_option__overflow__position2))

(declare-const ada___system__val_lllu__impl__uns_option__value__first__bit2 Int)

(declare-const ada___system__val_lllu__impl__uns_option__value__last__bit2 Int)

(declare-const ada___system__val_lllu__impl__uns_option__value__position2 Int)

;; ada___system__val_lllu__impl__uns_option__value__first__bit_axiom
(assert (<= 0 ada___system__val_lllu__impl__uns_option__value__first__bit2))

;; ada___system__val_lllu__impl__uns_option__value__last__bit_axiom
(assert
  (< ada___system__val_lllu__impl__uns_option__value__first__bit2 ada___system__val_lllu__impl__uns_option__value__last__bit2))

;; ada___system__val_lllu__impl__uns_option__value__position_axiom
(assert (<= 0 ada___system__val_lllu__impl__uns_option__value__position2))

;; user_eq
(declare-fun user_eq9 (us_rep
  us_rep) Bool)

(declare-const dummy9 us_rep)

(declare-datatypes ((t129s__ref 0))
  (((t129s__refqtmk (t129s__content us_rep)))))

;; t129s__ref_t129s__content__projection
(define-fun t129s__ref_t129s__content__projection ((a t129s__ref)) us_rep
  (t129s__content a))

;; scan_based_number_ghost__def_axiom
(assert
  (forall ((str us_t))
    (forall ((from Int) (to__ Int))
      (forall ((base (_ BitVec 128)) (acc (_ BitVec 128)))
        (! (=>
             (and
               (and
                 (and
                   (and
                     (dynamic_invariant1 str true true true true)
                     (dynamic_invariant2 from true true true true))
                   (dynamic_invariant2 to__ true true true true))
                 (dynamic_invariant3 base true true true true))
               (dynamic_invariant3 acc true true true true))
             (and
               (forall ((str1 us_t) (from1 Int))
                 (hexa_to_unsigned_ghost__function_guard
                   (hexa_to_unsigned_ghost
                     (to_rep (select (to_array str1) from1)))
                   (to_rep (select (to_array str1) from1))))
               (and
                 (forall ((str1 us_t) (from1 Int))
                   (hexa_to_unsigned_ghost__function_guard
                     (hexa_to_unsigned_ghost
                       (to_rep (select (to_array str1) from1)))
                     (to_rep (select (to_array str1) from1))))
                 (= (scan_based_number_ghost str from to__ base acc) 
                 (ite (< to__ from)
                   (let ((temp___overflow_484 (of_int 0)))
                     (us_repqtmk
                       (us_split_discrsqtmk temp___overflow_484)
                       (us_split_fieldsqtmk (of_rep2 acc))))
                   (ite (= (to_rep (select (to_array str) from)) 95)
                     (scan_based_number_ghost str (+ from 1) to__ base acc)
                     (ite (= (scan_overflows_ghost
                               (hexa_to_unsigned_ghost
                                 (to_rep (select (to_array str) from)))
                               base
                               acc) true)
                       (let ((temp___overflow_485 (of_int 1)))
                         (us_repqtmk
                           (us_split_discrsqtmk temp___overflow_485)
                           (us_split_fieldsqtmk dummy6)))
                       (scan_based_number_ghost
                         str
                         (+ from 1)
                         to__
                         base
                         (bvadd (bvmul base acc) (hexa_to_unsigned_ghost
                                                   (to_rep
                                                     (select (to_array str) from)))))))))))) :pattern (
        (scan_based_number_ghost
          str
          from
          to__
          base
          acc)) )))))

;; only_decimal_ghost
(declare-fun only_decimal_ghost (us_t
  Int
  Int) Bool)

;; only_decimal_ghost__function_guard
(declare-fun only_decimal_ghost__function_guard (Bool
  us_t
  Int
  Int) Bool)

;; only_decimal_ghost__post_axiom
(assert true)

;; only_decimal_ghost__def_axiom
(assert
  (forall ((str us_t))
    (forall ((from Int) (to__ Int))
      (! (=
           (= (only_decimal_ghost str from to__) true)
           (forall ((j Int))
             (=>
               (and (<= from j) (<= j to__))
               (let ((temp___746 (to_rep (select (to_array str) j))))
                 (and (<= 48 temp___746) (<= temp___746 57)))))) :pattern (
      (only_decimal_ghost
        str
        from
        to__)) ))))

;; wrap_option
(declare-fun wrap_option ((_ BitVec 128)) us_rep)

;; wrap_option__function_guard
(declare-fun wrap_option__function_guard (us_rep
  (_ BitVec 128)) Bool)

(declare-const value__size5 Int)

(declare-const object__size5 Int)

(declare-const alignment5 Int)

;; value__size_axiom
(assert (<= 0 value__size5))

;; object__size_axiom
(assert (<= 0 object__size5))

;; alignment_axiom
(assert (<= 0 alignment5))

(declare-const ada___system__val_lllu__impl__uns_option__overflow__first__bit3 Int)

(declare-const ada___system__val_lllu__impl__uns_option__overflow__last__bit3 Int)

(declare-const ada___system__val_lllu__impl__uns_option__overflow__position3 Int)

;; ada___system__val_lllu__impl__uns_option__overflow__first__bit_axiom
(assert
  (<= 0 ada___system__val_lllu__impl__uns_option__overflow__first__bit3))

;; ada___system__val_lllu__impl__uns_option__overflow__last__bit_axiom
(assert
  (< ada___system__val_lllu__impl__uns_option__overflow__first__bit3 
  ada___system__val_lllu__impl__uns_option__overflow__last__bit3))

;; ada___system__val_lllu__impl__uns_option__overflow__position_axiom
(assert (<= 0 ada___system__val_lllu__impl__uns_option__overflow__position3))

(declare-const ada___system__val_lllu__impl__uns_option__value__first__bit3 Int)

(declare-const ada___system__val_lllu__impl__uns_option__value__last__bit3 Int)

(declare-const ada___system__val_lllu__impl__uns_option__value__position3 Int)

;; ada___system__val_lllu__impl__uns_option__value__first__bit_axiom
(assert (<= 0 ada___system__val_lllu__impl__uns_option__value__first__bit3))

;; ada___system__val_lllu__impl__uns_option__value__last__bit_axiom
(assert
  (< ada___system__val_lllu__impl__uns_option__value__first__bit3 ada___system__val_lllu__impl__uns_option__value__last__bit3))

;; ada___system__val_lllu__impl__uns_option__value__position_axiom
(assert (<= 0 ada___system__val_lllu__impl__uns_option__value__position3))

;; user_eq
(declare-fun user_eq10 (us_rep
  us_rep) Bool)

(declare-const dummy10 us_rep)

(declare-datatypes ((t134s__ref 0))
  (((t134s__refqtmk (t134s__content us_rep)))))

;; t134s__ref_t134s__content__projection
(define-fun t134s__ref_t134s__content__projection ((a t134s__ref)) us_rep
  (t134s__content a))

;; wrap_option__post_axiom
(assert true)

;; wrap_option__def_axiom
(assert
  (forall ((value (_ BitVec 128)))
    (! (=>
         (dynamic_invariant3 value true true true true)
         (= (wrap_option value) (let ((temp___overflow_750 (of_int 0)))
                                  (us_repqtmk
                                    (us_split_discrsqtmk temp___overflow_750)
                                    (us_split_fieldsqtmk (of_rep2 value)))))) :pattern (
    (wrap_option
      value)) )))

(declare-const unsigned_width_ghost1 Int)

;; uns_of_non_positive
(define-fun uns_of_non_positive ((t1 Int)) (_ BitVec 128)
  (ite (= t1 (- 170141183460469231731687303715884105728))
    #x80000000000000000000000000000000
    ((_ int2bv 128) (- t1))))

;; uns_of_non_positive__function_guard
(declare-fun uns_of_non_positive__function_guard ((_ BitVec 128)
  Int) Bool)

(declare-sort uns 0)

(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 128))

;; bool_eq
(define-fun bool_eq11 ((x (_ BitVec 128)) (y (_ BitVec 128))) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE6 ((_ BitVec 128)) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) (_ BitVec 128))

;; user_eq
(declare-fun user_eq11 (uns
  uns) Bool)

(declare-const dummy11 uns)

(declare-datatypes ((uns__ref 0))
  (((uns__refqtmk (uns__content uns)))))

;; uns__ref_uns__content__projection
(define-fun uns__ref_uns__content__projection ((a uns__ref)) uns
  (uns__content a))

;; dynamic_invariant
(define-fun dynamic_invariant4 ((temp___expr_276 (_ BitVec 128)) (temp___is_init_272 Bool) (temp___skip_constant_273 Bool) (temp___do_toplevel_274 Bool) (temp___do_typ_inv_275 Bool)) Bool
  true)

(declare-const t1 Int)

(declare-const s__first integer)

(declare-const s__last integer)

(declare-const big_10 Int)

(declare-datatypes ((big_positive__ref 0))
  (((big_positive__refqtmk (big_positive__content Int)))))

;; big_positive__ref_big_positive__content__projection
(define-fun big_positive__ref_big_positive__content__projection ((a big_positive__ref)) Int
  (big_positive__content a))

(declare-const s_init us_t)

(declare-const uns_t (_ BitVec 128))

(declare-const prev__attr__constrained Bool)

;; default_initial_assumption
(define-fun default_initial_assumption1 ((temp___expr_285 us_rep) (temp___skip_top_level_286 Bool)) Bool
  (and
    (= (rec__ada___system__val_lllu__impl__uns_option__overflow
         (us_split_discrs1 temp___expr_285)) (of_int 0))
    (=>
      (ada___system__val_lllu__impl__uns_option__value__pred temp___expr_285)
      (= (to_rep2
           (rec__ada___system__val_lllu__impl__uns_option__value
             (us_split_fields1 temp___expr_285))) #x00000000000000000000000000000000))))

(declare-const cur__attr__constrained Bool)

(declare-const prev_s__first integer)

(declare-const prev_s__last integer)

(declare-const r62s Int)

(declare-sort non_positive 0)

;; non_positive'int
(declare-fun non_positiveqtint (non_positive) Int)

;; non_positive'axiom
(assert
  (forall ((i non_positive))
    (and
      (<= (- 170141183460469231731687303715884105728) (non_positiveqtint i))
      (<= (non_positiveqtint i) 0))))

;; in_range
(define-fun in_range6 ((x Int)) Bool
  (and (<= (- 170141183460469231731687303715884105728) x) (<= x 0)))

;; bool_eq
(define-fun bool_eq12 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

;; user_eq
(declare-fun user_eq12 (non_positive
  non_positive) Bool)

(declare-const dummy12 non_positive)

(declare-datatypes ((non_positive__ref 0))
  (((non_positive__refqtmk (non_positive__content non_positive)))))

;; non_positive__ref_non_positive__content__projection
(define-fun non_positive__ref_non_positive__content__projection ((a non_positive__ref)) non_positive
  (non_positive__content a))

;; dynamic_invariant
(define-fun dynamic_invariant5 ((temp___expr_771 Int) (temp___is_init_767 Bool) (temp___skip_constant_768 Bool) (temp___do_toplevel_769 Bool) (temp___do_typ_inv_770 Bool)) Bool
  (=>
    (or
      (= temp___is_init_767 true)
      (<= (- 170141183460469231731687303715884105728) 0))
    (in_range6 temp___expr_771)))

(declare-datatypes ((t24s__ref 0))
  (((t24s__refqtmk (t24s__content us_t)))))

;; t24s__ref_t24s__content__projection
(define-fun t24s__ref_t24s__content__projection ((a t24s__ref)) us_t
  (t24s__content a))

(declare-datatypes ((t26s__ref 0))
  (((t26s__refqtmk (t26s__content us_t)))))

;; t26s__ref_t26s__content__projection
(define-fun t26s__ref_t26s__content__projection ((a t26s__ref)) us_t
  (t26s__content a))

;; dynamic_invariant
(define-fun dynamic_invariant6 ((temp___expr_801 Int) (temp___is_init_797 Bool) (temp___skip_constant_798 Bool) (temp___do_toplevel_799 Bool) (temp___do_typ_inv_800 Bool)) Bool
  (=>
    (= temp___do_toplevel_799 true)
    (=> (= temp___is_init_797 true) (< 0 temp___expr_801))))

(declare-datatypes ((s38s__ref 0))
  (((s38s__refqtmk (s38s__content us_t)))))

;; s38s__ref_s38s__content__projection
(define-fun s38s__ref_s38s__content__projection ((a s38s__ref)) us_t
  (s38s__content a))

;; dynamic_property
(define-fun dynamic_property1 ((first_int Int) (last_int Int) (x Int)) Bool
  (and (<= first_int x) (<= x last_int)))

;; bool_eq
(define-fun bool_eq13 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

;; user_eq
(declare-fun user_eq13 (integer
  integer) Bool)

(declare-const dummy13 integer)

(declare-datatypes ((t63s__ref 0))
  (((t63s__refqtmk (t63s__content integer)))))

;; t63s__ref_t63s__content__projection
(define-fun t63s__ref_t63s__content__projection ((a t63s__ref)) integer
  (t63s__content a))

;; dynamic_invariant
(define-fun dynamic_invariant7 ((temp___expr_53 Int) (temp___is_init_49 Bool) (temp___skip_constant_50 Bool) (temp___do_toplevel_51 Bool) (temp___do_typ_inv_52 Bool)) Bool
  (=>
    (or (= temp___is_init_49 true) (<= 1 2147483647))
    (in_range3 temp___expr_53)))

;; dynamic_invariant
(define-fun dynamic_invariant8 ((temp___expr_88 Int) (temp___is_init_84 Bool) (temp___skip_constant_85 Bool) (temp___do_toplevel_86 Bool) (temp___do_typ_inv_87 Bool)) Bool
  (=> (or (= temp___is_init_84 true) (<= 0 255)) (in_range4 temp___expr_88)))

(declare-sort long_long_long_unsigned1 0)

(declare-const attr__ATTRIBUTE_MODULUS2 (_ BitVec 128))

;; bool_eq
(define-fun bool_eq14 ((x (_ BitVec 128)) (y (_ BitVec 128))) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE9 ((_ BitVec 128)) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) (_ BitVec 128))

;; user_eq
(declare-fun user_eq14 (long_long_long_unsigned1
  long_long_long_unsigned1) Bool)

(declare-const dummy14 long_long_long_unsigned1)

(declare-datatypes ((long_long_long_unsigned__ref1 0))
  (((long_long_long_unsigned__refqtmk1
    (long_long_long_unsigned__content1 long_long_long_unsigned1)))))

;; long_long_long_unsigned__ref_long_long_long_unsigned__content__4__projection
(define-fun long_long_long_unsigned__ref_long_long_long_unsigned__content__4__projection 
  ((a long_long_long_unsigned__ref1)) long_long_long_unsigned1
  (long_long_long_unsigned__content1 a))

;; dynamic_invariant
(define-fun dynamic_invariant9 ((temp___expr_245 (_ BitVec 128)) (temp___is_init_241 Bool) (temp___skip_constant_242 Bool) (temp___do_toplevel_243 Bool) (temp___do_typ_inv_244 Bool)) Bool
  true)

;; dynamic_invariant
(define-fun dynamic_invariant10 ((temp___expr_259 Int) (temp___is_init_255 Bool) (temp___skip_constant_256 Bool) (temp___do_toplevel_257 Bool) (temp___do_typ_inv_258 Bool)) Bool
  true)

;; only_hexa_ghost__post_axiom
(assert true)

;; only_hexa_ghost__def_axiom
(assert
  (forall ((str us_t))
    (forall ((from Int) (to__ Int))
      (! (=
           (= (only_hexa_ghost str from to__) true)
           (forall ((j Int))
             (=>
               (and (<= from j) (<= j to__))
               (let ((temp___370 (to_rep (select (to_array str) j))))
                 (or
                   (and (<= 48 temp___370) (<= temp___370 57))
                   (or
                     (and (<= 97 temp___370) (<= temp___370 102))
                     (or
                       (and (<= 65 temp___370) (<= temp___370 70))
                       (= temp___370 95)))))))) :pattern ((only_hexa_ghost
                                                            str
                                                            from
                                                            to__)) ))))

;; hexa_to_unsigned_ghost__post_axiom
(assert
  (forall ((x Int))
    (! (=>
         (and
           (dynamic_invariant8 x true true true true)
           (or
             (and (<= 48 x) (<= x 57))
             (or (and (<= 97 x) (<= x 102)) (and (<= 65 x) (<= x 70)))))
         (let ((result (hexa_to_unsigned_ghost x)))
           (=>
             (hexa_to_unsigned_ghost__function_guard result x)
             (dynamic_invariant3 result true false true true)))) :pattern (
    (hexa_to_unsigned_ghost
      x)) )))

;; hexa_to_unsigned_ghost__def_axiom
(assert
  (forall ((x Int))
    (! (=>
         (dynamic_invariant8 x true true true true)
         (= (hexa_to_unsigned_ghost x) (ite (and (<= 48 x) (<= x 57))
                                         (bvsub ((_ int2bv 128) x) #x00000000000000000000000000000030)
                                         (ite (and (<= 97 x) (<= x 102))
                                           (bvadd (bvsub ((_ int2bv 128) x) #x00000000000000000000000000000061) #x0000000000000000000000000000000A)
                                           (ite (and (<= 65 x) (<= x 70))
                                             (bvadd (bvsub ((_ int2bv 128) x) #x00000000000000000000000000000041) #x0000000000000000000000000000000A)
                                             (to_rep2 dummy6)))))) :pattern (
    (hexa_to_unsigned_ghost
      x)) )))

;; scan_overflows_ghost__post_axiom
(assert true)

;; scan_overflows_ghost__def_axiom
(assert
  (forall ((digit (_ BitVec 128)) (base (_ BitVec 128)) (acc (_ BitVec 128)))
    (! (=
         (= (scan_overflows_ghost digit base acc) true)
         (or
           (or
             (bvuge digit base)
             (bvugt acc (bvudiv #xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF base)))
           (bvult (bvsub #xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF digit) (bvmul base acc)))) :pattern (
    (scan_overflows_ghost
      digit
      base
      acc)) )))

;; scan_based_number_ghost__post_axiom
(assert true)

(declare-const big_101 Int)

;; big_10__def_axiom
(assert (= big_101 (bv2nat #x0000000000000000000000000000000A)))

;; to_rep
(define-fun to_rep3 ((x natural)) Int
  (naturalqtint x))

;; of_rep
(declare-fun of_rep3 (Int) natural)

;; inversion_axiom
(assert
  (forall ((x natural))
    (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
(assert
  (forall ((x natural)) (! (in_range2 (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
(assert
  (forall ((x Int))
    (! (=> (in_range2 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                                  (of_rep3 x))) )))

;; max_log10
(declare-fun max_log10 (tuple0) Int)

;; max_log10__function_guard
(declare-fun max_log10__function_guard (Int
  tuple0) Bool)

;; max_log10__post_axiom
(assert
  (forall ((us_void_param tuple0))
    (! (let ((result (max_log10 us_void_param)))
         (=>
           (max_log10__function_guard result us_void_param)
           (dynamic_invariant result true false true true))) :pattern (
    (max_log10
      us_void_param)) )))

;; max_log10__def_axiom
(assert
  (forall ((us_void_param tuple0))
    (! (= (max_log10 us_void_param) (ite (= 128 8)
                                      2
                                      (ite (= 128 16)
                                        4
                                        (ite (= 128 32)
                                          9
                                          (ite (= 128 64)
                                            19
                                            (ite true 38 (to_rep3 dummy1))))))) :pattern (
    (max_log10
      us_void_param)) )))

;; width
(declare-fun width ((_ BitVec 128)
  (_ BitVec 128)) Int)

;; width__function_guard
(declare-fun width__function_guard (Int
  (_ BitVec 128)
  (_ BitVec 128)) Bool)

;; width__post_axiom
(assert
  (forall ((lo (_ BitVec 128)) (hi (_ BitVec 128)))
    (! (=>
         (and
           (dynamic_invariant9 lo true true true true)
           (dynamic_invariant9 hi true true true true))
         (let ((result (width lo hi)))
           (and
             (max_log10__function_guard (max_log10 Tuple0) Tuple0)
             (=>
               (width__function_guard result lo hi)
               (and
                 (ite (bvugt lo hi)
                   (= result 0)
                   (and
                     (and
                       (and
                         (< 0 result)
                         (<= result (+ (max_log10 Tuple0) 2)))
                       (< (bv2nat lo) (power big_101 (- result 1))))
                     (< (bv2nat hi) (power big_101 (- result 1)))))
                 (dynamic_invariant result true false true true)))))) :pattern (
    (width
      lo
      hi)) )))

;; unsigned_width_ghost__def_axiom
(assert
  (and
    (width__function_guard
      (width
        #x00000000000000000000000000000000
        #xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
      #x00000000000000000000000000000000
      #xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
    (= unsigned_width_ghost (width
                              #x00000000000000000000000000000000
                              #xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))))

;; unsigned_width_ghost__def_axiom
(assert (= unsigned_width_ghost1 unsigned_width_ghost))

;; big_10__def_axiom
(assert (= big_10 (bv2nat #x0000000000000000000000000000000A)))

;; uns_t__def_axiom
(assert (= uns_t (uns_of_non_positive t1)))

;; dynamic_invariant
(define-fun dynamic_invariant11 ((temp___expr_854 us_t) (temp___is_init_850 Bool) (temp___skip_constant_851 Bool) (temp___do_toplevel_852 Bool) (temp___do_typ_inv_853 Bool)) Bool
  (=>
    (not (= temp___skip_constant_851 true))
    (and
      (and
        (dynamic_property
          (to_rep1 s__first)
          (to_rep1 s__last)
          (first temp___expr_854)
          (last temp___expr_854))
        (= (first temp___expr_854) (to_rep1 s__first)))
      (= (last temp___expr_854) (to_rep1 s__last)))))

;; default_initial_assumption
(define-fun default_initial_assumption2 ((temp___expr_856 us_t) (temp___skip_top_level_857 Bool)) Bool
  (and
    (= (first temp___expr_856) (to_rep1 s__first))
    (= (last temp___expr_856) (to_rep1 s__last))))

(declare-const s (Array Int character))

(declare-const p Int)

(declare-const prev__split_fields long_long_long_unsigned)

(declare-const prev__split_discrs Bool)

(declare-const cur__split_fields long_long_long_unsigned)

(declare-const cur__split_discrs Bool)

(declare-const prev_value (_ BitVec 128))

;; Assume
(assert (dynamic_invariant unsigned_width_ghost1 true false true true))

;; Assume
(assert (= unsigned_width_ghost unsigned_width_ghost1))

;; Assume
(assert true)

;; Assume
(assert (= 10 big_10))

;; Assume
(assert (dynamic_invariant5 t1 true false true true))

;; Assume
(assert
  (dynamic_property
    1
    2147483647
    (first (of_array s (to_rep1 s__first) (to_rep1 s__last)))
    (last (of_array s (to_rep1 s__first) (to_rep1 s__last)))))

;; Assume
(assert (dynamic_invariant p true false true true))

;; Assume
(assert
  (and
    (and
      (and
        (and (< p 2147483647) (< (to_rep1 s__last) 2147483647))
        (<= (to_rep1 s__first) (+ p 1)))
      (<= (to_rep1 s__first) (to_rep1 s__last)))
    (<= p (+ (- (to_rep1 s__last) unsigned_width_ghost1) 1))))

(declare-const nb_digits Int)

;; H
(assert (= nb_digits 0))

;; Assume
(assert (dynamic_invariant nb_digits true false true true))

(declare-const value Int)

;; H
(assert (= value t1))

;; Assume
(assert (dynamic_invariant5 value true false true true))

;; Assert
(assert (< 0 1))

(declare-const pow Int)

;; H
(assert (= pow 1))

;; Assume
(assert (dynamic_invariant6 pow true false true true))

;; Assume
(assert
  (= (of_array
       (to_array (of_array s (to_rep1 s__first) (to_rep1 s__last)))
       (first (of_array s (to_rep1 s__first) (to_rep1 s__last)))
       (last (of_array s (to_rep1 s__first) (to_rep1 s__last)))) s_init))

;; Assume
(assert (dynamic_invariant1 s_init true false true true))

;; H
(assert (dynamic_invariant4 (uns_of_non_positive t1) true false true true))

;; H
(assert
  (= (uns_of_non_positive t1) (ite (= t1 (- 170141183460469231731687303715884105728))
                                #x80000000000000000000000000000000
                                ((_ int2bv 128) (- t1)))))

;; Assume
(assert (= (uns_of_non_positive t1) uns_t))

;; Assume
(assert (dynamic_invariant4 uns_t true false true true))

;; H
(assert
  (dynamic_invariant4 (uns_of_non_positive value) true false true true))

;; H
(assert
  (= (uns_of_non_positive value) (ite (= value (- 170141183460469231731687303715884105728))
                                   #x80000000000000000000000000000000
                                   ((_ int2bv 128) (- value)))))

(declare-const uns_value (_ BitVec 128))

;; H
(assert (= uns_value (uns_of_non_positive value)))

;; Assume
(assert (dynamic_invariant4 uns_value true false true true))

;; Assume
(assert (= prev__attr__constrained false))

;; Assume
(assert
  (default_initial_assumption1
    (us_repqtmk
      (us_split_discrsqtmk prev__split_discrs)
      (us_split_fieldsqtmk prev__split_fields))
    false))

;; Assume
(assert true)

;; Assume
(assert (= cur__attr__constrained false))

;; Assume
(assert
  (default_initial_assumption1
    (us_repqtmk
      (us_split_discrsqtmk cur__split_discrs)
      (us_split_fieldsqtmk cur__split_fields))
    false))

;; Assume
(assert true)

;; Assume
(assert true)

;; Assume
(assert (dynamic_invariant4 prev_value false false true true))

(declare-const prev_s (Array Int character))

;; H
(assert
  (= prev_s (to_array
              (of_array
                (to_array (of_array s (to_rep1 s__first) (to_rep1 s__last)))
                (first (of_array s (to_rep1 s__first) (to_rep1 s__last)))
                (last (of_array s (to_rep1 s__first) (to_rep1 s__last)))))))

;; Assume
(assert
  (= (to_rep1 prev_s__first) (first
                               (of_array
                                 (to_array
                                   (of_array
                                     s
                                     (to_rep1 s__first)
                                     (to_rep1 s__last)))
                                 (first
                                   (of_array
                                     s
                                     (to_rep1 s__first)
                                     (to_rep1 s__last)))
                                 (last
                                   (of_array
                                     s
                                     (to_rep1 s__first)
                                     (to_rep1 s__last)))))))

;; Assume
(assert
  (= (to_rep1 prev_s__last) (last
                              (of_array
                                (to_array
                                  (of_array
                                    s
                                    (to_rep1 s__first)
                                    (to_rep1 s__last)))
                                (first
                                  (of_array
                                    s
                                    (to_rep1 s__first)
                                    (to_rep1 s__last)))
                                (last
                                  (of_array
                                    s
                                    (to_rep1 s__first)
                                    (to_rep1 s__last)))))))

;; Assume
(assert
  (dynamic_invariant1
    (of_array prev_s (to_rep1 prev_s__first) (to_rep1 prev_s__last))
    true
    false
    true
    true))

(declare-const nb_digits1 Int)

(declare-const value1 Int)

(declare-const pow1 Int)

(declare-const uns_value1 (_ BitVec 128))

;; H
(assert
  (exists ((value2 Int))
    (and
      (= value2 (div1 value 10))
      (let ((o (+ nb_digits 1)))
        (and
          (in_range1 o)
          (exists ((nb_digits2 Int))
            (and
              (= nb_digits2 o)
              (exists ((uns_value2 (_ BitVec 128)))
                (and
                  (= uns_value2 (bvudiv uns_value #x0000000000000000000000000000000A))
                  (let ((o1 (* pow 10)))
                    (and
                      (< 0 o1)
                      (exists ((pow3 Int))
                        (and
                          (= pow3 o1)
                          (let ((o2 (uns_of_non_positive value2)))
                            (and
                              (and
                                (dynamic_invariant4 o2 true false true true)
                                (= o2 (ite (= value2 (- 170141183460469231731687303715884105728))
                                        #x80000000000000000000000000000000
                                        ((_ int2bv 128) (- value2)))))
                              (and
                                (and
                                  (= uns_value1 (uns_of_non_positive value1))
                                  (and
                                    (and
                                      (<= 1 nb_digits1)
                                      (<= nb_digits1 (- unsigned_width_ghost1 1)))
                                    (and
                                      (= pow1 (power big_10 nb_digits1))
                                      (= (bv2nat uns_value1) (div1
                                                               (bv2nat 
                                                               uns_t)
                                                               pow1)))))
                                (and
                                  (and
                                    (and
                                      (and
                                        (dynamic_invariant4
                                          uns_value1
                                          true
                                          true
                                          true
                                          true)
                                        (dynamic_invariant
                                          nb_digits1
                                          true
                                          true
                                          true
                                          true))
                                      (dynamic_invariant5
                                        value1
                                        true
                                        true
                                        true
                                        true))
                                    (dynamic_invariant6
                                      pow1
                                      true
                                      true
                                      true
                                      true))
                                  (= value1 0))))))))))))))))))

(declare-const value2 Int)

;; H
(assert (= value2 t1))

;; H
(assert (dynamic_invariant4 (uns_of_non_positive t1) true false true true))

;; H
(assert
  (= (uns_of_non_positive t1) (ite (= t1 (- 170141183460469231731687303715884105728))
                                #x80000000000000000000000000000000
                                ((_ int2bv 128) (- t1)))))

(declare-const uns_value2 (_ BitVec 128))

;; H
(assert (= uns_value2 (uns_of_non_positive t1)))

;; Assert
(assert (< 0 1))

(declare-const pow3 Int)

;; H
(assert (= pow3 1))

;; Assume
(assert (= nb_digits1 r62s))

;; Assume
(assert (dynamic_invariant r62s true false true true))

(declare-const j Int)

;; H
(assert (= j r62s))

;; H
(assert
  (= (and (ite (<= 1 j) true false) (ite (<= j r62s) true false)) true))

(declare-const prev_value1 (_ BitVec 128))

;; H
(assert (= prev_value1 uns_value2))

;; Assert
(assert
  (ite (<= (first
             (of_array
               (to_array (of_array s (to_rep1 s__first) (to_rep1 s__last)))
               (first (of_array s (to_rep1 s__first) (to_rep1 s__last)))
               (last (of_array s (to_rep1 s__first) (to_rep1 s__last))))) 
    (last
      (of_array
        (to_array (of_array s (to_rep1 s__first) (to_rep1 s__last)))
        (first (of_array s (to_rep1 s__first) (to_rep1 s__last)))
        (last (of_array s (to_rep1 s__first) (to_rep1 s__last))))))
    (and
      (<= (first
            (of_array prev_s (to_rep1 prev_s__first) (to_rep1 prev_s__last))) 
      (last
        (of_array prev_s (to_rep1 prev_s__first) (to_rep1 prev_s__last))))
      (= (- (last
              (of_array
                (to_array (of_array s (to_rep1 s__first) (to_rep1 s__last)))
                (first (of_array s (to_rep1 s__first) (to_rep1 s__last)))
                (last (of_array s (to_rep1 s__first) (to_rep1 s__last))))) 
      (first
        (of_array
          (to_array (of_array s (to_rep1 s__first) (to_rep1 s__last)))
          (first (of_array s (to_rep1 s__first) (to_rep1 s__last)))
          (last (of_array s (to_rep1 s__first) (to_rep1 s__last)))))) (- 
      (last
        (of_array prev_s (to_rep1 prev_s__first) (to_rep1 prev_s__last))) 
      (first
        (of_array prev_s (to_rep1 prev_s__first) (to_rep1 prev_s__last))))))
    (< (last
         (of_array prev_s (to_rep1 prev_s__first) (to_rep1 prev_s__last))) 
    (first
      (of_array prev_s (to_rep1 prev_s__first) (to_rep1 prev_s__last))))))

(declare-const prev_s1 (Array Int character))

;; H
(assert
  (= prev_s1 (to_array
               (of_array
                 (to_array (of_array s (to_rep1 s__first) (to_rep1 s__last)))
                 (first (of_array s (to_rep1 s__first) (to_rep1 s__last)))
                 (last (of_array s (to_rep1 s__first) (to_rep1 s__last)))))))

;; Assert
(assert true)

;; Assert
(assert true)

;; Assert
(assert (< 0 (* pow3 10)))

(declare-const pow4 Int)

;; H
(assert (= pow4 (* pow3 10)))

(declare-const uns_value3 (_ BitVec 128))

;; H
(assert
  (= uns_value3 (bvudiv uns_value2 #x0000000000000000000000000000000A)))

(declare-const o character)

;; Ensures
(assert (= (to_rep o) (- 48 (mod1 value2 10))))

;; Ensures
(assert (in_range1 (+ p j)))

;; Assert
(assert
  (and
    (<= (first (of_array s (to_rep1 s__first) (to_rep1 s__last))) (+ 
    p j))
    (<= (+ p j) (last (of_array s (to_rep1 s__first) (to_rep1 s__last))))))

(declare-const s1 (Array Int character))

;; H
(assert
  (= s1 (to_array
          (us_tqtmk
            (store (to_array
                     (of_array s (to_rep1 s__first) (to_rep1 s__last))) (+ 
            p j) o)
            (rt (of_array s (to_rep1 s__first) (to_rep1 s__last)))))))

(declare-const value3 Int)

;; H
(assert (= value3 (div1 value2 10)))

;; Ensures
(assert (in_range1 (+ p nb_digits1)))

;; Ensures
(assert (in_range1 (+ p j)))

;; Ensures
(assert (in_range1 (+ (+ p j) 1)))

;; H
(assert true)

;; H
(assert
  (and
    (hexa_to_unsigned_ghost__function_guard
      (hexa_to_unsigned_ghost
        (to_rep
          (select (to_array
                    (of_array
                      (to_array
                        (of_array s1 (to_rep1 s__first) (to_rep1 s__last)))
                      (first
                        (of_array s1 (to_rep1 s__first) (to_rep1 s__last)))
                      (last
                        (of_array s1 (to_rep1 s__first) (to_rep1 s__last))))) (+ (+ 
          p j) 1))))
      (to_rep
        (select (to_array
                  (of_array
                    (to_array
                      (of_array s1 (to_rep1 s__first) (to_rep1 s__last)))
                    (first
                      (of_array s1 (to_rep1 s__first) (to_rep1 s__last)))
                    (last (of_array s1 (to_rep1 s__first) (to_rep1 s__last))))) (+ (+ 
        p j) 1))))
    (and
      (hexa_to_unsigned_ghost__function_guard
        (hexa_to_unsigned_ghost
          (to_rep
            (select (to_array
                      (of_array
                        (to_array
                          (of_array s1 (to_rep1 s__first) (to_rep1 s__last)))
                        (first
                          (of_array s1 (to_rep1 s__first) (to_rep1 s__last)))
                        (last
                          (of_array s1 (to_rep1 s__first) (to_rep1 s__last))))) (+ (+ 
            p j) 1))))
        (to_rep
          (select (to_array
                    (of_array
                      (to_array
                        (of_array s1 (to_rep1 s__first) (to_rep1 s__last)))
                      (first
                        (of_array s1 (to_rep1 s__first) (to_rep1 s__last)))
                      (last
                        (of_array s1 (to_rep1 s__first) (to_rep1 s__last))))) (+ (+ 
          p j) 1))))
      (= (scan_based_number_ghost
           (of_array
             (to_array (of_array s1 (to_rep1 s__first) (to_rep1 s__last)))
             (first (of_array s1 (to_rep1 s__first) (to_rep1 s__last)))
             (last (of_array s1 (to_rep1 s__first) (to_rep1 s__last))))
           (+ (+ p j) 1)
           (+ p nb_digits1)
           #x0000000000000000000000000000000A
           prev_value1) (ite (< (+ p nb_digits1) (+ (+ p j) 1))
                          (us_repqtmk
                            (us_split_discrsqtmk (of_int 0))
                            (us_split_fieldsqtmk (of_rep2 prev_value1)))
                          (ite (= (to_rep
                                    (select (to_array
                                              (of_array
                                                (to_array
                                                  (of_array
                                                    s1
                                                    (to_rep1 s__first)
                                                    (to_rep1 s__last)))
                                                (first
                                                  (of_array
                                                    s1
                                                    (to_rep1 s__first)
                                                    (to_rep1 s__last)))
                                                (last
                                                  (of_array
                                                    s1
                                                    (to_rep1 s__first)
                                                    (to_rep1 s__last))))) (+ (+ 
                                    p j) 1))) 95)
                            (scan_based_number_ghost
                              (of_array
                                (to_array
                                  (of_array
                                    s1
                                    (to_rep1 s__first)
                                    (to_rep1 s__last)))
                                (first
                                  (of_array
                                    s1
                                    (to_rep1 s__first)
                                    (to_rep1 s__last)))
                                (last
                                  (of_array
                                    s1
                                    (to_rep1 s__first)
                                    (to_rep1 s__last))))
                              (+ (+ (+ p j) 1) 1)
                              (+ p nb_digits1)
                              #x0000000000000000000000000000000A
                              prev_value1)
                            (ite (= (scan_overflows_ghost
                                      (hexa_to_unsigned_ghost
                                        (to_rep
                                          (select (to_array
                                                    (of_array
                                                      (to_array
                                                        (of_array
                                                          s1
                                                          (to_rep1 s__first)
                                                          (to_rep1 s__last)))
                                                      (first
                                                        (of_array
                                                          s1
                                                          (to_rep1 s__first)
                                                          (to_rep1 s__last)))
                                                      (last
                                                        (of_array
                                                          s1
                                                          (to_rep1 s__first)
                                                          (to_rep1 s__last))))) (+ (+ 
                                          p j) 1))))
                                      #x0000000000000000000000000000000A
                                      prev_value1) true)
                              (us_repqtmk
                                (us_split_discrsqtmk (of_int 1))
                                (us_split_fieldsqtmk dummy6))
                              (scan_based_number_ghost
                                (of_array
                                  (to_array
                                    (of_array
                                      s1
                                      (to_rep1 s__first)
                                      (to_rep1 s__last)))
                                  (first
                                    (of_array
                                      s1
                                      (to_rep1 s__first)
                                      (to_rep1 s__last)))
                                  (last
                                    (of_array
                                      s1
                                      (to_rep1 s__first)
                                      (to_rep1 s__last))))
                                (+ (+ (+ p j) 1) 1)
                                (+ p nb_digits1)
                                #x0000000000000000000000000000000A
                                (bvadd (bvmul #x0000000000000000000000000000000A 
                                prev_value1) (hexa_to_unsigned_ghost
                                               (to_rep
                                                 (select (to_array
                                                           (of_array
                                                             (to_array
                                                               (of_array
                                                                 s1
                                                                 (to_rep1
                                                                   s__first)
                                                                 (to_rep1
                                                                   s__last)))
                                                             (first
                                                               (of_array
                                                                 s1
                                                                 (to_rep1
                                                                   s__first)
                                                                 (to_rep1
                                                                   s__last)))
                                                             (last
                                                               (of_array
                                                                 s1
                                                                 (to_rep1
                                                                   s__first)
                                                                 (to_rep1
                                                                   s__last))))) (+ (+ 
                                                 p j) 1)))))))))))))

;; Assert
(assert
  (=>
    (= prev__attr__constrained true)
    (= (rec__ada___system__val_lllu__impl__uns_option__overflow
         (us_split_discrs1
           (scan_based_number_ghost
             (of_array
               (to_array (of_array s1 (to_rep1 s__first) (to_rep1 s__last)))
               (first (of_array s1 (to_rep1 s__first) (to_rep1 s__last)))
               (last (of_array s1 (to_rep1 s__first) (to_rep1 s__last))))
             (+ (+ p j) 1)
             (+ p nb_digits1)
             #x0000000000000000000000000000000A
             prev_value1))) prev__split_discrs)))

(declare-const prev__split_fields1 long_long_long_unsigned)

;; H
(assert
  (= (us_split_fieldsqtmk prev__split_fields1) (us_split_fields1
                                                 (scan_based_number_ghost
                                                   (of_array
                                                     (to_array
                                                       (of_array
                                                         s1
                                                         (to_rep1 s__first)
                                                         (to_rep1 s__last)))
                                                     (first
                                                       (of_array
                                                         s1
                                                         (to_rep1 s__first)
                                                         (to_rep1 s__last)))
                                                     (last
                                                       (of_array
                                                         s1
                                                         (to_rep1 s__first)
                                                         (to_rep1 s__last))))
                                                   (+ (+ p j) 1)
                                                   (+ p nb_digits1)
                                                   #x0000000000000000000000000000000A
                                                   prev_value1))))

(declare-const prev__split_discrs1 Bool)

;; H
(assert
  (= (us_split_discrsqtmk prev__split_discrs1) (us_split_discrs1
                                                 (scan_based_number_ghost
                                                   (of_array
                                                     (to_array
                                                       (of_array
                                                         s1
                                                         (to_rep1 s__first)
                                                         (to_rep1 s__last)))
                                                     (first
                                                       (of_array
                                                         s1
                                                         (to_rep1 s__first)
                                                         (to_rep1 s__last)))
                                                     (last
                                                       (of_array
                                                         s1
                                                         (to_rep1 s__first)
                                                         (to_rep1 s__last))))
                                                   (+ (+ p j) 1)
                                                   (+ p nb_digits1)
                                                   #x0000000000000000000000000000000A
                                                   prev_value1))))

;; Ensures
(assert (in_range1 (+ p nb_digits1)))

;; Ensures
(assert (in_range1 (+ p j)))

;; H
(assert true)

;; H
(assert
  (and
    (hexa_to_unsigned_ghost__function_guard
      (hexa_to_unsigned_ghost
        (to_rep
          (select (to_array
                    (of_array
                      (to_array
                        (of_array s1 (to_rep1 s__first) (to_rep1 s__last)))
                      (first
                        (of_array s1 (to_rep1 s__first) (to_rep1 s__last)))
                      (last
                        (of_array s1 (to_rep1 s__first) (to_rep1 s__last))))) (+ 
          p j))))
      (to_rep
        (select (to_array
                  (of_array
                    (to_array
                      (of_array s1 (to_rep1 s__first) (to_rep1 s__last)))
                    (first
                      (of_array s1 (to_rep1 s__first) (to_rep1 s__last)))
                    (last (of_array s1 (to_rep1 s__first) (to_rep1 s__last))))) (+ 
        p j))))
    (and
      (hexa_to_unsigned_ghost__function_guard
        (hexa_to_unsigned_ghost
          (to_rep
            (select (to_array
                      (of_array
                        (to_array
                          (of_array s1 (to_rep1 s__first) (to_rep1 s__last)))
                        (first
                          (of_array s1 (to_rep1 s__first) (to_rep1 s__last)))
                        (last
                          (of_array s1 (to_rep1 s__first) (to_rep1 s__last))))) (+ 
            p j))))
        (to_rep
          (select (to_array
                    (of_array
                      (to_array
                        (of_array s1 (to_rep1 s__first) (to_rep1 s__last)))
                      (first
                        (of_array s1 (to_rep1 s__first) (to_rep1 s__last)))
                      (last
                        (of_array s1 (to_rep1 s__first) (to_rep1 s__last))))) (+ 
          p j))))
      (= (scan_based_number_ghost
           (of_array
             (to_array (of_array s1 (to_rep1 s__first) (to_rep1 s__last)))
             (first (of_array s1 (to_rep1 s__first) (to_rep1 s__last)))
             (last (of_array s1 (to_rep1 s__first) (to_rep1 s__last))))
           (+ p j)
           (+ p nb_digits1)
           #x0000000000000000000000000000000A
           uns_value3) (ite (< (+ p nb_digits1) (+ p j))
                         (us_repqtmk
                           (us_split_discrsqtmk (of_int 0))
                           (us_split_fieldsqtmk (of_rep2 uns_value3)))
                         (ite (= (to_rep
                                   (select (to_array
                                             (of_array
                                               (to_array
                                                 (of_array
                                                   s1
                                                   (to_rep1 s__first)
                                                   (to_rep1 s__last)))
                                               (first
                                                 (of_array
                                                   s1
                                                   (to_rep1 s__first)
                                                   (to_rep1 s__last)))
                                               (last
                                                 (of_array
                                                   s1
                                                   (to_rep1 s__first)
                                                   (to_rep1 s__last))))) (+ 
                                   p j))) 95)
                           (scan_based_number_ghost
                             (of_array
                               (to_array
                                 (of_array
                                   s1
                                   (to_rep1 s__first)
                                   (to_rep1 s__last)))
                               (first
                                 (of_array
                                   s1
                                   (to_rep1 s__first)
                                   (to_rep1 s__last)))
                               (last
                                 (of_array
                                   s1
                                   (to_rep1 s__first)
                                   (to_rep1 s__last))))
                             (+ (+ p j) 1)
                             (+ p nb_digits1)
                             #x0000000000000000000000000000000A
                             uns_value3)
                           (ite (= (scan_overflows_ghost
                                     (hexa_to_unsigned_ghost
                                       (to_rep
                                         (select (to_array
                                                   (of_array
                                                     (to_array
                                                       (of_array
                                                         s1
                                                         (to_rep1 s__first)
                                                         (to_rep1 s__last)))
                                                     (first
                                                       (of_array
                                                         s1
                                                         (to_rep1 s__first)
                                                         (to_rep1 s__last)))
                                                     (last
                                                       (of_array
                                                         s1
                                                         (to_rep1 s__first)
                                                         (to_rep1 s__last))))) (+ 
                                         p j))))
                                     #x0000000000000000000000000000000A
                                     uns_value3) true)
                             (us_repqtmk
                               (us_split_discrsqtmk (of_int 1))
                               (us_split_fieldsqtmk dummy6))
                             (scan_based_number_ghost
                               (of_array
                                 (to_array
                                   (of_array
                                     s1
                                     (to_rep1 s__first)
                                     (to_rep1 s__last)))
                                 (first
                                   (of_array
                                     s1
                                     (to_rep1 s__first)
                                     (to_rep1 s__last)))
                                 (last
                                   (of_array
                                     s1
                                     (to_rep1 s__first)
                                     (to_rep1 s__last))))
                               (+ (+ p j) 1)
                               (+ p nb_digits1)
                               #x0000000000000000000000000000000A
                               (bvadd (bvmul #x0000000000000000000000000000000A 
                               uns_value3) (hexa_to_unsigned_ghost
                                             (to_rep
                                               (select (to_array
                                                         (of_array
                                                           (to_array
                                                             (of_array
                                                               s1
                                                               (to_rep1
                                                                 s__first)
                                                               (to_rep1
                                                                 s__last)))
                                                           (first
                                                             (of_array
                                                               s1
                                                               (to_rep1
                                                                 s__first)
                                                               (to_rep1
                                                                 s__last)))
                                                           (last
                                                             (of_array
                                                               s1
                                                               (to_rep1
                                                                 s__first)
                                                               (to_rep1
                                                                 s__last))))) (+ 
                                               p j)))))))))))))

;; Assert
(assert
  (=>
    (= cur__attr__constrained true)
    (= (rec__ada___system__val_lllu__impl__uns_option__overflow
         (us_split_discrs1
           (scan_based_number_ghost
             (of_array
               (to_array (of_array s1 (to_rep1 s__first) (to_rep1 s__last)))
               (first (of_array s1 (to_rep1 s__first) (to_rep1 s__last)))
               (last (of_array s1 (to_rep1 s__first) (to_rep1 s__last))))
             (+ p j)
             (+ p nb_digits1)
             #x0000000000000000000000000000000A
             uns_value3))) cur__split_discrs)))

(declare-const cur__split_fields1 long_long_long_unsigned)

;; H
(assert
  (= (us_split_fieldsqtmk cur__split_fields1) (us_split_fields1
                                                (scan_based_number_ghost
                                                  (of_array
                                                    (to_array
                                                      (of_array
                                                        s1
                                                        (to_rep1 s__first)
                                                        (to_rep1 s__last)))
                                                    (first
                                                      (of_array
                                                        s1
                                                        (to_rep1 s__first)
                                                        (to_rep1 s__last)))
                                                    (last
                                                      (of_array
                                                        s1
                                                        (to_rep1 s__first)
                                                        (to_rep1 s__last))))
                                                  (+ p j)
                                                  (+ p nb_digits1)
                                                  #x0000000000000000000000000000000A
                                                  uns_value3))))

(declare-const cur__split_discrs1 Bool)

;; H
(assert
  (= (us_split_discrsqtmk cur__split_discrs1) (us_split_discrs1
                                                (scan_based_number_ghost
                                                  (of_array
                                                    (to_array
                                                      (of_array
                                                        s1
                                                        (to_rep1 s__first)
                                                        (to_rep1 s__last)))
                                                    (first
                                                      (of_array
                                                        s1
                                                        (to_rep1 s__first)
                                                        (to_rep1 s__last)))
                                                    (last
                                                      (of_array
                                                        s1
                                                        (to_rep1 s__first)
                                                        (to_rep1 s__last))))
                                                  (+ p j)
                                                  (+ p nb_digits1)
                                                  #x0000000000000000000000000000000A
                                                  uns_value3))))

(declare-const spark__branch Bool)

;; H
(assert (= spark__branch (ite (= j nb_digits1) false true)))

;; H
(assert
  (or
    (not (= spark__branch true))
    (let ((o1 (+ p nb_digits1)))
      (and
        (in_range1 o1)
        (let ((o2 (+ p j)))
          (and
            (in_range1 o2)
            (let ((o3 (+ o2 1)))
              (and
                (in_range1 o3)
                (exists ((o4 Int))
                  (and
                    (= (to_rep1 s__last) o4)
                    (exists ((o5 Int))
                      (and
                        (= (to_rep1 s__first) o5)
                        (let ((temp___1077 (of_array s1 o5 o4)))
                          (exists ((o6 Int))
                            (and
                              (= (to_rep1 prev_s__last) o6)
                              (exists ((o7 Int))
                                (and
                                  (= (to_rep1 prev_s__first) o7)
                                  (= (bool_eq10
                                       (scan_based_number_ghost
                                         (of_array prev_s1 o7 o6)
                                         o3
                                         o1
                                         #x0000000000000000000000000000000A
                                         prev_value1)
                                       (scan_based_number_ghost
                                         (of_array
                                           (to_array temp___1077)
                                           (first temp___1077)
                                           (last temp___1077))
                                         o3
                                         o1
                                         #x0000000000000000000000000000000A
                                         prev_value1)) true))))))))))))))))))

;; H
(assert
  (dynamic_invariant4 (uns_of_non_positive value3) true false true true))

;; H
(assert
  (= (uns_of_non_positive value3) (ite (= value3 (- 170141183460469231731687303715884105728))
                                    #x80000000000000000000000000000000
                                    ((_ int2bv 128) (- value3)))))

;; eq'result'unused'unused
(define-fun eqqtresultqtunusedqtunused () Bool
  (ite (= uns_value3 (uns_of_non_positive value3)) true false))

(declare-const s2 (Array Int character))

(declare-const value4 Int)

(declare-const pow5 Int)

(declare-const uns_value4 (_ BitVec 128))

(declare-const prev__split_fields2 long_long_long_unsigned)

(declare-const prev__split_discrs2 Bool)

(declare-const cur__split_fields2 long_long_long_unsigned)

(declare-const cur__split_discrs2 Bool)

(declare-const prev_value2 (_ BitVec 128))

(declare-const prev_s2 (Array Int character))

(declare-const j1 Int)

;; LoopInvariant
(assert (= uns_value4 (uns_of_non_positive value4)))

;; LoopInvariant
(assert (bvule uns_value4 #x19999999999999999999999999999999))

;; LoopInvariant
(assert
  (forall ((k Int))
    (=>
      (and (<= (to_rep1 s__first) k) (<= k p))
      (= (to_rep
           (select (to_array
                     (of_array s2 (to_rep1 s__first) (to_rep1 s__last))) k)) 
      (to_rep
        (select (to_array s_init) k))))))

;; LoopInvariant
(assert
  (= (only_decimal_ghost
       (let ((temp___1113 (of_array s2 (to_rep1 s__first) (to_rep1 s__last))))
         (of_array
           (to_array temp___1113)
           (first temp___1113)
           (last temp___1113)))
       (+ p j1)
       (+ p nb_digits1)) true))

;; LoopInvariant
(assert
  (forall ((k Int))
    (=>
      (and (<= (+ p j1) k) (<= k (+ p nb_digits1)))
      (let ((temp___1109 (to_rep
                           (select (to_array
                                     (of_array
                                       s2
                                       (to_rep1 s__first)
                                       (to_rep1 s__last))) k))))
        (and (<= 48 temp___1109) (<= temp___1109 57))))))

;; LoopInvariant
(assert (= pow5 (power big_10 (+ (- nb_digits1 j1) 1))))

;; LoopInvariant
(assert (= (bv2nat uns_value4) (div1 (bv2nat uns_t) pow5)))

;; LoopInvariant
(assert
  (= (bool_eq10
       (scan_based_number_ghost
         (let ((temp___1091 (of_array
                              s2
                              (to_rep1 s__first)
                              (to_rep1 s__last))))
           (of_array
             (to_array temp___1091)
             (first temp___1091)
             (last temp___1091)))
         (+ p j1)
         (+ p nb_digits1)
         #x0000000000000000000000000000000A
         uns_value4)
       (wrap_option uns_t)) true))

;; H
(assert
  (= (and (ite (and
                 (and
                   (and
                     (and
                       (and
                         (dynamic_invariant4 uns_value4 true true true true)
                         (dynamic_property1 1 r62s j1))
                       (dynamic_invariant4 prev_value2 false true true true))
                     (dynamic_invariant1
                       (of_array
                         prev_s2
                         (to_rep1 prev_s__first)
                         (to_rep1 prev_s__last))
                       true
                       true
                       true
                       true))
                   (dynamic_invariant5 value4 true true true true))
                 (dynamic_invariant6 pow5 true true true true))
            true
            false) (ite (and (<= 1 j1) (<= j1 r62s)) true false)) true))

;; (=)'result'unused'unused
(define-fun lpeqrpqtresultqtunusedqtunused () Bool
  (ite (= j1 1) true false))

;; H
(assert (not (= j1 1)))

(declare-const j2 Int)

;; H
(assert (= j2 (- j1 1)))

(declare-const prev_value3 (_ BitVec 128))

;; H
(assert (= prev_value3 uns_value4))

;; Assert
(assert
  (ite (<= (first
             (of_array
               (to_array (of_array s2 (to_rep1 s__first) (to_rep1 s__last)))
               (first (of_array s2 (to_rep1 s__first) (to_rep1 s__last)))
               (last (of_array s2 (to_rep1 s__first) (to_rep1 s__last))))) 
    (last
      (of_array
        (to_array (of_array s2 (to_rep1 s__first) (to_rep1 s__last)))
        (first (of_array s2 (to_rep1 s__first) (to_rep1 s__last)))
        (last (of_array s2 (to_rep1 s__first) (to_rep1 s__last))))))
    (and
      (<= (first
            (of_array prev_s2 (to_rep1 prev_s__first) (to_rep1 prev_s__last))) 
      (last
        (of_array prev_s2 (to_rep1 prev_s__first) (to_rep1 prev_s__last))))
      (= (- (last
              (of_array
                (to_array (of_array s2 (to_rep1 s__first) (to_rep1 s__last)))
                (first (of_array s2 (to_rep1 s__first) (to_rep1 s__last)))
                (last (of_array s2 (to_rep1 s__first) (to_rep1 s__last))))) 
      (first
        (of_array
          (to_array (of_array s2 (to_rep1 s__first) (to_rep1 s__last)))
          (first (of_array s2 (to_rep1 s__first) (to_rep1 s__last)))
          (last (of_array s2 (to_rep1 s__first) (to_rep1 s__last)))))) (- 
      (last
        (of_array prev_s2 (to_rep1 prev_s__first) (to_rep1 prev_s__last))) 
      (first
        (of_array prev_s2 (to_rep1 prev_s__first) (to_rep1 prev_s__last))))))
    (< (last
         (of_array prev_s2 (to_rep1 prev_s__first) (to_rep1 prev_s__last))) 
    (first
      (of_array prev_s2 (to_rep1 prev_s__first) (to_rep1 prev_s__last))))))

(declare-const prev_s3 (Array Int character))

;; H
(assert
  (= prev_s3 (to_array
               (of_array
                 (to_array
                   (of_array s2 (to_rep1 s__first) (to_rep1 s__last)))
                 (first (of_array s2 (to_rep1 s__first) (to_rep1 s__last)))
                 (last (of_array s2 (to_rep1 s__first) (to_rep1 s__last)))))))

;; Assert
(assert true)

;; Assert
(assert true)

;; Assert
(assert (< 0 (* pow5 10)))

(declare-const pow6 Int)

;; H
(assert (= pow6 (* pow5 10)))

(declare-const uns_value5 (_ BitVec 128))

;; H
(assert
  (= uns_value5 (bvudiv uns_value4 #x0000000000000000000000000000000A)))

(declare-const o1 character)

;; Ensures
(assert (= (to_rep o1) (- 48 (mod1 value4 10))))

;; Ensures
(assert (in_range1 (+ p j2)))

;; Assert
(assert
  (and
    (<= (first (of_array s2 (to_rep1 s__first) (to_rep1 s__last))) (+ 
    p j2))
    (<= (+ p j2) (last (of_array s2 (to_rep1 s__first) (to_rep1 s__last))))))

(declare-const s3 (Array Int character))

;; H
(assert
  (= s3 (to_array
          (us_tqtmk
            (store (to_array
                     (of_array s2 (to_rep1 s__first) (to_rep1 s__last))) (+ 
            p j2) o1)
            (rt (of_array s2 (to_rep1 s__first) (to_rep1 s__last)))))))

(declare-const value5 Int)

;; H
(assert (= value5 (div1 value4 10)))

;; Ensures
(assert (in_range1 (+ p nb_digits1)))

;; Ensures
(assert (in_range1 (+ p j2)))

;; Ensures
(assert (in_range1 (+ (+ p j2) 1)))

;; H
(assert true)

;; H
(assert
  (and
    (hexa_to_unsigned_ghost__function_guard
      (hexa_to_unsigned_ghost
        (to_rep
          (select (to_array
                    (of_array
                      (to_array
                        (of_array s3 (to_rep1 s__first) (to_rep1 s__last)))
                      (first
                        (of_array s3 (to_rep1 s__first) (to_rep1 s__last)))
                      (last
                        (of_array s3 (to_rep1 s__first) (to_rep1 s__last))))) (+ (+ 
          p j2) 1))))
      (to_rep
        (select (to_array
                  (of_array
                    (to_array
                      (of_array s3 (to_rep1 s__first) (to_rep1 s__last)))
                    (first
                      (of_array s3 (to_rep1 s__first) (to_rep1 s__last)))
                    (last (of_array s3 (to_rep1 s__first) (to_rep1 s__last))))) (+ (+ 
        p j2) 1))))
    (and
      (hexa_to_unsigned_ghost__function_guard
        (hexa_to_unsigned_ghost
          (to_rep
            (select (to_array
                      (of_array
                        (to_array
                          (of_array s3 (to_rep1 s__first) (to_rep1 s__last)))
                        (first
                          (of_array s3 (to_rep1 s__first) (to_rep1 s__last)))
                        (last
                          (of_array s3 (to_rep1 s__first) (to_rep1 s__last))))) (+ (+ 
            p j2) 1))))
        (to_rep
          (select (to_array
                    (of_array
                      (to_array
                        (of_array s3 (to_rep1 s__first) (to_rep1 s__last)))
                      (first
                        (of_array s3 (to_rep1 s__first) (to_rep1 s__last)))
                      (last
                        (of_array s3 (to_rep1 s__first) (to_rep1 s__last))))) (+ (+ 
          p j2) 1))))
      (= (scan_based_number_ghost
           (of_array
             (to_array (of_array s3 (to_rep1 s__first) (to_rep1 s__last)))
             (first (of_array s3 (to_rep1 s__first) (to_rep1 s__last)))
             (last (of_array s3 (to_rep1 s__first) (to_rep1 s__last))))
           (+ (+ p j2) 1)
           (+ p nb_digits1)
           #x0000000000000000000000000000000A
           prev_value3) (ite (< (+ p nb_digits1) (+ (+ p j2) 1))
                          (us_repqtmk
                            (us_split_discrsqtmk (of_int 0))
                            (us_split_fieldsqtmk (of_rep2 prev_value3)))
                          (ite (= (to_rep
                                    (select (to_array
                                              (of_array
                                                (to_array
                                                  (of_array
                                                    s3
                                                    (to_rep1 s__first)
                                                    (to_rep1 s__last)))
                                                (first
                                                  (of_array
                                                    s3
                                                    (to_rep1 s__first)
                                                    (to_rep1 s__last)))
                                                (last
                                                  (of_array
                                                    s3
                                                    (to_rep1 s__first)
                                                    (to_rep1 s__last))))) (+ (+ 
                                    p j2) 1))) 95)
                            (scan_based_number_ghost
                              (of_array
                                (to_array
                                  (of_array
                                    s3
                                    (to_rep1 s__first)
                                    (to_rep1 s__last)))
                                (first
                                  (of_array
                                    s3
                                    (to_rep1 s__first)
                                    (to_rep1 s__last)))
                                (last
                                  (of_array
                                    s3
                                    (to_rep1 s__first)
                                    (to_rep1 s__last))))
                              (+ (+ (+ p j2) 1) 1)
                              (+ p nb_digits1)
                              #x0000000000000000000000000000000A
                              prev_value3)
                            (ite (= (scan_overflows_ghost
                                      (hexa_to_unsigned_ghost
                                        (to_rep
                                          (select (to_array
                                                    (of_array
                                                      (to_array
                                                        (of_array
                                                          s3
                                                          (to_rep1 s__first)
                                                          (to_rep1 s__last)))
                                                      (first
                                                        (of_array
                                                          s3
                                                          (to_rep1 s__first)
                                                          (to_rep1 s__last)))
                                                      (last
                                                        (of_array
                                                          s3
                                                          (to_rep1 s__first)
                                                          (to_rep1 s__last))))) (+ (+ 
                                          p j2) 1))))
                                      #x0000000000000000000000000000000A
                                      prev_value3) true)
                              (us_repqtmk
                                (us_split_discrsqtmk (of_int 1))
                                (us_split_fieldsqtmk dummy6))
                              (scan_based_number_ghost
                                (of_array
                                  (to_array
                                    (of_array
                                      s3
                                      (to_rep1 s__first)
                                      (to_rep1 s__last)))
                                  (first
                                    (of_array
                                      s3
                                      (to_rep1 s__first)
                                      (to_rep1 s__last)))
                                  (last
                                    (of_array
                                      s3
                                      (to_rep1 s__first)
                                      (to_rep1 s__last))))
                                (+ (+ (+ p j2) 1) 1)
                                (+ p nb_digits1)
                                #x0000000000000000000000000000000A
                                (bvadd (bvmul #x0000000000000000000000000000000A 
                                prev_value3) (hexa_to_unsigned_ghost
                                               (to_rep
                                                 (select (to_array
                                                           (of_array
                                                             (to_array
                                                               (of_array
                                                                 s3
                                                                 (to_rep1
                                                                   s__first)
                                                                 (to_rep1
                                                                   s__last)))
                                                             (first
                                                               (of_array
                                                                 s3
                                                                 (to_rep1
                                                                   s__first)
                                                                 (to_rep1
                                                                   s__last)))
                                                             (last
                                                               (of_array
                                                                 s3
                                                                 (to_rep1
                                                                   s__first)
                                                                 (to_rep1
                                                                   s__last))))) (+ (+ 
                                                 p j2) 1)))))))))))))

;; Assert
(assert
  (=>
    (= prev__attr__constrained true)
    (= (rec__ada___system__val_lllu__impl__uns_option__overflow
         (us_split_discrs1
           (scan_based_number_ghost
             (of_array
               (to_array (of_array s3 (to_rep1 s__first) (to_rep1 s__last)))
               (first (of_array s3 (to_rep1 s__first) (to_rep1 s__last)))
               (last (of_array s3 (to_rep1 s__first) (to_rep1 s__last))))
             (+ (+ p j2) 1)
             (+ p nb_digits1)
             #x0000000000000000000000000000000A
             prev_value3))) prev__split_discrs2)))

;; Ensures
(assert (in_range1 (+ p nb_digits1)))

;; Ensures
(assert (in_range1 (+ p j2)))

;; H
(assert true)

;; H
(assert
  (and
    (hexa_to_unsigned_ghost__function_guard
      (hexa_to_unsigned_ghost
        (to_rep
          (select (to_array
                    (of_array
                      (to_array
                        (of_array s3 (to_rep1 s__first) (to_rep1 s__last)))
                      (first
                        (of_array s3 (to_rep1 s__first) (to_rep1 s__last)))
                      (last
                        (of_array s3 (to_rep1 s__first) (to_rep1 s__last))))) (+ 
          p j2))))
      (to_rep
        (select (to_array
                  (of_array
                    (to_array
                      (of_array s3 (to_rep1 s__first) (to_rep1 s__last)))
                    (first
                      (of_array s3 (to_rep1 s__first) (to_rep1 s__last)))
                    (last (of_array s3 (to_rep1 s__first) (to_rep1 s__last))))) (+ 
        p j2))))
    (and
      (hexa_to_unsigned_ghost__function_guard
        (hexa_to_unsigned_ghost
          (to_rep
            (select (to_array
                      (of_array
                        (to_array
                          (of_array s3 (to_rep1 s__first) (to_rep1 s__last)))
                        (first
                          (of_array s3 (to_rep1 s__first) (to_rep1 s__last)))
                        (last
                          (of_array s3 (to_rep1 s__first) (to_rep1 s__last))))) (+ 
            p j2))))
        (to_rep
          (select (to_array
                    (of_array
                      (to_array
                        (of_array s3 (to_rep1 s__first) (to_rep1 s__last)))
                      (first
                        (of_array s3 (to_rep1 s__first) (to_rep1 s__last)))
                      (last
                        (of_array s3 (to_rep1 s__first) (to_rep1 s__last))))) (+ 
          p j2))))
      (= (scan_based_number_ghost
           (of_array
             (to_array (of_array s3 (to_rep1 s__first) (to_rep1 s__last)))
             (first (of_array s3 (to_rep1 s__first) (to_rep1 s__last)))
             (last (of_array s3 (to_rep1 s__first) (to_rep1 s__last))))
           (+ p j2)
           (+ p nb_digits1)
           #x0000000000000000000000000000000A
           uns_value5) (ite (< (+ p nb_digits1) (+ p j2))
                         (us_repqtmk
                           (us_split_discrsqtmk (of_int 0))
                           (us_split_fieldsqtmk (of_rep2 uns_value5)))
                         (ite (= (to_rep
                                   (select (to_array
                                             (of_array
                                               (to_array
                                                 (of_array
                                                   s3
                                                   (to_rep1 s__first)
                                                   (to_rep1 s__last)))
                                               (first
                                                 (of_array
                                                   s3
                                                   (to_rep1 s__first)
                                                   (to_rep1 s__last)))
                                               (last
                                                 (of_array
                                                   s3
                                                   (to_rep1 s__first)
                                                   (to_rep1 s__last))))) (+ 
                                   p j2))) 95)
                           (scan_based_number_ghost
                             (of_array
                               (to_array
                                 (of_array
                                   s3
                                   (to_rep1 s__first)
                                   (to_rep1 s__last)))
                               (first
                                 (of_array
                                   s3
                                   (to_rep1 s__first)
                                   (to_rep1 s__last)))
                               (last
                                 (of_array
                                   s3
                                   (to_rep1 s__first)
                                   (to_rep1 s__last))))
                             (+ (+ p j2) 1)
                             (+ p nb_digits1)
                             #x0000000000000000000000000000000A
                             uns_value5)
                           (ite (= (scan_overflows_ghost
                                     (hexa_to_unsigned_ghost
                                       (to_rep
                                         (select (to_array
                                                   (of_array
                                                     (to_array
                                                       (of_array
                                                         s3
                                                         (to_rep1 s__first)
                                                         (to_rep1 s__last)))
                                                     (first
                                                       (of_array
                                                         s3
                                                         (to_rep1 s__first)
                                                         (to_rep1 s__last)))
                                                     (last
                                                       (of_array
                                                         s3
                                                         (to_rep1 s__first)
                                                         (to_rep1 s__last))))) (+ 
                                         p j2))))
                                     #x0000000000000000000000000000000A
                                     uns_value5) true)
                             (us_repqtmk
                               (us_split_discrsqtmk (of_int 1))
                               (us_split_fieldsqtmk dummy6))
                             (scan_based_number_ghost
                               (of_array
                                 (to_array
                                   (of_array
                                     s3
                                     (to_rep1 s__first)
                                     (to_rep1 s__last)))
                                 (first
                                   (of_array
                                     s3
                                     (to_rep1 s__first)
                                     (to_rep1 s__last)))
                                 (last
                                   (of_array
                                     s3
                                     (to_rep1 s__first)
                                     (to_rep1 s__last))))
                               (+ (+ p j2) 1)
                               (+ p nb_digits1)
                               #x0000000000000000000000000000000A
                               (bvadd (bvmul #x0000000000000000000000000000000A 
                               uns_value5) (hexa_to_unsigned_ghost
                                             (to_rep
                                               (select (to_array
                                                         (of_array
                                                           (to_array
                                                             (of_array
                                                               s3
                                                               (to_rep1
                                                                 s__first)
                                                               (to_rep1
                                                                 s__last)))
                                                           (first
                                                             (of_array
                                                               s3
                                                               (to_rep1
                                                                 s__first)
                                                               (to_rep1
                                                                 s__last)))
                                                           (last
                                                             (of_array
                                                               s3
                                                               (to_rep1
                                                                 s__first)
                                                               (to_rep1
                                                                 s__last))))) (+ 
                                               p j2)))))))))))))

;; Assert
(assert
  (=>
    (= cur__attr__constrained true)
    (= (rec__ada___system__val_lllu__impl__uns_option__overflow
         (us_split_discrs1
           (scan_based_number_ghost
             (of_array
               (to_array (of_array s3 (to_rep1 s__first) (to_rep1 s__last)))
               (first (of_array s3 (to_rep1 s__first) (to_rep1 s__last)))
               (last (of_array s3 (to_rep1 s__first) (to_rep1 s__last))))
             (+ p j2)
             (+ p nb_digits1)
             #x0000000000000000000000000000000A
             uns_value5))) cur__split_discrs2)))

(declare-const spark__branch1 Bool)

;; H
(assert (= spark__branch1 (ite (= j2 nb_digits1) false true)))

;; H
(assert
  (or
    (not (= spark__branch1 true))
    (let ((o2 (+ p nb_digits1)))
      (and
        (in_range1 o2)
        (let ((o3 (+ p j2)))
          (and
            (in_range1 o3)
            (let ((o4 (+ o3 1)))
              (and
                (in_range1 o4)
                (exists ((o5 Int))
                  (and
                    (= (to_rep1 s__last) o5)
                    (exists ((o6 Int))
                      (and
                        (= (to_rep1 s__first) o6)
                        (let ((temp___1077 (of_array s3 o6 o5)))
                          (exists ((o7 Int))
                            (and
                              (= (to_rep1 prev_s__last) o7)
                              (exists ((o8 Int))
                                (and
                                  (= (to_rep1 prev_s__first) o8)
                                  (= (bool_eq10
                                       (scan_based_number_ghost
                                         (of_array prev_s3 o8 o7)
                                         o4
                                         o2
                                         #x0000000000000000000000000000000A
                                         prev_value3)
                                       (scan_based_number_ghost
                                         (of_array
                                           (to_array temp___1077)
                                           (first temp___1077)
                                           (last temp___1077))
                                         o4
                                         o2
                                         #x0000000000000000000000000000000A
                                         prev_value3)) true))))))))))))))))))

;; H
(assert
  (dynamic_invariant4 (uns_of_non_positive value5) true false true true))

;; H
(assert
  (= (uns_of_non_positive value5) (ite (= value5 (- 170141183460469231731687303715884105728))
                                    #x80000000000000000000000000000000
                                    ((_ int2bv 128) (- value5)))))

;; eq'result'unused'unused
(define-fun eqqtresultqtunusedqtunused1 () Bool
  (ite (= uns_value5 (uns_of_non_positive value5)) true false))

;; Goal def'vc
;; File "s-imagei.adb", line 90, characters 0-0
(assert
  (not (= uns_value5 (uns_of_non_positive value5))))

(check-sat)
(exit)
