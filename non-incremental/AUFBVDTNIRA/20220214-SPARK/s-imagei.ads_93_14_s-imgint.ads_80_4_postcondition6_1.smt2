(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTNIRA)
(set-info :source |
Generated by: Yannick Moy
Generated on: 2022-02-14
Generator: GNATprove
Application: GNAT light runtime library
Target solver: Alt-Ergo, CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)

;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
  (((Tuple0))))

(declare-sort us_private 0)

;; private__bool_eq
(declare-fun private__bool_eq (us_private
  us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
  (((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))

(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
  (((int__refqtmk (int__content Int)))))

(declare-datatypes ((bool__ref 0))
  (((bool__refqtmk (bool__content Bool)))))

(declare-datatypes ((us_fixed__ref 0))
  (((us_fixed__refqtmk (us_fixed__content Int)))))

(declare-datatypes ((real__ref 0))
  (((real__refqtmk (real__content Real)))))

(declare-datatypes ((us_private__ref 0))
  (((us_private__refqtmk (us_private__content us_private)))))

;; int__ref___projection
(define-fun int__ref___projection ((a int__ref)) Int
  (int__content a))

;; __fixed__ref___projection
(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int
  (us_fixed__content a))

;; bool__ref___projection
(define-fun bool__ref___projection ((a bool__ref)) Bool
  (bool__content a))

;; real__ref___projection
(define-fun real__ref___projection ((a real__ref)) Real
  (real__content a))

;; __private__ref___projection
(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

;; bool_eq
(declare-fun bool_eq (Int
  Int) Bool)

;; bool_ne
(declare-fun bool_ne (Int
  Int) Bool)

;; bool_lt
(declare-fun bool_lt (Int
  Int) Bool)

;; bool_le
(declare-fun bool_le (Int
  Int) Bool)

;; bool_gt
(declare-fun bool_gt (Int
  Int) Bool)

;; bool_ge
(declare-fun bool_ge (Int
  Int) Bool)

;; bool_eq_axiom
(assert
  (forall ((x Int)) (forall ((y Int)) (= (= (bool_eq x y) true) (= x y)))))

;; bool_ne_axiom
(assert
  (forall ((x Int))
    (forall ((y Int)) (= (= (bool_ne x y) true) (not (= x y))))))

;; bool_lt_axiom
(assert
  (forall ((x Int)) (forall ((y Int)) (= (= (bool_lt x y) true) (< x y)))))

;; bool_int__le_axiom
(assert
  (forall ((x Int)) (forall ((y Int)) (= (= (bool_le x y) true) (<= x y)))))

;; bool_gt_axiom
(assert
  (forall ((x Int)) (forall ((y Int)) (= (= (bool_gt x y) true) (< y x)))))

;; bool_ge_axiom
(assert
  (forall ((x Int)) (forall ((y Int)) (= (= (bool_ge x y) true) (<= y x)))))

;; length
(define-fun length ((x Int) (y Int)) Int
  (ite (<= x y) (+ (- y x) 1) 0))

;; nth
(declare-fun nth ((_ BitVec 32)
  Int) Bool)

;; lsr
(declare-fun lsr ((_ BitVec 32)
  Int) (_ BitVec 32))

;; asr
(declare-fun asr ((_ BitVec 32)
  Int) (_ BitVec 32))

;; lsl
(declare-fun lsl ((_ BitVec 32)
  Int) (_ BitVec 32))

;; abs
(define-fun abs1 ((x Int)) Int
  (ite (<= 0 x) x (- x)))

;; Abs_le
(assert
  (forall ((x Int) (y Int)) (= (<= (abs1 x) y) (and (<= (- y) x) (<= x y)))))

;; Abs_pos
(assert (forall ((x Int)) (<= 0 (abs1 x))))

;; Div_unique
(assert
  (forall ((x Int) (y Int) (q Int))
    (=>
      (< 0 y)
      (=> (and (<= (* q y) x) (< x (+ (* q y) y))) (= (div x y) q)))))

;; Div_bound
(assert
  (forall ((x Int) (y Int))
    (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div x y)) (<= (div x y) x)))))

;; Div_inf
(assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div x y) 0))))

;; Div_inf_neg
(assert
  (forall ((x Int) (y Int))
    (=> (and (< 0 x) (<= x y)) (= (div (- x) y) (- 1)))))

;; Mod_0
(assert (forall ((y Int)) (=> (not (= y 0)) (= (mod 0 y) 0))))

;; Div_1_left
(assert (forall ((y Int)) (=> (< 1 y) (= (div 1 y) 0))))

;; Div_minus1_left
(assert (forall ((y Int)) (=> (< 1 y) (= (div (- 1) y) (- 1)))))

;; Mod_1_left
(assert (forall ((y Int)) (=> (< 1 y) (= (mod 1 y) 1))))

;; Mod_minus1_left
(assert
  (forall ((y Int))
    (! (=> (< 1 y) (= (mod (- 1) y) (- y 1))) :pattern ((mod (- 1) y)) )))

;; Div_mult
(assert
  (forall ((x Int) (y Int) (z Int))
    (! (=> (< 0 x) (= (div (+ (* x y) z) x) (+ y (div z x)))) :pattern ((div (+ (* x y) z) x)) )))

;; Mod_mult
(assert
  (forall ((x Int) (y Int) (z Int))
    (! (=> (< 0 x) (= (mod (+ (* x y) z) x) (mod z x))) :pattern ((mod (+ (* x y) z) x)) )))

;; rotate_right
(declare-fun rotate_right1 ((_ BitVec 32)
  Int) (_ BitVec 32))

;; rotate_left
(declare-fun rotate_left1 ((_ BitVec 32)
  Int) (_ BitVec 32))

;; pow2
(declare-fun pow2 (Int) Int)

(declare-const two_power_size_minus_one Int)

;; two_power_size_minus_one_val
(assert (= two_power_size_minus_one (pow2 (- 32 1))))

;; to_int
(define-fun to_int1 ((x (_ BitVec 32))) Int
  (ite (bvsge x (_ bv0 32)) (bv2nat x) (- (- 4294967296 (bv2nat x)))))

;; uint_in_range
(define-fun uint_in_range ((i Int)) Bool
  (and (<= 0 i) (<= i 4294967295)))

;; lsr_bv_is_lsr
(assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
    (= (bvlshr x n) (lsr x (bv2nat n)))))

;; asr_bv_is_asr
(assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
    (= (bvashr x n) (asr x (bv2nat n)))))

;; lsl_bv_is_lsl
(assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
    (= (bvshl x n) (lsl x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
(assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
    (= (bvor (bvshl v (bvurem n (_ bv32 32))) (bvlshr v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) 
    (rotate_left1
      v
      (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
(assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
    (= (bvor (bvlshr v (bvurem n (_ bv32 32))) (bvshl v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) 
    (rotate_right1
      v
      (bv2nat n)))))

;; nth_bv
(declare-fun nth_bv ((_ BitVec 32)
  (_ BitVec 32)) Bool)

;; nth_bv_def
(assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
    (=
      (= (nth_bv x i) true)
      (not (= (bvand (bvlshr x i) #x00000001) #x00000000)))))

;; Nth_bv_is_nth
(assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
    (= (nth x (bv2nat i)) (nth_bv x i))))

;; Nth_bv_is_nth2
(assert
  (forall ((x (_ BitVec 32)) (i Int))
    (=>
      (and (<= 0 i) (< i 4294967296))
      (= (nth_bv x ((_ int2bv 32) i)) (nth x i)))))

;; eq_sub_bv
(declare-fun eq_sub_bv ((_ BitVec 32)
  (_ BitVec 32)
  (_ BitVec 32)
  (_ BitVec 32)) Bool)

;; eq_sub_bv_def
(assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32)) (n (_ BitVec 32)))
    (let ((mask (bvshl (bvsub (bvshl #x00000001 n) #x00000001) i)))
      (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))

;; eq_sub
(define-fun eq_sub ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int) (n Int)) Bool
  (forall ((j Int))
    (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

;; eq_sub_equiv
(assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32)) (n (_ BitVec 32)))
    (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))

(declare-datatypes ((t__ref 0))
  (((t__refqtmk (t__content (_ BitVec 32))))))

;; bool_eq
(define-fun bool_eq1 ((x (_ BitVec 32)) (y (_ BitVec 32))) Bool
  (ite (= x y) true false))

;; bool_ne
(define-fun bool_ne1 ((x (_ BitVec 32)) (y (_ BitVec 32))) Bool
  (ite (not (= x y)) true false))

;; bool_lt
(define-fun bool_lt1 ((x (_ BitVec 32)) (y (_ BitVec 32))) Bool
  (ite (bvult x y) true false))

;; bool_le
(define-fun bool_le1 ((x (_ BitVec 32)) (y (_ BitVec 32))) Bool
  (ite (bvule x y) true false))

;; bool_gt
(define-fun bool_gt1 ((x (_ BitVec 32)) (y (_ BitVec 32))) Bool
  (ite (bvugt x y) true false))

;; bool_ge
(define-fun bool_ge1 ((x (_ BitVec 32)) (y (_ BitVec 32))) Bool
  (ite (bvuge x y) true false))

;; power
(declare-fun power ((_ BitVec 32)
  Int) (_ BitVec 32))

;; Power_0
(assert (forall ((x (_ BitVec 32))) (= (power x 0) #x00000001)))

;; Power_1
(assert (forall ((x (_ BitVec 32))) (= (power x 1) x)))

;; Power_s
(assert
  (forall ((x (_ BitVec 32)) (n Int))
    (=> (<= 0 n) (= (power x (+ n 1)) (bvmul x (power x n))))))

;; Power_s_alt
(assert
  (forall ((x (_ BitVec 32)) (n Int))
    (=> (< 0 n) (= (power x n) (bvmul x (power x (- n 1)))))))

;; Power_sum
(assert
  (forall ((x (_ BitVec 32)) (n Int) (m Int))
    (=>
      (<= 0 n)
      (=> (<= 0 m) (= (power x (+ n m)) (bvmul (power x n) (power x m)))))))

;; Power_mult
(assert
  (forall ((x (_ BitVec 32)) (n Int) (m Int))
    (=> (<= 0 n) (=> (<= 0 m) (= (power x (* n m)) (power (power x n) m))))))

;; Power_mult2
(assert
  (forall ((x (_ BitVec 32)) (y (_ BitVec 32)) (n Int))
    (=> (<= 0 n) (= (power (bvmul x y) n) (bvmul (power x n) (power y n))))))

;; bv_min
(define-fun bv_min ((x (_ BitVec 32)) (y (_ BitVec 32))) (_ BitVec 32)
  (ite (bvule x y) x y))

;; bv_max
(define-fun bv_max ((x (_ BitVec 32)) (y (_ BitVec 32))) (_ BitVec 32)
  (ite (bvule x y) y x))

;; min
(define-fun min ((x Int) (y Int)) Int
  (ite (<= x y) x y))

;; max
(define-fun max ((x Int) (y Int)) Int
  (ite (<= x y) y x))

;; Min_r
(assert (forall ((x Int) (y Int)) (=> (<= y x) (= (min x y) y))))

;; Max_l
(assert (forall ((x Int) (y Int)) (=> (<= y x) (= (max x y) x))))

;; Min_comm
(assert (forall ((x Int) (y Int)) (= (min x y) (min y x))))

;; Max_comm
(assert (forall ((x Int) (y Int)) (= (max x y) (max y x))))

;; Min_assoc
(assert
  (forall ((x Int) (y Int) (z Int)) (= (min (min x y) z) (min x (min y z)))))

;; Max_assoc
(assert
  (forall ((x Int) (y Int) (z Int)) (= (max (max x y) z) (max x (max y z)))))

;; bv_min_to_uint
(assert
  (forall ((x (_ BitVec 32)) (y (_ BitVec 32)))
    (= (bv2nat (bv_min x y)) (min (bv2nat x) (bv2nat y)))))

;; bv_max_to_uint
(assert
  (forall ((x (_ BitVec 32)) (y (_ BitVec 32)))
    (= (bv2nat (bv_max x y)) (max (bv2nat x) (bv2nat y)))))

;; uc_of_int
(define-fun uc_of_int ((x Int)) (_ BitVec 32)
  (ite (<= 0 x) ((_ int2bv 32) x) (bvneg ((_ int2bv 32) (- x)))))

;; uc_to_int
(define-fun uc_to_int ((x (_ BitVec 32))) Int
  (ite (= (bool_lt1 x ((_ int2bv 32) two_power_size_minus_one)) true)
    (bv2nat x)
    (- (bv2nat (bvneg x)))))

;; bool_eq
(define-fun bool_eq2 ((x Bool) (y Bool)) Bool
  (ite (= x y) true false))

;; to_int
(define-fun to_int2 ((b Bool)) Int
  (ite (= b true) 1 0))

;; of_int
(define-fun of_int ((i Int)) Bool
  (ite (= i 0) false true))

;; in_range
(define-fun in_range ((x Int)) Bool
  (or (= x 0) (= x 1)))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

;; integer'int
(declare-fun integerqtint (integer) Int)

;; integer'axiom
(assert
  (forall ((i integer))
    (and
      (<= (- 2147483648) (integerqtint i))
      (<= (integerqtint i) 2147483647))))

;; in_range
(define-fun in_range1 ((x Int)) Bool
  (and (<= (- 2147483648) x) (<= x 2147483647)))

;; bool_eq
(define-fun bool_eq3 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

;; user_eq
(declare-fun user_eq (integer
  integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
  (((integer__refqtmk (integer__content integer)))))

;; integer__ref_integer__content__projection
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer
  (integer__content a))

(declare-sort natural 0)

;; natural'int
(declare-fun naturalqtint (natural) Int)

;; natural'axiom
(assert
  (forall ((i natural))
    (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

;; in_range
(define-fun in_range2 ((x Int)) Bool
  (and (<= 0 x) (<= x 2147483647)))

;; bool_eq
(define-fun bool_eq4 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

;; user_eq
(declare-fun user_eq1 (natural
  natural) Bool)

(declare-const dummy1 natural)

(declare-datatypes ((natural__ref 0))
  (((natural__refqtmk (natural__content natural)))))

;; natural__ref_natural__content__projection
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural
  (natural__content a))

;; dynamic_invariant
(define-fun dynamic_invariant ((temp___expr_46 Int) (temp___is_init_42 Bool) (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool) (temp___do_typ_inv_45 Bool)) Bool
  (=>
    (or (= temp___is_init_42 true) (<= 0 2147483647))
    (in_range2 temp___expr_46)))

(declare-sort positive 0)

;; positive'int
(declare-fun positiveqtint (positive) Int)

;; positive'axiom
(assert
  (forall ((i positive))
    (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

;; in_range
(define-fun in_range3 ((x Int)) Bool
  (and (<= 1 x) (<= x 2147483647)))

;; bool_eq
(define-fun bool_eq5 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

;; user_eq
(declare-fun user_eq2 (positive
  positive) Bool)

(declare-const dummy2 positive)

(declare-datatypes ((positive__ref 0))
  (((positive__refqtmk (positive__content positive)))))

;; positive__ref_positive__content__projection
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive
  (positive__content a))

(declare-sort character 0)

;; in_range
(define-fun in_range4 ((x Int)) Bool
  (and (<= 0 x) (<= x 255)))

;; bool_eq
(define-fun bool_eq6 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

;; user_eq
(declare-fun user_eq3 (character
  character) Bool)

(declare-const dummy3 character)

(declare-datatypes ((character__ref 0))
  (((character__refqtmk (character__content character)))))

;; character__ref_character__content__projection
(define-fun character__ref_character__content__projection ((a character__ref)) character
  (character__content a))

;; to_rep
(declare-fun to_rep (character) Int)

;; of_rep
(declare-fun of_rep (Int) character)

;; inversion_axiom
(assert
  (forall ((x character))
    (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
(assert
  (forall ((x character)) (! (in_range4 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
(assert
  (forall ((x Int))
    (! (=> (in_range4 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                                (of_rep x))) )))

(declare-datatypes ((map__ref 0))
  (((map__refqtmk (map__content (Array Int character))))))

;; slide
(declare-fun slide ((Array Int character)
  Int
  Int) (Array Int character))

;; slide_eq
(assert
  (forall ((a (Array Int character)))
    (forall ((first Int))
      (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
(assert
  (forall ((a (Array Int character)))
    (forall ((old_first Int))
      (forall ((new_first Int))
        (forall ((i Int))
          (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
          (slide
            a
            old_first
            new_first) i)) ))))))

;; const
(declare-fun const1 (character) (Array Int character))

;; const_def
(assert
  (forall ((v character))
    (forall ((i Int))
      (! (= (select (const1 v) i) v) :pattern ((select (const1 v) i)) ))))

;; bool_eq
(define-fun bool_eq7 ((a (Array Int character)) (a__first Int) (a__last Int) (b (Array Int character)) (b__first Int) (b__last Int)) Bool
  (ite (and
         (ite (<= a__first a__last)
           (and
             (<= b__first b__last)
             (= (- a__last a__first) (- b__last b__first)))
           (< b__last b__first))
         (forall ((temp___idx_105 Int))
           (=>
             (and (<= a__first temp___idx_105) (<= temp___idx_105 a__last))
             (= (to_rep (select a temp___idx_105)) (to_rep
                                                     (select b (+ (- b__first a__first) temp___idx_105)))))))
    true
    false))

;; bool_eq_rev
(assert
  (forall ((a (Array Int character)) (b (Array Int character)))
    (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
      (=>
        (= (bool_eq7 b b__first b__last a a__first a__last) true)
        (and
          (ite (<= a__first a__last)
            (and
              (<= b__first b__last)
              (= (- a__last a__first) (- b__last b__first)))
            (< b__last b__first))
          (forall ((temp___idx_105 Int))
            (=>
              (and (<= a__first temp___idx_105) (<= temp___idx_105 a__last))
              (= (to_rep (select a temp___idx_105)) (to_rep
                                                      (select b (+ (- b__first a__first) temp___idx_105)))))))))))

;; to_rep
(define-fun to_rep1 ((x integer)) Int
  (integerqtint x))

;; of_rep
(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
(assert
  (forall ((x integer))
    (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
(assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
(assert
  (forall ((x Int))
    (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                                  (of_rep1 x))) )))

(declare-datatypes ((t 0))
  (((tqtmk (rec__first integer)(rec__last integer)))))

;; mk
(declare-fun mk (Int
  Int) t)

;; mk_def
(assert
  (forall ((f Int) (l Int))
    (! (=>
         (in_range1 f)
         (=>
           (in_range1 l)
           (and
             (= (to_rep1 (rec__first (mk f l))) f)
             (= (to_rep1 (rec__last (mk f l))) l)))) :pattern ((mk f l)) )))

;; dynamic_property
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool
  (and
    (in_range1 low)
    (and
      (in_range1 high)
      (=> (<= low high) (and (in_range3 low) (in_range3 high))))))

(declare-datatypes ((us_t 0))
  (((us_tqtmk (elts (Array Int character))(rt t)))))

;; to_array
(define-fun to_array ((a us_t)) (Array Int character)
  (elts a))

;; of_array
(define-fun of_array ((a (Array Int character)) (f Int) (l Int)) us_t
  (us_tqtmk a (mk f l)))

;; first
(define-fun first ((a us_t)) Int
  (to_rep1 (rec__first (rt a))))

;; last
(define-fun last ((a us_t)) Int
  (to_rep1 (rec__last (rt a))))

;; length
(define-fun length1 ((a us_t)) Int
  (ite (<= (first a) (last a)) (+ (- (last a) (first a)) 1) 0))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
(assert (<= 0 value__size))

;; object__size_axiom
(assert (<= 0 object__size))

;; component__size_axiom
(assert (<= 0 component__size))

;; alignment_axiom
(assert (<= 0 alignment))

;; bool_eq
(define-fun bool_eq8 ((x us_t) (y us_t)) Bool
  (bool_eq7
    (elts x)
    (to_rep1 (rec__first (rt x)))
    (to_rep1 (rec__last (rt x)))
    (elts y)
    (to_rep1 (rec__first (rt y)))
    (to_rep1 (rec__last (rt y)))))

;; user_eq
(declare-fun user_eq4 (us_t
  us_t) Bool)

(declare-const dummy4 us_t)

(declare-datatypes ((string____ref 0))
  (((string____refqtmk (string____content us_t)))))

;; string____ref_string____content__projection
(define-fun string____ref_string____content__projection ((a string____ref)) us_t
  (string____content a))

;; width
(declare-fun width ((_ BitVec 32)
  (_ BitVec 32)) Int)

;; width__function_guard
(declare-fun width__function_guard (Int
  (_ BitVec 32)
  (_ BitVec 32)) Bool)

(declare-const unsigned_width_ghost Int)

(declare-sort unsigned 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 32))

;; bool_eq
(define-fun bool_eq9 ((x (_ BitVec 32)) (y (_ BitVec 32))) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE5 ((_ BitVec 32)) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) (_ BitVec 32))

;; user_eq
(declare-fun user_eq5 (unsigned
  unsigned) Bool)

(declare-const dummy5 unsigned)

(declare-datatypes ((unsigned__ref 0))
  (((unsigned__refqtmk (unsigned__content unsigned)))))

;; unsigned__ref_unsigned__content__3__projection
(define-fun unsigned__ref_unsigned__content__3__projection ((a unsigned__ref)) unsigned
  (unsigned__content a))

;; to_rep
(declare-fun to_rep2 (unsigned) (_ BitVec 32))

;; of_rep
(declare-fun of_rep2 ((_ BitVec 32)) unsigned)

;; inversion_axiom
(assert
  (forall ((x unsigned))
    (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
(assert true)

;; coerce_axiom
(assert
  (forall ((x (_ BitVec 32)))
    (! (= (to_rep2 (of_rep2 x)) x) :pattern ((to_rep2 (of_rep2 x))) )))

;; to_int
(define-fun to_int3 ((x unsigned)) Int
  (bv2nat (to_rep2 x)))

;; range_int_axiom
(assert
  (forall ((x unsigned))
    (! (uint_in_range (to_int3 x)) :pattern ((to_int3 x)) )))

(declare-datatypes ((us_split_discrs 0))
  (((us_split_discrsqtmk
    (rec__ada___system__val_uns__impl__uns_option__overflow Bool)))))

;; __split_discrs_rec__ada___system__val_uns__impl__uns_option__overflow__projection
(define-fun us_split_discrs_rec__ada___system__val_uns__impl__uns_option__overflow__projection 
  ((a us_split_discrs)) Bool
  (rec__ada___system__val_uns__impl__uns_option__overflow a))

(declare-datatypes ((us_split_discrs__ref 0))
  (((us_split_discrs__refqtmk (us_split_discrs__content us_split_discrs)))))

;; __split_discrs__ref___split_discrs__content__projection
(define-fun us_split_discrs__ref___split_discrs__content__projection 
  ((a us_split_discrs__ref)) us_split_discrs
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields 0))
  (((us_split_fieldsqtmk
    (rec__ada___system__val_uns__impl__uns_option__value unsigned)))))

;; __split_fields_rec__ada___system__val_uns__impl__uns_option__value__projection
(define-fun us_split_fields_rec__ada___system__val_uns__impl__uns_option__value__projection 
  ((a us_split_fields)) unsigned
  (rec__ada___system__val_uns__impl__uns_option__value a))

(declare-datatypes ((us_split_fields__ref 0))
  (((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))

;; __split_fields__ref___split_fields__content__projection
(define-fun us_split_fields__ref___split_fields__content__projection 
  ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
  (((us_repqtmk
    (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))

;; __rep___split_discrs__projection
(define-fun us_rep___split_discrs__projection ((a us_rep)) us_split_discrs
  (us_split_discrs1 a))

;; __rep___split_fields__projection
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields
  (us_split_fields1 a))

;; ada___system__val_uns__impl__uns_option__value__pred
(define-fun ada___system__val_uns__impl__uns_option__value__pred ((a us_rep)) Bool
  (= (to_int2
       (rec__ada___system__val_uns__impl__uns_option__overflow
         (us_split_discrs1 a))) 0))

;; bool_eq
(define-fun bool_eq10 ((a us_rep) (b us_rep)) Bool
  (ite (and
         (= (to_int2
              (rec__ada___system__val_uns__impl__uns_option__overflow
                (us_split_discrs1 a))) (to_int2
                                         (rec__ada___system__val_uns__impl__uns_option__overflow
                                           (us_split_discrs1 b))))
         (=>
           (ada___system__val_uns__impl__uns_option__value__pred a)
           (= (to_rep2
                (rec__ada___system__val_uns__impl__uns_option__value
                  (us_split_fields1 a))) (to_rep2
                                           (rec__ada___system__val_uns__impl__uns_option__value
                                             (us_split_fields1 b))))))
    true
    false))

;; in_range
(define-fun in_range5 ((rec__ada___system__val_uns__impl__uns_option__overflow1 Bool) (a us_split_discrs)) Bool
  (= rec__ada___system__val_uns__impl__uns_option__overflow1 (rec__ada___system__val_uns__impl__uns_option__overflow
                                                               a)))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
(assert (<= 0 value__size1))

;; object__size_axiom
(assert (<= 0 object__size1))

;; alignment_axiom
(assert (<= 0 alignment1))

(declare-const ada___system__val_uns__impl__uns_option__overflow__first__bit Int)

(declare-const ada___system__val_uns__impl__uns_option__overflow__last__bit Int)

(declare-const ada___system__val_uns__impl__uns_option__overflow__position Int)

;; ada___system__val_uns__impl__uns_option__overflow__first__bit_axiom
(assert (<= 0 ada___system__val_uns__impl__uns_option__overflow__first__bit))

;; ada___system__val_uns__impl__uns_option__overflow__last__bit_axiom
(assert
  (< ada___system__val_uns__impl__uns_option__overflow__first__bit ada___system__val_uns__impl__uns_option__overflow__last__bit))

;; ada___system__val_uns__impl__uns_option__overflow__position_axiom
(assert (<= 0 ada___system__val_uns__impl__uns_option__overflow__position))

(declare-const ada___system__val_uns__impl__uns_option__value__first__bit Int)

(declare-const ada___system__val_uns__impl__uns_option__value__last__bit Int)

(declare-const ada___system__val_uns__impl__uns_option__value__position Int)

;; ada___system__val_uns__impl__uns_option__value__first__bit_axiom
(assert (<= 0 ada___system__val_uns__impl__uns_option__value__first__bit))

;; ada___system__val_uns__impl__uns_option__value__last__bit_axiom
(assert
  (< ada___system__val_uns__impl__uns_option__value__first__bit ada___system__val_uns__impl__uns_option__value__last__bit))

;; ada___system__val_uns__impl__uns_option__value__position_axiom
(assert (<= 0 ada___system__val_uns__impl__uns_option__value__position))

;; user_eq
(declare-fun user_eq6 (us_rep
  us_rep) Bool)

(declare-const dummy6 us_rep)

(declare-datatypes ((uns_option__ref 0))
  (((uns_option__refqtmk (uns_option__content us_rep)))))

;; uns_option__ref_uns_option__content__projection
(define-fun uns_option__ref_uns_option__content__projection ((a uns_option__ref)) us_rep
  (uns_option__content a))

;; scan_based_number_ghost
(declare-fun scan_based_number_ghost (us_t
  Int
  Int
  (_ BitVec 32)
  (_ BitVec 32)) us_rep)

;; scan_based_number_ghost__function_guard
(declare-fun scan_based_number_ghost__function_guard (us_rep
  us_t
  Int
  Int
  (_ BitVec 32)
  (_ BitVec 32)) Bool)

;; dynamic_invariant
(define-fun dynamic_invariant1 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool
  (=>
    (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647))
    (in_range1 temp___expr_18)))

;; dynamic_invariant
(define-fun dynamic_invariant2 ((temp___expr_110 us_t) (temp___is_init_106 Bool) (temp___skip_constant_107 Bool) (temp___do_toplevel_108 Bool) (temp___do_typ_inv_109 Bool)) Bool
  (=>
    (not (= temp___skip_constant_107 true))
    (dynamic_property
      1
      2147483647
      (first temp___expr_110)
      (last temp___expr_110))))

;; only_hexa_ghost
(declare-fun only_hexa_ghost (us_t
  Int
  Int) Bool)

;; only_hexa_ghost__function_guard
(declare-fun only_hexa_ghost__function_guard (Bool
  us_t
  Int
  Int) Bool)

;; hexa_to_unsigned_ghost
(declare-fun hexa_to_unsigned_ghost (Int) (_ BitVec 32))

;; hexa_to_unsigned_ghost__function_guard
(declare-fun hexa_to_unsigned_ghost__function_guard ((_ BitVec 32)
  Int) Bool)

;; scan_overflows_ghost
(declare-fun scan_overflows_ghost ((_ BitVec 32)
  (_ BitVec 32)
  (_ BitVec 32)) Bool)

;; scan_overflows_ghost__function_guard
(declare-fun scan_overflows_ghost__function_guard (Bool
  (_ BitVec 32)
  (_ BitVec 32)
  (_ BitVec 32)) Bool)

;; default_initial_assumption
(define-fun default_initial_assumption ((temp___expr_238 us_rep) (temp___skip_top_level_239 Bool)) Bool
  (and
    (= (rec__ada___system__val_uns__impl__uns_option__overflow
         (us_split_discrs1 temp___expr_238)) (of_int 0))
    (=>
      (ada___system__val_uns__impl__uns_option__value__pred temp___expr_238)
      (= (to_rep2
           (rec__ada___system__val_uns__impl__uns_option__value
             (us_split_fields1 temp___expr_238))) #x00000000))))

;; dynamic_invariant
(define-fun dynamic_invariant3 ((temp___expr_229 (_ BitVec 32)) (temp___is_init_225 Bool) (temp___skip_constant_226 Bool) (temp___do_toplevel_227 Bool) (temp___do_typ_inv_228 Bool)) Bool
  true)

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
(assert (<= 0 value__size2))

;; object__size_axiom
(assert (<= 0 object__size2))

;; alignment_axiom
(assert (<= 0 alignment2))

(declare-const ada___system__val_uns__impl__uns_option__overflow__first__bit1 Int)

(declare-const ada___system__val_uns__impl__uns_option__overflow__last__bit1 Int)

(declare-const ada___system__val_uns__impl__uns_option__overflow__position1 Int)

;; ada___system__val_uns__impl__uns_option__overflow__first__bit_axiom
(assert
  (<= 0 ada___system__val_uns__impl__uns_option__overflow__first__bit1))

;; ada___system__val_uns__impl__uns_option__overflow__last__bit_axiom
(assert
  (< ada___system__val_uns__impl__uns_option__overflow__first__bit1 ada___system__val_uns__impl__uns_option__overflow__last__bit1))

;; ada___system__val_uns__impl__uns_option__overflow__position_axiom
(assert (<= 0 ada___system__val_uns__impl__uns_option__overflow__position1))

(declare-const ada___system__val_uns__impl__uns_option__value__first__bit1 Int)

(declare-const ada___system__val_uns__impl__uns_option__value__last__bit1 Int)

(declare-const ada___system__val_uns__impl__uns_option__value__position1 Int)

;; ada___system__val_uns__impl__uns_option__value__first__bit_axiom
(assert (<= 0 ada___system__val_uns__impl__uns_option__value__first__bit1))

;; ada___system__val_uns__impl__uns_option__value__last__bit_axiom
(assert
  (< ada___system__val_uns__impl__uns_option__value__first__bit1 ada___system__val_uns__impl__uns_option__value__last__bit1))

;; ada___system__val_uns__impl__uns_option__value__position_axiom
(assert (<= 0 ada___system__val_uns__impl__uns_option__value__position1))

;; user_eq
(declare-fun user_eq7 (us_rep
  us_rep) Bool)

(declare-const dummy7 us_rep)

(declare-datatypes ((t128s__ref 0))
  (((t128s__refqtmk (t128s__content us_rep)))))

;; t128s__ref_t128s__content__projection
(define-fun t128s__ref_t128s__content__projection ((a t128s__ref)) us_rep
  (t128s__content a))

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; value__size_axiom
(assert (<= 0 value__size3))

;; object__size_axiom
(assert (<= 0 object__size3))

;; alignment_axiom
(assert (<= 0 alignment3))

(declare-const ada___system__val_uns__impl__uns_option__overflow__first__bit2 Int)

(declare-const ada___system__val_uns__impl__uns_option__overflow__last__bit2 Int)

(declare-const ada___system__val_uns__impl__uns_option__overflow__position2 Int)

;; ada___system__val_uns__impl__uns_option__overflow__first__bit_axiom
(assert
  (<= 0 ada___system__val_uns__impl__uns_option__overflow__first__bit2))

;; ada___system__val_uns__impl__uns_option__overflow__last__bit_axiom
(assert
  (< ada___system__val_uns__impl__uns_option__overflow__first__bit2 ada___system__val_uns__impl__uns_option__overflow__last__bit2))

;; ada___system__val_uns__impl__uns_option__overflow__position_axiom
(assert (<= 0 ada___system__val_uns__impl__uns_option__overflow__position2))

(declare-const ada___system__val_uns__impl__uns_option__value__first__bit2 Int)

(declare-const ada___system__val_uns__impl__uns_option__value__last__bit2 Int)

(declare-const ada___system__val_uns__impl__uns_option__value__position2 Int)

;; ada___system__val_uns__impl__uns_option__value__first__bit_axiom
(assert (<= 0 ada___system__val_uns__impl__uns_option__value__first__bit2))

;; ada___system__val_uns__impl__uns_option__value__last__bit_axiom
(assert
  (< ada___system__val_uns__impl__uns_option__value__first__bit2 ada___system__val_uns__impl__uns_option__value__last__bit2))

;; ada___system__val_uns__impl__uns_option__value__position_axiom
(assert (<= 0 ada___system__val_uns__impl__uns_option__value__position2))

;; user_eq
(declare-fun user_eq8 (us_rep
  us_rep) Bool)

(declare-const dummy8 us_rep)

(declare-datatypes ((t129s__ref 0))
  (((t129s__refqtmk (t129s__content us_rep)))))

;; t129s__ref_t129s__content__projection
(define-fun t129s__ref_t129s__content__projection ((a t129s__ref)) us_rep
  (t129s__content a))

;; scan_based_number_ghost__def_axiom
(assert
  (forall ((str us_t))
    (forall ((from Int) (to__ Int))
      (forall ((base (_ BitVec 32)) (acc (_ BitVec 32)))
        (! (=>
             (and
               (and
                 (and
                   (and
                     (dynamic_invariant2 str true true true true)
                     (dynamic_invariant1 from true true true true))
                   (dynamic_invariant1 to__ true true true true))
                 (dynamic_invariant3 base true true true true))
               (dynamic_invariant3 acc true true true true))
             (and
               (forall ((str1 us_t) (from1 Int))
                 (hexa_to_unsigned_ghost__function_guard
                   (hexa_to_unsigned_ghost
                     (to_rep (select (to_array str1) from1)))
                   (to_rep (select (to_array str1) from1))))
               (and
                 (forall ((str1 us_t) (from1 Int))
                   (hexa_to_unsigned_ghost__function_guard
                     (hexa_to_unsigned_ghost
                       (to_rep (select (to_array str1) from1)))
                     (to_rep (select (to_array str1) from1))))
                 (= (scan_based_number_ghost str from to__ base acc) 
                 (ite (< to__ from)
                   (let ((temp___overflow_484 (of_int 0)))
                     (us_repqtmk
                       (us_split_discrsqtmk temp___overflow_484)
                       (us_split_fieldsqtmk (of_rep2 acc))))
                   (ite (= (to_rep (select (to_array str) from)) 95)
                     (scan_based_number_ghost str (+ from 1) to__ base acc)
                     (ite (= (scan_overflows_ghost
                               (hexa_to_unsigned_ghost
                                 (to_rep (select (to_array str) from)))
                               base
                               acc) true)
                       (let ((temp___overflow_485 (of_int 1)))
                         (us_repqtmk
                           (us_split_discrsqtmk temp___overflow_485)
                           (us_split_fieldsqtmk dummy5)))
                       (scan_based_number_ghost
                         str
                         (+ from 1)
                         to__
                         base
                         (bvadd (bvmul base acc) (hexa_to_unsigned_ghost
                                                   (to_rep
                                                     (select (to_array str) from)))))))))))) :pattern (
        (scan_based_number_ghost
          str
          from
          to__
          base
          acc)) )))))

(declare-const v Int)

(declare-const s__first integer)

(declare-const s__last integer)

;; abs_uns_of_int
(declare-fun abs_uns_of_int (Int) (_ BitVec 32))

;; abs_uns_of_int__function_guard
(declare-fun abs_uns_of_int__function_guard ((_ BitVec 32)
  Int) Bool)

(declare-sort unsigned1 0)

(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 32))

;; bool_eq
(define-fun bool_eq11 ((x (_ BitVec 32)) (y (_ BitVec 32))) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE6 ((_ BitVec 32)) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) (_ BitVec 32))

;; user_eq
(declare-fun user_eq9 (unsigned1
  unsigned1) Bool)

(declare-const dummy9 unsigned1)

(declare-datatypes ((unsigned__ref1 0))
  (((unsigned__refqtmk1 (unsigned__content1 unsigned1)))))

;; unsigned__ref_unsigned__content__5__projection
(define-fun unsigned__ref_unsigned__content__5__projection ((a unsigned__ref1)) unsigned1
  (unsigned__content1 a))

;; dynamic_invariant
(define-fun dynamic_invariant4 ((temp___expr_621 (_ BitVec 32)) (temp___is_init_617 Bool) (temp___skip_constant_618 Bool) (temp___do_toplevel_619 Bool) (temp___do_typ_inv_620 Bool)) Bool
  true)

;; abs_uns_of_int__post_axiom
(assert
  (forall ((val__ Int))
    (! (=>
         (dynamic_invariant1 val__ true true true true)
         (let ((result (abs_uns_of_int val__)))
           (=>
             (abs_uns_of_int__function_guard result val__)
             (dynamic_invariant4 result true false true true)))) :pattern (
    (abs_uns_of_int
      val__)) )))

;; abs_uns_of_int__def_axiom
(assert
  (forall ((val__ Int))
    (! (=>
         (dynamic_invariant1 val__ true true true true)
         (= (abs_uns_of_int val__) (ite (= val__ (- 2147483648))
                                     #x80000000
                                     (ite (< val__ 0)
                                       ((_ int2bv 32) (- val__))
                                       ((_ int2bv 32) val__))))) :pattern (
    (abs_uns_of_int
      val__)) )))

;; only_decimal_ghost
(declare-fun only_decimal_ghost (us_t
  Int
  Int) Bool)

;; only_decimal_ghost__function_guard
(declare-fun only_decimal_ghost__function_guard (Bool
  us_t
  Int
  Int) Bool)

;; only_decimal_ghost__post_axiom
(assert true)

;; only_decimal_ghost__def_axiom
(assert
  (forall ((str us_t))
    (forall ((from Int) (to__ Int))
      (! (=
           (= (only_decimal_ghost str from to__) true)
           (forall ((j Int))
             (=>
               (and (<= from j) (<= j to__))
               (let ((temp___746 (to_rep (select (to_array str) j))))
                 (and (<= 48 temp___746) (<= temp___746 57)))))) :pattern (
      (only_decimal_ghost
        str
        from
        to__)) ))))

;; wrap_option
(declare-fun wrap_option ((_ BitVec 32)) us_rep)

;; wrap_option__function_guard
(declare-fun wrap_option__function_guard (us_rep
  (_ BitVec 32)) Bool)

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const alignment4 Int)

;; value__size_axiom
(assert (<= 0 value__size4))

;; object__size_axiom
(assert (<= 0 object__size4))

;; alignment_axiom
(assert (<= 0 alignment4))

(declare-const ada___system__val_uns__impl__uns_option__overflow__first__bit3 Int)

(declare-const ada___system__val_uns__impl__uns_option__overflow__last__bit3 Int)

(declare-const ada___system__val_uns__impl__uns_option__overflow__position3 Int)

;; ada___system__val_uns__impl__uns_option__overflow__first__bit_axiom
(assert
  (<= 0 ada___system__val_uns__impl__uns_option__overflow__first__bit3))

;; ada___system__val_uns__impl__uns_option__overflow__last__bit_axiom
(assert
  (< ada___system__val_uns__impl__uns_option__overflow__first__bit3 ada___system__val_uns__impl__uns_option__overflow__last__bit3))

;; ada___system__val_uns__impl__uns_option__overflow__position_axiom
(assert (<= 0 ada___system__val_uns__impl__uns_option__overflow__position3))

(declare-const ada___system__val_uns__impl__uns_option__value__first__bit3 Int)

(declare-const ada___system__val_uns__impl__uns_option__value__last__bit3 Int)

(declare-const ada___system__val_uns__impl__uns_option__value__position3 Int)

;; ada___system__val_uns__impl__uns_option__value__first__bit_axiom
(assert (<= 0 ada___system__val_uns__impl__uns_option__value__first__bit3))

;; ada___system__val_uns__impl__uns_option__value__last__bit_axiom
(assert
  (< ada___system__val_uns__impl__uns_option__value__first__bit3 ada___system__val_uns__impl__uns_option__value__last__bit3))

;; ada___system__val_uns__impl__uns_option__value__position_axiom
(assert (<= 0 ada___system__val_uns__impl__uns_option__value__position3))

;; user_eq
(declare-fun user_eq10 (us_rep
  us_rep) Bool)

(declare-const dummy10 us_rep)

(declare-datatypes ((t134s__ref 0))
  (((t134s__refqtmk (t134s__content us_rep)))))

;; t134s__ref_t134s__content__projection
(define-fun t134s__ref_t134s__content__projection ((a t134s__ref)) us_rep
  (t134s__content a))

;; wrap_option__post_axiom
(assert true)

;; wrap_option__def_axiom
(assert
  (forall ((value (_ BitVec 32)))
    (! (=>
         (dynamic_invariant3 value true true true true)
         (= (wrap_option value) (let ((temp___overflow_750 (of_int 0)))
                                  (us_repqtmk
                                    (us_split_discrsqtmk temp___overflow_750)
                                    (us_split_fieldsqtmk (of_rep2 value)))))) :pattern (
    (wrap_option
      value)) )))

(declare-const unsigned_width_ghost1 Int)

;; uns_of_non_positive
(define-fun uns_of_non_positive ((t1 Int)) (_ BitVec 32)
  (ite (= t1 (- 2147483648)) #x80000000 ((_ int2bv 32) (- t1))))

;; uns_of_non_positive__function_guard
(declare-fun uns_of_non_positive__function_guard ((_ BitVec 32)
  Int) Bool)

(declare-datatypes ((t24s__ref 0))
  (((t24s__refqtmk (t24s__content us_t)))))

;; t24s__ref_t24s__content__projection
(define-fun t24s__ref_t24s__content__projection ((a t24s__ref)) us_t
  (t24s__content a))

(declare-datatypes ((t26s__ref 0))
  (((t26s__refqtmk (t26s__content us_t)))))

;; t26s__ref_t26s__content__projection
(define-fun t26s__ref_t26s__content__projection ((a t26s__ref)) us_t
  (t26s__content a))

(declare-sort int__ 0)

;; int__'int
(declare-fun int__qtint (int__) Int)

;; int__'axiom
(assert
  (forall ((i int__))
    (and (<= (- 2147483648) (int__qtint i)) (<= (int__qtint i) 2147483647))))

;; in_range
(define-fun in_range6 ((x Int)) Bool
  (and (<= (- 2147483648) x) (<= x 2147483647)))

;; bool_eq
(define-fun bool_eq12 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

;; user_eq
(declare-fun user_eq11 (int__
  int__) Bool)

(declare-const dummy11 int__)

(declare-datatypes ((int____ref 0))
  (((int____refqtmk (int____content int__)))))

;; int____ref_int____content__projection
(define-fun int____ref_int____content__projection ((a int____ref)) int__
  (int____content a))

;; dynamic_invariant
(define-fun dynamic_invariant5 ((temp___expr_269 Int) (temp___is_init_265 Bool) (temp___skip_constant_266 Bool) (temp___do_toplevel_267 Bool) (temp___do_typ_inv_268 Bool)) Bool
  (=>
    (or (= temp___is_init_265 true) (<= (- 2147483648) 2147483647))
    (in_range6 temp___expr_269)))

(declare-sort uns 0)

(declare-const attr__ATTRIBUTE_MODULUS2 (_ BitVec 32))

;; bool_eq
(define-fun bool_eq13 ((x (_ BitVec 32)) (y (_ BitVec 32))) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE8 ((_ BitVec 32)) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) (_ BitVec 32))

;; user_eq
(declare-fun user_eq12 (uns
  uns) Bool)

(declare-const dummy12 uns)

(declare-datatypes ((uns__ref 0))
  (((uns__refqtmk (uns__content uns)))))

;; uns__ref_uns__content__projection
(define-fun uns__ref_uns__content__projection ((a uns__ref)) uns
  (uns__content a))

(declare-datatypes ((t9s__ref 0))
  (((t9s__refqtmk (t9s__content us_t)))))

;; t9s__ref_t9s__content__projection
(define-fun t9s__ref_t9s__content__projection ((a t9s__ref)) us_t
  (t9s__content a))

(declare-datatypes ((t11s__ref 0))
  (((t11s__refqtmk (t11s__content us_t)))))

;; t11s__ref_t11s__content__projection
(define-fun t11s__ref_t11s__content__projection ((a t11s__ref)) us_t
  (t11s__content a))

(declare-sort non_positive 0)

;; non_positive'int
(declare-fun non_positiveqtint (non_positive) Int)

;; non_positive'axiom
(assert
  (forall ((i non_positive))
    (and
      (<= (- 2147483648) (non_positiveqtint i))
      (<= (non_positiveqtint i) 0))))

;; in_range
(define-fun in_range7 ((x Int)) Bool
  (and (<= (- 2147483648) x) (<= x 0)))

;; bool_eq
(define-fun bool_eq14 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

;; user_eq
(declare-fun user_eq13 (non_positive
  non_positive) Bool)

(declare-const dummy13 non_positive)

(declare-datatypes ((non_positive__ref 0))
  (((non_positive__refqtmk (non_positive__content non_positive)))))

;; non_positive__ref_non_positive__content__projection
(define-fun non_positive__ref_non_positive__content__projection ((a non_positive__ref)) non_positive
  (non_positive__content a))

(declare-datatypes ((s73s__ref 0))
  (((s73s__refqtmk (s73s__content us_t)))))

;; s73s__ref_s73s__content__projection
(define-fun s73s__ref_s73s__content__projection ((a s73s__ref)) us_t
  (s73s__content a))

;; dynamic_invariant
(define-fun dynamic_invariant6 ((temp___expr_53 Int) (temp___is_init_49 Bool) (temp___skip_constant_50 Bool) (temp___do_toplevel_51 Bool) (temp___do_typ_inv_52 Bool)) Bool
  (=>
    (or (= temp___is_init_49 true) (<= 1 2147483647))
    (in_range3 temp___expr_53)))

;; dynamic_invariant
(define-fun dynamic_invariant7 ((temp___expr_88 Int) (temp___is_init_84 Bool) (temp___skip_constant_85 Bool) (temp___do_toplevel_86 Bool) (temp___do_typ_inv_87 Bool)) Bool
  (=> (or (= temp___is_init_84 true) (<= 0 255)) (in_range4 temp___expr_88)))

(declare-sort unsigned2 0)

(declare-const attr__ATTRIBUTE_MODULUS3 (_ BitVec 32))

;; bool_eq
(define-fun bool_eq15 ((x (_ BitVec 32)) (y (_ BitVec 32))) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE10 ((_ BitVec 32)) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) (_ BitVec 32))

;; user_eq
(declare-fun user_eq14 (unsigned2
  unsigned2) Bool)

(declare-const dummy14 unsigned2)

(declare-datatypes ((unsigned__ref2 0))
  (((unsigned__refqtmk2 (unsigned__content2 unsigned2)))))

;; unsigned__ref_unsigned__content__4__projection
(define-fun unsigned__ref_unsigned__content__4__projection ((a unsigned__ref2)) unsigned2
  (unsigned__content2 a))

;; dynamic_invariant
(define-fun dynamic_invariant8 ((temp___expr_245 (_ BitVec 32)) (temp___is_init_241 Bool) (temp___skip_constant_242 Bool) (temp___do_toplevel_243 Bool) (temp___do_typ_inv_244 Bool)) Bool
  true)

;; bool_eq
(declare-fun bool_eq16 (Int
  Int) Bool)

(declare-const value__size5 Int)

(declare-const object__size5 Int)

(declare-const alignment5 Int)

;; value__size_axiom
(assert (<= 0 value__size5))

;; object__size_axiom
(assert (<= 0 object__size5))

;; alignment_axiom
(assert (<= 0 alignment5))

;; user_eq
(declare-fun user_eq15 (Int
  Int) Bool)

(declare-const dummy15 Int)

(declare-datatypes ((big_integer__ref 0))
  (((big_integer__refqtmk (big_integer__content Int)))))

;; big_integer__ref_big_integer__content__projection
(define-fun big_integer__ref_big_integer__content__projection ((a big_integer__ref)) Int
  (big_integer__content a))

(declare-datatypes ((valid_big_integer__ref 0))
  (((valid_big_integer__refqtmk (valid_big_integer__content Int)))))

;; valid_big_integer__ref_valid_big_integer__content__projection
(define-fun valid_big_integer__ref_valid_big_integer__content__projection 
  ((a valid_big_integer__ref)) Int
  (valid_big_integer__content a))

;; dynamic_invariant
(define-fun dynamic_invariant9 ((temp___expr_259 Int) (temp___is_init_255 Bool) (temp___skip_constant_256 Bool) (temp___do_toplevel_257 Bool) (temp___do_typ_inv_258 Bool)) Bool
  true)

;; only_hexa_ghost__post_axiom
(assert true)

;; only_hexa_ghost__def_axiom
(assert
  (forall ((str us_t))
    (forall ((from Int) (to__ Int))
      (! (=
           (= (only_hexa_ghost str from to__) true)
           (forall ((j Int))
             (=>
               (and (<= from j) (<= j to__))
               (let ((temp___370 (to_rep (select (to_array str) j))))
                 (or
                   (and (<= 48 temp___370) (<= temp___370 57))
                   (or
                     (and (<= 97 temp___370) (<= temp___370 102))
                     (or
                       (and (<= 65 temp___370) (<= temp___370 70))
                       (= temp___370 95)))))))) :pattern ((only_hexa_ghost
                                                            str
                                                            from
                                                            to__)) ))))

;; hexa_to_unsigned_ghost__post_axiom
(assert
  (forall ((x Int))
    (! (=>
         (and
           (dynamic_invariant7 x true true true true)
           (or
             (and (<= 48 x) (<= x 57))
             (or (and (<= 97 x) (<= x 102)) (and (<= 65 x) (<= x 70)))))
         (let ((result (hexa_to_unsigned_ghost x)))
           (=>
             (hexa_to_unsigned_ghost__function_guard result x)
             (dynamic_invariant3 result true false true true)))) :pattern (
    (hexa_to_unsigned_ghost
      x)) )))

;; hexa_to_unsigned_ghost__def_axiom
(assert
  (forall ((x Int))
    (! (=>
         (dynamic_invariant7 x true true true true)
         (= (hexa_to_unsigned_ghost x) (ite (and (<= 48 x) (<= x 57))
                                         (bvsub ((_ int2bv 32) x) #x00000030)
                                         (ite (and (<= 97 x) (<= x 102))
                                           (bvadd (bvsub ((_ int2bv 32) x) #x00000061) #x0000000A)
                                           (ite (and (<= 65 x) (<= x 70))
                                             (bvadd (bvsub ((_ int2bv 32) x) #x00000041) #x0000000A)
                                             (to_rep2 dummy5)))))) :pattern (
    (hexa_to_unsigned_ghost
      x)) )))

;; scan_overflows_ghost__post_axiom
(assert true)

;; scan_overflows_ghost__def_axiom
(assert
  (forall ((digit (_ BitVec 32)) (base (_ BitVec 32)) (acc (_ BitVec 32)))
    (! (=
         (= (scan_overflows_ghost digit base acc) true)
         (or
           (or (bvuge digit base) (bvugt acc (bvudiv #xFFFFFFFF base)))
           (bvult (bvsub #xFFFFFFFF digit) (bvmul base acc)))) :pattern (
    (scan_overflows_ghost
      digit
      base
      acc)) )))

;; scan_based_number_ghost__post_axiom
(assert true)

(declare-const big_10 Int)

;; big_10__def_axiom
(assert (= big_10 (bv2nat #x0000000A)))

;; to_rep
(define-fun to_rep3 ((x natural)) Int
  (naturalqtint x))

;; of_rep
(declare-fun of_rep3 (Int) natural)

;; inversion_axiom
(assert
  (forall ((x natural))
    (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
(assert
  (forall ((x natural)) (! (in_range2 (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
(assert
  (forall ((x Int))
    (! (=> (in_range2 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                                  (of_rep3 x))) )))

;; max_log10
(declare-fun max_log10 (tuple0) Int)

;; max_log10__function_guard
(declare-fun max_log10__function_guard (Int
  tuple0) Bool)

;; max_log10__post_axiom
(assert
  (forall ((us_void_param tuple0))
    (! (let ((result (max_log10 us_void_param)))
         (=>
           (max_log10__function_guard result us_void_param)
           (dynamic_invariant result true false true true))) :pattern (
    (max_log10
      us_void_param)) )))

;; max_log10__def_axiom
(assert
  (forall ((us_void_param tuple0))
    (! (= (max_log10 us_void_param) (ite (= 32 8)
                                      2
                                      (ite (= 32 16)
                                        4
                                        (ite true
                                          9
                                          (ite (= 32 64)
                                            19
                                            (ite (= 32 128)
                                              38
                                              (to_rep3 dummy1))))))) :pattern (
    (max_log10
      us_void_param)) )))

;; power
(declare-fun power1 (Int
  Int) Int)

;; Power_0
(assert (forall ((x Int)) (= (power1 x 0) 1)))

;; Power_s
(assert
  (forall ((x Int) (n Int))
    (=> (<= 0 n) (= (power1 x (+ n 1)) (* x (power1 x n))))))

;; Power_s_alt
(assert
  (forall ((x Int) (n Int))
    (=> (< 0 n) (= (power1 x n) (* x (power1 x (- n 1)))))))

;; Power_1
(assert (forall ((x Int)) (= (power1 x 1) x)))

;; Power_sum
(assert
  (forall ((x Int) (n Int) (m Int))
    (=>
      (<= 0 n)
      (=> (<= 0 m) (= (power1 x (+ n m)) (* (power1 x n) (power1 x m)))))))

;; Power_mult
(assert
  (forall ((x Int) (n Int) (m Int))
    (=>
      (<= 0 n)
      (=> (<= 0 m) (= (power1 x (* n m)) (power1 (power1 x n) m))))))

;; Power_comm1
(assert
  (forall ((x Int) (y Int))
    (=>
      (= (* x y) (* y x))
      (forall ((n Int))
        (=> (<= 0 n) (= (* (power1 x n) y) (* y (power1 x n))))))))

;; Power_comm2
(assert
  (forall ((x Int) (y Int))
    (=>
      (= (* x y) (* y x))
      (forall ((n Int))
        (=> (<= 0 n) (= (power1 (* x y) n) (* (power1 x n) (power1 y n))))))))

;; Power_non_neg
(assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (<= 0 y)) (<= 0 (power1 x y)))))

;; Power_pos
(assert
  (forall ((x Int) (y Int)) (=> (and (< 0 x) (<= 0 y)) (< 0 (power1 x y)))))

;; Power_monotonic
(assert
  (forall ((x Int) (n Int) (m Int))
    (=> (and (< 0 x) (and (<= 0 n) (<= n m))) (<= (power1 x n) (power1 x m)))))

;; width__post_axiom
(assert
  (forall ((lo (_ BitVec 32)) (hi (_ BitVec 32)))
    (! (=>
         (and
           (dynamic_invariant8 lo true true true true)
           (dynamic_invariant8 hi true true true true))
         (let ((result (width lo hi)))
           (and
             (max_log10__function_guard (max_log10 Tuple0) Tuple0)
             (=>
               (width__function_guard result lo hi)
               (and
                 (ite (bvugt lo hi)
                   (= result 0)
                   (and
                     (and
                       (and
                         (< 0 result)
                         (<= result (+ (max_log10 Tuple0) 2)))
                       (< (bv2nat lo) (power1 big_10 (- result 1))))
                     (< (bv2nat hi) (power1 big_10 (- result 1)))))
                 (dynamic_invariant result true false true true)))))) :pattern (
    (width
      lo
      hi)) )))

;; unsigned_width_ghost__def_axiom
(assert
  (and
    (width__function_guard
      (width #x00000000 #xFFFFFFFF)
      #x00000000
      #xFFFFFFFF)
    (= unsigned_width_ghost (width #x00000000 #xFFFFFFFF))))

;; dynamic_invariant
(define-fun dynamic_invariant10 ((temp___expr_276 (_ BitVec 32)) (temp___is_init_272 Bool) (temp___skip_constant_273 Bool) (temp___do_toplevel_274 Bool) (temp___do_typ_inv_275 Bool)) Bool
  true)

;; unsigned_width_ghost__def_axiom
(assert (= unsigned_width_ghost1 unsigned_width_ghost))

;; dynamic_invariant
(define-fun dynamic_invariant11 ((temp___expr_771 Int) (temp___is_init_767 Bool) (temp___skip_constant_768 Bool) (temp___do_toplevel_769 Bool) (temp___do_typ_inv_770 Bool)) Bool
  (=>
    (or (= temp___is_init_767 true) (<= (- 2147483648) 0))
    (in_range7 temp___expr_771)))

;; dynamic_invariant
(define-fun dynamic_invariant12 ((temp___expr_899 us_t) (temp___is_init_895 Bool) (temp___skip_constant_896 Bool) (temp___do_toplevel_897 Bool) (temp___do_typ_inv_898 Bool)) Bool
  (=>
    (not (= temp___skip_constant_896 true))
    (and
      (and
        (dynamic_property
          (to_rep1 s__first)
          (to_rep1 s__last)
          (first temp___expr_899)
          (last temp___expr_899))
        (= (first temp___expr_899) (to_rep1 s__first)))
      (= (last temp___expr_899) (to_rep1 s__last)))))

;; default_initial_assumption
(define-fun default_initial_assumption1 ((temp___expr_901 us_t) (temp___skip_top_level_902 Bool)) Bool
  (and
    (= (first temp___expr_901) (to_rep1 s__first))
    (= (last temp___expr_901) (to_rep1 s__last))))

(declare-const s (Array Int character))

(declare-const p Int)

;; Assume
(assert (dynamic_invariant unsigned_width_ghost true false true true))

;; Assume
(assert
  (width__function_guard (width #x00000000 #xFFFFFFFF) #x00000000 #xFFFFFFFF))

;; Assume
(assert (= (width #x00000000 #xFFFFFFFF) unsigned_width_ghost))

;; Assume
(assert (dynamic_invariant5 v true false true true))

;; Assume
(assert
  (dynamic_property
    1
    2147483647
    (first (of_array s (to_rep1 s__first) (to_rep1 s__last)))
    (last (of_array s (to_rep1 s__first) (to_rep1 s__last)))))

;; Assume
(assert (dynamic_invariant p true false true true))

;; Assume
(assert
  (and
    (and
      (and
        (and (< p 2147483647) (< (to_rep1 s__last) 2147483647))
        (<= (to_rep1 s__first) (+ p 1)))
      (<= (to_rep1 s__first) (to_rep1 s__last)))
    (ite (<= 0 v)
      (<= p (+ (- (to_rep1 s__last) unsigned_width_ghost) 1))
      (<= p (- (to_rep1 s__last) unsigned_width_ghost)))))

(declare-const s1 (Array Int character))

(declare-const p1 Int)

(declare-const spark__branch Bool)

;; H
(assert (= spark__branch (ite (<= 0 v) true false)))

(declare-const p2 Int)

(declare-const o Int)

(declare-const o1 Int)

(declare-const o2 character)

(declare-const s2 (Array Int character))

(declare-const o3 Int)

(declare-const o4 Int)

(declare-const o5 Int)

(declare-const o6 Int)

;; H
(assert
  (ite (= spark__branch true)
    (and
      (= (to_rep1 s__last) o5)
      (and
        (= (to_rep1 s__first) o6)
        (let ((o7 s__last))
          (let ((o8 s__first))
            (let ((o9 (- v)))
              (and
                (in_range1 o9)
                (and
                  (in_range7 o9)
                  (and
                    (and
                      (and
                        (and
                          (= (let ((temp___783 (of_array
                                                 (to_array
                                                   (of_array
                                                     s
                                                     (to_rep1 o8)
                                                     (to_rep1 o7)))
                                                 (to_rep1 o8)
                                                 p)))
                               (let ((temp___781 (of_array
                                                   (to_array
                                                     (of_array
                                                       s1
                                                       (to_rep1 o8)
                                                       (to_rep1 o7)))
                                                   (to_rep1 o8)
                                                   p)))
                                 (bool_eq7
                                   (to_array temp___781)
                                   (first temp___781)
                                   (last temp___781)
                                   (to_array temp___783)
                                   (first temp___783)
                                   (last temp___783)))) true)
                          (and (<= (+ p 1) p1) (<= p1 (to_rep1 o7))))
                        (= (only_decimal_ghost
                             (of_array s1 (to_rep1 o8) (to_rep1 o7))
                             (+ p 1)
                             p1) true))
                      (= (bool_eq10
                           (scan_based_number_ghost
                             (of_array s1 (to_rep1 o8) (to_rep1 o7))
                             (+ p 1)
                             p1
                             #x0000000A
                             #x00000000)
                           (wrap_option (uns_of_non_positive o9))) true))
                    (and
                      (dynamic_invariant2
                        (of_array s1 (to_rep1 o8) (to_rep1 o7))
                        true
                        true
                        true
                        true)
                      (dynamic_invariant p1 true true true true))))))))))
    (let ((o7 (+ p 1)))
      (and
        (in_range1 o7)
        (and
          (= p2 o7)
          (and
            (= (to_rep1 s__last) o)
            (and
              (= (to_rep1 s__first) o1)
              (let ((temp___941 (of_array s o1 o)))
                (and
                  (= (to_rep o2) 45)
                  (and
                    (and
                      (<= (first temp___941) p2)
                      (<= p2 (last temp___941)))
                    (and
                      (= s2 (to_array
                              (us_tqtmk
                                (store (to_array temp___941) p2 o2)
                                (rt temp___941))))
                      (and
                        (= (to_rep1 s__last) o3)
                        (and
                          (= (to_rep1 s__first) o4)
                          (let ((o8 s__last))
                            (let ((o9 s__first))
                              (let ((o10 v))
                                (and
                                  (in_range7 o10)
                                  (and
                                    (and
                                      (and
                                        (and
                                          (= (let ((temp___783 (of_array
                                                                 (to_array
                                                                   (of_array
                                                                    s2
                                                                    (to_rep1
                                                                    o9)
                                                                    (to_rep1
                                                                    o8)))
                                                                 (to_rep1 o9)
                                                                 p2)))
                                               (let ((temp___781 (of_array
                                                                   (to_array
                                                                    (of_array
                                                                    s1
                                                                    (to_rep1
                                                                    o9)
                                                                    (to_rep1
                                                                    o8)))
                                                                   (to_rep1
                                                                    o9)
                                                                   p2)))
                                                 (bool_eq7
                                                   (to_array temp___781)
                                                   (first temp___781)
                                                   (last temp___781)
                                                   (to_array temp___783)
                                                   (first temp___783)
                                                   (last temp___783)))) true)
                                          (and
                                            (<= (+ p2 1) p1)
                                            (<= p1 (to_rep1 o8))))
                                        (= (only_decimal_ghost
                                             (of_array
                                               s1
                                               (to_rep1 o9)
                                               (to_rep1 o8))
                                             (+ p2 1)
                                             p1) true))
                                      (= (bool_eq10
                                           (scan_based_number_ghost
                                             (of_array
                                               s1
                                               (to_rep1 o9)
                                               (to_rep1 o8))
                                             (+ p2 1)
                                             p1
                                             #x0000000A
                                             #x00000000)
                                           (wrap_option
                                             (uns_of_non_positive o10))) true))
                                    (and
                                      (dynamic_invariant2
                                        (of_array
                                          s1
                                          (to_rep1 o9)
                                          (to_rep1 o8))
                                        true
                                        true
                                        true
                                        true)
                                      (dynamic_invariant
                                        p1
                                        true
                                        true
                                        true
                                        true))))))))))))))))))))

;; Goal def'vc
;; File "s-imagei.ads", line 79, characters 0-0
(assert
  (not
  (=>
    (abs_uns_of_int__function_guard (abs_uns_of_int v) v)
    (=>
      (< v 0)
      (= (bool_eq
           (to_rep
             (select (to_array
                       (of_array s1 (to_rep1 s__first) (to_rep1 s__last))) (+ 
             p 1)))
           45) true)))))

(check-sat)
(exit)
