(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTNIRA)
(set-info :source |
Generated by: Yannick Moy
Generated on: 2022-02-14
Generator: GNATprove
Application: GNAT light runtime library
Target solver: Alt-Ergo, CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)

;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
  (((Tuple0))))

(declare-sort us_private 0)

;; private__bool_eq
(declare-fun private__bool_eq (us_private
  us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
  (((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))

(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
  (((int__refqtmk (int__content Int)))))

(declare-datatypes ((bool__ref 0))
  (((bool__refqtmk (bool__content Bool)))))

(declare-datatypes ((us_fixed__ref 0))
  (((us_fixed__refqtmk (us_fixed__content Int)))))

(declare-datatypes ((real__ref 0))
  (((real__refqtmk (real__content Real)))))

(declare-datatypes ((us_private__ref 0))
  (((us_private__refqtmk (us_private__content us_private)))))

;; int__ref___projection
(define-fun int__ref___projection ((a int__ref)) Int
  (int__content a))

;; __fixed__ref___projection
(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int
  (us_fixed__content a))

;; bool__ref___projection
(define-fun bool__ref___projection ((a bool__ref)) Bool
  (bool__content a))

;; real__ref___projection
(define-fun real__ref___projection ((a real__ref)) Real
  (real__content a))

;; __private__ref___projection
(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

;; nth
(declare-fun nth ((_ BitVec 64)
  Int) Bool)

;; lsr
(declare-fun lsr ((_ BitVec 64)
  Int) (_ BitVec 64))

;; asr
(declare-fun asr ((_ BitVec 64)
  Int) (_ BitVec 64))

;; lsl
(declare-fun lsl ((_ BitVec 64)
  Int) (_ BitVec 64))

;; abs
(define-fun abs1 ((x Int)) Int
  (ite (<= 0 x) x (- x)))

;; Abs_le
(assert
  (forall ((x Int) (y Int)) (= (<= (abs1 x) y) (and (<= (- y) x) (<= x y)))))

;; Abs_pos
(assert (forall ((x Int)) (<= 0 (abs1 x))))

;; Div_unique
(assert
  (forall ((x Int) (y Int) (q Int))
    (=>
      (< 0 y)
      (=> (and (<= (* q y) x) (< x (+ (* q y) y))) (= (div x y) q)))))

;; Div_bound
(assert
  (forall ((x Int) (y Int))
    (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div x y)) (<= (div x y) x)))))

;; Div_inf
(assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div x y) 0))))

;; Div_inf_neg
(assert
  (forall ((x Int) (y Int))
    (=> (and (< 0 x) (<= x y)) (= (div (- x) y) (- 1)))))

;; Mod_0
(assert (forall ((y Int)) (=> (not (= y 0)) (= (mod 0 y) 0))))

;; Div_1_left
(assert (forall ((y Int)) (=> (< 1 y) (= (div 1 y) 0))))

;; Div_minus1_left
(assert (forall ((y Int)) (=> (< 1 y) (= (div (- 1) y) (- 1)))))

;; Mod_1_left
(assert (forall ((y Int)) (=> (< 1 y) (= (mod 1 y) 1))))

;; Mod_minus1_left
(assert
  (forall ((y Int))
    (! (=> (< 1 y) (= (mod (- 1) y) (- y 1))) :pattern ((mod (- 1) y)) )))

;; Div_mult
(assert
  (forall ((x Int) (y Int) (z Int))
    (! (=> (< 0 x) (= (div (+ (* x y) z) x) (+ y (div z x)))) :pattern ((div (+ (* x y) z) x)) )))

;; Mod_mult
(assert
  (forall ((x Int) (y Int) (z Int))
    (! (=> (< 0 x) (= (mod (+ (* x y) z) x) (mod z x))) :pattern ((mod (+ (* x y) z) x)) )))

;; rotate_right
(declare-fun rotate_right1 ((_ BitVec 64)
  Int) (_ BitVec 64))

;; rotate_left
(declare-fun rotate_left1 ((_ BitVec 64)
  Int) (_ BitVec 64))

;; pow2
(declare-fun pow2 (Int) Int)

(declare-const two_power_size_minus_one Int)

;; two_power_size_minus_one_val
(assert (= two_power_size_minus_one (pow2 (- 64 1))))

;; to_int
(define-fun to_int1 ((x (_ BitVec 64))) Int
  (ite (bvsge x (_ bv0 64))
    (bv2nat x)
    (- (- 18446744073709551616 (bv2nat x)))))

;; uint_in_range
(define-fun uint_in_range ((i Int)) Bool
  (and (<= 0 i) (<= i 18446744073709551615)))

;; lsr_bv_is_lsr
(assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
    (= (bvlshr x n) (lsr x (bv2nat n)))))

;; asr_bv_is_asr
(assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
    (= (bvashr x n) (asr x (bv2nat n)))))

;; lsl_bv_is_lsl
(assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
    (= (bvshl x n) (lsl x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
(assert
  (forall ((v (_ BitVec 64)) (n (_ BitVec 64)))
    (= (bvor (bvshl v (bvurem n (_ bv64 64))) (bvlshr v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) 
    (rotate_left1
      v
      (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
(assert
  (forall ((v (_ BitVec 64)) (n (_ BitVec 64)))
    (= (bvor (bvlshr v (bvurem n (_ bv64 64))) (bvshl v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) 
    (rotate_right1
      v
      (bv2nat n)))))

;; nth_bv
(declare-fun nth_bv ((_ BitVec 64)
  (_ BitVec 64)) Bool)

;; nth_bv_def
(assert
  (forall ((x (_ BitVec 64)) (i (_ BitVec 64)))
    (=
      (= (nth_bv x i) true)
      (not (= (bvand (bvlshr x i) #x0000000000000001) #x0000000000000000)))))

;; Nth_bv_is_nth
(assert
  (forall ((x (_ BitVec 64)) (i (_ BitVec 64)))
    (= (nth x (bv2nat i)) (nth_bv x i))))

;; Nth_bv_is_nth2
(assert
  (forall ((x (_ BitVec 64)) (i Int))
    (=>
      (and (<= 0 i) (< i 18446744073709551616))
      (= (nth_bv x ((_ int2bv 64) i)) (nth x i)))))

;; eq_sub_bv
(declare-fun eq_sub_bv ((_ BitVec 64)
  (_ BitVec 64)
  (_ BitVec 64)
  (_ BitVec 64)) Bool)

;; eq_sub_bv_def
(assert
  (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64)))
    (let ((mask (bvshl (bvsub (bvshl #x0000000000000001 n) #x0000000000000001) i)))
      (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))

;; eq_sub
(define-fun eq_sub ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int) (n Int)) Bool
  (forall ((j Int))
    (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

;; eq_sub_equiv
(assert
  (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64)))
    (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))

(declare-datatypes ((t__ref 0))
  (((t__refqtmk (t__content (_ BitVec 64))))))

;; bool_eq
(define-fun bool_eq ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool
  (ite (= x y) true false))

;; bool_ne
(define-fun bool_ne ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool
  (ite (not (= x y)) true false))

;; bool_lt
(define-fun bool_lt ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool
  (ite (bvult x y) true false))

;; bool_le
(define-fun bool_le ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool
  (ite (bvule x y) true false))

;; bool_gt
(define-fun bool_gt ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool
  (ite (bvugt x y) true false))

;; bool_ge
(define-fun bool_ge ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool
  (ite (bvuge x y) true false))

;; power
(declare-fun power ((_ BitVec 64)
  Int) (_ BitVec 64))

;; Power_0
(assert (forall ((x (_ BitVec 64))) (= (power x 0) #x0000000000000001)))

;; Power_1
(assert (forall ((x (_ BitVec 64))) (= (power x 1) x)))

;; Power_s
(assert
  (forall ((x (_ BitVec 64)) (n Int))
    (=> (<= 0 n) (= (power x (+ n 1)) (bvmul x (power x n))))))

;; Power_s_alt
(assert
  (forall ((x (_ BitVec 64)) (n Int))
    (=> (< 0 n) (= (power x n) (bvmul x (power x (- n 1)))))))

;; Power_sum
(assert
  (forall ((x (_ BitVec 64)) (n Int) (m Int))
    (=>
      (<= 0 n)
      (=> (<= 0 m) (= (power x (+ n m)) (bvmul (power x n) (power x m)))))))

;; Power_mult
(assert
  (forall ((x (_ BitVec 64)) (n Int) (m Int))
    (=> (<= 0 n) (=> (<= 0 m) (= (power x (* n m)) (power (power x n) m))))))

;; Power_mult2
(assert
  (forall ((x (_ BitVec 64)) (y (_ BitVec 64)) (n Int))
    (=> (<= 0 n) (= (power (bvmul x y) n) (bvmul (power x n) (power y n))))))

;; bv_min
(define-fun bv_min ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)
  (ite (bvule x y) x y))

;; bv_max
(define-fun bv_max ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64)
  (ite (bvule x y) y x))

;; min
(define-fun min ((x Int) (y Int)) Int
  (ite (<= x y) x y))

;; max
(define-fun max ((x Int) (y Int)) Int
  (ite (<= x y) y x))

;; Min_r
(assert (forall ((x Int) (y Int)) (=> (<= y x) (= (min x y) y))))

;; Max_l
(assert (forall ((x Int) (y Int)) (=> (<= y x) (= (max x y) x))))

;; Min_comm
(assert (forall ((x Int) (y Int)) (= (min x y) (min y x))))

;; Max_comm
(assert (forall ((x Int) (y Int)) (= (max x y) (max y x))))

;; Min_assoc
(assert
  (forall ((x Int) (y Int) (z Int)) (= (min (min x y) z) (min x (min y z)))))

;; Max_assoc
(assert
  (forall ((x Int) (y Int) (z Int)) (= (max (max x y) z) (max x (max y z)))))

;; bv_min_to_uint
(assert
  (forall ((x (_ BitVec 64)) (y (_ BitVec 64)))
    (= (bv2nat (bv_min x y)) (min (bv2nat x) (bv2nat y)))))

;; bv_max_to_uint
(assert
  (forall ((x (_ BitVec 64)) (y (_ BitVec 64)))
    (= (bv2nat (bv_max x y)) (max (bv2nat x) (bv2nat y)))))

;; uc_of_int
(define-fun uc_of_int ((x Int)) (_ BitVec 64)
  (ite (<= 0 x) ((_ int2bv 64) x) (bvneg ((_ int2bv 64) (- x)))))

;; uc_to_int
(define-fun uc_to_int ((x (_ BitVec 64))) Int
  (ite (= (bool_lt x ((_ int2bv 64) two_power_size_minus_one)) true)
    (bv2nat x)
    (- (bv2nat (bvneg x)))))

;; bool_eq
(define-fun bool_eq1 ((x Bool) (y Bool)) Bool
  (ite (= x y) true false))

;; to_int
(define-fun to_int2 ((b Bool)) Int
  (ite (= b true) 1 0))

;; of_int
(define-fun of_int ((i Int)) Bool
  (ite (= i 0) false true))

;; in_range
(define-fun in_range ((x Int)) Bool
  (or (= x 0) (= x 1)))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort natural 0)

;; natural'int
(declare-fun naturalqtint (natural) Int)

;; natural'axiom
(assert
  (forall ((i natural))
    (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

;; in_range
(define-fun in_range1 ((x Int)) Bool
  (and (<= 0 x) (<= x 2147483647)))

;; bool_eq
(define-fun bool_eq2 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

;; user_eq
(declare-fun user_eq (natural
  natural) Bool)

(declare-const dummy natural)

(declare-datatypes ((natural__ref 0))
  (((natural__refqtmk (natural__content natural)))))

;; natural__ref_natural__content__projection
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural
  (natural__content a))

;; dynamic_invariant
(define-fun dynamic_invariant ((temp___expr_46 Int) (temp___is_init_42 Bool) (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool) (temp___do_typ_inv_45 Bool)) Bool
  (=>
    (or (= temp___is_init_42 true) (<= 0 2147483647))
    (in_range1 temp___expr_46)))

(declare-sort positive 0)

;; positive'int
(declare-fun positiveqtint (positive) Int)

;; positive'axiom
(assert
  (forall ((i positive))
    (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

;; in_range
(define-fun in_range2 ((x Int)) Bool
  (and (<= 1 x) (<= x 2147483647)))

;; bool_eq
(define-fun bool_eq3 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

;; user_eq
(declare-fun user_eq1 (positive
  positive) Bool)

(declare-const dummy1 positive)

(declare-datatypes ((positive__ref 0))
  (((positive__refqtmk (positive__content positive)))))

;; positive__ref_positive__content__projection
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive
  (positive__content a))

(declare-sort character 0)

;; in_range
(define-fun in_range3 ((x Int)) Bool
  (and (<= 0 x) (<= x 255)))

;; bool_eq
(define-fun bool_eq4 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

;; user_eq
(declare-fun user_eq2 (character
  character) Bool)

(declare-const dummy2 character)

(declare-datatypes ((character__ref 0))
  (((character__refqtmk (character__content character)))))

;; character__ref_character__content__projection
(define-fun character__ref_character__content__projection ((a character__ref)) character
  (character__content a))

;; to_rep
(declare-fun to_rep (character) Int)

;; of_rep
(declare-fun of_rep (Int) character)

;; inversion_axiom
(assert
  (forall ((x character))
    (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
(assert
  (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
(assert
  (forall ((x Int))
    (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                                (of_rep x))) )))

(declare-datatypes ((map__ref 0))
  (((map__refqtmk (map__content (Array Int character))))))

;; slide
(declare-fun slide ((Array Int character)
  Int
  Int) (Array Int character))

;; slide_eq
(assert
  (forall ((a (Array Int character)))
    (forall ((first Int))
      (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
(assert
  (forall ((a (Array Int character)))
    (forall ((old_first Int))
      (forall ((new_first Int))
        (forall ((i Int))
          (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
          (slide
            a
            old_first
            new_first) i)) ))))))

;; const
(declare-fun const1 (character) (Array Int character))

;; const_def
(assert
  (forall ((v character))
    (forall ((i Int))
      (! (= (select (const1 v) i) v) :pattern ((select (const1 v) i)) ))))

;; bool_eq
(define-fun bool_eq5 ((a (Array Int character)) (a__first Int) (a__last Int) (b (Array Int character)) (b__first Int) (b__last Int)) Bool
  (ite (and
         (ite (<= a__first a__last)
           (and
             (<= b__first b__last)
             (= (- a__last a__first) (- b__last b__first)))
           (< b__last b__first))
         (forall ((temp___idx_105 Int))
           (=>
             (and (<= a__first temp___idx_105) (<= temp___idx_105 a__last))
             (= (to_rep (select a temp___idx_105)) (to_rep
                                                     (select b (+ (- b__first a__first) temp___idx_105)))))))
    true
    false))

;; bool_eq_rev
(assert
  (forall ((a (Array Int character)) (b (Array Int character)))
    (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
      (=>
        (= (bool_eq5 b b__first b__last a a__first a__last) true)
        (and
          (ite (<= a__first a__last)
            (and
              (<= b__first b__last)
              (= (- a__last a__first) (- b__last b__first)))
            (< b__last b__first))
          (forall ((temp___idx_105 Int))
            (=>
              (and (<= a__first temp___idx_105) (<= temp___idx_105 a__last))
              (= (to_rep (select a temp___idx_105)) (to_rep
                                                      (select b (+ (- b__first a__first) temp___idx_105)))))))))))

(declare-sort integer 0)

;; integer'int
(declare-fun integerqtint (integer) Int)

;; integer'axiom
(assert
  (forall ((i integer))
    (and
      (<= (- 2147483648) (integerqtint i))
      (<= (integerqtint i) 2147483647))))

;; in_range
(define-fun in_range4 ((x Int)) Bool
  (and (<= (- 2147483648) x) (<= x 2147483647)))

;; bool_eq
(define-fun bool_eq6 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

;; user_eq
(declare-fun user_eq3 (integer
  integer) Bool)

(declare-const dummy3 integer)

(declare-datatypes ((integer__ref 0))
  (((integer__refqtmk (integer__content integer)))))

;; integer__ref_integer__content__projection
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer
  (integer__content a))

;; to_rep
(define-fun to_rep1 ((x integer)) Int
  (integerqtint x))

;; of_rep
(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
(assert
  (forall ((x integer))
    (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
(assert
  (forall ((x integer)) (! (in_range4 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
(assert
  (forall ((x Int))
    (! (=> (in_range4 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                                  (of_rep1 x))) )))

(declare-datatypes ((t 0))
  (((tqtmk (rec__first integer)(rec__last integer)))))

;; mk
(declare-fun mk (Int
  Int) t)

;; mk_def
(assert
  (forall ((f Int) (l Int))
    (! (=>
         (in_range4 f)
         (=>
           (in_range4 l)
           (and
             (= (to_rep1 (rec__first (mk f l))) f)
             (= (to_rep1 (rec__last (mk f l))) l)))) :pattern ((mk f l)) )))

;; dynamic_property
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool
  (and
    (in_range4 low)
    (and
      (in_range4 high)
      (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes ((us_t 0))
  (((us_tqtmk (elts (Array Int character))(rt t)))))

;; to_array
(define-fun to_array ((a us_t)) (Array Int character)
  (elts a))

;; of_array
(define-fun of_array ((a (Array Int character)) (f Int) (l Int)) us_t
  (us_tqtmk a (mk f l)))

;; first
(define-fun first ((a us_t)) Int
  (to_rep1 (rec__first (rt a))))

;; last
(define-fun last ((a us_t)) Int
  (to_rep1 (rec__last (rt a))))

;; length
(define-fun length ((a us_t)) Int
  (ite (<= (first a) (last a)) (+ (- (last a) (first a)) 1) 0))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
(assert (<= 0 value__size))

;; object__size_axiom
(assert (<= 0 object__size))

;; component__size_axiom
(assert (<= 0 component__size))

;; alignment_axiom
(assert (<= 0 alignment))

;; bool_eq
(define-fun bool_eq7 ((x us_t) (y us_t)) Bool
  (bool_eq5
    (elts x)
    (to_rep1 (rec__first (rt x)))
    (to_rep1 (rec__last (rt x)))
    (elts y)
    (to_rep1 (rec__first (rt y)))
    (to_rep1 (rec__last (rt y)))))

;; user_eq
(declare-fun user_eq4 (us_t
  us_t) Bool)

(declare-const dummy4 us_t)

(declare-datatypes ((string____ref 0))
  (((string____refqtmk (string____content us_t)))))

;; string____ref_string____content__projection
(define-fun string____ref_string____content__projection ((a string____ref)) us_t
  (string____content a))

;; width
(declare-fun width ((_ BitVec 64)
  (_ BitVec 64)) Int)

;; width__function_guard
(declare-fun width__function_guard (Int
  (_ BitVec 64)
  (_ BitVec 64)) Bool)

(declare-const unsigned_width_ghost Int)

(declare-const v (_ BitVec 64))

(declare-const s__first integer)

(declare-const s__last integer)

;; value_unsigned
(declare-fun value_unsigned (us_t) (_ BitVec 64))

;; value_unsigned__function_guard
(declare-fun value_unsigned__function_guard ((_ BitVec 64)
  us_t) Bool)

;; only_space_ghost
(declare-fun only_space_ghost (us_t
  Int
  Int) Bool)

;; only_space_ghost__function_guard
(declare-fun only_space_ghost__function_guard (Bool
  us_t
  Int
  Int) Bool)

;; slide_if_necessary
(declare-fun slide_if_necessary (us_t) us_t)

;; slide_if_necessary__function_guard
(declare-fun slide_if_necessary__function_guard (us_t
  us_t) Bool)

;; is_unsigned_ghost
(declare-fun is_unsigned_ghost (us_t) Bool)

;; is_unsigned_ghost__function_guard
(declare-fun is_unsigned_ghost__function_guard (Bool
  us_t) Bool)

;; is_value_unsigned_ghost
(declare-fun is_value_unsigned_ghost (us_t
  (_ BitVec 64)) Bool)

;; is_value_unsigned_ghost__function_guard
(declare-fun is_value_unsigned_ghost__function_guard (Bool
  us_t
  (_ BitVec 64)) Bool)

(declare-sort long_long_unsigned 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 64))

;; bool_eq
(define-fun bool_eq8 ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE5 ((_ BitVec 64)) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) (_ BitVec 64))

;; user_eq
(declare-fun user_eq5 (long_long_unsigned
  long_long_unsigned) Bool)

(declare-const dummy5 long_long_unsigned)

(declare-datatypes ((long_long_unsigned__ref 0))
  (((long_long_unsigned__refqtmk
    (long_long_unsigned__content long_long_unsigned)))))

;; long_long_unsigned__ref_long_long_unsigned__content__3__projection
(define-fun long_long_unsigned__ref_long_long_unsigned__content__3__projection 
  ((a long_long_unsigned__ref)) long_long_unsigned
  (long_long_unsigned__content a))

;; dynamic_invariant
(define-fun dynamic_invariant1 ((temp___expr_226 (_ BitVec 64)) (temp___is_init_222 Bool) (temp___skip_constant_223 Bool) (temp___do_toplevel_224 Bool) (temp___do_typ_inv_225 Bool)) Bool
  true)

;; dynamic_invariant
(define-fun dynamic_invariant2 ((temp___expr_110 us_t) (temp___is_init_106 Bool) (temp___skip_constant_107 Bool) (temp___do_toplevel_108 Bool) (temp___do_typ_inv_109 Bool)) Bool
  (=>
    (not (= temp___skip_constant_107 true))
    (dynamic_property
      1
      2147483647
      (first temp___expr_110)
      (last temp___expr_110))))

;; to_rep
(declare-fun to_rep2 (long_long_unsigned) (_ BitVec 64))

;; of_rep
(declare-fun of_rep2 ((_ BitVec 64)) long_long_unsigned)

;; inversion_axiom
(assert
  (forall ((x long_long_unsigned))
    (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
(assert true)

;; coerce_axiom
(assert
  (forall ((x (_ BitVec 64)))
    (! (= (to_rep2 (of_rep2 x)) x) :pattern ((to_rep2 (of_rep2 x))) )))

;; to_int
(define-fun to_int3 ((x long_long_unsigned)) Int
  (bv2nat (to_rep2 x)))

;; range_int_axiom
(assert
  (forall ((x long_long_unsigned))
    (! (uint_in_range (to_int3 x)) :pattern ((to_int3 x)) )))

(declare-datatypes ((us_split_discrs 0))
  (((us_split_discrsqtmk
    (rec__ada___system__val_llu__impl__uns_option__overflow Bool)))))

;; __split_discrs_rec__ada___system__val_llu__impl__uns_option__overflow__projection
(define-fun us_split_discrs_rec__ada___system__val_llu__impl__uns_option__overflow__projection 
  ((a us_split_discrs)) Bool
  (rec__ada___system__val_llu__impl__uns_option__overflow a))

(declare-datatypes ((us_split_discrs__ref 0))
  (((us_split_discrs__refqtmk (us_split_discrs__content us_split_discrs)))))

;; __split_discrs__ref___split_discrs__content__projection
(define-fun us_split_discrs__ref___split_discrs__content__projection 
  ((a us_split_discrs__ref)) us_split_discrs
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields 0))
  (((us_split_fieldsqtmk
    (rec__ada___system__val_llu__impl__uns_option__value long_long_unsigned)))))

;; __split_fields_rec__ada___system__val_llu__impl__uns_option__value__projection
(define-fun us_split_fields_rec__ada___system__val_llu__impl__uns_option__value__projection 
  ((a us_split_fields)) long_long_unsigned
  (rec__ada___system__val_llu__impl__uns_option__value a))

(declare-datatypes ((us_split_fields__ref 0))
  (((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))

;; __split_fields__ref___split_fields__content__projection
(define-fun us_split_fields__ref___split_fields__content__projection 
  ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
  (((us_repqtmk
    (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))

;; __rep___split_discrs__projection
(define-fun us_rep___split_discrs__projection ((a us_rep)) us_split_discrs
  (us_split_discrs1 a))

;; __rep___split_fields__projection
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields
  (us_split_fields1 a))

;; ada___system__val_llu__impl__uns_option__value__pred
(define-fun ada___system__val_llu__impl__uns_option__value__pred ((a us_rep)) Bool
  (= (to_int2
       (rec__ada___system__val_llu__impl__uns_option__overflow
         (us_split_discrs1 a))) 0))

;; bool_eq
(define-fun bool_eq9 ((a us_rep) (b us_rep)) Bool
  (ite (and
         (= (to_int2
              (rec__ada___system__val_llu__impl__uns_option__overflow
                (us_split_discrs1 a))) (to_int2
                                         (rec__ada___system__val_llu__impl__uns_option__overflow
                                           (us_split_discrs1 b))))
         (=>
           (ada___system__val_llu__impl__uns_option__value__pred a)
           (= (to_rep2
                (rec__ada___system__val_llu__impl__uns_option__value
                  (us_split_fields1 a))) (to_rep2
                                           (rec__ada___system__val_llu__impl__uns_option__value
                                             (us_split_fields1 b))))))
    true
    false))

;; in_range
(define-fun in_range5 ((rec__ada___system__val_llu__impl__uns_option__overflow1 Bool) (a us_split_discrs)) Bool
  (= rec__ada___system__val_llu__impl__uns_option__overflow1 (rec__ada___system__val_llu__impl__uns_option__overflow
                                                               a)))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
(assert (<= 0 value__size1))

;; object__size_axiom
(assert (<= 0 object__size1))

;; alignment_axiom
(assert (<= 0 alignment1))

(declare-const ada___system__val_llu__impl__uns_option__overflow__first__bit Int)

(declare-const ada___system__val_llu__impl__uns_option__overflow__last__bit Int)

(declare-const ada___system__val_llu__impl__uns_option__overflow__position Int)

;; ada___system__val_llu__impl__uns_option__overflow__first__bit_axiom
(assert (<= 0 ada___system__val_llu__impl__uns_option__overflow__first__bit))

;; ada___system__val_llu__impl__uns_option__overflow__last__bit_axiom
(assert
  (< ada___system__val_llu__impl__uns_option__overflow__first__bit ada___system__val_llu__impl__uns_option__overflow__last__bit))

;; ada___system__val_llu__impl__uns_option__overflow__position_axiom
(assert (<= 0 ada___system__val_llu__impl__uns_option__overflow__position))

(declare-const ada___system__val_llu__impl__uns_option__value__first__bit Int)

(declare-const ada___system__val_llu__impl__uns_option__value__last__bit Int)

(declare-const ada___system__val_llu__impl__uns_option__value__position Int)

;; ada___system__val_llu__impl__uns_option__value__first__bit_axiom
(assert (<= 0 ada___system__val_llu__impl__uns_option__value__first__bit))

;; ada___system__val_llu__impl__uns_option__value__last__bit_axiom
(assert
  (< ada___system__val_llu__impl__uns_option__value__first__bit ada___system__val_llu__impl__uns_option__value__last__bit))

;; ada___system__val_llu__impl__uns_option__value__position_axiom
(assert (<= 0 ada___system__val_llu__impl__uns_option__value__position))

;; user_eq
(declare-fun user_eq6 (us_rep
  us_rep) Bool)

(declare-const dummy6 us_rep)

(declare-datatypes ((uns_option__ref 0))
  (((uns_option__refqtmk (uns_option__content us_rep)))))

;; uns_option__ref_uns_option__content__projection
(define-fun uns_option__ref_uns_option__content__projection ((a uns_option__ref)) us_rep
  (uns_option__content a))

;; scan_based_number_ghost
(declare-fun scan_based_number_ghost (us_t
  Int
  Int
  (_ BitVec 64)
  (_ BitVec 64)) us_rep)

;; scan_based_number_ghost__function_guard
(declare-fun scan_based_number_ghost__function_guard (us_rep
  us_t
  Int
  Int
  (_ BitVec 64)
  (_ BitVec 64)) Bool)

;; only_decimal_ghost
(declare-fun only_decimal_ghost (us_t
  Int
  Int) Bool)

;; only_decimal_ghost__function_guard
(declare-fun only_decimal_ghost__function_guard (Bool
  us_t
  Int
  Int) Bool)

;; wrap_option
(declare-fun wrap_option ((_ BitVec 64)) us_rep)

;; wrap_option__function_guard
(declare-fun wrap_option__function_guard (us_rep
  (_ BitVec 64)) Bool)

(declare-datatypes ((t8s__ref 0))
  (((t8s__refqtmk (t8s__content us_t)))))

;; t8s__ref_t8s__content__projection
(define-fun t8s__ref_t8s__content__projection ((a t8s__ref)) us_t
  (t8s__content a))

(declare-datatypes ((t10s__ref 0))
  (((t10s__refqtmk (t10s__content us_t)))))

;; t10s__ref_t10s__content__projection
(define-fun t10s__ref_t10s__content__projection ((a t10s__ref)) us_t
  (t10s__content a))

(declare-datatypes ((s23s__ref 0))
  (((s23s__refqtmk (s23s__content us_t)))))

;; s23s__ref_s23s__content__projection
(define-fun s23s__ref_s23s__content__projection ((a s23s__ref)) us_t
  (s23s__content a))

(declare-datatypes ((t27s__ref 0))
  (((t27s__refqtmk (t27s__content us_t)))))

;; t27s__ref_t27s__content__projection
(define-fun t27s__ref_t27s__content__projection ((a t27s__ref)) us_t
  (t27s__content a))

(declare-datatypes ((t29s__ref 0))
  (((t29s__refqtmk (t29s__content us_t)))))

;; t29s__ref_t29s__content__projection
(define-fun t29s__ref_t29s__content__projection ((a t29s__ref)) us_t
  (t29s__content a))

(declare-sort long_long_unsigned1 0)

(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 64))

;; bool_eq
(define-fun bool_eq10 ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE6 ((_ BitVec 64)) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) (_ BitVec 64))

;; user_eq
(declare-fun user_eq7 (long_long_unsigned1
  long_long_unsigned1) Bool)

(declare-const dummy7 long_long_unsigned1)

(declare-datatypes ((long_long_unsigned__ref1 0))
  (((long_long_unsigned__refqtmk1
    (long_long_unsigned__content1 long_long_unsigned1)))))

;; long_long_unsigned__ref_long_long_unsigned__content__2__projection
(define-fun long_long_unsigned__ref_long_long_unsigned__content__2__projection 
  ((a long_long_unsigned__ref1)) long_long_unsigned1
  (long_long_unsigned__content1 a))

;; dynamic_invariant
(define-fun dynamic_invariant3 ((temp___expr_219 (_ BitVec 64)) (temp___is_init_215 Bool) (temp___skip_constant_216 Bool) (temp___do_toplevel_217 Bool) (temp___do_typ_inv_218 Bool)) Bool
  true)

(declare-datatypes ((t6s__ref 0))
  (((t6s__refqtmk (t6s__content us_t)))))

;; t6s__ref_t6s__content__projection
(define-fun t6s__ref_t6s__content__projection ((a t6s__ref)) us_t
  (t6s__content a))

;; dynamic_invariant
(define-fun dynamic_invariant4 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool
  (=>
    (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647))
    (in_range4 temp___expr_18)))

;; dynamic_invariant
(define-fun dynamic_invariant5 ((temp___expr_53 Int) (temp___is_init_49 Bool) (temp___skip_constant_50 Bool) (temp___do_toplevel_51 Bool) (temp___do_typ_inv_52 Bool)) Bool
  (=>
    (or (= temp___is_init_49 true) (<= 1 2147483647))
    (in_range2 temp___expr_53)))

;; dynamic_invariant
(define-fun dynamic_invariant6 ((temp___expr_88 Int) (temp___is_init_84 Bool) (temp___skip_constant_85 Bool) (temp___do_toplevel_86 Bool) (temp___do_typ_inv_87 Bool)) Bool
  (=> (or (= temp___is_init_84 true) (<= 0 255)) (in_range3 temp___expr_88)))

;; only_space_ghost__post_axiom
(assert true)

;; only_space_ghost__def_axiom
(assert
  (forall ((s us_t))
    (forall ((from Int) (to__ Int))
      (! (=
           (= (only_space_ghost s from to__) true)
           (forall ((j Int))
             (=>
               (and (<= from j) (<= j to__))
               (= (to_rep (select (to_array s) j)) 32)))) :pattern ((only_space_ghost
                                                                    s
                                                                    from
                                                                    to__)) ))))

;; first_non_space_ghost
(declare-fun first_non_space_ghost (us_t
  Int
  Int) Int)

;; first_non_space_ghost__function_guard
(declare-fun first_non_space_ghost__function_guard (Int
  us_t
  Int
  Int) Bool)

;; first_non_space_ghost__post_axiom
(assert
  (forall ((s us_t))
    (forall ((from Int) (to__ Int))
      (! (and
           (forall ((s1 us_t) (from1 Int) (to__1 Int))
             (only_space_ghost__function_guard
               (only_space_ghost s1 from1 to__1)
               s1
               from1
               to__1))
           (=>
             (and
               (and
                 (and
                   (dynamic_invariant2 s true true true true)
                   (dynamic_invariant4 from true true true true))
                 (dynamic_invariant4 to__ true true true true))
               (and
                 (and
                   (and (<= (first s) from) (<= from (last s)))
                   (and (<= (first s) to__) (<= to__ (last s))))
                 (not (= (only_space_ghost s from to__) true))))
             (let ((result (first_non_space_ghost s from to__)))
               (and
                 (forall ((s1 us_t) (from1 Int) (result1 Int))
                   (only_space_ghost__function_guard
                     (only_space_ghost s1 from1 (- result1 1))
                     s1
                     from1
                     (- result1 1)))
                 (=>
                   (first_non_space_ghost__function_guard result s from to__)
                   (and
                     (and
                       (and
                         (and (<= from result) (<= result to__))
                         (not (= (to_rep (select (to_array s) result)) 32)))
                       (= (only_space_ghost s from (- result 1)) true))
                     (dynamic_invariant5 result true false true true))))))) :pattern (
      (first_non_space_ghost
        s
        from
        to__)) ))))

;; only_number_ghost
(declare-fun only_number_ghost (us_t
  Int
  Int) Bool)

;; only_number_ghost__function_guard
(declare-fun only_number_ghost__function_guard (Bool
  us_t
  Int
  Int) Bool)

;; only_number_ghost__post_axiom
(assert true)

;; only_number_ghost__def_axiom
(assert
  (forall ((str us_t))
    (forall ((from Int) (to__ Int))
      (! (=
           (= (only_number_ghost str from to__) true)
           (forall ((j Int))
             (=>
               (and (<= from j) (<= j to__))
               (let ((temp___306 (to_rep (select (to_array str) j))))
                 (or
                   (and (<= 48 temp___306) (<= temp___306 57))
                   (= temp___306 95)))))) :pattern ((only_number_ghost
                                                      str
                                                      from
                                                      to__)) ))))

;; last_number_ghost
(declare-fun last_number_ghost (us_t) Int)

;; last_number_ghost__function_guard
(declare-fun last_number_ghost__function_guard (Int
  us_t) Bool)

;; temp___String_Literal_308
(declare-fun temp___String_Literal_308 (tuple0) (Array Int character))

;; temp___String_Literal_308__def_axiom
(assert true)

;; last_number_ghost__post_axiom
(assert
  (forall ((str us_t))
    (! (=>
         (and
           (dynamic_invariant2 str true true true true)
           (and
             (not
               (= (let ((temp___317 (temp___String_Literal_308 Tuple0)))
                    (bool_eq5
                      (to_array str)
                      (first str)
                      (last str)
                      temp___317
                      1
                      0)) true))
             (let ((temp___318 (to_rep (select (to_array str) (first str)))))
               (and (<= 48 temp___318) (<= temp___318 57)))))
         (let ((result (last_number_ghost str)))
           (=>
             (last_number_ghost__function_guard result str)
             (and
               (and
                 (and
                   (and (<= (first str) result) (<= result (last str)))
                   (=>
                     (< result (last str))
                     (= (not (let ((temp___320 (to_rep
                                                 (select (to_array str) (+ result 1)))))
                               (or (let ((temp___321 temp___320))
                                     (and (ite (<= 48 temp___321) true false) 
                                     (ite (<= temp___321 57)
                                       true
                                       false))) (ite (= temp___320 95)
                                                  true
                                                  false)))) true)))
                 (= (only_number_ghost str (first str) result) true))
               (dynamic_invariant5 result true false true true))))) :pattern (
    (last_number_ghost
      str)) )))

;; is_natural_format_ghost
(declare-fun is_natural_format_ghost (us_t) Bool)

;; is_natural_format_ghost__function_guard
(declare-fun is_natural_format_ghost__function_guard (Bool
  us_t) Bool)

;; temp___String_Literal_323
(declare-fun temp___String_Literal_323 (tuple0) (Array Int character))

;; temp___String_Literal_323__def_axiom
(assert true)

;; is_natural_format_ghost__post_axiom
(assert true)

;; is_natural_format_ghost__def_axiom
(assert
  (forall ((str us_t))
    (! (and
         (forall ((str1 us_t))
           (last_number_ghost__function_guard (last_number_ghost str1) str1))
         (=
           (= (is_natural_format_ghost str) true)
           (and
             (and
               (not
                 (= (let ((temp___332 (temp___String_Literal_323 Tuple0)))
                      (bool_eq5
                        (to_array str)
                        (first str)
                        (last str)
                        temp___332
                        1
                        0)) true))
               (let ((temp___333 (to_rep (select (to_array str) (first str)))))
                 (and (<= 48 temp___333) (<= temp___333 57))))
             (let ((l (last_number_ghost str)))
               (and
                 (let ((temp___334 (to_rep (select (to_array str) l))))
                   (and (<= 48 temp___334) (<= temp___334 57)))
                 (forall ((j Int))
                   (=>
                     (and (<= (first str) j) (<= j l))
                     (=>
                       (= (to_rep (select (to_array str) j)) 95)
                       (not (= (to_rep (select (to_array str) (+ j 1))) 95)))))))))) :pattern (
    (is_natural_format_ghost
      str)) )))

;; bool_eq
(declare-fun bool_eq11 (Int
  Int) Bool)

;; bool_ne
(declare-fun bool_ne1 (Int
  Int) Bool)

;; bool_lt
(declare-fun bool_lt1 (Int
  Int) Bool)

;; bool_le
(declare-fun bool_le1 (Int
  Int) Bool)

;; bool_gt
(declare-fun bool_gt1 (Int
  Int) Bool)

;; bool_ge
(declare-fun bool_ge1 (Int
  Int) Bool)

;; bool_eq_axiom
(assert
  (forall ((x Int)) (forall ((y Int)) (= (= (bool_eq11 x y) true) (= x y)))))

;; bool_ne_axiom
(assert
  (forall ((x Int))
    (forall ((y Int)) (= (= (bool_ne1 x y) true) (not (= x y))))))

;; bool_lt_axiom
(assert
  (forall ((x Int)) (forall ((y Int)) (= (= (bool_lt1 x y) true) (< x y)))))

;; bool_int__le_axiom
(assert
  (forall ((x Int)) (forall ((y Int)) (= (= (bool_le1 x y) true) (<= x y)))))

;; bool_gt_axiom
(assert
  (forall ((x Int)) (forall ((y Int)) (= (= (bool_gt1 x y) true) (< y x)))))

;; bool_ge_axiom
(assert
  (forall ((x Int)) (forall ((y Int)) (= (= (bool_ge1 x y) true) (<= y x)))))

;; length
(define-fun length1 ((x Int) (y Int)) Int
  (ite (<= x y) (+ (- y x) 1) 0))

;; starts_as_exponent_format_ghost
(declare-fun starts_as_exponent_format_ghost (us_t
  Bool) Bool)

;; starts_as_exponent_format_ghost__function_guard
(declare-fun starts_as_exponent_format_ghost__function_guard (Bool
  us_t
  Bool) Bool)

;; starts_as_exponent_format_ghost__post_axiom
(assert true)

;; starts_as_exponent_format_ghost__def_axiom
(assert
  (forall ((str us_t))
    (forall ((real__ Bool))
      (! (=
           (= (starts_as_exponent_format_ghost str real__) true)
           (and
             (and
               (< 1 (length str))
               (let ((temp___396 (to_rep (select (to_array str) (first str)))))
                 (or (= temp___396 69) (= temp___396 101))))
             (let ((minus_sign (bool_eq11
                                 (to_rep
                                   (select (to_array str) (+ (first str) 1)))
                                 45)))
               (let ((sign (or (bool_eq11
                                 (to_rep
                                   (select (to_array str) (+ (first str) 1)))
                                 43) minus_sign)))
                 (and
                   (and
                     (=> (= minus_sign true) (= real__ true))
                     (=> (= sign true) (< 2 (length str))))
                   (let ((temp___397 (to_rep
                                       (select (to_array str) (ite (= sign true)
                                                                (+ (first
                                                                    str) 2)
                                                                (+ (first
                                                                    str) 1))))))
                     (and (<= 48 temp___397) (<= temp___397 57)))))))) :pattern (
      (starts_as_exponent_format_ghost
        str
        real__)) ))))

;; is_opt_exponent_format_ghost
(declare-fun is_opt_exponent_format_ghost (us_t
  Bool) Bool)

;; is_opt_exponent_format_ghost__function_guard
(declare-fun is_opt_exponent_format_ghost__function_guard (Bool
  us_t
  Bool) Bool)

(declare-datatypes ((t89s__ref 0))
  (((t89s__refqtmk (t89s__content us_t)))))

;; t89s__ref_t89s__content__projection
(define-fun t89s__ref_t89s__content__projection ((a t89s__ref)) us_t
  (t89s__content a))

;; is_opt_exponent_format_ghost__post_axiom
(assert true)

;; is_opt_exponent_format_ghost__def_axiom
(assert
  (forall ((str us_t))
    (forall ((real__ Bool))
      (! (=
           (= (is_opt_exponent_format_ghost str real__) true)
           (or
             (not (= (starts_as_exponent_format_ghost str real__) true))
             (= (is_natural_format_ghost
                  (let ((temp___406 (let ((temp___405 (last str)))
                                      (of_array
                                        (to_array str)
                                        (ite (let ((temp___409 (to_rep
                                                                 (select 
                                                                 (to_array
                                                                   str) (+ 
                                                                 (first
                                                                   str) 1)))))
                                               (or
                                                 (= temp___409 43)
                                                 (= temp___409 45)))
                                          (+ (first str) 2)
                                          (+ (first str) 1))
                                        temp___405))))
                    (let ((temp___407 (to_array temp___406)))
                      (of_array
                        temp___407
                        (first temp___406)
                        (last temp___406))))) true))) :pattern ((is_opt_exponent_format_ghost
                                                                  str
                                                                  real__)) ))))

;; scan_natural_ghost
(declare-fun scan_natural_ghost (us_t
  Int
  Int) Int)

;; scan_natural_ghost__function_guard
(declare-fun scan_natural_ghost__function_guard (Int
  us_t
  Int
  Int) Bool)

;; temp___String_Literal_462
(declare-fun temp___String_Literal_462 (tuple0) (Array Int character))

;; temp___String_Literal_462__def_axiom
(assert true)

;; scan_natural_ghost__def_axiom
(assert
  (forall ((str us_t))
    (forall ((p Int) (acc Int))
      (! (=>
           (and
             (and
               (and
                 (dynamic_invariant2 str true true true true)
                 (dynamic_invariant p true true true true))
               (dynamic_invariant acc true true true true))
             (scan_natural_ghost__function_guard
               (scan_natural_ghost str p acc)
               str
               p
               acc))
           (and
             (forall ((str1 us_t) (p1 Int) (acc1 Int))
               (scan_natural_ghost__function_guard
                 (scan_natural_ghost str1 (+ p1 1) acc1)
                 str1
                 (+ p1 1)
                 acc1))
             (and
               (forall ((str1 us_t) (p1 Int) (shift_acc Int))
                 (scan_natural_ghost__function_guard
                   (scan_natural_ghost str1 (+ p1 1) shift_acc)
                   str1
                   (+ p1 1)
                   shift_acc))
               (= (scan_natural_ghost str p acc) (ite (or
                                                        (or
                                                          (< (last str) p)
                                                          (= (not (let ((temp___481 
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    str) p))))
                                                                    (or 
                                                                    (let ((temp___482 temp___481))
                                                                    (and 
                                                                    (ite (<= 48 temp___482)
                                                                    true
                                                                    false) 
                                                                    (ite (<= temp___482 57)
                                                                    true
                                                                    false))) 
                                                                    (ite (= temp___481 95)
                                                                    true
                                                                    false)))) true))
                                                        (<= 214748364 acc))
                                                   acc
                                                   (ite (= (to_rep
                                                             (select 
                                                             (to_array
                                                               str) p)) 95)
                                                     (scan_natural_ghost
                                                       str
                                                       (+ p 1)
                                                       acc)
                                                     (let ((shift_acc (+ (* acc 10) (- 
                                                       (to_rep
                                                         (select (to_array
                                                                   str) p)) 48))))
                                                       (scan_natural_ghost
                                                         str
                                                         (+ p 1)
                                                         shift_acc)))))))) :pattern (
      (scan_natural_ghost
        str
        p
        acc)) ))))

;; scan_natural_ghost__post_axiom
(assert
  (forall ((str us_t))
    (forall ((p Int) (acc Int))
      (! (and
           (forall ((str1 us_t))
             (last_number_ghost__function_guard
               (last_number_ghost str1)
               str1))
           (=>
             (and
               (and
                 (and
                   (dynamic_invariant2 str true true true true)
                   (dynamic_invariant p true true true true))
                 (dynamic_invariant acc true true true true))
               (and
                 (and
                   (and
                     (not
                       (= (let ((temp___474 (temp___String_Literal_462
                                              Tuple0)))
                            (bool_eq5
                              (to_array str)
                              (first str)
                              (last str)
                              temp___474
                              1
                              0)) true))
                     (let ((temp___475 (to_rep
                                         (select (to_array str) (first str)))))
                       (and (<= 48 temp___475) (<= temp___475 57))))
                   (< (last str) 2147483647))
                 (and
                   (<= (first str) p)
                   (<= p (+ (last_number_ghost str) 1)))))
             (let ((result (scan_natural_ghost str p acc)))
               (=>
                 (scan_natural_ghost__function_guard result str p acc)
                 (dynamic_invariant result true false true true))))) :pattern (
      (scan_natural_ghost
        str
        p
        acc)) ))))

;; scan_exponent_ghost
(declare-fun scan_exponent_ghost (us_t
  Bool) Int)

;; scan_exponent_ghost__function_guard
(declare-fun scan_exponent_ghost__function_guard (Int
  us_t
  Bool) Bool)

(declare-datatypes ((t94s__ref 0))
  (((t94s__refqtmk (t94s__content us_t)))))

;; t94s__ref_t94s__content__projection
(define-fun t94s__ref_t94s__content__projection ((a t94s__ref)) us_t
  (t94s__content a))

;; scan_exponent_ghost__post_axiom
(assert
  (forall ((str us_t))
    (forall ((real__ Bool))
      (! (=>
           (and
             (dynamic_invariant2 str true true true true)
             (and
               (< (last str) 2147483647)
               (= (starts_as_exponent_format_ghost str real__) true)))
           (let ((result (scan_exponent_ghost str real__)))
             (=>
               (scan_exponent_ghost__function_guard result str real__)
               (and
                 (=> (not (= real__ true)) (<= 0 result))
                 (dynamic_invariant4 result true false true true))))) :pattern (
      (scan_exponent_ghost
        str
        real__)) ))))

;; scan_exponent_ghost__def_axiom
(assert
  (forall ((str us_t))
    (forall ((real__ Bool))
      (! (=>
           (dynamic_invariant2 str true true true true)
           (and
             (forall ((str1 us_t) (start Int))
               (scan_natural_ghost__function_guard
                 (scan_natural_ghost
                   (let ((temp___490 (let ((temp___489 (last str1)))
                                       (of_array
                                         (to_array str1)
                                         start
                                         temp___489))))
                     (let ((temp___491 (to_array temp___490)))
                       (of_array
                         temp___491
                         (first temp___490)
                         (last temp___490))))
                   start
                   0)
                 (let ((temp___490 (let ((temp___489 (last str1)))
                                     (of_array
                                       (to_array str1)
                                       start
                                       temp___489))))
                   (let ((temp___491 (to_array temp___490)))
                     (of_array
                       temp___491
                       (first temp___490)
                       (last temp___490))))
                 start
                 0))
             (= (scan_exponent_ghost str real__) (let ((plus_sign (bool_eq11
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    str) (+ 
                                                                    (first
                                                                    str) 1)))
                                                                    43)))
                                                   (let ((minus_sign 
                                                     (bool_eq11
                                                       (to_rep
                                                         (select (to_array
                                                                   str) (+ 
                                                         (first
                                                           str) 1)))
                                                       45)))
                                                     (let ((sign (or plus_sign minus_sign)))
                                                       (let ((start (ite (= sign true)
                                                                    (+ 
                                                                    (first
                                                                    str) 2)
                                                                    (+ 
                                                                    (first
                                                                    str) 1))))
                                                         (let ((value 
                                                           (scan_natural_ghost
                                                             (let ((temp___490 
                                                               (let ((temp___489 
                                                                 (last
                                                                   str)))
                                                                 (of_array
                                                                   (to_array
                                                                    str)
                                                                   start
                                                                   temp___489))))
                                                               (let ((temp___491 
                                                                 (to_array
                                                                   temp___490)))
                                                                 (of_array
                                                                   temp___491
                                                                   (first
                                                                    temp___490)
                                                                   (last
                                                                    temp___490))))
                                                             start
                                                             0)))
                                                           (ite (= minus_sign true)
                                                             (- value)
                                                             value))))))))) :pattern (
      (scan_exponent_ghost
        str
        real__)) ))))

(declare-sort long_long_unsigned2 0)

(declare-const attr__ATTRIBUTE_MODULUS2 (_ BitVec 64))

;; bool_eq
(define-fun bool_eq12 ((x (_ BitVec 64)) (y (_ BitVec 64))) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE7 ((_ BitVec 64)) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) (_ BitVec 64))

;; user_eq
(declare-fun user_eq8 (long_long_unsigned2
  long_long_unsigned2) Bool)

(declare-const dummy8 long_long_unsigned2)

(declare-datatypes ((long_long_unsigned__ref2 0))
  (((long_long_unsigned__refqtmk2
    (long_long_unsigned__content2 long_long_unsigned2)))))

;; long_long_unsigned__ref_long_long_unsigned__content__4__projection
(define-fun long_long_unsigned__ref_long_long_unsigned__content__4__projection 
  ((a long_long_unsigned__ref2)) long_long_unsigned2
  (long_long_unsigned__content2 a))

;; dynamic_invariant
(define-fun dynamic_invariant7 ((temp___expr_242 (_ BitVec 64)) (temp___is_init_238 Bool) (temp___skip_constant_239 Bool) (temp___do_toplevel_240 Bool) (temp___do_typ_inv_241 Bool)) Bool
  true)

;; bool_eq
(declare-fun bool_eq13 (Int
  Int) Bool)

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
(assert (<= 0 value__size2))

;; object__size_axiom
(assert (<= 0 object__size2))

;; alignment_axiom
(assert (<= 0 alignment2))

;; user_eq
(declare-fun user_eq9 (Int
  Int) Bool)

(declare-const dummy9 Int)

(declare-datatypes ((big_integer__ref 0))
  (((big_integer__refqtmk (big_integer__content Int)))))

;; big_integer__ref_big_integer__content__projection
(define-fun big_integer__ref_big_integer__content__projection ((a big_integer__ref)) Int
  (big_integer__content a))

(declare-datatypes ((valid_big_integer__ref 0))
  (((valid_big_integer__refqtmk (valid_big_integer__content Int)))))

;; valid_big_integer__ref_valid_big_integer__content__projection
(define-fun valid_big_integer__ref_valid_big_integer__content__projection 
  ((a valid_big_integer__ref)) Int
  (valid_big_integer__content a))

;; dynamic_invariant
(define-fun dynamic_invariant8 ((temp___expr_256 Int) (temp___is_init_252 Bool) (temp___skip_constant_253 Bool) (temp___do_toplevel_254 Bool) (temp___do_typ_inv_255 Bool)) Bool
  true)

;; default_initial_assumption
(define-fun default_initial_assumption ((temp___expr_235 us_rep) (temp___skip_top_level_236 Bool)) Bool
  (and
    (= (rec__ada___system__val_llu__impl__uns_option__overflow
         (us_split_discrs1 temp___expr_235)) (of_int 0))
    (=>
      (ada___system__val_llu__impl__uns_option__value__pred temp___expr_235)
      (= (to_rep2
           (rec__ada___system__val_llu__impl__uns_option__value
             (us_split_fields1 temp___expr_235))) #x0000000000000000))))

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; value__size_axiom
(assert (<= 0 value__size3))

;; object__size_axiom
(assert (<= 0 object__size3))

;; alignment_axiom
(assert (<= 0 alignment3))

(declare-const ada___system__val_llu__impl__uns_option__overflow__first__bit1 Int)

(declare-const ada___system__val_llu__impl__uns_option__overflow__last__bit1 Int)

(declare-const ada___system__val_llu__impl__uns_option__overflow__position1 Int)

;; ada___system__val_llu__impl__uns_option__overflow__first__bit_axiom
(assert
  (<= 0 ada___system__val_llu__impl__uns_option__overflow__first__bit1))

;; ada___system__val_llu__impl__uns_option__overflow__last__bit_axiom
(assert
  (< ada___system__val_llu__impl__uns_option__overflow__first__bit1 ada___system__val_llu__impl__uns_option__overflow__last__bit1))

;; ada___system__val_llu__impl__uns_option__overflow__position_axiom
(assert (<= 0 ada___system__val_llu__impl__uns_option__overflow__position1))

(declare-const ada___system__val_llu__impl__uns_option__value__first__bit1 Int)

(declare-const ada___system__val_llu__impl__uns_option__value__last__bit1 Int)

(declare-const ada___system__val_llu__impl__uns_option__value__position1 Int)

;; ada___system__val_llu__impl__uns_option__value__first__bit_axiom
(assert (<= 0 ada___system__val_llu__impl__uns_option__value__first__bit1))

;; ada___system__val_llu__impl__uns_option__value__last__bit_axiom
(assert
  (< ada___system__val_llu__impl__uns_option__value__first__bit1 ada___system__val_llu__impl__uns_option__value__last__bit1))

;; ada___system__val_llu__impl__uns_option__value__position_axiom
(assert (<= 0 ada___system__val_llu__impl__uns_option__value__position1))

;; user_eq
(declare-fun user_eq10 (us_rep
  us_rep) Bool)

(declare-const dummy10 us_rep)

(declare-datatypes ((t134s__ref 0))
  (((t134s__refqtmk (t134s__content us_rep)))))

;; t134s__ref_t134s__content__projection
(define-fun t134s__ref_t134s__content__projection ((a t134s__ref)) us_rep
  (t134s__content a))

;; wrap_option__post_axiom
(assert true)

;; wrap_option__def_axiom
(assert
  (forall ((value (_ BitVec 64)))
    (! (=>
         (dynamic_invariant1 value true true true true)
         (= (wrap_option value) (let ((temp___overflow_701 (of_int 0)))
                                  (us_repqtmk
                                    (us_split_discrsqtmk temp___overflow_701)
                                    (us_split_fieldsqtmk (of_rep2 value)))))) :pattern (
    (wrap_option
      value)) )))

;; only_decimal_ghost__post_axiom
(assert true)

;; only_decimal_ghost__def_axiom
(assert
  (forall ((str us_t))
    (forall ((from Int) (to__ Int))
      (! (=
           (= (only_decimal_ghost str from to__) true)
           (forall ((j Int))
             (=>
               (and (<= from j) (<= j to__))
               (let ((temp___697 (to_rep (select (to_array str) j))))
                 (and (<= 48 temp___697) (<= temp___697 57)))))) :pattern (
      (only_decimal_ghost
        str
        from
        to__)) ))))

;; only_hexa_ghost
(declare-fun only_hexa_ghost (us_t
  Int
  Int) Bool)

;; only_hexa_ghost__function_guard
(declare-fun only_hexa_ghost__function_guard (Bool
  us_t
  Int
  Int) Bool)

;; only_hexa_ghost__post_axiom
(assert true)

;; only_hexa_ghost__def_axiom
(assert
  (forall ((str us_t))
    (forall ((from Int) (to__ Int))
      (! (=
           (= (only_hexa_ghost str from to__) true)
           (forall ((j Int))
             (=>
               (and (<= from j) (<= j to__))
               (let ((temp___344 (to_rep (select (to_array str) j))))
                 (or
                   (and (<= 48 temp___344) (<= temp___344 57))
                   (or
                     (and (<= 97 temp___344) (<= temp___344 102))
                     (or
                       (and (<= 65 temp___344) (<= temp___344 70))
                       (= temp___344 95)))))))) :pattern ((only_hexa_ghost
                                                            str
                                                            from
                                                            to__)) ))))

;; last_hexa_ghost
(declare-fun last_hexa_ghost (us_t) Int)

;; last_hexa_ghost__function_guard
(declare-fun last_hexa_ghost__function_guard (Int
  us_t) Bool)

;; temp___String_Literal_348
(declare-fun temp___String_Literal_348 (tuple0) (Array Int character))

;; temp___String_Literal_348__def_axiom
(assert true)

;; last_hexa_ghost__post_axiom
(assert
  (forall ((str us_t))
    (! (=>
         (and
           (dynamic_invariant2 str true true true true)
           (and
             (not
               (= (let ((temp___362 (temp___String_Literal_348 Tuple0)))
                    (bool_eq5
                      (to_array str)
                      (first str)
                      (last str)
                      temp___362
                      1
                      0)) true))
             (let ((temp___363 (to_rep (select (to_array str) (first str)))))
               (or
                 (and (<= 48 temp___363) (<= temp___363 57))
                 (or
                   (and (<= 97 temp___363) (<= temp___363 102))
                   (and (<= 65 temp___363) (<= temp___363 70)))))))
         (let ((result (last_hexa_ghost str)))
           (=>
             (last_hexa_ghost__function_guard result str)
             (and
               (and
                 (and
                   (and (<= (first str) result) (<= result (last str)))
                   (=>
                     (< result (last str))
                     (= (not (let ((temp___368 (to_rep
                                                 (select (to_array str) (+ result 1)))))
                               (or (let ((temp___371 temp___368))
                                     (and (ite (<= 48 temp___371) true false) 
                                     (ite (<= temp___371 57)
                                       true
                                       false))) (or (let ((temp___370 temp___368))
                                                      (and (ite (<= 97 temp___370)
                                                             true
                                                             false) (ite (<= temp___370 102)
                                                                    true
                                                                    false))) (or 
                               (let ((temp___369 temp___368))
                                 (and (ite (<= 65 temp___369) true false) 
                                 (ite (<= temp___369 70)
                                   true
                                   false))) (ite (= temp___368 95)
                                              true
                                              false)))))) true)))
                 (= (only_hexa_ghost str (first str) result) true))
               (dynamic_invariant5 result true false true true))))) :pattern (
    (last_hexa_ghost
      str)) )))

;; is_based_format_ghost
(declare-fun is_based_format_ghost (us_t) Bool)

;; is_based_format_ghost__function_guard
(declare-fun is_based_format_ghost__function_guard (Bool
  us_t) Bool)

;; temp___String_Literal_373
(declare-fun temp___String_Literal_373 (tuple0) (Array Int character))

;; temp___String_Literal_373__def_axiom
(assert true)

;; is_based_format_ghost__post_axiom
(assert true)

;; is_based_format_ghost__def_axiom
(assert
  (forall ((str us_t))
    (! (and
         (forall ((str1 us_t))
           (last_hexa_ghost__function_guard (last_hexa_ghost str1) str1))
         (=
           (= (is_based_format_ghost str) true)
           (and
             (and
               (not
                 (= (let ((temp___384 (temp___String_Literal_373 Tuple0)))
                      (bool_eq5
                        (to_array str)
                        (first str)
                        (last str)
                        temp___384
                        1
                        0)) true))
               (let ((temp___385 (to_rep (select (to_array str) (first str)))))
                 (or
                   (and (<= 48 temp___385) (<= temp___385 57))
                   (or
                     (and (<= 97 temp___385) (<= temp___385 102))
                     (and (<= 65 temp___385) (<= temp___385 70))))))
             (let ((l (last_hexa_ghost str)))
               (and
                 (not (= (to_rep (select (to_array str) l)) 95))
                 (forall ((j Int))
                   (=>
                     (and (<= (first str) j) (<= j l))
                     (=>
                       (= (to_rep (select (to_array str) j)) 95)
                       (not (= (to_rep (select (to_array str) (+ j 1))) 95)))))))))) :pattern (
    (is_based_format_ghost
      str)) )))

;; hexa_to_unsigned_ghost
(declare-fun hexa_to_unsigned_ghost (Int) (_ BitVec 64))

;; hexa_to_unsigned_ghost__function_guard
(declare-fun hexa_to_unsigned_ghost__function_guard ((_ BitVec 64)
  Int) Bool)

;; hexa_to_unsigned_ghost__post_axiom
(assert
  (forall ((x Int))
    (! (=>
         (and
           (dynamic_invariant6 x true true true true)
           (or
             (and (<= 48 x) (<= x 57))
             (or (and (<= 97 x) (<= x 102)) (and (<= 65 x) (<= x 70)))))
         (let ((result (hexa_to_unsigned_ghost x)))
           (=>
             (hexa_to_unsigned_ghost__function_guard result x)
             (dynamic_invariant1 result true false true true)))) :pattern (
    (hexa_to_unsigned_ghost
      x)) )))

;; hexa_to_unsigned_ghost__def_axiom
(assert
  (forall ((x Int))
    (! (=>
         (dynamic_invariant6 x true true true true)
         (= (hexa_to_unsigned_ghost x) (ite (and (<= 48 x) (<= x 57))
                                         (bvsub ((_ int2bv 64) x) #x0000000000000030)
                                         (ite (and (<= 97 x) (<= x 102))
                                           (bvadd (bvsub ((_ int2bv 64) x) #x0000000000000061) #x000000000000000A)
                                           (ite (and (<= 65 x) (<= x 70))
                                             (bvadd (bvsub ((_ int2bv 64) x) #x0000000000000041) #x000000000000000A)
                                             (to_rep2 dummy5)))))) :pattern (
    (hexa_to_unsigned_ghost
      x)) )))

;; scan_overflows_ghost
(declare-fun scan_overflows_ghost ((_ BitVec 64)
  (_ BitVec 64)
  (_ BitVec 64)) Bool)

;; scan_overflows_ghost__function_guard
(declare-fun scan_overflows_ghost__function_guard (Bool
  (_ BitVec 64)
  (_ BitVec 64)
  (_ BitVec 64)) Bool)

;; scan_overflows_ghost__post_axiom
(assert true)

;; scan_overflows_ghost__def_axiom
(assert
  (forall ((digit (_ BitVec 64)) (base (_ BitVec 64)) (acc (_ BitVec 64)))
    (! (=
         (= (scan_overflows_ghost digit base acc) true)
         (or
           (or
             (bvuge digit base)
             (bvugt acc (bvudiv #xFFFFFFFFFFFFFFFF base)))
           (bvult (bvsub #xFFFFFFFFFFFFFFFF digit) (bvmul base acc)))) :pattern (
    (scan_overflows_ghost
      digit
      base
      acc)) )))

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const alignment4 Int)

;; value__size_axiom
(assert (<= 0 value__size4))

;; object__size_axiom
(assert (<= 0 object__size4))

;; alignment_axiom
(assert (<= 0 alignment4))

(declare-const ada___system__val_llu__impl__uns_option__overflow__first__bit2 Int)

(declare-const ada___system__val_llu__impl__uns_option__overflow__last__bit2 Int)

(declare-const ada___system__val_llu__impl__uns_option__overflow__position2 Int)

;; ada___system__val_llu__impl__uns_option__overflow__first__bit_axiom
(assert
  (<= 0 ada___system__val_llu__impl__uns_option__overflow__first__bit2))

;; ada___system__val_llu__impl__uns_option__overflow__last__bit_axiom
(assert
  (< ada___system__val_llu__impl__uns_option__overflow__first__bit2 ada___system__val_llu__impl__uns_option__overflow__last__bit2))

;; ada___system__val_llu__impl__uns_option__overflow__position_axiom
(assert (<= 0 ada___system__val_llu__impl__uns_option__overflow__position2))

(declare-const ada___system__val_llu__impl__uns_option__value__first__bit2 Int)

(declare-const ada___system__val_llu__impl__uns_option__value__last__bit2 Int)

(declare-const ada___system__val_llu__impl__uns_option__value__position2 Int)

;; ada___system__val_llu__impl__uns_option__value__first__bit_axiom
(assert (<= 0 ada___system__val_llu__impl__uns_option__value__first__bit2))

;; ada___system__val_llu__impl__uns_option__value__last__bit_axiom
(assert
  (< ada___system__val_llu__impl__uns_option__value__first__bit2 ada___system__val_llu__impl__uns_option__value__last__bit2))

;; ada___system__val_llu__impl__uns_option__value__position_axiom
(assert (<= 0 ada___system__val_llu__impl__uns_option__value__position2))

;; user_eq
(declare-fun user_eq11 (us_rep
  us_rep) Bool)

(declare-const dummy11 us_rep)

(declare-datatypes ((t128s__ref 0))
  (((t128s__refqtmk (t128s__content us_rep)))))

;; t128s__ref_t128s__content__projection
(define-fun t128s__ref_t128s__content__projection ((a t128s__ref)) us_rep
  (t128s__content a))

(declare-const value__size5 Int)

(declare-const object__size5 Int)

(declare-const alignment5 Int)

;; value__size_axiom
(assert (<= 0 value__size5))

;; object__size_axiom
(assert (<= 0 object__size5))

;; alignment_axiom
(assert (<= 0 alignment5))

(declare-const ada___system__val_llu__impl__uns_option__overflow__first__bit3 Int)

(declare-const ada___system__val_llu__impl__uns_option__overflow__last__bit3 Int)

(declare-const ada___system__val_llu__impl__uns_option__overflow__position3 Int)

;; ada___system__val_llu__impl__uns_option__overflow__first__bit_axiom
(assert
  (<= 0 ada___system__val_llu__impl__uns_option__overflow__first__bit3))

;; ada___system__val_llu__impl__uns_option__overflow__last__bit_axiom
(assert
  (< ada___system__val_llu__impl__uns_option__overflow__first__bit3 ada___system__val_llu__impl__uns_option__overflow__last__bit3))

;; ada___system__val_llu__impl__uns_option__overflow__position_axiom
(assert (<= 0 ada___system__val_llu__impl__uns_option__overflow__position3))

(declare-const ada___system__val_llu__impl__uns_option__value__first__bit3 Int)

(declare-const ada___system__val_llu__impl__uns_option__value__last__bit3 Int)

(declare-const ada___system__val_llu__impl__uns_option__value__position3 Int)

;; ada___system__val_llu__impl__uns_option__value__first__bit_axiom
(assert (<= 0 ada___system__val_llu__impl__uns_option__value__first__bit3))

;; ada___system__val_llu__impl__uns_option__value__last__bit_axiom
(assert
  (< ada___system__val_llu__impl__uns_option__value__first__bit3 ada___system__val_llu__impl__uns_option__value__last__bit3))

;; ada___system__val_llu__impl__uns_option__value__position_axiom
(assert (<= 0 ada___system__val_llu__impl__uns_option__value__position3))

;; user_eq
(declare-fun user_eq12 (us_rep
  us_rep) Bool)

(declare-const dummy12 us_rep)

(declare-datatypes ((t129s__ref 0))
  (((t129s__refqtmk (t129s__content us_rep)))))

;; t129s__ref_t129s__content__projection
(define-fun t129s__ref_t129s__content__projection ((a t129s__ref)) us_rep
  (t129s__content a))

;; scan_based_number_ghost__def_axiom
(assert
  (forall ((str us_t))
    (forall ((from Int) (to__ Int))
      (forall ((base (_ BitVec 64)) (acc (_ BitVec 64)))
        (! (=>
             (and
               (and
                 (and
                   (and
                     (dynamic_invariant2 str true true true true)
                     (dynamic_invariant4 from true true true true))
                   (dynamic_invariant4 to__ true true true true))
                 (dynamic_invariant1 base true true true true))
               (dynamic_invariant1 acc true true true true))
             (and
               (forall ((str1 us_t) (from1 Int))
                 (hexa_to_unsigned_ghost__function_guard
                   (hexa_to_unsigned_ghost
                     (to_rep (select (to_array str1) from1)))
                   (to_rep (select (to_array str1) from1))))
               (and
                 (forall ((str1 us_t) (from1 Int))
                   (hexa_to_unsigned_ghost__function_guard
                     (hexa_to_unsigned_ghost
                       (to_rep (select (to_array str1) from1)))
                     (to_rep (select (to_array str1) from1))))
                 (= (scan_based_number_ghost str from to__ base acc) 
                 (ite (< to__ from)
                   (let ((temp___overflow_458 (of_int 0)))
                     (us_repqtmk
                       (us_split_discrsqtmk temp___overflow_458)
                       (us_split_fieldsqtmk (of_rep2 acc))))
                   (ite (= (to_rep (select (to_array str) from)) 95)
                     (scan_based_number_ghost str (+ from 1) to__ base acc)
                     (ite (= (scan_overflows_ghost
                               (hexa_to_unsigned_ghost
                                 (to_rep (select (to_array str) from)))
                               base
                               acc) true)
                       (let ((temp___overflow_459 (of_int 1)))
                         (us_repqtmk
                           (us_split_discrsqtmk temp___overflow_459)
                           (us_split_fieldsqtmk dummy5)))
                       (scan_based_number_ghost
                         str
                         (+ from 1)
                         to__
                         base
                         (bvadd (bvmul base acc) (hexa_to_unsigned_ghost
                                                   (to_rep
                                                     (select (to_array str) from)))))))))))) :pattern (
        (scan_based_number_ghost
          str
          from
          to__
          base
          acc)) )))))

;; scan_based_number_ghost__post_axiom
(assert true)

;; exponent_unsigned_ghost
(declare-fun exponent_unsigned_ghost ((_ BitVec 64)
  Int
  (_ BitVec 64)) us_rep)

;; exponent_unsigned_ghost__function_guard
(declare-fun exponent_unsigned_ghost__function_guard (us_rep
  (_ BitVec 64)
  Int
  (_ BitVec 64)) Bool)

(declare-const value__size6 Int)

(declare-const object__size6 Int)

(declare-const alignment6 Int)

;; value__size_axiom
(assert (<= 0 value__size6))

;; object__size_axiom
(assert (<= 0 object__size6))

;; alignment_axiom
(assert (<= 0 alignment6))

(declare-const ada___system__val_llu__impl__uns_option__overflow__first__bit4 Int)

(declare-const ada___system__val_llu__impl__uns_option__overflow__last__bit4 Int)

(declare-const ada___system__val_llu__impl__uns_option__overflow__position4 Int)

;; ada___system__val_llu__impl__uns_option__overflow__first__bit_axiom
(assert
  (<= 0 ada___system__val_llu__impl__uns_option__overflow__first__bit4))

;; ada___system__val_llu__impl__uns_option__overflow__last__bit_axiom
(assert
  (< ada___system__val_llu__impl__uns_option__overflow__first__bit4 ada___system__val_llu__impl__uns_option__overflow__last__bit4))

;; ada___system__val_llu__impl__uns_option__overflow__position_axiom
(assert (<= 0 ada___system__val_llu__impl__uns_option__overflow__position4))

(declare-const ada___system__val_llu__impl__uns_option__value__first__bit4 Int)

(declare-const ada___system__val_llu__impl__uns_option__value__last__bit4 Int)

(declare-const ada___system__val_llu__impl__uns_option__value__position4 Int)

;; ada___system__val_llu__impl__uns_option__value__first__bit_axiom
(assert (<= 0 ada___system__val_llu__impl__uns_option__value__first__bit4))

;; ada___system__val_llu__impl__uns_option__value__last__bit_axiom
(assert
  (< ada___system__val_llu__impl__uns_option__value__first__bit4 ada___system__val_llu__impl__uns_option__value__last__bit4))

;; ada___system__val_llu__impl__uns_option__value__position_axiom
(assert (<= 0 ada___system__val_llu__impl__uns_option__value__position4))

;; user_eq
(declare-fun user_eq13 (us_rep
  us_rep) Bool)

(declare-const dummy13 us_rep)

(declare-datatypes ((t123s__ref 0))
  (((t123s__refqtmk (t123s__content us_rep)))))

;; t123s__ref_t123s__content__projection
(define-fun t123s__ref_t123s__content__projection ((a t123s__ref)) us_rep
  (t123s__content a))

(declare-const value__size7 Int)

(declare-const object__size7 Int)

(declare-const alignment7 Int)

;; value__size_axiom
(assert (<= 0 value__size7))

;; object__size_axiom
(assert (<= 0 object__size7))

;; alignment_axiom
(assert (<= 0 alignment7))

(declare-const ada___system__val_llu__impl__uns_option__overflow__first__bit5 Int)

(declare-const ada___system__val_llu__impl__uns_option__overflow__last__bit5 Int)

(declare-const ada___system__val_llu__impl__uns_option__overflow__position5 Int)

;; ada___system__val_llu__impl__uns_option__overflow__first__bit_axiom
(assert
  (<= 0 ada___system__val_llu__impl__uns_option__overflow__first__bit5))

;; ada___system__val_llu__impl__uns_option__overflow__last__bit_axiom
(assert
  (< ada___system__val_llu__impl__uns_option__overflow__first__bit5 ada___system__val_llu__impl__uns_option__overflow__last__bit5))

;; ada___system__val_llu__impl__uns_option__overflow__position_axiom
(assert (<= 0 ada___system__val_llu__impl__uns_option__overflow__position5))

(declare-const ada___system__val_llu__impl__uns_option__value__first__bit5 Int)

(declare-const ada___system__val_llu__impl__uns_option__value__last__bit5 Int)

(declare-const ada___system__val_llu__impl__uns_option__value__position5 Int)

;; ada___system__val_llu__impl__uns_option__value__first__bit_axiom
(assert (<= 0 ada___system__val_llu__impl__uns_option__value__first__bit5))

;; ada___system__val_llu__impl__uns_option__value__last__bit_axiom
(assert
  (< ada___system__val_llu__impl__uns_option__value__first__bit5 ada___system__val_llu__impl__uns_option__value__last__bit5))

;; ada___system__val_llu__impl__uns_option__value__position_axiom
(assert (<= 0 ada___system__val_llu__impl__uns_option__value__position5))

;; user_eq
(declare-fun user_eq14 (us_rep
  us_rep) Bool)

(declare-const dummy14 us_rep)

(declare-datatypes ((t124s__ref 0))
  (((t124s__refqtmk (t124s__content us_rep)))))

;; t124s__ref_t124s__content__projection
(define-fun t124s__ref_t124s__content__projection ((a t124s__ref)) us_rep
  (t124s__content a))

;; exponent_unsigned_ghost__def_axiom
(assert
  (forall ((value (_ BitVec 64)) (base (_ BitVec 64)))
    (forall ((exp1 Int))
      (! (=>
           (and
             (and
               (dynamic_invariant1 value true true true true)
               (dynamic_invariant exp1 true true true true))
             (dynamic_invariant1 base true true true true))
           (= (exponent_unsigned_ghost value exp1 base) (ite (or
                                                               (= exp1 0)
                                                               (= value #x0000000000000000))
                                                          (let ((temp___overflow_497 
                                                            (of_int
                                                              0)))
                                                            (us_repqtmk
                                                              (us_split_discrsqtmk
                                                                temp___overflow_497)
                                                              (us_split_fieldsqtmk
                                                                (of_rep2
                                                                  value))))
                                                          (ite (= (scan_overflows_ghost
                                                                    #x0000000000000000
                                                                    base
                                                                    value) true)
                                                            (let ((temp___overflow_498 
                                                              (of_int
                                                                1)))
                                                              (us_repqtmk
                                                                (us_split_discrsqtmk
                                                                  temp___overflow_498)
                                                                (us_split_fieldsqtmk
                                                                  dummy5)))
                                                            (exponent_unsigned_ghost
                                                              (bvmul value base)
                                                              (- exp1 1)
                                                              base))))) :pattern (
      (exponent_unsigned_ghost
        value
        exp1
        base)) ))))

;; exponent_unsigned_ghost__post_axiom
(assert true)

;; is_raw_unsigned_format_ghost
(declare-fun is_raw_unsigned_format_ghost (us_t) Bool)

;; is_raw_unsigned_format_ghost__function_guard
(declare-fun is_raw_unsigned_format_ghost__function_guard (Bool
  us_t) Bool)

(declare-datatypes ((t152s__ref 0))
  (((t152s__refqtmk (t152s__content us_t)))))

;; t152s__ref_t152s__content__projection
(define-fun t152s__ref_t152s__content__projection ((a t152s__ref)) us_t
  (t152s__content a))

(declare-datatypes ((t155s__ref 0))
  (((t155s__refqtmk (t155s__content us_t)))))

;; t155s__ref_t155s__content__projection
(define-fun t155s__ref_t155s__content__projection ((a t155s__ref)) us_t
  (t155s__content a))

(declare-datatypes ((t158s__ref 0))
  (((t158s__refqtmk (t158s__content us_t)))))

;; t158s__ref_t158s__content__projection
(define-fun t158s__ref_t158s__content__projection ((a t158s__ref)) us_t
  (t158s__content a))

;; is_raw_unsigned_format_ghost__post_axiom
(assert true)

;; is_raw_unsigned_format_ghost__def_axiom
(assert
  (forall ((str us_t))
    (! (and
         (forall ((str1 us_t))
           (last_number_ghost__function_guard (last_number_ghost str1) str1))
         (and
           (forall ((str1 us_t) (last_num_init Int))
             (last_hexa_ghost__function_guard
               (last_hexa_ghost
                 (let ((temp___440 (let ((temp___439 (last str1)))
                                     (let ((temp___438 (+ last_num_init 2)))
                                       (of_array
                                         (to_array str1)
                                         temp___438
                                         temp___439)))))
                   (let ((temp___441 (to_array temp___440)))
                     (of_array
                       temp___441
                       (first temp___440)
                       (last temp___440)))))
               (let ((temp___440 (let ((temp___439 (last str1)))
                                   (let ((temp___438 (+ last_num_init 2)))
                                     (of_array
                                       (to_array str1)
                                       temp___438
                                       temp___439)))))
                 (let ((temp___441 (to_array temp___440)))
                   (of_array temp___441 (first temp___440) (last temp___440))))))
           (=
             (= (is_raw_unsigned_format_ghost str) true)
             (and
               (= (is_natural_format_ghost str) true)
               (let ((last_num_init (last_number_ghost str)))
                 (let ((starts_as_based (and (and (bool_lt1
                                                    last_num_init
                                                    (- (last str) 1)) 
                   (let ((temp___444 (to_rep
                                       (select (to_array str) (+ last_num_init 1)))))
                     (or (ite (= temp___444 35) true false) (ite (= temp___444 58)
                                                              true
                                                              false)))) 
                   (let ((temp___445 (to_rep
                                       (select (to_array str) (+ last_num_init 2)))))
                     (or (let ((temp___448 temp___445))
                           (and (ite (<= 48 temp___448) true false) (ite (<= temp___448 57)
                                                                    true
                                                                    false))) (or 
                     (let ((temp___447 temp___445))
                       (and (ite (<= 97 temp___447) true false) (ite (<= temp___447 102)
                                                                  true
                                                                  false))) 
                     (let ((temp___446 temp___445))
                       (and (ite (<= 65 temp___446) true false) (ite (<= temp___446 70)
                                                                  true
                                                                  false)))))))))
                   (let ((last_num_based (ite (= starts_as_based true)
                                           (last_hexa_ghost
                                             (let ((temp___440 (let ((temp___439 
                                                                 (last
                                                                   str)))
                                                                 (let ((temp___438 (+ last_num_init 2)))
                                                                   (of_array
                                                                    (to_array
                                                                    str)
                                                                    temp___438
                                                                    temp___439)))))
                                               (let ((temp___441 (to_array
                                                                   temp___440)))
                                                 (of_array
                                                   temp___441
                                                   (first temp___440)
                                                   (last temp___440)))))
                                           last_num_init)))
                     (and
                       (=>
                         (= starts_as_based true)
                         (and
                           (= (is_based_format_ghost
                                (let ((temp___433 (let ((temp___432 (last
                                                                    str)))
                                                    (let ((temp___431 (+ last_num_init 2)))
                                                      (of_array
                                                        (to_array str)
                                                        temp___431
                                                        temp___432)))))
                                  (let ((temp___434 (to_array temp___433)))
                                    (of_array
                                      temp___434
                                      (first temp___433)
                                      (last temp___433))))) true)
                           (< last_num_based (last str))))
                       (= (is_opt_exponent_format_ghost
                            (let ((temp___436 (let ((temp___435 (last str)))
                                                (of_array
                                                  (to_array str)
                                                  (ite (= (and (and starts_as_based 
                                                    (bool_lt1
                                                      last_num_based
                                                      (last str))) (bool_eq11
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    str) (+ last_num_based 1)))
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    str) (+ last_num_init 1))))) true)
                                                    (+ last_num_based 2)
                                                    (+ last_num_init 1))
                                                  temp___435))))
                              (let ((temp___437 (to_array temp___436)))
                                (of_array
                                  temp___437
                                  (first temp___436)
                                  (last temp___436))))
                            (of_int 0)) true))))))))) :pattern ((is_raw_unsigned_format_ghost
                                                                  str)) )))

;; raw_unsigned_overflows_ghost
(declare-fun raw_unsigned_overflows_ghost (us_t
  Int
  Int) Bool)

;; raw_unsigned_overflows_ghost__function_guard
(declare-fun raw_unsigned_overflows_ghost__function_guard (Bool
  us_t
  Int
  Int) Bool)

(declare-datatypes ((t163s__ref 0))
  (((t163s__refqtmk (t163s__content us_t)))))

;; t163s__ref_t163s__content__projection
(define-fun t163s__ref_t163s__content__projection ((a t163s__ref)) us_t
  (t163s__content a))

(declare-datatypes ((t166s__ref 0))
  (((t166s__refqtmk (t166s__content us_t)))))

;; t166s__ref_t166s__content__projection
(define-fun t166s__ref_t166s__content__projection ((a t166s__ref)) us_t
  (t166s__content a))

(declare-datatypes ((t169s__ref 0))
  (((t169s__refqtmk (t169s__content us_t)))))

;; t169s__ref_t169s__content__projection
(define-fun t169s__ref_t169s__content__projection ((a t169s__ref)) us_t
  (t169s__content a))

(declare-datatypes ((t172s__ref 0))
  (((t172s__refqtmk (t172s__content us_t)))))

;; t172s__ref_t172s__content__projection
(define-fun t172s__ref_t172s__content__projection ((a t172s__ref)) us_t
  (t172s__content a))

(declare-datatypes ((t176s__ref 0))
  (((t176s__refqtmk (t176s__content us_t)))))

;; t176s__ref_t176s__content__projection
(define-fun t176s__ref_t176s__content__projection ((a t176s__ref)) us_t
  (t176s__content a))

;; raw_unsigned_overflows_ghost__post_axiom
(assert true)

;; raw_unsigned_overflows_ghost__def_axiom
(assert
  (forall ((str us_t))
    (forall ((from Int) (to__ Int))
      (! (and
           (forall ((str1 us_t) (from1 Int) (to__1 Int))
             (last_number_ghost__function_guard
               (last_number_ghost
                 (let ((temp___546 (of_array (to_array str1) from1 to__1)))
                   (let ((temp___547 (to_array temp___546)))
                     (of_array
                       temp___547
                       (first temp___546)
                       (last temp___546)))))
               (let ((temp___546 (of_array (to_array str1) from1 to__1)))
                 (let ((temp___547 (to_array temp___546)))
                   (of_array temp___547 (first temp___546) (last temp___546))))))
           (and
             (forall ((str1 us_t) (to__1 Int) (last_num_init Int))
               (last_hexa_ghost__function_guard
                 (last_hexa_ghost
                   (let ((temp___537 (let ((temp___536 (+ last_num_init 2)))
                                       (of_array
                                         (to_array str1)
                                         temp___536
                                         to__1))))
                     (let ((temp___538 (to_array temp___537)))
                       (of_array
                         temp___538
                         (first temp___537)
                         (last temp___537)))))
                 (let ((temp___537 (let ((temp___536 (+ last_num_init 2)))
                                     (of_array
                                       (to_array str1)
                                       temp___536
                                       to__1))))
                   (let ((temp___538 (to_array temp___537)))
                     (of_array
                       temp___538
                       (first temp___537)
                       (last temp___537))))))
             (and
               (forall ((str1 us_t) (to__1 Int) (first_exp Int))
                 (scan_exponent_ghost__function_guard
                   (scan_exponent_ghost
                     (let ((temp___531 (of_array
                                         (to_array str1)
                                         first_exp
                                         to__1)))
                       (let ((temp___532 (to_array temp___531)))
                         (of_array
                           temp___532
                           (first temp___531)
                           (last temp___531))))
                     (of_int 0))
                   (let ((temp___531 (of_array
                                       (to_array str1)
                                       first_exp
                                       to__1)))
                     (let ((temp___532 (to_array temp___531)))
                       (of_array
                         temp___532
                         (first temp___531)
                         (last temp___531))))
                   (of_int 0)))
               (=
                 (= (raw_unsigned_overflows_ghost str from to__) true)
                 (let ((last_num_init (last_number_ghost
                                        (let ((temp___546 (of_array
                                                            (to_array str)
                                                            from
                                                            to__)))
                                          (let ((temp___547 (to_array
                                                              temp___546)))
                                            (of_array
                                              temp___547
                                              (first temp___546)
                                              (last temp___546)))))))
                   (let ((init_val (scan_based_number_ghost
                                     str
                                     from
                                     last_num_init
                                     #x000000000000000A
                                     #x0000000000000000)))
                     (let ((starts_as_based (and (and (bool_lt1
                                                        last_num_init
                                                        (- to__ 1)) (let ((temp___541 
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    str) (+ last_num_init 1)))))
                                                                    (or 
                                                                    (ite (= temp___541 35)
                                                                    true
                                                                    false) 
                                                                    (ite (= temp___541 58)
                                                                    true
                                                                    false)))) 
                       (let ((temp___542 (to_rep
                                           (select (to_array str) (+ last_num_init 2)))))
                         (or (let ((temp___545 temp___542))
                               (and (ite (<= 48 temp___545) true false) 
                               (ite (<= temp___545 57)
                                 true
                                 false))) (or (let ((temp___544 temp___542))
                                                (and (ite (<= 97 temp___544)
                                                       true
                                                       false) (ite (<= temp___544 102)
                                                                true
                                                                false))) 
                         (let ((temp___543 temp___542))
                           (and (ite (<= 65 temp___543) true false) (ite (<= temp___543 70)
                                                                    true
                                                                    false)))))))))
                       (let ((last_num_based (ite (= starts_as_based true)
                                               (last_hexa_ghost
                                                 (let ((temp___537 (let ((temp___536 (+ last_num_init 2)))
                                                                    (of_array
                                                                    (to_array
                                                                    str)
                                                                    temp___536
                                                                    to__))))
                                                   (let ((temp___538 
                                                     (to_array
                                                       temp___537)))
                                                     (of_array
                                                       temp___538
                                                       (first temp___537)
                                                       (last temp___537)))))
                                               last_num_init)))
                         (let ((is_based (and (and starts_as_based (bool_lt1
                                                                    last_num_based
                                                                    to__)) 
                           (bool_eq11
                             (to_rep
                               (select (to_array str) (+ last_num_based 1)))
                             (to_rep
                               (select (to_array str) (+ last_num_init 1)))))))
                           (let ((based_val (ite (and
                                                   (= starts_as_based true)
                                                   (not
                                                     (= (rec__ada___system__val_llu__impl__uns_option__overflow
                                                          (us_split_discrs1
                                                            init_val)) true)))
                                              (scan_based_number_ghost
                                                str
                                                (+ last_num_init 2)
                                                last_num_based
                                                (to_rep2
                                                  (rec__ada___system__val_llu__impl__uns_option__value
                                                    (us_split_fields1
                                                      init_val)))
                                                #x0000000000000000)
                                              init_val)))
                             (let ((first_exp (ite (= is_based true)
                                                (+ last_num_based 2)
                                                (+ last_num_init 1))))
                               (or
                                 (or
                                   (or
                                     (= (rec__ada___system__val_llu__impl__uns_option__overflow
                                          (us_split_discrs1 init_val)) true)
                                     (and
                                       (and
                                         (< last_num_init (- to__ 1))
                                         (let ((temp___527 (to_rep
                                                             (select 
                                                             (to_array
                                                               str) (+ last_num_init 1)))))
                                           (or
                                             (= temp___527 35)
                                             (= temp___527 58))))
                                       (= (not (let ((temp___528 (to_rep2
                                                                   (rec__ada___system__val_llu__impl__uns_option__value
                                                                    (us_split_fields1
                                                                    init_val)))))
                                                 (and (ite (bvule #x0000000000000002 temp___528)
                                                        true
                                                        false) (ite (bvule temp___528 #x0000000000000010)
                                                                 true
                                                                 false)))) true)))
                                   (and
                                     (= starts_as_based true)
                                     (= (rec__ada___system__val_llu__impl__uns_option__overflow
                                          (us_split_discrs1 based_val)) true)))
                                 (and
                                   (= (starts_as_exponent_format_ghost
                                        (let ((temp___529 (of_array
                                                            (to_array str)
                                                            first_exp
                                                            to__)))
                                          (let ((temp___530 (to_array
                                                              temp___529)))
                                            (of_array
                                              temp___530
                                              (first temp___529)
                                              (last temp___529))))
                                        (of_int 0)) true)
                                   (= (rec__ada___system__val_llu__impl__uns_option__overflow
                                        (us_split_discrs1
                                          (exponent_unsigned_ghost
                                            (ite (= is_based true)
                                              (to_rep2
                                                (rec__ada___system__val_llu__impl__uns_option__value
                                                  (us_split_fields1
                                                    based_val)))
                                              (to_rep2
                                                (rec__ada___system__val_llu__impl__uns_option__value
                                                  (us_split_fields1 init_val))))
                                            (ite (= (starts_as_exponent_format_ghost
                                                      (let ((temp___534 
                                                        (of_array
                                                          (to_array str)
                                                          first_exp
                                                          to__)))
                                                        (let ((temp___535 
                                                          (to_array
                                                            temp___534)))
                                                          (of_array
                                                            temp___535
                                                            (first
                                                              temp___534)
                                                            (last temp___534))))
                                                      (of_int 0)) true)
                                              (scan_exponent_ghost
                                                (let ((temp___531 (of_array
                                                                    (to_array
                                                                    str)
                                                                    first_exp
                                                                    to__)))
                                                  (let ((temp___532 (to_array
                                                                    temp___531)))
                                                    (of_array
                                                      temp___532
                                                      (first temp___531)
                                                      (last temp___531))))
                                                (of_int 0))
                                              0)
                                            (ite (= is_based true)
                                              (to_rep2
                                                (rec__ada___system__val_llu__impl__uns_option__value
                                                  (us_split_fields1 init_val)))
                                              #x000000000000000A)))) true)))))))))))))) :pattern (
      (raw_unsigned_overflows_ghost
        str
        from
        to__)) ))))

;; scan_raw_unsigned_ghost
(declare-fun scan_raw_unsigned_ghost (us_t
  Int
  Int) (_ BitVec 64))

;; scan_raw_unsigned_ghost__function_guard
(declare-fun scan_raw_unsigned_ghost__function_guard ((_ BitVec 64)
  us_t
  Int
  Int) Bool)

(declare-datatypes ((t181s__ref 0))
  (((t181s__refqtmk (t181s__content us_t)))))

;; t181s__ref_t181s__content__projection
(define-fun t181s__ref_t181s__content__projection ((a t181s__ref)) us_t
  (t181s__content a))

(declare-datatypes ((t184s__ref 0))
  (((t184s__refqtmk (t184s__content us_t)))))

;; t184s__ref_t184s__content__projection
(define-fun t184s__ref_t184s__content__projection ((a t184s__ref)) us_t
  (t184s__content a))

(declare-datatypes ((t187s__ref 0))
  (((t187s__refqtmk (t187s__content us_t)))))

;; t187s__ref_t187s__content__projection
(define-fun t187s__ref_t187s__content__projection ((a t187s__ref)) us_t
  (t187s__content a))

(declare-datatypes ((t190s__ref 0))
  (((t190s__refqtmk (t190s__content us_t)))))

;; t190s__ref_t190s__content__projection
(define-fun t190s__ref_t190s__content__projection ((a t190s__ref)) us_t
  (t190s__content a))

;; scan_raw_unsigned_ghost__post_axiom
(assert
  (forall ((str us_t))
    (forall ((from Int) (to__ Int))
      (! (and
           (forall ((str1 us_t) (from1 Int) (to__1 Int))
             (raw_unsigned_overflows_ghost__function_guard
               (raw_unsigned_overflows_ghost str1 from1 to__1)
               str1
               from1
               to__1))
           (=>
             (and
               (and
                 (and
                   (dynamic_invariant2 str true true true true)
                   (dynamic_invariant4 from true true true true))
                 (dynamic_invariant4 to__ true true true true))
               (and
                 (and
                   (and
                     (and
                       (not (= (last str) 2147483647))
                       (and (<= (first str) from) (<= from (last str))))
                     (and (<= from to__) (<= to__ (last str))))
                   (let ((temp___644 (to_rep (select (to_array str) from))))
                     (and (<= 48 temp___644) (<= temp___644 57))))
                 (not (= (raw_unsigned_overflows_ghost str from to__) true))))
             (let ((result (scan_raw_unsigned_ghost str from to__)))
               (=>
                 (scan_raw_unsigned_ghost__function_guard
                   result
                   str
                   from
                   to__)
                 (dynamic_invariant1 result true false true true))))) :pattern (
      (scan_raw_unsigned_ghost
        str
        from
        to__)) ))))

;; scan_raw_unsigned_ghost__def_axiom
(assert
  (forall ((str us_t))
    (forall ((from Int) (to__ Int))
      (! (=>
           (and
             (and
               (dynamic_invariant2 str true true true true)
               (dynamic_invariant4 from true true true true))
             (dynamic_invariant4 to__ true true true true))
           (and
             (forall ((str1 us_t) (from1 Int) (to__1 Int))
               (last_number_ghost__function_guard
                 (last_number_ghost
                   (let ((temp___662 (of_array (to_array str1) from1 to__1)))
                     (let ((temp___663 (to_array temp___662)))
                       (of_array
                         temp___663
                         (first temp___662)
                         (last temp___662)))))
                 (let ((temp___662 (of_array (to_array str1) from1 to__1)))
                   (let ((temp___663 (to_array temp___662)))
                     (of_array
                       temp___663
                       (first temp___662)
                       (last temp___662))))))
             (and
               (forall ((str1 us_t) (to__1 Int) (last_num_init Int))
                 (last_hexa_ghost__function_guard
                   (last_hexa_ghost
                     (let ((temp___653 (let ((temp___652 (+ last_num_init 2)))
                                         (of_array
                                           (to_array str1)
                                           temp___652
                                           to__1))))
                       (let ((temp___654 (to_array temp___653)))
                         (of_array
                           temp___654
                           (first temp___653)
                           (last temp___653)))))
                   (let ((temp___653 (let ((temp___652 (+ last_num_init 2)))
                                       (of_array
                                         (to_array str1)
                                         temp___652
                                         to__1))))
                     (let ((temp___654 (to_array temp___653)))
                       (of_array
                         temp___654
                         (first temp___653)
                         (last temp___653))))))
               (and
                 (forall ((str1 us_t) (to__1 Int) (first_exp Int))
                   (scan_exponent_ghost__function_guard
                     (scan_exponent_ghost
                       (let ((temp___647 (of_array
                                           (to_array str1)
                                           first_exp
                                           to__1)))
                         (let ((temp___648 (to_array temp___647)))
                           (of_array
                             temp___648
                             (first temp___647)
                             (last temp___647))))
                       (of_int 0))
                     (let ((temp___647 (of_array
                                         (to_array str1)
                                         first_exp
                                         to__1)))
                       (let ((temp___648 (to_array temp___647)))
                         (of_array
                           temp___648
                           (first temp___647)
                           (last temp___647))))
                     (of_int 0)))
                 (= (scan_raw_unsigned_ghost str from to__) (let ((last_num_init 
                                                              (last_number_ghost
                                                                (let ((temp___662 
                                                                  (of_array
                                                                    (to_array
                                                                    str)
                                                                    from
                                                                    to__)))
                                                                  (let ((temp___663 
                                                                    (to_array
                                                                    temp___662)))
                                                                    (of_array
                                                                    temp___663
                                                                    (first
                                                                    temp___662)
                                                                    (last
                                                                    temp___662)))))))
                                                              (let ((init_val 
                                                                (scan_based_number_ghost
                                                                  str
                                                                  from
                                                                  last_num_init
                                                                  #x000000000000000A
                                                                  #x0000000000000000)))
                                                                (let ((starts_as_based (and (and 
                                                                  (bool_lt1
                                                                    last_num_init
                                                                    (- to__ 1)) 
                                                                  (let ((temp___657 
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    str) (+ last_num_init 1)))))
                                                                    (or 
                                                                    (ite (= temp___657 35)
                                                                    true
                                                                    false) 
                                                                    (ite (= temp___657 58)
                                                                    true
                                                                    false)))) 
                                                                  (let ((temp___658 
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    str) (+ last_num_init 2)))))
                                                                    (or 
                                                                    (let ((temp___661 temp___658))
                                                                    (and 
                                                                    (ite (<= 48 temp___661)
                                                                    true
                                                                    false) 
                                                                    (ite (<= temp___661 57)
                                                                    true
                                                                    false))) (or 
                                                                    (let ((temp___660 temp___658))
                                                                    (and 
                                                                    (ite (<= 97 temp___660)
                                                                    true
                                                                    false) 
                                                                    (ite (<= temp___660 102)
                                                                    true
                                                                    false))) 
                                                                    (let ((temp___659 temp___658))
                                                                    (and 
                                                                    (ite (<= 65 temp___659)
                                                                    true
                                                                    false) 
                                                                    (ite (<= temp___659 70)
                                                                    true
                                                                    false)))))))))
                                                                  (let ((last_num_based 
                                                                    (ite (= starts_as_based true)
                                                                    (last_hexa_ghost
                                                                    (let ((temp___653 
                                                                    (let ((temp___652 (+ last_num_init 2)))
                                                                    (of_array
                                                                    (to_array
                                                                    str)
                                                                    temp___652
                                                                    to__))))
                                                                    (let ((temp___654 
                                                                    (to_array
                                                                    temp___653)))
                                                                    (of_array
                                                                    temp___654
                                                                    (first
                                                                    temp___653)
                                                                    (last
                                                                    temp___653)))))
                                                                    last_num_init)))
                                                                    (let ((is_based (and (and starts_as_based 
                                                                    (bool_lt1
                                                                    last_num_based
                                                                    to__)) 
                                                                    (bool_eq11
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    str) (+ last_num_based 1)))
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    str) (+ last_num_init 1)))))))
                                                                    (let ((based_val 
                                                                    (ite 
                                                                    (and
                                                                    (= starts_as_based true)
                                                                    (not
                                                                    (= 
                                                                    (rec__ada___system__val_llu__impl__uns_option__overflow
                                                                    (us_split_discrs1
                                                                    init_val)) true)))
                                                                    (scan_based_number_ghost
                                                                    str
                                                                    (+ last_num_init 2)
                                                                    last_num_based
                                                                    (to_rep2
                                                                    (rec__ada___system__val_llu__impl__uns_option__value
                                                                    (us_split_fields1
                                                                    init_val)))
                                                                    #x0000000000000000)
                                                                    init_val)))
                                                                    (let ((first_exp 
                                                                    (ite (= is_based true)
                                                                    (+ last_num_based 2)
                                                                    (+ last_num_init 1))))
                                                                    (let ((expon 
                                                                    (ite (= 
                                                                    (starts_as_exponent_format_ghost
                                                                    (let ((temp___650 
                                                                    (of_array
                                                                    (to_array
                                                                    str)
                                                                    first_exp
                                                                    to__)))
                                                                    (let ((temp___651 
                                                                    (to_array
                                                                    temp___650)))
                                                                    (of_array
                                                                    temp___651
                                                                    (first
                                                                    temp___650)
                                                                    (last
                                                                    temp___650))))
                                                                    (of_int
                                                                    0)) true)
                                                                    (scan_exponent_ghost
                                                                    (let ((temp___647 
                                                                    (of_array
                                                                    (to_array
                                                                    str)
                                                                    first_exp
                                                                    to__)))
                                                                    (let ((temp___648 
                                                                    (to_array
                                                                    temp___647)))
                                                                    (of_array
                                                                    temp___648
                                                                    (first
                                                                    temp___647)
                                                                    (last
                                                                    temp___647))))
                                                                    (of_int
                                                                    0))
                                                                    0)))
                                                                    (let ((base 
                                                                    (ite (= is_based true)
                                                                    (to_rep2
                                                                    (rec__ada___system__val_llu__impl__uns_option__value
                                                                    (us_split_fields1
                                                                    init_val)))
                                                                    #x000000000000000A)))
                                                                    (let ((value 
                                                                    (ite (= is_based true)
                                                                    (to_rep2
                                                                    (rec__ada___system__val_llu__impl__uns_option__value
                                                                    (us_split_fields1
                                                                    based_val)))
                                                                    (to_rep2
                                                                    (rec__ada___system__val_llu__impl__uns_option__value
                                                                    (us_split_fields1
                                                                    init_val))))))
                                                                    (to_rep2
                                                                    (rec__ada___system__val_llu__impl__uns_option__value
                                                                    (us_split_fields1
                                                                    (exponent_unsigned_ghost
                                                                    value
                                                                    expon
                                                                    base))))))))))))))))))) :pattern (
      (scan_raw_unsigned_ghost
        str
        from
        to__)) ))))

;; raw_unsigned_last_ghost
(declare-fun raw_unsigned_last_ghost (us_t
  Int
  Int) Int)

;; raw_unsigned_last_ghost__function_guard
(declare-fun raw_unsigned_last_ghost__function_guard (Int
  us_t
  Int
  Int) Bool)

(declare-datatypes ((t195s__ref 0))
  (((t195s__refqtmk (t195s__content us_t)))))

;; t195s__ref_t195s__content__projection
(define-fun t195s__ref_t195s__content__projection ((a t195s__ref)) us_t
  (t195s__content a))

(declare-datatypes ((t198s__ref 0))
  (((t198s__refqtmk (t198s__content us_t)))))

;; t198s__ref_t198s__content__projection
(define-fun t198s__ref_t198s__content__projection ((a t198s__ref)) us_t
  (t198s__content a))

(declare-datatypes ((t201s__ref 0))
  (((t201s__refqtmk (t201s__content us_t)))))

;; t201s__ref_t201s__content__projection
(define-fun t201s__ref_t201s__content__projection ((a t201s__ref)) us_t
  (t201s__content a))

(declare-datatypes ((t204s__ref 0))
  (((t204s__refqtmk (t204s__content us_t)))))

;; t204s__ref_t204s__content__projection
(define-fun t204s__ref_t204s__content__projection ((a t204s__ref)) us_t
  (t204s__content a))

(declare-datatypes ((t207s__ref 0))
  (((t207s__refqtmk (t207s__content us_t)))))

;; t207s__ref_t207s__content__projection
(define-fun t207s__ref_t207s__content__projection ((a t207s__ref)) us_t
  (t207s__content a))

;; raw_unsigned_last_ghost__post_axiom
(assert
  (forall ((str us_t))
    (forall ((from Int) (to__ Int))
      (! (=>
           (and
             (and
               (and
                 (dynamic_invariant2 str true true true true)
                 (dynamic_invariant4 from true true true true))
               (dynamic_invariant4 to__ true true true true))
             (and
               (and
                 (and
                   (not (= (last str) 2147483647))
                   (and (<= (first str) from) (<= from (last str))))
                 (and (<= from to__) (<= to__ (last str))))
               (let ((temp___576 (to_rep (select (to_array str) from))))
                 (and (<= 48 temp___576) (<= temp___576 57)))))
           (let ((result (raw_unsigned_last_ghost str from to__)))
             (=>
               (raw_unsigned_last_ghost__function_guard result str from to__)
               (and
                 (and (<= from result) (<= result (+ to__ 1)))
                 (dynamic_invariant5 result true false true true))))) :pattern (
      (raw_unsigned_last_ghost
        str
        from
        to__)) ))))

;; raw_unsigned_last_ghost__def_axiom
(assert
  (forall ((str us_t))
    (forall ((from Int) (to__ Int))
      (! (=>
           (and
             (and
               (dynamic_invariant2 str true true true true)
               (dynamic_invariant4 from true true true true))
             (dynamic_invariant4 to__ true true true true))
           (and
             (forall ((str1 us_t) (from1 Int) (to__1 Int))
               (last_number_ghost__function_guard
                 (last_number_ghost
                   (let ((temp___600 (of_array (to_array str1) from1 to__1)))
                     (let ((temp___601 (to_array temp___600)))
                       (of_array
                         temp___601
                         (first temp___600)
                         (last temp___600)))))
                 (let ((temp___600 (of_array (to_array str1) from1 to__1)))
                   (let ((temp___601 (to_array temp___600)))
                     (of_array
                       temp___601
                       (first temp___600)
                       (last temp___600))))))
             (and
               (forall ((str1 us_t) (to__1 Int) (last_num_init Int))
                 (last_hexa_ghost__function_guard
                   (last_hexa_ghost
                     (let ((temp___591 (let ((temp___590 (+ last_num_init 2)))
                                         (of_array
                                           (to_array str1)
                                           temp___590
                                           to__1))))
                       (let ((temp___592 (to_array temp___591)))
                         (of_array
                           temp___592
                           (first temp___591)
                           (last temp___591)))))
                   (let ((temp___591 (let ((temp___590 (+ last_num_init 2)))
                                       (of_array
                                         (to_array str1)
                                         temp___590
                                         to__1))))
                     (let ((temp___592 (to_array temp___591)))
                       (of_array
                         temp___592
                         (first temp___591)
                         (last temp___591))))))
               (and
                 (forall ((str1 us_t) (to__1 Int) (first_exp Int))
                   (last_number_ghost__function_guard
                     (last_number_ghost
                       (let ((temp___579 (let ((temp___578 (+ first_exp 2)))
                                           (of_array
                                             (to_array str1)
                                             temp___578
                                             to__1))))
                         (let ((temp___580 (to_array temp___579)))
                           (of_array
                             temp___580
                             (first temp___579)
                             (last temp___579)))))
                     (let ((temp___579 (let ((temp___578 (+ first_exp 2)))
                                         (of_array
                                           (to_array str1)
                                           temp___578
                                           to__1))))
                       (let ((temp___580 (to_array temp___579)))
                         (of_array
                           temp___580
                           (first temp___579)
                           (last temp___579))))))
                 (and
                   (forall ((str1 us_t) (to__1 Int) (first_exp Int))
                     (last_number_ghost__function_guard
                       (last_number_ghost
                         (let ((temp___583 (let ((temp___582 (+ first_exp 1)))
                                             (of_array
                                               (to_array str1)
                                               temp___582
                                               to__1))))
                           (let ((temp___584 (to_array temp___583)))
                             (of_array
                               temp___584
                               (first temp___583)
                               (last temp___583)))))
                       (let ((temp___583 (let ((temp___582 (+ first_exp 1)))
                                           (of_array
                                             (to_array str1)
                                             temp___582
                                             to__1))))
                         (let ((temp___584 (to_array temp___583)))
                           (of_array
                             temp___584
                             (first temp___583)
                             (last temp___583))))))
                   (= (raw_unsigned_last_ghost str from to__) (let ((last_num_init 
                                                                (last_number_ghost
                                                                  (let ((temp___600 
                                                                    (of_array
                                                                    (to_array
                                                                    str)
                                                                    from
                                                                    to__)))
                                                                    (let ((temp___601 
                                                                    (to_array
                                                                    temp___600)))
                                                                    (of_array
                                                                    temp___601
                                                                    (first
                                                                    temp___600)
                                                                    (last
                                                                    temp___600)))))))
                                                                (let ((starts_as_based (and (and 
                                                                  (bool_lt1
                                                                    last_num_init
                                                                    (- to__ 1)) 
                                                                  (let ((temp___595 
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    str) (+ last_num_init 1)))))
                                                                    (or 
                                                                    (ite (= temp___595 35)
                                                                    true
                                                                    false) 
                                                                    (ite (= temp___595 58)
                                                                    true
                                                                    false)))) 
                                                                  (let ((temp___596 
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    str) (+ last_num_init 2)))))
                                                                    (or 
                                                                    (let ((temp___599 temp___596))
                                                                    (and 
                                                                    (ite (<= 48 temp___599)
                                                                    true
                                                                    false) 
                                                                    (ite (<= temp___599 57)
                                                                    true
                                                                    false))) (or 
                                                                    (let ((temp___598 temp___596))
                                                                    (and 
                                                                    (ite (<= 97 temp___598)
                                                                    true
                                                                    false) 
                                                                    (ite (<= temp___598 102)
                                                                    true
                                                                    false))) 
                                                                    (let ((temp___597 temp___596))
                                                                    (and 
                                                                    (ite (<= 65 temp___597)
                                                                    true
                                                                    false) 
                                                                    (ite (<= temp___597 70)
                                                                    true
                                                                    false)))))))))
                                                                  (let ((last_num_based 
                                                                    (ite (= starts_as_based true)
                                                                    (last_hexa_ghost
                                                                    (let ((temp___591 
                                                                    (let ((temp___590 (+ last_num_init 2)))
                                                                    (of_array
                                                                    (to_array
                                                                    str)
                                                                    temp___590
                                                                    to__))))
                                                                    (let ((temp___592 
                                                                    (to_array
                                                                    temp___591)))
                                                                    (of_array
                                                                    temp___592
                                                                    (first
                                                                    temp___591)
                                                                    (last
                                                                    temp___591)))))
                                                                    last_num_init)))
                                                                    (let ((is_based (and (and starts_as_based 
                                                                    (bool_lt1
                                                                    last_num_based
                                                                    to__)) 
                                                                    (bool_eq11
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    str) (+ last_num_based 1)))
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    str) (+ last_num_init 1)))))))
                                                                    (let ((first_exp 
                                                                    (ite (= is_based true)
                                                                    (+ last_num_based 2)
                                                                    (+ last_num_init 1))))
                                                                    (ite 
                                                                    (not
                                                                    (= 
                                                                    (starts_as_exponent_format_ghost
                                                                    (let ((temp___588 
                                                                    (of_array
                                                                    (to_array
                                                                    str)
                                                                    first_exp
                                                                    to__)))
                                                                    (let ((temp___589 
                                                                    (to_array
                                                                    temp___588)))
                                                                    (of_array
                                                                    temp___589
                                                                    (first
                                                                    temp___588)
                                                                    (last
                                                                    temp___588))))
                                                                    (of_int
                                                                    0)) true))
                                                                    first_exp
                                                                    (ite 
                                                                    (let ((temp___587 
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    str) (+ first_exp 1)))))
                                                                    (or
                                                                    (= temp___587 45)
                                                                    (= temp___587 43)))
                                                                    (+ 
                                                                    (last_number_ghost
                                                                    (let ((temp___579 
                                                                    (let ((temp___578 (+ first_exp 2)))
                                                                    (of_array
                                                                    (to_array
                                                                    str)
                                                                    temp___578
                                                                    to__))))
                                                                    (let ((temp___580 
                                                                    (to_array
                                                                    temp___579)))
                                                                    (of_array
                                                                    temp___580
                                                                    (first
                                                                    temp___579)
                                                                    (last
                                                                    temp___579))))) 1)
                                                                    (+ 
                                                                    (last_number_ghost
                                                                    (let ((temp___583 
                                                                    (let ((temp___582 (+ first_exp 1)))
                                                                    (of_array
                                                                    (to_array
                                                                    str)
                                                                    temp___582
                                                                    to__))))
                                                                    (let ((temp___584 
                                                                    (to_array
                                                                    temp___583)))
                                                                    (of_array
                                                                    temp___584
                                                                    (first
                                                                    temp___583)
                                                                    (last
                                                                    temp___583))))) 1)))))))))))))) :pattern (
      (raw_unsigned_last_ghost
        str
        from
        to__)) ))))

;; slide_to_1
(declare-fun slide_to_1 (us_t) us_t)

;; slide_to_1__function_guard
(declare-fun slide_to_1__function_guard (us_t
  us_t) Bool)

(declare-datatypes ((tresS__ref 0))
  (((tresS__refqtmk (tresS__content us_t)))))

;; tresS__ref_tresS__content__projection
(define-fun tresS__ref_tresS__content__projection ((a tresS__ref)) us_t
  (tresS__content a))

;; slide_to_1__post_axiom
(assert
  (forall ((str us_t))
    (! (=>
         (dynamic_invariant2 str true true true true)
         (let ((result (slide_to_1 str)))
           (and
             (forall ((str1 us_t))
               (only_space_ghost__function_guard
                 (only_space_ghost str1 (first str1) (last str1))
                 str1
                 (first str1)
                 (last str1)))
             (=>
               (slide_to_1__function_guard result str)
               (and
                 (=
                   (= (only_space_ghost str (first str) (last str)) true)
                   (forall ((j Int))
                     (=>
                       (and (<= (first str) j) (<= j (last str)))
                       (= (to_rep
                            (select (to_array result) (+ (- j (first str)) 1))) 32))))
                 (dynamic_invariant2 result true false true true)))))) :pattern (
    (slide_to_1
      str)) )))

;; slide_to_1__def_axiom
(assert
  (forall ((str us_t))
    (! (=>
         (dynamic_invariant2 str true true true true)
         (= (slide_to_1 str) (let ((res (let ((temp___283 (slide
                                                            (to_array str)
                                                            (first str)
                                                            1)))
                                          (of_array
                                            temp___283
                                            1
                                            (length str)))))
                               (let ((temp___282 (to_array res)))
                                 (of_array temp___282 (first res) (last res)))))) :pattern (
    (slide_to_1
      str)) )))

;; slide_if_necessary__post_axiom
(assert
  (forall ((str us_t))
    (! (=>
         (dynamic_invariant2 str true true true true)
         (let ((result (slide_if_necessary str)))
           (and
             (forall ((str1 us_t))
               (only_space_ghost__function_guard
                 (only_space_ghost str1 (first str1) (last str1))
                 str1
                 (first str1)
                 (last str1)))
             (and
               (forall ((result1 us_t))
                 (only_space_ghost__function_guard
                   (only_space_ghost result1 (first result1) (last result1))
                   result1
                   (first result1)
                   (last result1)))
               (=>
                 (slide_if_necessary__function_guard result str)
                 (and
                   (=
                     (= (only_space_ghost str (first str) (last str)) true)
                     (= (only_space_ghost
                          result
                          (first result)
                          (last result)) true))
                   (dynamic_invariant2 result true false true true))))))) :pattern (
    (slide_if_necessary
      str)) )))

;; slide_if_necessary__def_axiom
(assert
  (forall ((str us_t))
    (! (=>
         (dynamic_invariant2 str true true true true)
         (and
           (forall ((str1 us_t))
             (slide_to_1__function_guard (slide_to_1 str1) str1))
           (= (slide_if_necessary str) (ite (= (last str) 2147483647)
                                         (slide_to_1 str)
                                         str)))) :pattern ((slide_if_necessary
                                                             str)) )))

(declare-datatypes ((t213s__ref 0))
  (((t213s__refqtmk (t213s__content us_t)))))

;; t213s__ref_t213s__content__projection
(define-fun t213s__ref_t213s__content__projection ((a t213s__ref)) us_t
  (t213s__content a))

;; is_unsigned_ghost__post_axiom
(assert
  (forall ((str us_t))
    (only_space_ghost__function_guard
      (only_space_ghost str (first str) (last str))
      str
      (first str)
      (last str))))

;; is_unsigned_ghost__def_axiom
(assert
  (forall ((str us_t))
    (! (and
         (forall ((str1 us_t))
           (first_non_space_ghost__function_guard
             (first_non_space_ghost str1 (first str1) (last str1))
             str1
             (first str1)
             (last str1)))
         (and
           (forall ((str1 us_t) (fst_num Int))
             (is_raw_unsigned_format_ghost__function_guard
               (is_raw_unsigned_format_ghost
                 (let ((temp___616 (let ((temp___615 (last str1)))
                                     (of_array
                                       (to_array str1)
                                       fst_num
                                       temp___615))))
                   (let ((temp___617 (to_array temp___616)))
                     (of_array
                       temp___617
                       (first temp___616)
                       (last temp___616)))))
               (let ((temp___616 (let ((temp___615 (last str1)))
                                   (of_array
                                     (to_array str1)
                                     fst_num
                                     temp___615))))
                 (let ((temp___617 (to_array temp___616)))
                   (of_array temp___617 (first temp___616) (last temp___616))))))
           (and
             (forall ((str1 us_t) (fst_num Int))
               (raw_unsigned_overflows_ghost__function_guard
                 (raw_unsigned_overflows_ghost str1 fst_num (last str1))
                 str1
                 fst_num
                 (last str1)))
             (and
               (forall ((str1 us_t) (fst_num Int))
                 (raw_unsigned_last_ghost__function_guard
                   (raw_unsigned_last_ghost str1 fst_num (last str1))
                   str1
                   fst_num
                   (last str1)))
               (and
                 (forall ((str1 us_t) (fst_num Int))
                   (raw_unsigned_last_ghost__function_guard
                     (raw_unsigned_last_ghost str1 fst_num (last str1))
                     str1
                     fst_num
                     (last str1)))
                 (and
                   (forall ((str1 us_t) (fst_num Int))
                     (only_space_ghost__function_guard
                       (only_space_ghost
                         str1
                         (raw_unsigned_last_ghost str1 fst_num (last str1))
                         (last str1))
                       str1
                       (raw_unsigned_last_ghost str1 fst_num (last str1))
                       (last str1)))
                   (=
                     (= (is_unsigned_ghost str) true)
                     (let ((non_blank (first_non_space_ghost
                                        str
                                        (first str)
                                        (last str))))
                       (let ((fst_num (ite (= (to_rep
                                                (select (to_array str) non_blank)) 43)
                                        (+ non_blank 1)
                                        non_blank)))
                         (and
                           (and
                             (= (is_raw_unsigned_format_ghost
                                  (let ((temp___616 (let ((temp___615 
                                                      (last
                                                        str)))
                                                      (of_array
                                                        (to_array str)
                                                        fst_num
                                                        temp___615))))
                                    (let ((temp___617 (to_array temp___616)))
                                      (of_array
                                        temp___617
                                        (first temp___616)
                                        (last temp___616))))) true)
                             (not
                               (= (raw_unsigned_overflows_ghost
                                    str
                                    fst_num
                                    (last str)) true)))
                           (= (only_space_ghost
                                str
                                (raw_unsigned_last_ghost
                                  str
                                  fst_num
                                  (last str))
                                (last str)) true))))))))))) :pattern (
    (is_unsigned_ghost
      str)) )))

;; is_value_unsigned_ghost__post_axiom
(assert
  (and
    (forall ((str us_t))
      (only_space_ghost__function_guard
        (only_space_ghost str (first str) (last str))
        str
        (first str)
        (last str)))
    (forall ((str us_t))
      (is_unsigned_ghost__function_guard (is_unsigned_ghost str) str))))

;; is_value_unsigned_ghost__def_axiom
(assert
  (forall ((str us_t))
    (forall ((val__ (_ BitVec 64)))
      (! (and
           (forall ((str1 us_t))
             (first_non_space_ghost__function_guard
               (first_non_space_ghost str1 (first str1) (last str1))
               str1
               (first str1)
               (last str1)))
           (and
             (forall ((str1 us_t) (fst_num Int))
               (scan_raw_unsigned_ghost__function_guard
                 (scan_raw_unsigned_ghost str1 fst_num (last str1))
                 str1
                 fst_num
                 (last str1)))
             (=
               (= (is_value_unsigned_ghost str val__) true)
               (let ((non_blank (first_non_space_ghost
                                  str
                                  (first str)
                                  (last str))))
                 (= val__ (scan_raw_unsigned_ghost
                            str
                            (ite (= (to_rep
                                      (select (to_array str) non_blank)) 43)
                              (+ non_blank 1)
                              non_blank)
                            (last str))))))) :pattern ((is_value_unsigned_ghost
                                                         str
                                                         val__)) ))))

;; value_unsigned__post_axiom
(assert
  (forall ((str us_t))
    (! (and
         (forall ((str1 us_t))
           (only_space_ghost__function_guard
             (only_space_ghost str1 (first str1) (last str1))
             str1
             (first str1)
             (last str1)))
         (and
           (forall ((str1 us_t))
             (slide_if_necessary__function_guard
               (slide_if_necessary str1)
               str1))
           (and
             (forall ((str1 us_t))
               (slide_if_necessary__function_guard
                 (slide_if_necessary str1)
                 str1))
             (and
               (forall ((str1 us_t))
                 (is_unsigned_ghost__function_guard
                   (is_unsigned_ghost (slide_if_necessary str1))
                   (slide_if_necessary str1)))
               (=>
                 (and
                   (dynamic_invariant2 str true true true true)
                   (and
                     (and
                       (not
                         (= (only_space_ghost str (first str) (last str)) true))
                       (not (= (length str) 2147483647)))
                     (= (is_unsigned_ghost (slide_if_necessary str)) true)))
                 (let ((result (value_unsigned str)))
                   (and
                     (forall ((str1 us_t))
                       (slide_if_necessary__function_guard
                         (slide_if_necessary str1)
                         str1))
                     (and
                       (forall ((str1 us_t))
                         (slide_if_necessary__function_guard
                           (slide_if_necessary str1)
                           str1))
                       (and
                         (forall ((str1 us_t) (result1 (_ BitVec 64)))
                           (is_value_unsigned_ghost__function_guard
                             (is_value_unsigned_ghost
                               (slide_if_necessary str1)
                               result1)
                             (slide_if_necessary str1)
                             result1))
                         (=>
                           (value_unsigned__function_guard result str)
                           (and
                             (= (is_value_unsigned_ghost
                                  (slide_if_necessary str)
                                  result) true)
                             (dynamic_invariant1 result true false true true)))))))))))) :pattern (
    (value_unsigned
      str)) )))

(declare-const str us_t)

;; dynamic_invariant
(define-fun dynamic_invariant9 ((temp___expr_268 us_t) (temp___is_init_264 Bool) (temp___skip_constant_265 Bool) (temp___do_toplevel_266 Bool) (temp___do_typ_inv_267 Bool)) Bool
  (=>
    (not (= temp___skip_constant_265 true))
    (and
      (and
        (dynamic_property
          1
          (length str)
          (first temp___expr_268)
          (last temp___expr_268))
        (= (first temp___expr_268) 1))
      (= (last temp___expr_268) (length str)))))

;; default_initial_assumption
(define-fun default_initial_assumption1 ((temp___expr_270 us_t) (temp___skip_top_level_271 Bool)) Bool
  (and (= (first temp___expr_270) 1) (= (last temp___expr_270) (length str))))

(declare-const big_10 Int)

;; big_10__def_axiom
(assert (= big_10 (bv2nat #x000000000000000A)))

;; to_rep
(define-fun to_rep3 ((x natural)) Int
  (naturalqtint x))

;; of_rep
(declare-fun of_rep3 (Int) natural)

;; inversion_axiom
(assert
  (forall ((x natural))
    (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
(assert
  (forall ((x natural)) (! (in_range1 (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
(assert
  (forall ((x Int))
    (! (=> (in_range1 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                                  (of_rep3 x))) )))

;; max_log10
(declare-fun max_log10 (tuple0) Int)

;; max_log10__function_guard
(declare-fun max_log10__function_guard (Int
  tuple0) Bool)

;; max_log10__post_axiom
(assert
  (forall ((us_void_param tuple0))
    (! (let ((result (max_log10 us_void_param)))
         (=>
           (max_log10__function_guard result us_void_param)
           (dynamic_invariant result true false true true))) :pattern (
    (max_log10
      us_void_param)) )))

;; max_log10__def_axiom
(assert
  (forall ((us_void_param tuple0))
    (! (= (max_log10 us_void_param) (ite (= 64 8)
                                      2
                                      (ite (= 64 16)
                                        4
                                        (ite (= 64 32)
                                          9
                                          (ite true
                                            19
                                            (ite (= 64 128)
                                              38
                                              (to_rep3 dummy))))))) :pattern (
    (max_log10
      us_void_param)) )))

;; power
(declare-fun power1 (Int
  Int) Int)

;; Power_0
(assert (forall ((x Int)) (= (power1 x 0) 1)))

;; Power_s
(assert
  (forall ((x Int) (n Int))
    (=> (<= 0 n) (= (power1 x (+ n 1)) (* x (power1 x n))))))

;; Power_s_alt
(assert
  (forall ((x Int) (n Int))
    (=> (< 0 n) (= (power1 x n) (* x (power1 x (- n 1)))))))

;; Power_1
(assert (forall ((x Int)) (= (power1 x 1) x)))

;; Power_sum
(assert
  (forall ((x Int) (n Int) (m Int))
    (=>
      (<= 0 n)
      (=> (<= 0 m) (= (power1 x (+ n m)) (* (power1 x n) (power1 x m)))))))

;; Power_mult
(assert
  (forall ((x Int) (n Int) (m Int))
    (=>
      (<= 0 n)
      (=> (<= 0 m) (= (power1 x (* n m)) (power1 (power1 x n) m))))))

;; Power_comm1
(assert
  (forall ((x Int) (y Int))
    (=>
      (= (* x y) (* y x))
      (forall ((n Int))
        (=> (<= 0 n) (= (* (power1 x n) y) (* y (power1 x n))))))))

;; Power_comm2
(assert
  (forall ((x Int) (y Int))
    (=>
      (= (* x y) (* y x))
      (forall ((n Int))
        (=> (<= 0 n) (= (power1 (* x y) n) (* (power1 x n) (power1 y n))))))))

;; Power_non_neg
(assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (<= 0 y)) (<= 0 (power1 x y)))))

;; Power_pos
(assert
  (forall ((x Int) (y Int)) (=> (and (< 0 x) (<= 0 y)) (< 0 (power1 x y)))))

;; Power_monotonic
(assert
  (forall ((x Int) (n Int) (m Int))
    (=> (and (< 0 x) (and (<= 0 n) (<= n m))) (<= (power1 x n) (power1 x m)))))

;; width__post_axiom
(assert
  (forall ((lo (_ BitVec 64)) (hi (_ BitVec 64)))
    (! (=>
         (and
           (dynamic_invariant7 lo true true true true)
           (dynamic_invariant7 hi true true true true))
         (let ((result (width lo hi)))
           (and
             (max_log10__function_guard (max_log10 Tuple0) Tuple0)
             (=>
               (width__function_guard result lo hi)
               (and
                 (ite (bvugt lo hi)
                   (= result 0)
                   (and
                     (and
                       (and
                         (< 0 result)
                         (<= result (+ (max_log10 Tuple0) 2)))
                       (< (bv2nat lo) (power1 big_10 (- result 1))))
                     (< (bv2nat hi) (power1 big_10 (- result 1)))))
                 (dynamic_invariant result true false true true)))))) :pattern (
    (width
      lo
      hi)) )))

;; unsigned_width_ghost__def_axiom
(assert
  (and
    (width__function_guard
      (width #x0000000000000000 #xFFFFFFFFFFFFFFFF)
      #x0000000000000000
      #xFFFFFFFFFFFFFFFF)
    (= unsigned_width_ghost (width #x0000000000000000 #xFFFFFFFFFFFFFFFF))))

;; dynamic_invariant
(define-fun dynamic_invariant10 ((temp___expr_739 us_t) (temp___is_init_735 Bool) (temp___skip_constant_736 Bool) (temp___do_toplevel_737 Bool) (temp___do_typ_inv_738 Bool)) Bool
  (=>
    (not (= temp___skip_constant_736 true))
    (and
      (and
        (dynamic_property
          (to_rep1 s__first)
          (to_rep1 s__last)
          (first temp___expr_739)
          (last temp___expr_739))
        (= (first temp___expr_739) (to_rep1 s__first)))
      (= (last temp___expr_739) (to_rep1 s__last)))))

;; default_initial_assumption
(define-fun default_initial_assumption2 ((temp___expr_741 us_t) (temp___skip_top_level_742 Bool)) Bool
  (and
    (= (first temp___expr_741) (to_rep1 s__first))
    (= (last temp___expr_741) (to_rep1 s__last))))

(declare-const s (Array Int character))

(declare-const p Int)

;; Assume
(assert (dynamic_invariant unsigned_width_ghost true false true true))

;; Assume
(assert
  (width__function_guard
    (width #x0000000000000000 #xFFFFFFFFFFFFFFFF)
    #x0000000000000000
    #xFFFFFFFFFFFFFFFF))

;; Assume
(assert
  (= (width #x0000000000000000 #xFFFFFFFFFFFFFFFF) unsigned_width_ghost))

;; Assume
(assert (dynamic_invariant3 v true false true true))

;; Assume
(assert
  (dynamic_property
    1
    2147483647
    (first (of_array s (to_rep1 s__first) (to_rep1 s__last)))
    (last (of_array s (to_rep1 s__first) (to_rep1 s__last)))))

;; Assume
(assert (dynamic_invariant p false false true true))

;; Assume
(assert
  (and
    (and (= (to_rep1 s__first) 1) (< (to_rep1 s__last) 2147483647))
    (<= unsigned_width_ghost (to_rep1 s__last))))

;; Assert
(assert (= (to_rep1 s__first) 1))

(declare-const o character)

;; Ensures
(assert (= (to_rep o) 32))

;; Assert
(assert
  (and
    (<= (first (of_array s (to_rep1 s__first) (to_rep1 s__last))) 1)
    (<= 1 (last (of_array s (to_rep1 s__first) (to_rep1 s__last))))))

(declare-const s1 (Array Int character))

;; H
(assert
  (= s1 (to_array
          (us_tqtmk
            (store (to_array
                     (of_array s (to_rep1 s__first) (to_rep1 s__last))) 1 
            o)
            (rt (of_array s (to_rep1 s__first) (to_rep1 s__last)))))))

(declare-const p1 Int)

;; H
(assert (= p1 1))

(declare-const s2 (Array Int character))

(declare-const p2 Int)

;; H
(assert
  (= (let ((temp___711 (of_array
                         (to_array
                           (of_array s1 (to_rep1 s__first) (to_rep1 s__last)))
                         (to_rep1 s__first)
                         p1)))
       (let ((temp___709 (of_array
                           (to_array
                             (of_array
                               s2
                               (to_rep1 s__first)
                               (to_rep1 s__last)))
                           (to_rep1 s__first)
                           p1)))
         (bool_eq5
           (to_array temp___709)
           (first temp___709)
           (last temp___709)
           (to_array temp___711)
           (first temp___711)
           (last temp___711)))) true))

;; H
(assert (<= (+ p1 1) p2))

;; H
(assert (<= p2 (to_rep1 s__last)))

;; H
(assert
  (= (only_decimal_ghost
       (of_array s2 (to_rep1 s__first) (to_rep1 s__last))
       (+ p1 1)
       p2) true))

;; H
(assert
  (= (bool_eq9
       (scan_based_number_ghost
         (of_array s2 (to_rep1 s__first) (to_rep1 s__last))
         (+ p1 1)
         p2
         #x000000000000000A
         #x0000000000000000)
       (wrap_option v)) true))

;; H
(assert
  (dynamic_invariant2
    (of_array s2 (to_rep1 s__first) (to_rep1 s__last))
    true
    true
    true
    true))

;; H
(assert (dynamic_invariant p2 true true true true))

;; Goal def'vc
;; File "s-imageu.ads", line 81, characters 0-0
(assert
  (not
  (= (bool_eq9
       (scan_based_number_ghost
         (let ((temp___748 (of_array s2 (to_rep1 s__first) (to_rep1 s__last))))
           (of_array
             (to_array temp___748)
             (first temp___748)
             (last temp___748)))
         2
         p2
         #x000000000000000A
         #x0000000000000000)
       (wrap_option v)) true)))

(check-sat)
(exit)
