(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTNIRA)
(set-info :source |
Generated by: Yannick Moy
Generated on: 2022-02-14
Generator: GNATprove
Application: GNAT light runtime library
Target solver: Alt-Ergo, CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)

;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
  (((Tuple0))))

(declare-sort us_private 0)

;; private__bool_eq
(declare-fun private__bool_eq (us_private
  us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
  (((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))

(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
  (((int__refqtmk (int__content Int)))))

(declare-datatypes ((bool__ref 0))
  (((bool__refqtmk (bool__content Bool)))))

(declare-datatypes ((us_fixed__ref 0))
  (((us_fixed__refqtmk (us_fixed__content Int)))))

(declare-datatypes ((real__ref 0))
  (((real__refqtmk (real__content Real)))))

(declare-datatypes ((us_private__ref 0))
  (((us_private__refqtmk (us_private__content us_private)))))

;; int__ref___projection
(define-fun int__ref___projection ((a int__ref)) Int
  (int__content a))

;; __fixed__ref___projection
(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int
  (us_fixed__content a))

;; bool__ref___projection
(define-fun bool__ref___projection ((a bool__ref)) Bool
  (bool__content a))

;; real__ref___projection
(define-fun real__ref___projection ((a real__ref)) Real
  (real__content a))

;; __private__ref___projection
(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

;; bool_eq
(declare-fun bool_eq (Int
  Int) Bool)

;; bool_ne
(declare-fun bool_ne (Int
  Int) Bool)

;; bool_lt
(declare-fun bool_lt (Int
  Int) Bool)

;; bool_le
(declare-fun bool_le (Int
  Int) Bool)

;; bool_gt
(declare-fun bool_gt (Int
  Int) Bool)

;; bool_ge
(declare-fun bool_ge (Int
  Int) Bool)

;; bool_eq_axiom
(assert
  (forall ((x Int)) (forall ((y Int)) (= (= (bool_eq x y) true) (= x y)))))

;; bool_ne_axiom
(assert
  (forall ((x Int))
    (forall ((y Int)) (= (= (bool_ne x y) true) (not (= x y))))))

;; bool_lt_axiom
(assert
  (forall ((x Int)) (forall ((y Int)) (= (= (bool_lt x y) true) (< x y)))))

;; bool_int__le_axiom
(assert
  (forall ((x Int)) (forall ((y Int)) (= (= (bool_le x y) true) (<= x y)))))

;; bool_gt_axiom
(assert
  (forall ((x Int)) (forall ((y Int)) (= (= (bool_gt x y) true) (< y x)))))

;; bool_ge_axiom
(assert
  (forall ((x Int)) (forall ((y Int)) (= (= (bool_ge x y) true) (<= y x)))))

;; length
(define-fun length ((x Int) (y Int)) Int
  (ite (<= x y) (+ (- y x) 1) 0))

;; bool_eq
(define-fun bool_eq1 ((x Bool) (y Bool)) Bool
  (ite (= x y) true false))

;; to_int
(define-fun to_int1 ((b Bool)) Int
  (ite (= b true) 1 0))

;; of_int
(define-fun of_int ((i Int)) Bool
  (ite (= i 0) false true))

;; in_range
(define-fun in_range ((x Int)) Bool
  (or (= x 0) (= x 1)))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort natural 0)

;; natural'int
(declare-fun naturalqtint (natural) Int)

;; natural'axiom
(assert
  (forall ((i natural))
    (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

;; in_range
(define-fun in_range1 ((x Int)) Bool
  (and (<= 0 x) (<= x 2147483647)))

;; bool_eq
(define-fun bool_eq2 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

;; user_eq
(declare-fun user_eq (natural
  natural) Bool)

(declare-const dummy natural)

(declare-datatypes ((natural__ref 0))
  (((natural__refqtmk (natural__content natural)))))

;; natural__ref_natural__content__projection
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural
  (natural__content a))

;; dynamic_invariant
(define-fun dynamic_invariant ((temp___expr_46 Int) (temp___is_init_42 Bool) (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool) (temp___do_typ_inv_45 Bool)) Bool
  (=>
    (or (= temp___is_init_42 true) (<= 0 2147483647))
    (in_range1 temp___expr_46)))

(declare-sort positive 0)

;; positive'int
(declare-fun positiveqtint (positive) Int)

;; positive'axiom
(assert
  (forall ((i positive))
    (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

;; in_range
(define-fun in_range2 ((x Int)) Bool
  (and (<= 1 x) (<= x 2147483647)))

;; bool_eq
(define-fun bool_eq3 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

;; user_eq
(declare-fun user_eq1 (positive
  positive) Bool)

(declare-const dummy1 positive)

(declare-datatypes ((positive__ref 0))
  (((positive__refqtmk (positive__content positive)))))

;; positive__ref_positive__content__projection
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive
  (positive__content a))

(declare-sort character 0)

;; in_range
(define-fun in_range3 ((x Int)) Bool
  (and (<= 0 x) (<= x 255)))

;; bool_eq
(define-fun bool_eq4 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

;; user_eq
(declare-fun user_eq2 (character
  character) Bool)

(declare-const dummy2 character)

(declare-datatypes ((character__ref 0))
  (((character__refqtmk (character__content character)))))

;; character__ref_character__content__projection
(define-fun character__ref_character__content__projection ((a character__ref)) character
  (character__content a))

;; to_rep
(declare-fun to_rep (character) Int)

;; of_rep
(declare-fun of_rep (Int) character)

;; inversion_axiom
(assert
  (forall ((x character))
    (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
(assert
  (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
(assert
  (forall ((x Int))
    (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                                (of_rep x))) )))

(declare-datatypes ((map__ref 0))
  (((map__refqtmk (map__content (Array Int character))))))

;; slide
(declare-fun slide ((Array Int character)
  Int
  Int) (Array Int character))

;; slide_eq
(assert
  (forall ((a (Array Int character)))
    (forall ((first Int))
      (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
(assert
  (forall ((a (Array Int character)))
    (forall ((old_first Int))
      (forall ((new_first Int))
        (forall ((i Int))
          (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
          (slide
            a
            old_first
            new_first) i)) ))))))

;; const
(declare-fun const1 (character) (Array Int character))

;; const_def
(assert
  (forall ((v character))
    (forall ((i Int))
      (! (= (select (const1 v) i) v) :pattern ((select (const1 v) i)) ))))

;; bool_eq
(define-fun bool_eq5 ((a (Array Int character)) (a__first Int) (a__last Int) (b (Array Int character)) (b__first Int) (b__last Int)) Bool
  (ite (and
         (ite (<= a__first a__last)
           (and
             (<= b__first b__last)
             (= (- a__last a__first) (- b__last b__first)))
           (< b__last b__first))
         (forall ((temp___idx_105 Int))
           (=>
             (and (<= a__first temp___idx_105) (<= temp___idx_105 a__last))
             (= (to_rep (select a temp___idx_105)) (to_rep
                                                     (select b (+ (- b__first a__first) temp___idx_105)))))))
    true
    false))

;; bool_eq_rev
(assert
  (forall ((a (Array Int character)) (b (Array Int character)))
    (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
      (=>
        (= (bool_eq5 b b__first b__last a a__first a__last) true)
        (and
          (ite (<= a__first a__last)
            (and
              (<= b__first b__last)
              (= (- a__last a__first) (- b__last b__first)))
            (< b__last b__first))
          (forall ((temp___idx_105 Int))
            (=>
              (and (<= a__first temp___idx_105) (<= temp___idx_105 a__last))
              (= (to_rep (select a temp___idx_105)) (to_rep
                                                      (select b (+ (- b__first a__first) temp___idx_105)))))))))))

(declare-sort integer 0)

;; integer'int
(declare-fun integerqtint (integer) Int)

;; integer'axiom
(assert
  (forall ((i integer))
    (and
      (<= (- 2147483648) (integerqtint i))
      (<= (integerqtint i) 2147483647))))

;; in_range
(define-fun in_range4 ((x Int)) Bool
  (and (<= (- 2147483648) x) (<= x 2147483647)))

;; bool_eq
(define-fun bool_eq6 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

;; user_eq
(declare-fun user_eq3 (integer
  integer) Bool)

(declare-const dummy3 integer)

(declare-datatypes ((integer__ref 0))
  (((integer__refqtmk (integer__content integer)))))

;; integer__ref_integer__content__projection
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer
  (integer__content a))

;; to_rep
(define-fun to_rep1 ((x integer)) Int
  (integerqtint x))

;; of_rep
(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
(assert
  (forall ((x integer))
    (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
(assert
  (forall ((x integer)) (! (in_range4 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
(assert
  (forall ((x Int))
    (! (=> (in_range4 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                                  (of_rep1 x))) )))

(declare-datatypes ((t 0))
  (((tqtmk (rec__first integer)(rec__last integer)))))

;; mk
(declare-fun mk (Int
  Int) t)

;; mk_def
(assert
  (forall ((f Int) (l Int))
    (! (=>
         (in_range4 f)
         (=>
           (in_range4 l)
           (and
             (= (to_rep1 (rec__first (mk f l))) f)
             (= (to_rep1 (rec__last (mk f l))) l)))) :pattern ((mk f l)) )))

;; dynamic_property
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool
  (and
    (in_range4 low)
    (and
      (in_range4 high)
      (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes ((us_t 0))
  (((us_tqtmk (elts (Array Int character))(rt t)))))

;; to_array
(define-fun to_array ((a us_t)) (Array Int character)
  (elts a))

;; of_array
(define-fun of_array ((a (Array Int character)) (f Int) (l Int)) us_t
  (us_tqtmk a (mk f l)))

;; first
(define-fun first ((a us_t)) Int
  (to_rep1 (rec__first (rt a))))

;; last
(define-fun last ((a us_t)) Int
  (to_rep1 (rec__last (rt a))))

;; length
(define-fun length1 ((a us_t)) Int
  (ite (<= (first a) (last a)) (+ (- (last a) (first a)) 1) 0))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
(assert (<= 0 value__size))

;; object__size_axiom
(assert (<= 0 object__size))

;; component__size_axiom
(assert (<= 0 component__size))

;; alignment_axiom
(assert (<= 0 alignment))

;; bool_eq
(define-fun bool_eq7 ((x us_t) (y us_t)) Bool
  (bool_eq5
    (elts x)
    (to_rep1 (rec__first (rt x)))
    (to_rep1 (rec__last (rt x)))
    (elts y)
    (to_rep1 (rec__first (rt y)))
    (to_rep1 (rec__last (rt y)))))

;; user_eq
(declare-fun user_eq4 (us_t
  us_t) Bool)

(declare-const dummy4 us_t)

(declare-datatypes ((string____ref 0))
  (((string____refqtmk (string____content us_t)))))

;; string____ref_string____content__projection
(define-fun string____ref_string____content__projection ((a string____ref)) us_t
  (string____content a))

(declare-const v Bool)

(declare-const s__first integer)

(declare-const s__last integer)

;; is_boolean_image_ghost
(declare-fun is_boolean_image_ghost (us_t) Bool)

;; is_boolean_image_ghost__function_guard
(declare-fun is_boolean_image_ghost__function_guard (Bool
  us_t) Bool)

;; dynamic_invariant
(define-fun dynamic_invariant1 ((temp___expr_110 us_t) (temp___is_init_106 Bool) (temp___skip_constant_107 Bool) (temp___do_toplevel_108 Bool) (temp___do_typ_inv_109 Bool)) Bool
  (=>
    (not (= temp___skip_constant_107 true))
    (dynamic_property
      1
      2147483647
      (first temp___expr_110)
      (last temp___expr_110))))

;; only_space_ghost
(declare-fun only_space_ghost (us_t
  Int
  Int) Bool)

;; only_space_ghost__function_guard
(declare-fun only_space_ghost__function_guard (Bool
  us_t
  Int
  Int) Bool)

;; first_non_space_ghost
(declare-fun first_non_space_ghost (us_t
  Int
  Int) Int)

;; first_non_space_ghost__function_guard
(declare-fun first_non_space_ghost__function_guard (Int
  us_t
  Int
  Int) Bool)

;; is_boolean_image_ghost__post_axiom
(assert true)

;; is_boolean_image_ghost__def_axiom
(assert
  (forall ((str us_t))
    (! (and
         (forall ((str1 us_t))
           (only_space_ghost__function_guard
             (only_space_ghost str1 (first str1) (last str1))
             str1
             (first str1)
             (last str1)))
         (and
           (forall ((str1 us_t))
             (first_non_space_ghost__function_guard
               (first_non_space_ghost str1 (first str1) (last str1))
               str1
               (first str1)
               (last str1)))
           (and
             (forall ((str1 us_t) (f Int))
               (only_space_ghost__function_guard
                 (only_space_ghost str1 (+ f 4) (last str1))
                 str1
                 (+ f 4)
                 (last str1)))
             (and
               (forall ((str1 us_t) (f Int))
                 (only_space_ghost__function_guard
                   (only_space_ghost str1 (+ f 5) (last str1))
                   str1
                   (+ f 5)
                   (last str1)))
               (=
                 (= (is_boolean_image_ghost str) true)
                 (and
                   (not
                     (= (only_space_ghost str (first str) (last str)) true))
                   (let ((f (first_non_space_ghost
                              str
                              (first str)
                              (last str))))
                     (or
                       (and
                         (and
                           (and
                             (and
                               (and
                                 (<= f (- (last str) 3))
                                 (let ((temp___206 (to_rep
                                                     (select (to_array str) f))))
                                   (or (= temp___206 116) (= temp___206 84))))
                               (let ((temp___208 (to_rep
                                                   (select (to_array str) (+ f 1)))))
                                 (or (= temp___208 114) (= temp___208 82))))
                             (let ((temp___210 (to_rep
                                                 (select (to_array str) (+ f 2)))))
                               (or (= temp___210 117) (= temp___210 85))))
                           (let ((temp___212 (to_rep
                                               (select (to_array str) (+ f 3)))))
                             (or (= temp___212 101) (= temp___212 69))))
                         (=>
                           (< (+ f 3) (last str))
                           (= (only_space_ghost str (+ f 4) (last str)) true)))
                       (and
                         (and
                           (and
                             (and
                               (and
                                 (and
                                   (<= f (- (last str) 4))
                                   (let ((temp___215 (to_rep
                                                       (select (to_array str) f))))
                                     (or
                                       (= temp___215 102)
                                       (= temp___215 70))))
                                 (let ((temp___217 (to_rep
                                                     (select (to_array str) (+ f 1)))))
                                   (or (= temp___217 97) (= temp___217 65))))
                               (let ((temp___219 (to_rep
                                                   (select (to_array str) (+ f 2)))))
                                 (or (= temp___219 108) (= temp___219 76))))
                             (let ((temp___221 (to_rep
                                                 (select (to_array str) (+ f 3)))))
                               (or (= temp___221 115) (= temp___221 83))))
                           (let ((temp___223 (to_rep
                                               (select (to_array str) (+ f 4)))))
                             (or (= temp___223 101) (= temp___223 69))))
                         (=>
                           (< (+ f 4) (last str))
                           (= (only_space_ghost str (+ f 5) (last str)) true))))))))))) :pattern (
    (is_boolean_image_ghost
      str)) )))

;; value_boolean
(declare-fun value_boolean (us_t) Bool)

;; value_boolean__function_guard
(declare-fun value_boolean__function_guard (Bool
  us_t) Bool)

;; value_boolean__post_axiom
(assert
  (forall ((str us_t))
    (! (=>
         (and
           (dynamic_invariant1 str true true true true)
           (= (is_boolean_image_ghost str) true))
         (let ((result (value_boolean str)))
           (and
             (forall ((str1 us_t))
               (first_non_space_ghost__function_guard
                 (first_non_space_ghost str1 (first str1) (last str1))
                 str1
                 (first str1)
                 (last str1)))
             (=>
               (value_boolean__function_guard result str)
               (=
                 (= result true)
                 (let ((temp___232 (to_rep
                                     (select (to_array str) (first_non_space_ghost
                                                              str
                                                              (first str)
                                                              (last str))))))
                   (or (= temp___232 116) (= temp___232 84)))))))) :pattern (
    (value_boolean
      str)) )))

(declare-datatypes ((t4s__ref 0))
  (((t4s__refqtmk (t4s__content us_t)))))

;; t4s__ref_t4s__content__projection
(define-fun t4s__ref_t4s__content__projection ((a t4s__ref)) us_t
  (t4s__content a))

(declare-datatypes ((t6s__ref 0))
  (((t6s__refqtmk (t6s__content us_t)))))

;; t6s__ref_t6s__content__projection
(define-fun t6s__ref_t6s__content__projection ((a t6s__ref)) us_t
  (t6s__content a))

(declare-datatypes ((s1b__ref 0))
  (((s1b__refqtmk (s1b__content us_t)))))

;; s1b__ref_s1b__content__projection
(define-fun s1b__ref_s1b__content__projection ((a s1b__ref)) us_t
  (s1b__content a))

;; temp___String_Literal_256
(declare-fun temp___String_Literal_256 (tuple0) (Array Int character))

;; temp___String_Literal_256__def_axiom
(assert
  (forall ((us_void_param tuple0))
    (! (and
         (and
           (= (to_rep (select (temp___String_Literal_256 us_void_param) 1)) 84)
           (= (to_rep (select (temp___String_Literal_256 us_void_param) 2)) 82))
         (and
           (= (to_rep (select (temp___String_Literal_256 us_void_param) 3)) 85)
           (= (to_rep (select (temp___String_Literal_256 us_void_param) 4)) 69))) :pattern (
    (temp___String_Literal_256
      us_void_param)) )))

;; temp___String_Literal_265
(declare-fun temp___String_Literal_265 (tuple0) (Array Int character))

;; temp___String_Literal_265__def_axiom
(assert
  (forall ((us_void_param tuple0))
    (! (and
         (and
           (= (to_rep (select (temp___String_Literal_265 us_void_param) 1)) 70)
           (= (to_rep (select (temp___String_Literal_265 us_void_param) 2)) 65))
         (and
           (and
             (= (to_rep (select (temp___String_Literal_265 us_void_param) 3)) 76)
             (= (to_rep (select (temp___String_Literal_265 us_void_param) 4)) 83))
           (= (to_rep (select (temp___String_Literal_265 us_void_param) 5)) 69))) :pattern (
    (temp___String_Literal_265
      us_void_param)) )))

;; dynamic_invariant
(define-fun dynamic_invariant2 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool
  (=>
    (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647))
    (in_range4 temp___expr_18)))

;; dynamic_invariant
(define-fun dynamic_invariant3 ((temp___expr_53 Int) (temp___is_init_49 Bool) (temp___skip_constant_50 Bool) (temp___do_toplevel_51 Bool) (temp___do_typ_inv_52 Bool)) Bool
  (=>
    (or (= temp___is_init_49 true) (<= 1 2147483647))
    (in_range2 temp___expr_53)))

;; dynamic_invariant
(define-fun dynamic_invariant4 ((temp___expr_88 Int) (temp___is_init_84 Bool) (temp___skip_constant_85 Bool) (temp___do_toplevel_86 Bool) (temp___do_typ_inv_87 Bool)) Bool
  (=> (or (= temp___is_init_84 true) (<= 0 255)) (in_range3 temp___expr_88)))

;; only_space_ghost__post_axiom
(assert true)

;; only_space_ghost__def_axiom
(assert
  (forall ((s us_t))
    (forall ((from Int) (to__ Int))
      (! (=
           (= (only_space_ghost s from to__) true)
           (forall ((j Int))
             (=>
               (and (<= from j) (<= j to__))
               (= (to_rep (select (to_array s) j)) 32)))) :pattern ((only_space_ghost
                                                                    s
                                                                    from
                                                                    to__)) ))))

;; first_non_space_ghost__post_axiom
(assert
  (forall ((s us_t))
    (forall ((from Int) (to__ Int))
      (! (and
           (forall ((s1 us_t) (from1 Int) (to__1 Int))
             (only_space_ghost__function_guard
               (only_space_ghost s1 from1 to__1)
               s1
               from1
               to__1))
           (=>
             (and
               (and
                 (and
                   (dynamic_invariant1 s true true true true)
                   (dynamic_invariant2 from true true true true))
                 (dynamic_invariant2 to__ true true true true))
               (and
                 (and
                   (and (<= (first s) from) (<= from (last s)))
                   (and (<= (first s) to__) (<= to__ (last s))))
                 (not (= (only_space_ghost s from to__) true))))
             (let ((result (first_non_space_ghost s from to__)))
               (and
                 (forall ((s1 us_t) (from1 Int) (result1 Int))
                   (only_space_ghost__function_guard
                     (only_space_ghost s1 from1 (- result1 1))
                     s1
                     from1
                     (- result1 1)))
                 (=>
                   (first_non_space_ghost__function_guard result s from to__)
                   (and
                     (and
                       (and
                         (and (<= from result) (<= result to__))
                         (not (= (to_rep (select (to_array s) result)) 32)))
                       (= (only_space_ghost s from (- result 1)) true))
                     (dynamic_invariant3 result true false true true))))))) :pattern (
      (first_non_space_ghost
        s
        from
        to__)) ))))

;; dynamic_invariant
(define-fun dynamic_invariant5 ((temp___expr_249 us_t) (temp___is_init_245 Bool) (temp___skip_constant_246 Bool) (temp___do_toplevel_247 Bool) (temp___do_typ_inv_248 Bool)) Bool
  (=>
    (not (= temp___skip_constant_246 true))
    (and
      (and
        (dynamic_property
          (to_rep1 s__first)
          (to_rep1 s__last)
          (first temp___expr_249)
          (last temp___expr_249))
        (= (first temp___expr_249) (to_rep1 s__first)))
      (= (last temp___expr_249) (to_rep1 s__last)))))

;; default_initial_assumption
(define-fun default_initial_assumption ((temp___expr_251 us_t) (temp___skip_top_level_252 Bool)) Bool
  (and
    (= (first temp___expr_251) (to_rep1 s__first))
    (= (last temp___expr_251) (to_rep1 s__last))))

(declare-const s (Array Int character))

(declare-const p Int)

;; Assume
(assert
  (dynamic_property
    1
    2147483647
    (first (of_array s (to_rep1 s__first) (to_rep1 s__last)))
    (last (of_array s (to_rep1 s__first) (to_rep1 s__last)))))

;; Assume
(assert (dynamic_invariant p false false true true))

;; Assume
(assert
  (and
    (= (to_rep1 s__first) 1)
    (ite (= v true)
      (<= 4 (length (to_rep1 s__first) (to_rep1 s__last)))
      (<= 5 (length (to_rep1 s__first) (to_rep1 s__last))))))

(declare-const s1 (Array Int character))

(declare-const p1 Int)

(declare-const spark__branch Bool)

;; H
(assert (= spark__branch v))

(declare-const o Int)

(declare-const o1 Int)

(declare-const usf us_t)

(declare-const o2 Int)

(declare-const o3 Int)

(declare-const usf1 us_t)

;; H
(assert
  (ite (= spark__branch true)
    (and
      (= (to_rep1 s__last) o2)
      (and
        (= (to_rep1 s__first) o3)
        (let ((temp___259 (of_array s o3 o2)))
          (and
            (and
              (and
                (= (first temp___259) (first usf1))
                (= (last temp___259) (last usf1)))
              (forall ((temp___262 Int))
                (ite (and (<= 1 temp___262) (<= temp___262 4))
                  (= (select (to_array usf1) temp___262) (select (temp___String_Literal_256
                                                                   Tuple0) temp___262))
                  (= (select (to_array usf1) temp___262) (select (to_array
                                                                   temp___259) temp___262)))))
            (and (= s1 (to_array usf1)) (= p1 4))))))
    (and
      (= (to_rep1 s__last) o)
      (and
        (= (to_rep1 s__first) o1)
        (let ((temp___268 (of_array s o1 o)))
          (and
            (and
              (and
                (= (first temp___268) (first usf))
                (= (last temp___268) (last usf)))
              (forall ((temp___271 Int))
                (ite (and (<= 1 temp___271) (<= temp___271 5))
                  (= (select (to_array usf) temp___271) (select (temp___String_Literal_265
                                                                  Tuple0) temp___271))
                  (= (select (to_array usf) temp___271) (select (to_array
                                                                  temp___268) temp___271)))))
            (and (= s1 (to_array usf)) (= p1 5))))))))

;; Goal def'vc
;; File "s-imgboo.ads", line 51, characters 0-0
(assert
  (not
  (=>
    (only_space_ghost__function_guard
      (only_space_ghost
        (let ((temp___286 (of_array
                            (to_array
                              (of_array
                                s1
                                (to_rep1 s__first)
                                (to_rep1 s__last)))
                            1
                            p1)))
          (of_array
            (to_array temp___286)
            (first temp___286)
            (last temp___286)))
        (first
          (let ((temp___286 (of_array
                              (to_array
                                (of_array
                                  s1
                                  (to_rep1 s__first)
                                  (to_rep1 s__last)))
                              1
                              p1)))
            (of_array
              (to_array temp___286)
              (first temp___286)
              (last temp___286))))
        (last
          (let ((temp___286 (of_array
                              (to_array
                                (of_array
                                  s1
                                  (to_rep1 s__first)
                                  (to_rep1 s__last)))
                              1
                              p1)))
            (of_array
              (to_array temp___286)
              (first temp___286)
              (last temp___286)))))
      (let ((temp___286 (of_array
                          (to_array
                            (of_array
                              s1
                              (to_rep1 s__first)
                              (to_rep1 s__last)))
                          1
                          p1)))
        (of_array (to_array temp___286) (first temp___286) (last temp___286)))
      (first
        (let ((temp___286 (of_array
                            (to_array
                              (of_array
                                s1
                                (to_rep1 s__first)
                                (to_rep1 s__last)))
                            1
                            p1)))
          (of_array
            (to_array temp___286)
            (first temp___286)
            (last temp___286))))
      (last
        (let ((temp___286 (of_array
                            (to_array
                              (of_array
                                s1
                                (to_rep1 s__first)
                                (to_rep1 s__last)))
                            1
                            p1)))
          (of_array
            (to_array temp___286)
            (first temp___286)
            (last temp___286)))))
    (not
      (= (only_space_ghost
           (let ((temp___286 (of_array
                               (to_array
                                 (of_array
                                   s1
                                   (to_rep1 s__first)
                                   (to_rep1 s__last)))
                               1
                               p1)))
             (of_array
               (to_array temp___286)
               (first temp___286)
               (last temp___286)))
           (first
             (let ((temp___286 (of_array
                                 (to_array
                                   (of_array
                                     s1
                                     (to_rep1 s__first)
                                     (to_rep1 s__last)))
                                 1
                                 p1)))
               (of_array
                 (to_array temp___286)
                 (first temp___286)
                 (last temp___286))))
           (last
             (let ((temp___286 (of_array
                                 (to_array
                                   (of_array
                                     s1
                                     (to_rep1 s__first)
                                     (to_rep1 s__last)))
                                 1
                                 p1)))
               (of_array
                 (to_array temp___286)
                 (first temp___286)
                 (last temp___286))))) true)))))

(check-sat)
(exit)
