(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTNIRA)
(set-info :source |
Generated by: Yannick Moy
Generated on: 2022-02-14
Generator: GNATprove
Application: GNAT light runtime library
Target solver: Alt-Ergo, CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)

;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
  (((Tuple0))))

(declare-sort us_private 0)

;; private__bool_eq
(declare-fun private__bool_eq (us_private
  us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
  (((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))

(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
  (((int__refqtmk (int__content Int)))))

(declare-datatypes ((bool__ref 0))
  (((bool__refqtmk (bool__content Bool)))))

(declare-datatypes ((us_fixed__ref 0))
  (((us_fixed__refqtmk (us_fixed__content Int)))))

(declare-datatypes ((real__ref 0))
  (((real__refqtmk (real__content Real)))))

(declare-datatypes ((us_private__ref 0))
  (((us_private__refqtmk (us_private__content us_private)))))

;; int__ref___projection
(define-fun int__ref___projection ((a int__ref)) Int
  (int__content a))

;; __fixed__ref___projection
(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int
  (us_fixed__content a))

;; bool__ref___projection
(define-fun bool__ref___projection ((a bool__ref)) Bool
  (bool__content a))

;; real__ref___projection
(define-fun real__ref___projection ((a real__ref)) Real
  (real__content a))

;; __private__ref___projection
(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

;; nth
(declare-fun nth ((_ BitVec 32)
  Int) Bool)

;; lsr
(declare-fun lsr ((_ BitVec 32)
  Int) (_ BitVec 32))

;; asr
(declare-fun asr ((_ BitVec 32)
  Int) (_ BitVec 32))

;; lsl
(declare-fun lsl ((_ BitVec 32)
  Int) (_ BitVec 32))

;; abs
(define-fun abs1 ((x Int)) Int
  (ite (<= 0 x) x (- x)))

;; Abs_le
(assert
  (forall ((x Int) (y Int)) (= (<= (abs1 x) y) (and (<= (- y) x) (<= x y)))))

;; Abs_pos
(assert (forall ((x Int)) (<= 0 (abs1 x))))

;; Div_unique
(assert
  (forall ((x Int) (y Int) (q Int))
    (=>
      (< 0 y)
      (=> (and (<= (* q y) x) (< x (+ (* q y) y))) (= (div x y) q)))))

;; Div_bound
(assert
  (forall ((x Int) (y Int))
    (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div x y)) (<= (div x y) x)))))

;; Div_inf
(assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div x y) 0))))

;; Div_inf_neg
(assert
  (forall ((x Int) (y Int))
    (=> (and (< 0 x) (<= x y)) (= (div (- x) y) (- 1)))))

;; Mod_0
(assert (forall ((y Int)) (=> (not (= y 0)) (= (mod 0 y) 0))))

;; Div_1_left
(assert (forall ((y Int)) (=> (< 1 y) (= (div 1 y) 0))))

;; Div_minus1_left
(assert (forall ((y Int)) (=> (< 1 y) (= (div (- 1) y) (- 1)))))

;; Mod_1_left
(assert (forall ((y Int)) (=> (< 1 y) (= (mod 1 y) 1))))

;; Mod_minus1_left
(assert
  (forall ((y Int))
    (! (=> (< 1 y) (= (mod (- 1) y) (- y 1))) :pattern ((mod (- 1) y)) )))

;; Div_mult
(assert
  (forall ((x Int) (y Int) (z Int))
    (! (=> (< 0 x) (= (div (+ (* x y) z) x) (+ y (div z x)))) :pattern ((div (+ (* x y) z) x)) )))

;; Mod_mult
(assert
  (forall ((x Int) (y Int) (z Int))
    (! (=> (< 0 x) (= (mod (+ (* x y) z) x) (mod z x))) :pattern ((mod (+ (* x y) z) x)) )))

;; rotate_right
(declare-fun rotate_right1 ((_ BitVec 32)
  Int) (_ BitVec 32))

;; rotate_left
(declare-fun rotate_left1 ((_ BitVec 32)
  Int) (_ BitVec 32))

;; pow2
(declare-fun pow2 (Int) Int)

(declare-const two_power_size_minus_one Int)

;; two_power_size_minus_one_val
(assert (= two_power_size_minus_one (pow2 (- 32 1))))

;; to_int
(define-fun to_int1 ((x (_ BitVec 32))) Int
  (ite (bvsge x (_ bv0 32)) (bv2nat x) (- (- 4294967296 (bv2nat x)))))

;; uint_in_range
(define-fun uint_in_range ((i Int)) Bool
  (and (<= 0 i) (<= i 4294967295)))

;; lsr_bv_is_lsr
(assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
    (= (bvlshr x n) (lsr x (bv2nat n)))))

;; asr_bv_is_asr
(assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
    (= (bvashr x n) (asr x (bv2nat n)))))

;; lsl_bv_is_lsl
(assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
    (= (bvshl x n) (lsl x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
(assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
    (= (bvor (bvshl v (bvurem n (_ bv32 32))) (bvlshr v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) 
    (rotate_left1
      v
      (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
(assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
    (= (bvor (bvlshr v (bvurem n (_ bv32 32))) (bvshl v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) 
    (rotate_right1
      v
      (bv2nat n)))))

;; nth_bv
(declare-fun nth_bv ((_ BitVec 32)
  (_ BitVec 32)) Bool)

;; nth_bv_def
(assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
    (=
      (= (nth_bv x i) true)
      (not (= (bvand (bvlshr x i) #x00000001) #x00000000)))))

;; Nth_bv_is_nth
(assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
    (= (nth x (bv2nat i)) (nth_bv x i))))

;; Nth_bv_is_nth2
(assert
  (forall ((x (_ BitVec 32)) (i Int))
    (=>
      (and (<= 0 i) (< i 4294967296))
      (= (nth_bv x ((_ int2bv 32) i)) (nth x i)))))

;; eq_sub_bv
(declare-fun eq_sub_bv ((_ BitVec 32)
  (_ BitVec 32)
  (_ BitVec 32)
  (_ BitVec 32)) Bool)

;; eq_sub_bv_def
(assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32)) (n (_ BitVec 32)))
    (let ((mask (bvshl (bvsub (bvshl #x00000001 n) #x00000001) i)))
      (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))

;; eq_sub
(define-fun eq_sub ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int) (n Int)) Bool
  (forall ((j Int))
    (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

;; eq_sub_equiv
(assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32)) (n (_ BitVec 32)))
    (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))

(declare-datatypes ((t__ref 0))
  (((t__refqtmk (t__content (_ BitVec 32))))))

;; bool_eq
(define-fun bool_eq ((x (_ BitVec 32)) (y (_ BitVec 32))) Bool
  (ite (= x y) true false))

;; bool_ne
(define-fun bool_ne ((x (_ BitVec 32)) (y (_ BitVec 32))) Bool
  (ite (not (= x y)) true false))

;; bool_lt
(define-fun bool_lt ((x (_ BitVec 32)) (y (_ BitVec 32))) Bool
  (ite (bvult x y) true false))

;; bool_le
(define-fun bool_le ((x (_ BitVec 32)) (y (_ BitVec 32))) Bool
  (ite (bvule x y) true false))

;; bool_gt
(define-fun bool_gt ((x (_ BitVec 32)) (y (_ BitVec 32))) Bool
  (ite (bvugt x y) true false))

;; bool_ge
(define-fun bool_ge ((x (_ BitVec 32)) (y (_ BitVec 32))) Bool
  (ite (bvuge x y) true false))

;; power
(declare-fun power ((_ BitVec 32)
  Int) (_ BitVec 32))

;; Power_0
(assert (forall ((x (_ BitVec 32))) (= (power x 0) #x00000001)))

;; Power_1
(assert (forall ((x (_ BitVec 32))) (= (power x 1) x)))

;; Power_s
(assert
  (forall ((x (_ BitVec 32)) (n Int))
    (=> (<= 0 n) (= (power x (+ n 1)) (bvmul x (power x n))))))

;; Power_s_alt
(assert
  (forall ((x (_ BitVec 32)) (n Int))
    (=> (< 0 n) (= (power x n) (bvmul x (power x (- n 1)))))))

;; Power_sum
(assert
  (forall ((x (_ BitVec 32)) (n Int) (m Int))
    (=>
      (<= 0 n)
      (=> (<= 0 m) (= (power x (+ n m)) (bvmul (power x n) (power x m)))))))

;; Power_mult
(assert
  (forall ((x (_ BitVec 32)) (n Int) (m Int))
    (=> (<= 0 n) (=> (<= 0 m) (= (power x (* n m)) (power (power x n) m))))))

;; Power_mult2
(assert
  (forall ((x (_ BitVec 32)) (y (_ BitVec 32)) (n Int))
    (=> (<= 0 n) (= (power (bvmul x y) n) (bvmul (power x n) (power y n))))))

;; bv_min
(define-fun bv_min ((x (_ BitVec 32)) (y (_ BitVec 32))) (_ BitVec 32)
  (ite (bvule x y) x y))

;; bv_max
(define-fun bv_max ((x (_ BitVec 32)) (y (_ BitVec 32))) (_ BitVec 32)
  (ite (bvule x y) y x))

;; min
(define-fun min ((x Int) (y Int)) Int
  (ite (<= x y) x y))

;; max
(define-fun max ((x Int) (y Int)) Int
  (ite (<= x y) y x))

;; Min_r
(assert (forall ((x Int) (y Int)) (=> (<= y x) (= (min x y) y))))

;; Max_l
(assert (forall ((x Int) (y Int)) (=> (<= y x) (= (max x y) x))))

;; Min_comm
(assert (forall ((x Int) (y Int)) (= (min x y) (min y x))))

;; Max_comm
(assert (forall ((x Int) (y Int)) (= (max x y) (max y x))))

;; Min_assoc
(assert
  (forall ((x Int) (y Int) (z Int)) (= (min (min x y) z) (min x (min y z)))))

;; Max_assoc
(assert
  (forall ((x Int) (y Int) (z Int)) (= (max (max x y) z) (max x (max y z)))))

;; bv_min_to_uint
(assert
  (forall ((x (_ BitVec 32)) (y (_ BitVec 32)))
    (= (bv2nat (bv_min x y)) (min (bv2nat x) (bv2nat y)))))

;; bv_max_to_uint
(assert
  (forall ((x (_ BitVec 32)) (y (_ BitVec 32)))
    (= (bv2nat (bv_max x y)) (max (bv2nat x) (bv2nat y)))))

;; uc_of_int
(define-fun uc_of_int ((x Int)) (_ BitVec 32)
  (ite (<= 0 x) ((_ int2bv 32) x) (bvneg ((_ int2bv 32) (- x)))))

;; uc_to_int
(define-fun uc_to_int ((x (_ BitVec 32))) Int
  (ite (= (bool_lt x ((_ int2bv 32) two_power_size_minus_one)) true)
    (bv2nat x)
    (- (bv2nat (bvneg x)))))

;; bool_eq
(define-fun bool_eq1 ((x Bool) (y Bool)) Bool
  (ite (= x y) true false))

;; to_int
(define-fun to_int2 ((b Bool)) Int
  (ite (= b true) 1 0))

;; of_int
(define-fun of_int ((i Int)) Bool
  (ite (= i 0) false true))

;; in_range
(define-fun in_range ((x Int)) Bool
  (or (= x 0) (= x 1)))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

;; integer'int
(declare-fun integerqtint (integer) Int)

;; integer'axiom
(assert
  (forall ((i integer))
    (and
      (<= (- 2147483648) (integerqtint i))
      (<= (integerqtint i) 2147483647))))

;; in_range
(define-fun in_range1 ((x Int)) Bool
  (and (<= (- 2147483648) x) (<= x 2147483647)))

;; bool_eq
(define-fun bool_eq2 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

;; user_eq
(declare-fun user_eq (integer
  integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
  (((integer__refqtmk (integer__content integer)))))

;; integer__ref_integer__content__projection
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer
  (integer__content a))

;; dynamic_invariant
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool
  (=>
    (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647))
    (in_range1 temp___expr_18)))

(declare-sort positive 0)

;; positive'int
(declare-fun positiveqtint (positive) Int)

;; positive'axiom
(assert
  (forall ((i positive))
    (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

;; in_range
(define-fun in_range2 ((x Int)) Bool
  (and (<= 1 x) (<= x 2147483647)))

;; bool_eq
(define-fun bool_eq3 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

;; user_eq
(declare-fun user_eq1 (positive
  positive) Bool)

(declare-const dummy1 positive)

(declare-datatypes ((positive__ref 0))
  (((positive__refqtmk (positive__content positive)))))

;; positive__ref_positive__content__projection
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive
  (positive__content a))

;; dynamic_invariant
(define-fun dynamic_invariant1 ((temp___expr_53 Int) (temp___is_init_49 Bool) (temp___skip_constant_50 Bool) (temp___do_toplevel_51 Bool) (temp___do_typ_inv_52 Bool)) Bool
  (=>
    (or (= temp___is_init_49 true) (<= 1 2147483647))
    (in_range2 temp___expr_53)))

(declare-sort character 0)

;; in_range
(define-fun in_range3 ((x Int)) Bool
  (and (<= 0 x) (<= x 255)))

;; bool_eq
(define-fun bool_eq4 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

;; user_eq
(declare-fun user_eq2 (character
  character) Bool)

(declare-const dummy2 character)

(declare-datatypes ((character__ref 0))
  (((character__refqtmk (character__content character)))))

;; character__ref_character__content__projection
(define-fun character__ref_character__content__projection ((a character__ref)) character
  (character__content a))

;; to_rep
(declare-fun to_rep (character) Int)

;; of_rep
(declare-fun of_rep (Int) character)

;; inversion_axiom
(assert
  (forall ((x character))
    (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
(assert
  (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
(assert
  (forall ((x Int))
    (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                                (of_rep x))) )))

(declare-datatypes ((map__ref 0))
  (((map__refqtmk (map__content (Array Int character))))))

;; slide
(declare-fun slide ((Array Int character)
  Int
  Int) (Array Int character))

;; slide_eq
(assert
  (forall ((a (Array Int character)))
    (forall ((first Int))
      (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
(assert
  (forall ((a (Array Int character)))
    (forall ((old_first Int))
      (forall ((new_first Int))
        (forall ((i Int))
          (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
          (slide
            a
            old_first
            new_first) i)) ))))))

;; const
(declare-fun const1 (character) (Array Int character))

;; const_def
(assert
  (forall ((v character))
    (forall ((i Int))
      (! (= (select (const1 v) i) v) :pattern ((select (const1 v) i)) ))))

;; bool_eq
(define-fun bool_eq5 ((a (Array Int character)) (a__first Int) (a__last Int) (b (Array Int character)) (b__first Int) (b__last Int)) Bool
  (ite (and
         (ite (<= a__first a__last)
           (and
             (<= b__first b__last)
             (= (- a__last a__first) (- b__last b__first)))
           (< b__last b__first))
         (forall ((temp___idx_105 Int))
           (=>
             (and (<= a__first temp___idx_105) (<= temp___idx_105 a__last))
             (= (to_rep (select a temp___idx_105)) (to_rep
                                                     (select b (+ (- b__first a__first) temp___idx_105)))))))
    true
    false))

;; bool_eq_rev
(assert
  (forall ((a (Array Int character)) (b (Array Int character)))
    (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
      (=>
        (= (bool_eq5 b b__first b__last a a__first a__last) true)
        (and
          (ite (<= a__first a__last)
            (and
              (<= b__first b__last)
              (= (- a__last a__first) (- b__last b__first)))
            (< b__last b__first))
          (forall ((temp___idx_105 Int))
            (=>
              (and (<= a__first temp___idx_105) (<= temp___idx_105 a__last))
              (= (to_rep (select a temp___idx_105)) (to_rep
                                                      (select b (+ (- b__first a__first) temp___idx_105)))))))))))

;; to_rep
(define-fun to_rep1 ((x integer)) Int
  (integerqtint x))

;; of_rep
(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
(assert
  (forall ((x integer))
    (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
(assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
(assert
  (forall ((x Int))
    (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                                  (of_rep1 x))) )))

(declare-datatypes ((t 0))
  (((tqtmk (rec__first integer)(rec__last integer)))))

;; mk
(declare-fun mk (Int
  Int) t)

;; mk_def
(assert
  (forall ((f Int) (l Int))
    (! (=>
         (in_range1 f)
         (=>
           (in_range1 l)
           (and
             (= (to_rep1 (rec__first (mk f l))) f)
             (= (to_rep1 (rec__last (mk f l))) l)))) :pattern ((mk f l)) )))

;; dynamic_property
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool
  (and
    (in_range1 low)
    (and
      (in_range1 high)
      (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes ((us_t 0))
  (((us_tqtmk (elts (Array Int character))(rt t)))))

;; to_array
(define-fun to_array ((a us_t)) (Array Int character)
  (elts a))

;; of_array
(define-fun of_array ((a (Array Int character)) (f Int) (l Int)) us_t
  (us_tqtmk a (mk f l)))

;; first
(define-fun first ((a us_t)) Int
  (to_rep1 (rec__first (rt a))))

;; last
(define-fun last ((a us_t)) Int
  (to_rep1 (rec__last (rt a))))

;; length
(define-fun length ((a us_t)) Int
  (ite (<= (first a) (last a)) (+ (- (last a) (first a)) 1) 0))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
(assert (<= 0 value__size))

;; object__size_axiom
(assert (<= 0 object__size))

;; component__size_axiom
(assert (<= 0 component__size))

;; alignment_axiom
(assert (<= 0 alignment))

;; bool_eq
(define-fun bool_eq6 ((x us_t) (y us_t)) Bool
  (bool_eq5
    (elts x)
    (to_rep1 (rec__first (rt x)))
    (to_rep1 (rec__last (rt x)))
    (elts y)
    (to_rep1 (rec__first (rt y)))
    (to_rep1 (rec__last (rt y)))))

;; user_eq
(declare-fun user_eq3 (us_t
  us_t) Bool)

(declare-const dummy3 us_t)

(declare-datatypes ((string____ref 0))
  (((string____refqtmk (string____content us_t)))))

;; string____ref_string____content__projection
(define-fun string____ref_string____content__projection ((a string____ref)) us_t
  (string____content a))

;; dynamic_invariant
(define-fun dynamic_invariant2 ((temp___expr_110 us_t) (temp___is_init_106 Bool) (temp___skip_constant_107 Bool) (temp___do_toplevel_108 Bool) (temp___do_typ_inv_109 Bool)) Bool
  (=>
    (not (= temp___skip_constant_107 true))
    (dynamic_property
      1
      2147483647
      (first temp___expr_110)
      (last temp___expr_110))))

;; uns_is_valid_int
(declare-fun uns_is_valid_int (Bool
  (_ BitVec 32)) Bool)

;; uns_is_valid_int__function_guard
(declare-fun uns_is_valid_int__function_guard (Bool
  Bool
  (_ BitVec 32)) Bool)

(declare-sort unsigned 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 32))

;; bool_eq
(define-fun bool_eq7 ((x (_ BitVec 32)) (y (_ BitVec 32))) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE4 ((_ BitVec 32)) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) (_ BitVec 32))

;; user_eq
(declare-fun user_eq4 (unsigned
  unsigned) Bool)

(declare-const dummy4 unsigned)

(declare-datatypes ((unsigned__ref 0))
  (((unsigned__refqtmk (unsigned__content unsigned)))))

;; unsigned__ref_unsigned__content__2__projection
(define-fun unsigned__ref_unsigned__content__2__projection ((a unsigned__ref)) unsigned
  (unsigned__content a))

;; dynamic_invariant
(define-fun dynamic_invariant3 ((temp___expr_217 (_ BitVec 32)) (temp___is_init_213 Bool) (temp___skip_constant_214 Bool) (temp___do_toplevel_215 Bool) (temp___do_typ_inv_216 Bool)) Bool
  true)

;; uns_is_valid_int__post_axiom
(assert true)

;; uns_is_valid_int__def_axiom
(assert
  (forall ((minus Bool))
    (forall ((uval (_ BitVec 32)))
      (! (=
           (= (uns_is_valid_int minus uval) true)
           (ite (= minus true)
             (bvule uval #x80000000)
             (bvule uval #x7FFFFFFF))) :pattern ((uns_is_valid_int
                                                   minus
                                                   uval)) ))))

;; is_int_of_uns
(declare-fun is_int_of_uns (Bool
  (_ BitVec 32)
  Int) Bool)

;; is_int_of_uns__function_guard
(declare-fun is_int_of_uns__function_guard (Bool
  Bool
  (_ BitVec 32)
  Int) Bool)

;; is_int_of_uns__post_axiom
(assert
  (forall ((minus Bool) (uval (_ BitVec 32)))
    (uns_is_valid_int__function_guard
      (uns_is_valid_int minus uval)
      minus
      uval)))

;; is_int_of_uns__def_axiom
(assert
  (forall ((minus Bool))
    (forall ((uval (_ BitVec 32)))
      (forall ((val__ Int))
        (! (=
             (= (is_int_of_uns minus uval val__) true)
             (ite (and (= minus true) (= uval #x80000000))
               (= val__ (- 2147483648))
               (ite (= minus true)
                 (= val__ (- (bv2nat uval)))
                 (= val__ (bv2nat uval))))) :pattern ((is_int_of_uns
                                                        minus
                                                        uval
                                                        val__)) )))))

;; abs_uns_of_int
(define-fun abs_uns_of_int ((val__ Int)) (_ BitVec 32)
  (ite (= val__ (- 2147483648))
    #x80000000
    (ite (< val__ 0) ((_ int2bv 32) (- val__)) ((_ int2bv 32) val__))))

;; abs_uns_of_int__function_guard
(declare-fun abs_uns_of_int__function_guard ((_ BitVec 32)
  Int) Bool)

;; only_space_ghost
(declare-fun only_space_ghost (us_t
  Int
  Int) Bool)

;; only_space_ghost__function_guard
(declare-fun only_space_ghost__function_guard (Bool
  us_t
  Int
  Int) Bool)

;; only_space_ghost__post_axiom
(assert true)

;; only_space_ghost__def_axiom
(assert
  (forall ((s us_t))
    (forall ((from Int) (to__ Int))
      (! (=
           (= (only_space_ghost s from to__) true)
           (forall ((j Int))
             (=>
               (and (<= from j) (<= j to__))
               (= (to_rep (select (to_array s) j)) 32)))) :pattern ((only_space_ghost
                                                                    s
                                                                    from
                                                                    to__)) ))))

;; first_non_space_ghost
(declare-fun first_non_space_ghost (us_t
  Int
  Int) Int)

;; first_non_space_ghost__function_guard
(declare-fun first_non_space_ghost__function_guard (Int
  us_t
  Int
  Int) Bool)

;; first_non_space_ghost__post_axiom
(assert
  (forall ((s us_t))
    (forall ((from Int) (to__ Int))
      (! (and
           (forall ((s1 us_t) (from1 Int) (to__1 Int))
             (only_space_ghost__function_guard
               (only_space_ghost s1 from1 to__1)
               s1
               from1
               to__1))
           (=>
             (and
               (and
                 (and
                   (dynamic_invariant2 s true true true true)
                   (dynamic_invariant from true true true true))
                 (dynamic_invariant to__ true true true true))
               (and
                 (and
                   (and (<= (first s) from) (<= from (last s)))
                   (and (<= (first s) to__) (<= to__ (last s))))
                 (not (= (only_space_ghost s from to__) true))))
             (let ((result (first_non_space_ghost s from to__)))
               (and
                 (forall ((s1 us_t) (from1 Int) (result1 Int))
                   (only_space_ghost__function_guard
                     (only_space_ghost s1 from1 (- result1 1))
                     s1
                     from1
                     (- result1 1)))
                 (=>
                   (first_non_space_ghost__function_guard result s from to__)
                   (and
                     (and
                       (and
                         (and (<= from result) (<= result to__))
                         (not (= (to_rep (select (to_array s) result)) 32)))
                       (= (only_space_ghost s from (- result 1)) true))
                     (dynamic_invariant1 result true false true true))))))) :pattern (
      (first_non_space_ghost
        s
        from
        to__)) ))))

;; is_raw_unsigned_format_ghost
(declare-fun is_raw_unsigned_format_ghost (us_t) Bool)

;; is_raw_unsigned_format_ghost__function_guard
(declare-fun is_raw_unsigned_format_ghost__function_guard (Bool
  us_t) Bool)

;; bool_eq
(declare-fun bool_eq8 (Int
  Int) Bool)

;; bool_ne
(declare-fun bool_ne1 (Int
  Int) Bool)

;; bool_lt
(declare-fun bool_lt1 (Int
  Int) Bool)

;; bool_le
(declare-fun bool_le1 (Int
  Int) Bool)

;; bool_gt
(declare-fun bool_gt1 (Int
  Int) Bool)

;; bool_ge
(declare-fun bool_ge1 (Int
  Int) Bool)

;; bool_eq_axiom
(assert
  (forall ((x Int)) (forall ((y Int)) (= (= (bool_eq8 x y) true) (= x y)))))

;; bool_ne_axiom
(assert
  (forall ((x Int))
    (forall ((y Int)) (= (= (bool_ne1 x y) true) (not (= x y))))))

;; bool_lt_axiom
(assert
  (forall ((x Int)) (forall ((y Int)) (= (= (bool_lt1 x y) true) (< x y)))))

;; bool_int__le_axiom
(assert
  (forall ((x Int)) (forall ((y Int)) (= (= (bool_le1 x y) true) (<= x y)))))

;; bool_gt_axiom
(assert
  (forall ((x Int)) (forall ((y Int)) (= (= (bool_gt1 x y) true) (< y x)))))

;; bool_ge_axiom
(assert
  (forall ((x Int)) (forall ((y Int)) (= (= (bool_ge1 x y) true) (<= y x)))))

;; length
(define-fun length1 ((x Int) (y Int)) Int
  (ite (<= x y) (+ (- y x) 1) 0))

;; last_number_ghost
(declare-fun last_number_ghost (us_t) Int)

;; last_number_ghost__function_guard
(declare-fun last_number_ghost__function_guard (Int
  us_t) Bool)

;; is_natural_format_ghost
(declare-fun is_natural_format_ghost (us_t) Bool)

;; is_natural_format_ghost__function_guard
(declare-fun is_natural_format_ghost__function_guard (Bool
  us_t) Bool)

;; last_hexa_ghost
(declare-fun last_hexa_ghost (us_t) Int)

;; last_hexa_ghost__function_guard
(declare-fun last_hexa_ghost__function_guard (Int
  us_t) Bool)

;; is_based_format_ghost
(declare-fun is_based_format_ghost (us_t) Bool)

;; is_based_format_ghost__function_guard
(declare-fun is_based_format_ghost__function_guard (Bool
  us_t) Bool)

;; is_opt_exponent_format_ghost
(declare-fun is_opt_exponent_format_ghost (us_t
  Bool) Bool)

;; is_opt_exponent_format_ghost__function_guard
(declare-fun is_opt_exponent_format_ghost__function_guard (Bool
  us_t
  Bool) Bool)

(declare-datatypes ((t152s__ref 0))
  (((t152s__refqtmk (t152s__content us_t)))))

;; t152s__ref_t152s__content__projection
(define-fun t152s__ref_t152s__content__projection ((a t152s__ref)) us_t
  (t152s__content a))

(declare-datatypes ((t155s__ref 0))
  (((t155s__refqtmk (t155s__content us_t)))))

;; t155s__ref_t155s__content__projection
(define-fun t155s__ref_t155s__content__projection ((a t155s__ref)) us_t
  (t155s__content a))

(declare-datatypes ((t158s__ref 0))
  (((t158s__refqtmk (t158s__content us_t)))))

;; t158s__ref_t158s__content__projection
(define-fun t158s__ref_t158s__content__projection ((a t158s__ref)) us_t
  (t158s__content a))

;; is_raw_unsigned_format_ghost__post_axiom
(assert true)

;; is_raw_unsigned_format_ghost__def_axiom
(assert
  (forall ((str us_t))
    (! (and
         (forall ((str1 us_t))
           (last_number_ghost__function_guard (last_number_ghost str1) str1))
         (and
           (forall ((str1 us_t) (last_num_init Int))
             (last_hexa_ghost__function_guard
               (last_hexa_ghost
                 (let ((temp___386 (let ((temp___385 (last str1)))
                                     (let ((temp___384 (+ last_num_init 2)))
                                       (of_array
                                         (to_array str1)
                                         temp___384
                                         temp___385)))))
                   (let ((temp___387 (to_array temp___386)))
                     (of_array
                       temp___387
                       (first temp___386)
                       (last temp___386)))))
               (let ((temp___386 (let ((temp___385 (last str1)))
                                   (let ((temp___384 (+ last_num_init 2)))
                                     (of_array
                                       (to_array str1)
                                       temp___384
                                       temp___385)))))
                 (let ((temp___387 (to_array temp___386)))
                   (of_array temp___387 (first temp___386) (last temp___386))))))
           (=
             (= (is_raw_unsigned_format_ghost str) true)
             (and
               (= (is_natural_format_ghost str) true)
               (let ((last_num_init (last_number_ghost str)))
                 (let ((starts_as_based (and (and (bool_lt1
                                                    last_num_init
                                                    (- (last str) 1)) 
                   (let ((temp___390 (to_rep
                                       (select (to_array str) (+ last_num_init 1)))))
                     (or (ite (= temp___390 35) true false) (ite (= temp___390 58)
                                                              true
                                                              false)))) 
                   (let ((temp___391 (to_rep
                                       (select (to_array str) (+ last_num_init 2)))))
                     (or (let ((temp___394 temp___391))
                           (and (ite (<= 48 temp___394) true false) (ite (<= temp___394 57)
                                                                    true
                                                                    false))) (or 
                     (let ((temp___393 temp___391))
                       (and (ite (<= 97 temp___393) true false) (ite (<= temp___393 102)
                                                                  true
                                                                  false))) 
                     (let ((temp___392 temp___391))
                       (and (ite (<= 65 temp___392) true false) (ite (<= temp___392 70)
                                                                  true
                                                                  false)))))))))
                   (let ((last_num_based (ite (= starts_as_based true)
                                           (last_hexa_ghost
                                             (let ((temp___386 (let ((temp___385 
                                                                 (last
                                                                   str)))
                                                                 (let ((temp___384 (+ last_num_init 2)))
                                                                   (of_array
                                                                    (to_array
                                                                    str)
                                                                    temp___384
                                                                    temp___385)))))
                                               (let ((temp___387 (to_array
                                                                   temp___386)))
                                                 (of_array
                                                   temp___387
                                                   (first temp___386)
                                                   (last temp___386)))))
                                           last_num_init)))
                     (and
                       (=>
                         (= starts_as_based true)
                         (and
                           (= (is_based_format_ghost
                                (let ((temp___379 (let ((temp___378 (last
                                                                    str)))
                                                    (let ((temp___377 (+ last_num_init 2)))
                                                      (of_array
                                                        (to_array str)
                                                        temp___377
                                                        temp___378)))))
                                  (let ((temp___380 (to_array temp___379)))
                                    (of_array
                                      temp___380
                                      (first temp___379)
                                      (last temp___379))))) true)
                           (< last_num_based (last str))))
                       (= (is_opt_exponent_format_ghost
                            (let ((temp___382 (let ((temp___381 (last str)))
                                                (of_array
                                                  (to_array str)
                                                  (ite (= (and (and starts_as_based 
                                                    (bool_lt1
                                                      last_num_based
                                                      (last str))) (bool_eq8
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    str) (+ last_num_based 1)))
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    str) (+ last_num_init 1))))) true)
                                                    (+ last_num_based 2)
                                                    (+ last_num_init 1))
                                                  temp___381))))
                              (let ((temp___383 (to_array temp___382)))
                                (of_array
                                  temp___383
                                  (first temp___382)
                                  (last temp___382))))
                            (of_int 0)) true))))))))) :pattern ((is_raw_unsigned_format_ghost
                                                                  str)) )))

(declare-sort unsigned1 0)

(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 32))

;; bool_eq
(define-fun bool_eq9 ((x (_ BitVec 32)) (y (_ BitVec 32))) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE5 ((_ BitVec 32)) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) (_ BitVec 32))

;; user_eq
(declare-fun user_eq5 (unsigned1
  unsigned1) Bool)

(declare-const dummy5 unsigned1)

(declare-datatypes ((unsigned__ref1 0))
  (((unsigned__refqtmk1 (unsigned__content1 unsigned1)))))

;; unsigned__ref_unsigned__content__3__projection
(define-fun unsigned__ref_unsigned__content__3__projection ((a unsigned__ref1)) unsigned1
  (unsigned__content1 a))

;; to_rep
(declare-fun to_rep2 (unsigned1) (_ BitVec 32))

;; of_rep
(declare-fun of_rep2 ((_ BitVec 32)) unsigned1)

;; inversion_axiom
(assert
  (forall ((x unsigned1))
    (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
(assert true)

;; coerce_axiom
(assert
  (forall ((x (_ BitVec 32)))
    (! (= (to_rep2 (of_rep2 x)) x) :pattern ((to_rep2 (of_rep2 x))) )))

;; to_int
(define-fun to_int3 ((x unsigned1)) Int
  (bv2nat (to_rep2 x)))

;; range_int_axiom
(assert
  (forall ((x unsigned1))
    (! (uint_in_range (to_int3 x)) :pattern ((to_int3 x)) )))

(declare-datatypes ((us_split_discrs 0))
  (((us_split_discrsqtmk
    (rec__ada___system__val_uns__impl__uns_option__overflow Bool)))))

;; __split_discrs_rec__ada___system__val_uns__impl__uns_option__overflow__projection
(define-fun us_split_discrs_rec__ada___system__val_uns__impl__uns_option__overflow__projection 
  ((a us_split_discrs)) Bool
  (rec__ada___system__val_uns__impl__uns_option__overflow a))

(declare-datatypes ((us_split_discrs__ref 0))
  (((us_split_discrs__refqtmk (us_split_discrs__content us_split_discrs)))))

;; __split_discrs__ref___split_discrs__content__projection
(define-fun us_split_discrs__ref___split_discrs__content__projection 
  ((a us_split_discrs__ref)) us_split_discrs
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields 0))
  (((us_split_fieldsqtmk
    (rec__ada___system__val_uns__impl__uns_option__value unsigned1)))))

;; __split_fields_rec__ada___system__val_uns__impl__uns_option__value__projection
(define-fun us_split_fields_rec__ada___system__val_uns__impl__uns_option__value__projection 
  ((a us_split_fields)) unsigned1
  (rec__ada___system__val_uns__impl__uns_option__value a))

(declare-datatypes ((us_split_fields__ref 0))
  (((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))

;; __split_fields__ref___split_fields__content__projection
(define-fun us_split_fields__ref___split_fields__content__projection 
  ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
  (((us_repqtmk
    (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))

;; __rep___split_discrs__projection
(define-fun us_rep___split_discrs__projection ((a us_rep)) us_split_discrs
  (us_split_discrs1 a))

;; __rep___split_fields__projection
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields
  (us_split_fields1 a))

;; ada___system__val_uns__impl__uns_option__value__pred
(define-fun ada___system__val_uns__impl__uns_option__value__pred ((a us_rep)) Bool
  (= (to_int2
       (rec__ada___system__val_uns__impl__uns_option__overflow
         (us_split_discrs1 a))) 0))

;; bool_eq
(define-fun bool_eq10 ((a us_rep) (b us_rep)) Bool
  (ite (and
         (= (to_int2
              (rec__ada___system__val_uns__impl__uns_option__overflow
                (us_split_discrs1 a))) (to_int2
                                         (rec__ada___system__val_uns__impl__uns_option__overflow
                                           (us_split_discrs1 b))))
         (=>
           (ada___system__val_uns__impl__uns_option__value__pred a)
           (= (to_rep2
                (rec__ada___system__val_uns__impl__uns_option__value
                  (us_split_fields1 a))) (to_rep2
                                           (rec__ada___system__val_uns__impl__uns_option__value
                                             (us_split_fields1 b))))))
    true
    false))

;; in_range
(define-fun in_range4 ((rec__ada___system__val_uns__impl__uns_option__overflow1 Bool) (a us_split_discrs)) Bool
  (= rec__ada___system__val_uns__impl__uns_option__overflow1 (rec__ada___system__val_uns__impl__uns_option__overflow
                                                               a)))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
(assert (<= 0 value__size1))

;; object__size_axiom
(assert (<= 0 object__size1))

;; alignment_axiom
(assert (<= 0 alignment1))

(declare-const ada___system__val_uns__impl__uns_option__overflow__first__bit Int)

(declare-const ada___system__val_uns__impl__uns_option__overflow__last__bit Int)

(declare-const ada___system__val_uns__impl__uns_option__overflow__position Int)

;; ada___system__val_uns__impl__uns_option__overflow__first__bit_axiom
(assert (<= 0 ada___system__val_uns__impl__uns_option__overflow__first__bit))

;; ada___system__val_uns__impl__uns_option__overflow__last__bit_axiom
(assert
  (< ada___system__val_uns__impl__uns_option__overflow__first__bit ada___system__val_uns__impl__uns_option__overflow__last__bit))

;; ada___system__val_uns__impl__uns_option__overflow__position_axiom
(assert (<= 0 ada___system__val_uns__impl__uns_option__overflow__position))

(declare-const ada___system__val_uns__impl__uns_option__value__first__bit Int)

(declare-const ada___system__val_uns__impl__uns_option__value__last__bit Int)

(declare-const ada___system__val_uns__impl__uns_option__value__position Int)

;; ada___system__val_uns__impl__uns_option__value__first__bit_axiom
(assert (<= 0 ada___system__val_uns__impl__uns_option__value__first__bit))

;; ada___system__val_uns__impl__uns_option__value__last__bit_axiom
(assert
  (< ada___system__val_uns__impl__uns_option__value__first__bit ada___system__val_uns__impl__uns_option__value__last__bit))

;; ada___system__val_uns__impl__uns_option__value__position_axiom
(assert (<= 0 ada___system__val_uns__impl__uns_option__value__position))

;; user_eq
(declare-fun user_eq6 (us_rep
  us_rep) Bool)

(declare-const dummy6 us_rep)

(declare-datatypes ((uns_option__ref 0))
  (((uns_option__refqtmk (uns_option__content us_rep)))))

;; uns_option__ref_uns_option__content__projection
(define-fun uns_option__ref_uns_option__content__projection ((a uns_option__ref)) us_rep
  (uns_option__content a))

;; scan_based_number_ghost
(declare-fun scan_based_number_ghost (us_t
  Int
  Int
  (_ BitVec 32)
  (_ BitVec 32)) us_rep)

;; scan_based_number_ghost__function_guard
(declare-fun scan_based_number_ghost__function_guard (us_rep
  us_t
  Int
  Int
  (_ BitVec 32)
  (_ BitVec 32)) Bool)

;; only_hexa_ghost
(declare-fun only_hexa_ghost (us_t
  Int
  Int) Bool)

;; only_hexa_ghost__function_guard
(declare-fun only_hexa_ghost__function_guard (Bool
  us_t
  Int
  Int) Bool)

;; hexa_to_unsigned_ghost
(declare-fun hexa_to_unsigned_ghost (Int) (_ BitVec 32))

;; hexa_to_unsigned_ghost__function_guard
(declare-fun hexa_to_unsigned_ghost__function_guard ((_ BitVec 32)
  Int) Bool)

;; scan_overflows_ghost
(declare-fun scan_overflows_ghost ((_ BitVec 32)
  (_ BitVec 32)
  (_ BitVec 32)) Bool)

;; scan_overflows_ghost__function_guard
(declare-fun scan_overflows_ghost__function_guard (Bool
  (_ BitVec 32)
  (_ BitVec 32)
  (_ BitVec 32)) Bool)

;; dynamic_invariant
(define-fun dynamic_invariant4 ((temp___expr_224 (_ BitVec 32)) (temp___is_init_220 Bool) (temp___skip_constant_221 Bool) (temp___do_toplevel_222 Bool) (temp___do_typ_inv_223 Bool)) Bool
  true)

;; default_initial_assumption
(define-fun default_initial_assumption ((temp___expr_233 us_rep) (temp___skip_top_level_234 Bool)) Bool
  (and
    (= (rec__ada___system__val_uns__impl__uns_option__overflow
         (us_split_discrs1 temp___expr_233)) (of_int 0))
    (=>
      (ada___system__val_uns__impl__uns_option__value__pred temp___expr_233)
      (= (to_rep2
           (rec__ada___system__val_uns__impl__uns_option__value
             (us_split_fields1 temp___expr_233))) #x00000000))))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
(assert (<= 0 value__size2))

;; object__size_axiom
(assert (<= 0 object__size2))

;; alignment_axiom
(assert (<= 0 alignment2))

(declare-const ada___system__val_uns__impl__uns_option__overflow__first__bit1 Int)

(declare-const ada___system__val_uns__impl__uns_option__overflow__last__bit1 Int)

(declare-const ada___system__val_uns__impl__uns_option__overflow__position1 Int)

;; ada___system__val_uns__impl__uns_option__overflow__first__bit_axiom
(assert
  (<= 0 ada___system__val_uns__impl__uns_option__overflow__first__bit1))

;; ada___system__val_uns__impl__uns_option__overflow__last__bit_axiom
(assert
  (< ada___system__val_uns__impl__uns_option__overflow__first__bit1 ada___system__val_uns__impl__uns_option__overflow__last__bit1))

;; ada___system__val_uns__impl__uns_option__overflow__position_axiom
(assert (<= 0 ada___system__val_uns__impl__uns_option__overflow__position1))

(declare-const ada___system__val_uns__impl__uns_option__value__first__bit1 Int)

(declare-const ada___system__val_uns__impl__uns_option__value__last__bit1 Int)

(declare-const ada___system__val_uns__impl__uns_option__value__position1 Int)

;; ada___system__val_uns__impl__uns_option__value__first__bit_axiom
(assert (<= 0 ada___system__val_uns__impl__uns_option__value__first__bit1))

;; ada___system__val_uns__impl__uns_option__value__last__bit_axiom
(assert
  (< ada___system__val_uns__impl__uns_option__value__first__bit1 ada___system__val_uns__impl__uns_option__value__last__bit1))

;; ada___system__val_uns__impl__uns_option__value__position_axiom
(assert (<= 0 ada___system__val_uns__impl__uns_option__value__position1))

;; user_eq
(declare-fun user_eq7 (us_rep
  us_rep) Bool)

(declare-const dummy7 us_rep)

(declare-datatypes ((t128s__ref 0))
  (((t128s__refqtmk (t128s__content us_rep)))))

;; t128s__ref_t128s__content__projection
(define-fun t128s__ref_t128s__content__projection ((a t128s__ref)) us_rep
  (t128s__content a))

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; value__size_axiom
(assert (<= 0 value__size3))

;; object__size_axiom
(assert (<= 0 object__size3))

;; alignment_axiom
(assert (<= 0 alignment3))

(declare-const ada___system__val_uns__impl__uns_option__overflow__first__bit2 Int)

(declare-const ada___system__val_uns__impl__uns_option__overflow__last__bit2 Int)

(declare-const ada___system__val_uns__impl__uns_option__overflow__position2 Int)

;; ada___system__val_uns__impl__uns_option__overflow__first__bit_axiom
(assert
  (<= 0 ada___system__val_uns__impl__uns_option__overflow__first__bit2))

;; ada___system__val_uns__impl__uns_option__overflow__last__bit_axiom
(assert
  (< ada___system__val_uns__impl__uns_option__overflow__first__bit2 ada___system__val_uns__impl__uns_option__overflow__last__bit2))

;; ada___system__val_uns__impl__uns_option__overflow__position_axiom
(assert (<= 0 ada___system__val_uns__impl__uns_option__overflow__position2))

(declare-const ada___system__val_uns__impl__uns_option__value__first__bit2 Int)

(declare-const ada___system__val_uns__impl__uns_option__value__last__bit2 Int)

(declare-const ada___system__val_uns__impl__uns_option__value__position2 Int)

;; ada___system__val_uns__impl__uns_option__value__first__bit_axiom
(assert (<= 0 ada___system__val_uns__impl__uns_option__value__first__bit2))

;; ada___system__val_uns__impl__uns_option__value__last__bit_axiom
(assert
  (< ada___system__val_uns__impl__uns_option__value__first__bit2 ada___system__val_uns__impl__uns_option__value__last__bit2))

;; ada___system__val_uns__impl__uns_option__value__position_axiom
(assert (<= 0 ada___system__val_uns__impl__uns_option__value__position2))

;; user_eq
(declare-fun user_eq8 (us_rep
  us_rep) Bool)

(declare-const dummy8 us_rep)

(declare-datatypes ((t129s__ref 0))
  (((t129s__refqtmk (t129s__content us_rep)))))

;; t129s__ref_t129s__content__projection
(define-fun t129s__ref_t129s__content__projection ((a t129s__ref)) us_rep
  (t129s__content a))

;; scan_based_number_ghost__def_axiom
(assert
  (forall ((str us_t))
    (forall ((from Int) (to__ Int))
      (forall ((base (_ BitVec 32)) (acc (_ BitVec 32)))
        (! (=>
             (and
               (and
                 (and
                   (and
                     (dynamic_invariant2 str true true true true)
                     (dynamic_invariant from true true true true))
                   (dynamic_invariant to__ true true true true))
                 (dynamic_invariant4 base true true true true))
               (dynamic_invariant4 acc true true true true))
             (and
               (forall ((str1 us_t) (from1 Int))
                 (hexa_to_unsigned_ghost__function_guard
                   (hexa_to_unsigned_ghost
                     (to_rep (select (to_array str1) from1)))
                   (to_rep (select (to_array str1) from1))))
               (and
                 (forall ((str1 us_t) (from1 Int))
                   (hexa_to_unsigned_ghost__function_guard
                     (hexa_to_unsigned_ghost
                       (to_rep (select (to_array str1) from1)))
                     (to_rep (select (to_array str1) from1))))
                 (= (scan_based_number_ghost str from to__ base acc) 
                 (ite (< to__ from)
                   (let ((temp___overflow_404 (of_int 0)))
                     (us_repqtmk
                       (us_split_discrsqtmk temp___overflow_404)
                       (us_split_fieldsqtmk (of_rep2 acc))))
                   (ite (= (to_rep (select (to_array str) from)) 95)
                     (scan_based_number_ghost str (+ from 1) to__ base acc)
                     (ite (= (scan_overflows_ghost
                               (hexa_to_unsigned_ghost
                                 (to_rep (select (to_array str) from)))
                               base
                               acc) true)
                       (let ((temp___overflow_405 (of_int 1)))
                         (us_repqtmk
                           (us_split_discrsqtmk temp___overflow_405)
                           (us_split_fieldsqtmk dummy5)))
                       (scan_based_number_ghost
                         str
                         (+ from 1)
                         to__
                         base
                         (bvadd (bvmul base acc) (hexa_to_unsigned_ghost
                                                   (to_rep
                                                     (select (to_array str) from)))))))))))) :pattern (
        (scan_based_number_ghost
          str
          from
          to__
          base
          acc)) )))))

;; raw_unsigned_overflows_ghost
(declare-fun raw_unsigned_overflows_ghost (us_t
  Int
  Int) Bool)

;; raw_unsigned_overflows_ghost__function_guard
(declare-fun raw_unsigned_overflows_ghost__function_guard (Bool
  us_t
  Int
  Int) Bool)

;; starts_as_exponent_format_ghost
(declare-fun starts_as_exponent_format_ghost (us_t
  Bool) Bool)

;; starts_as_exponent_format_ghost__function_guard
(declare-fun starts_as_exponent_format_ghost__function_guard (Bool
  us_t
  Bool) Bool)

;; scan_exponent_ghost
(declare-fun scan_exponent_ghost (us_t
  Bool) Int)

;; scan_exponent_ghost__function_guard
(declare-fun scan_exponent_ghost__function_guard (Int
  us_t
  Bool) Bool)

;; exponent_unsigned_ghost
(declare-fun exponent_unsigned_ghost ((_ BitVec 32)
  Int
  (_ BitVec 32)) us_rep)

;; exponent_unsigned_ghost__function_guard
(declare-fun exponent_unsigned_ghost__function_guard (us_rep
  (_ BitVec 32)
  Int
  (_ BitVec 32)) Bool)

(declare-datatypes ((t163s__ref 0))
  (((t163s__refqtmk (t163s__content us_t)))))

;; t163s__ref_t163s__content__projection
(define-fun t163s__ref_t163s__content__projection ((a t163s__ref)) us_t
  (t163s__content a))

(declare-datatypes ((t166s__ref 0))
  (((t166s__refqtmk (t166s__content us_t)))))

;; t166s__ref_t166s__content__projection
(define-fun t166s__ref_t166s__content__projection ((a t166s__ref)) us_t
  (t166s__content a))

(declare-datatypes ((t169s__ref 0))
  (((t169s__refqtmk (t169s__content us_t)))))

;; t169s__ref_t169s__content__projection
(define-fun t169s__ref_t169s__content__projection ((a t169s__ref)) us_t
  (t169s__content a))

(declare-datatypes ((t172s__ref 0))
  (((t172s__refqtmk (t172s__content us_t)))))

;; t172s__ref_t172s__content__projection
(define-fun t172s__ref_t172s__content__projection ((a t172s__ref)) us_t
  (t172s__content a))

(declare-datatypes ((t176s__ref 0))
  (((t176s__refqtmk (t176s__content us_t)))))

;; t176s__ref_t176s__content__projection
(define-fun t176s__ref_t176s__content__projection ((a t176s__ref)) us_t
  (t176s__content a))

;; raw_unsigned_overflows_ghost__post_axiom
(assert true)

;; raw_unsigned_overflows_ghost__def_axiom
(assert
  (forall ((str us_t))
    (forall ((from Int) (to__ Int))
      (! (and
           (forall ((str1 us_t) (from1 Int) (to__1 Int))
             (last_number_ghost__function_guard
               (last_number_ghost
                 (let ((temp___492 (of_array (to_array str1) from1 to__1)))
                   (let ((temp___493 (to_array temp___492)))
                     (of_array
                       temp___493
                       (first temp___492)
                       (last temp___492)))))
               (let ((temp___492 (of_array (to_array str1) from1 to__1)))
                 (let ((temp___493 (to_array temp___492)))
                   (of_array temp___493 (first temp___492) (last temp___492))))))
           (and
             (forall ((str1 us_t) (to__1 Int) (last_num_init Int))
               (last_hexa_ghost__function_guard
                 (last_hexa_ghost
                   (let ((temp___483 (let ((temp___482 (+ last_num_init 2)))
                                       (of_array
                                         (to_array str1)
                                         temp___482
                                         to__1))))
                     (let ((temp___484 (to_array temp___483)))
                       (of_array
                         temp___484
                         (first temp___483)
                         (last temp___483)))))
                 (let ((temp___483 (let ((temp___482 (+ last_num_init 2)))
                                     (of_array
                                       (to_array str1)
                                       temp___482
                                       to__1))))
                   (let ((temp___484 (to_array temp___483)))
                     (of_array
                       temp___484
                       (first temp___483)
                       (last temp___483))))))
             (and
               (forall ((str1 us_t) (to__1 Int) (first_exp Int))
                 (scan_exponent_ghost__function_guard
                   (scan_exponent_ghost
                     (let ((temp___477 (of_array
                                         (to_array str1)
                                         first_exp
                                         to__1)))
                       (let ((temp___478 (to_array temp___477)))
                         (of_array
                           temp___478
                           (first temp___477)
                           (last temp___477))))
                     (of_int 0))
                   (let ((temp___477 (of_array
                                       (to_array str1)
                                       first_exp
                                       to__1)))
                     (let ((temp___478 (to_array temp___477)))
                       (of_array
                         temp___478
                         (first temp___477)
                         (last temp___477))))
                   (of_int 0)))
               (=
                 (= (raw_unsigned_overflows_ghost str from to__) true)
                 (let ((last_num_init (last_number_ghost
                                        (let ((temp___492 (of_array
                                                            (to_array str)
                                                            from
                                                            to__)))
                                          (let ((temp___493 (to_array
                                                              temp___492)))
                                            (of_array
                                              temp___493
                                              (first temp___492)
                                              (last temp___492)))))))
                   (let ((init_val (scan_based_number_ghost
                                     str
                                     from
                                     last_num_init
                                     #x0000000A
                                     #x00000000)))
                     (let ((starts_as_based (and (and (bool_lt1
                                                        last_num_init
                                                        (- to__ 1)) (let ((temp___487 
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    str) (+ last_num_init 1)))))
                                                                    (or 
                                                                    (ite (= temp___487 35)
                                                                    true
                                                                    false) 
                                                                    (ite (= temp___487 58)
                                                                    true
                                                                    false)))) 
                       (let ((temp___488 (to_rep
                                           (select (to_array str) (+ last_num_init 2)))))
                         (or (let ((temp___491 temp___488))
                               (and (ite (<= 48 temp___491) true false) 
                               (ite (<= temp___491 57)
                                 true
                                 false))) (or (let ((temp___490 temp___488))
                                                (and (ite (<= 97 temp___490)
                                                       true
                                                       false) (ite (<= temp___490 102)
                                                                true
                                                                false))) 
                         (let ((temp___489 temp___488))
                           (and (ite (<= 65 temp___489) true false) (ite (<= temp___489 70)
                                                                    true
                                                                    false)))))))))
                       (let ((last_num_based (ite (= starts_as_based true)
                                               (last_hexa_ghost
                                                 (let ((temp___483 (let ((temp___482 (+ last_num_init 2)))
                                                                    (of_array
                                                                    (to_array
                                                                    str)
                                                                    temp___482
                                                                    to__))))
                                                   (let ((temp___484 
                                                     (to_array
                                                       temp___483)))
                                                     (of_array
                                                       temp___484
                                                       (first temp___483)
                                                       (last temp___483)))))
                                               last_num_init)))
                         (let ((is_based (and (and starts_as_based (bool_lt1
                                                                    last_num_based
                                                                    to__)) 
                           (bool_eq8
                             (to_rep
                               (select (to_array str) (+ last_num_based 1)))
                             (to_rep
                               (select (to_array str) (+ last_num_init 1)))))))
                           (let ((based_val (ite (and
                                                   (= starts_as_based true)
                                                   (not
                                                     (= (rec__ada___system__val_uns__impl__uns_option__overflow
                                                          (us_split_discrs1
                                                            init_val)) true)))
                                              (scan_based_number_ghost
                                                str
                                                (+ last_num_init 2)
                                                last_num_based
                                                (to_rep2
                                                  (rec__ada___system__val_uns__impl__uns_option__value
                                                    (us_split_fields1
                                                      init_val)))
                                                #x00000000)
                                              init_val)))
                             (let ((first_exp (ite (= is_based true)
                                                (+ last_num_based 2)
                                                (+ last_num_init 1))))
                               (or
                                 (or
                                   (or
                                     (= (rec__ada___system__val_uns__impl__uns_option__overflow
                                          (us_split_discrs1 init_val)) true)
                                     (and
                                       (and
                                         (< last_num_init (- to__ 1))
                                         (let ((temp___473 (to_rep
                                                             (select 
                                                             (to_array
                                                               str) (+ last_num_init 1)))))
                                           (or
                                             (= temp___473 35)
                                             (= temp___473 58))))
                                       (= (not (let ((temp___474 (to_rep2
                                                                   (rec__ada___system__val_uns__impl__uns_option__value
                                                                    (us_split_fields1
                                                                    init_val)))))
                                                 (and (ite (bvule #x00000002 temp___474)
                                                        true
                                                        false) (ite (bvule temp___474 #x00000010)
                                                                 true
                                                                 false)))) true)))
                                   (and
                                     (= starts_as_based true)
                                     (= (rec__ada___system__val_uns__impl__uns_option__overflow
                                          (us_split_discrs1 based_val)) true)))
                                 (and
                                   (= (starts_as_exponent_format_ghost
                                        (let ((temp___475 (of_array
                                                            (to_array str)
                                                            first_exp
                                                            to__)))
                                          (let ((temp___476 (to_array
                                                              temp___475)))
                                            (of_array
                                              temp___476
                                              (first temp___475)
                                              (last temp___475))))
                                        (of_int 0)) true)
                                   (= (rec__ada___system__val_uns__impl__uns_option__overflow
                                        (us_split_discrs1
                                          (exponent_unsigned_ghost
                                            (ite (= is_based true)
                                              (to_rep2
                                                (rec__ada___system__val_uns__impl__uns_option__value
                                                  (us_split_fields1
                                                    based_val)))
                                              (to_rep2
                                                (rec__ada___system__val_uns__impl__uns_option__value
                                                  (us_split_fields1 init_val))))
                                            (ite (= (starts_as_exponent_format_ghost
                                                      (let ((temp___480 
                                                        (of_array
                                                          (to_array str)
                                                          first_exp
                                                          to__)))
                                                        (let ((temp___481 
                                                          (to_array
                                                            temp___480)))
                                                          (of_array
                                                            temp___481
                                                            (first
                                                              temp___480)
                                                            (last temp___480))))
                                                      (of_int 0)) true)
                                              (scan_exponent_ghost
                                                (let ((temp___477 (of_array
                                                                    (to_array
                                                                    str)
                                                                    first_exp
                                                                    to__)))
                                                  (let ((temp___478 (to_array
                                                                    temp___477)))
                                                    (of_array
                                                      temp___478
                                                      (first temp___477)
                                                      (last temp___477))))
                                                (of_int 0))
                                              0)
                                            (ite (= is_based true)
                                              (to_rep2
                                                (rec__ada___system__val_uns__impl__uns_option__value
                                                  (us_split_fields1 init_val)))
                                              #x0000000A)))) true)))))))))))))) :pattern (
      (raw_unsigned_overflows_ghost
        str
        from
        to__)) ))))

;; scan_raw_unsigned_ghost
(declare-fun scan_raw_unsigned_ghost (us_t
  Int
  Int) (_ BitVec 32))

;; scan_raw_unsigned_ghost__function_guard
(declare-fun scan_raw_unsigned_ghost__function_guard ((_ BitVec 32)
  us_t
  Int
  Int) Bool)

(declare-datatypes ((t181s__ref 0))
  (((t181s__refqtmk (t181s__content us_t)))))

;; t181s__ref_t181s__content__projection
(define-fun t181s__ref_t181s__content__projection ((a t181s__ref)) us_t
  (t181s__content a))

(declare-datatypes ((t184s__ref 0))
  (((t184s__refqtmk (t184s__content us_t)))))

;; t184s__ref_t184s__content__projection
(define-fun t184s__ref_t184s__content__projection ((a t184s__ref)) us_t
  (t184s__content a))

(declare-datatypes ((t187s__ref 0))
  (((t187s__refqtmk (t187s__content us_t)))))

;; t187s__ref_t187s__content__projection
(define-fun t187s__ref_t187s__content__projection ((a t187s__ref)) us_t
  (t187s__content a))

(declare-datatypes ((t190s__ref 0))
  (((t190s__refqtmk (t190s__content us_t)))))

;; t190s__ref_t190s__content__projection
(define-fun t190s__ref_t190s__content__projection ((a t190s__ref)) us_t
  (t190s__content a))

;; scan_raw_unsigned_ghost__post_axiom
(assert
  (forall ((str us_t))
    (forall ((from Int) (to__ Int))
      (! (and
           (forall ((str1 us_t) (from1 Int) (to__1 Int))
             (raw_unsigned_overflows_ghost__function_guard
               (raw_unsigned_overflows_ghost str1 from1 to__1)
               str1
               from1
               to__1))
           (=>
             (and
               (and
                 (and
                   (dynamic_invariant2 str true true true true)
                   (dynamic_invariant from true true true true))
                 (dynamic_invariant to__ true true true true))
               (and
                 (and
                   (and
                     (and
                       (not (= (last str) 2147483647))
                       (and (<= (first str) from) (<= from (last str))))
                     (and (<= from to__) (<= to__ (last str))))
                   (let ((temp___516 (to_rep (select (to_array str) from))))
                     (and (<= 48 temp___516) (<= temp___516 57))))
                 (not (= (raw_unsigned_overflows_ghost str from to__) true))))
             (let ((result (scan_raw_unsigned_ghost str from to__)))
               (=>
                 (scan_raw_unsigned_ghost__function_guard
                   result
                   str
                   from
                   to__)
                 (dynamic_invariant4 result true false true true))))) :pattern (
      (scan_raw_unsigned_ghost
        str
        from
        to__)) ))))

;; scan_raw_unsigned_ghost__def_axiom
(assert
  (forall ((str us_t))
    (forall ((from Int) (to__ Int))
      (! (=>
           (and
             (and
               (dynamic_invariant2 str true true true true)
               (dynamic_invariant from true true true true))
             (dynamic_invariant to__ true true true true))
           (and
             (forall ((str1 us_t) (from1 Int) (to__1 Int))
               (last_number_ghost__function_guard
                 (last_number_ghost
                   (let ((temp___534 (of_array (to_array str1) from1 to__1)))
                     (let ((temp___535 (to_array temp___534)))
                       (of_array
                         temp___535
                         (first temp___534)
                         (last temp___534)))))
                 (let ((temp___534 (of_array (to_array str1) from1 to__1)))
                   (let ((temp___535 (to_array temp___534)))
                     (of_array
                       temp___535
                       (first temp___534)
                       (last temp___534))))))
             (and
               (forall ((str1 us_t) (to__1 Int) (last_num_init Int))
                 (last_hexa_ghost__function_guard
                   (last_hexa_ghost
                     (let ((temp___525 (let ((temp___524 (+ last_num_init 2)))
                                         (of_array
                                           (to_array str1)
                                           temp___524
                                           to__1))))
                       (let ((temp___526 (to_array temp___525)))
                         (of_array
                           temp___526
                           (first temp___525)
                           (last temp___525)))))
                   (let ((temp___525 (let ((temp___524 (+ last_num_init 2)))
                                       (of_array
                                         (to_array str1)
                                         temp___524
                                         to__1))))
                     (let ((temp___526 (to_array temp___525)))
                       (of_array
                         temp___526
                         (first temp___525)
                         (last temp___525))))))
               (and
                 (forall ((str1 us_t) (to__1 Int) (first_exp Int))
                   (scan_exponent_ghost__function_guard
                     (scan_exponent_ghost
                       (let ((temp___519 (of_array
                                           (to_array str1)
                                           first_exp
                                           to__1)))
                         (let ((temp___520 (to_array temp___519)))
                           (of_array
                             temp___520
                             (first temp___519)
                             (last temp___519))))
                       (of_int 0))
                     (let ((temp___519 (of_array
                                         (to_array str1)
                                         first_exp
                                         to__1)))
                       (let ((temp___520 (to_array temp___519)))
                         (of_array
                           temp___520
                           (first temp___519)
                           (last temp___519))))
                     (of_int 0)))
                 (= (scan_raw_unsigned_ghost str from to__) (let ((last_num_init 
                                                              (last_number_ghost
                                                                (let ((temp___534 
                                                                  (of_array
                                                                    (to_array
                                                                    str)
                                                                    from
                                                                    to__)))
                                                                  (let ((temp___535 
                                                                    (to_array
                                                                    temp___534)))
                                                                    (of_array
                                                                    temp___535
                                                                    (first
                                                                    temp___534)
                                                                    (last
                                                                    temp___534)))))))
                                                              (let ((init_val 
                                                                (scan_based_number_ghost
                                                                  str
                                                                  from
                                                                  last_num_init
                                                                  #x0000000A
                                                                  #x00000000)))
                                                                (let ((starts_as_based (and (and 
                                                                  (bool_lt1
                                                                    last_num_init
                                                                    (- to__ 1)) 
                                                                  (let ((temp___529 
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    str) (+ last_num_init 1)))))
                                                                    (or 
                                                                    (ite (= temp___529 35)
                                                                    true
                                                                    false) 
                                                                    (ite (= temp___529 58)
                                                                    true
                                                                    false)))) 
                                                                  (let ((temp___530 
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    str) (+ last_num_init 2)))))
                                                                    (or 
                                                                    (let ((temp___533 temp___530))
                                                                    (and 
                                                                    (ite (<= 48 temp___533)
                                                                    true
                                                                    false) 
                                                                    (ite (<= temp___533 57)
                                                                    true
                                                                    false))) (or 
                                                                    (let ((temp___532 temp___530))
                                                                    (and 
                                                                    (ite (<= 97 temp___532)
                                                                    true
                                                                    false) 
                                                                    (ite (<= temp___532 102)
                                                                    true
                                                                    false))) 
                                                                    (let ((temp___531 temp___530))
                                                                    (and 
                                                                    (ite (<= 65 temp___531)
                                                                    true
                                                                    false) 
                                                                    (ite (<= temp___531 70)
                                                                    true
                                                                    false)))))))))
                                                                  (let ((last_num_based 
                                                                    (ite (= starts_as_based true)
                                                                    (last_hexa_ghost
                                                                    (let ((temp___525 
                                                                    (let ((temp___524 (+ last_num_init 2)))
                                                                    (of_array
                                                                    (to_array
                                                                    str)
                                                                    temp___524
                                                                    to__))))
                                                                    (let ((temp___526 
                                                                    (to_array
                                                                    temp___525)))
                                                                    (of_array
                                                                    temp___526
                                                                    (first
                                                                    temp___525)
                                                                    (last
                                                                    temp___525)))))
                                                                    last_num_init)))
                                                                    (let ((is_based (and (and starts_as_based 
                                                                    (bool_lt1
                                                                    last_num_based
                                                                    to__)) 
                                                                    (bool_eq8
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    str) (+ last_num_based 1)))
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    str) (+ last_num_init 1)))))))
                                                                    (let ((based_val 
                                                                    (ite 
                                                                    (and
                                                                    (= starts_as_based true)
                                                                    (not
                                                                    (= 
                                                                    (rec__ada___system__val_uns__impl__uns_option__overflow
                                                                    (us_split_discrs1
                                                                    init_val)) true)))
                                                                    (scan_based_number_ghost
                                                                    str
                                                                    (+ last_num_init 2)
                                                                    last_num_based
                                                                    (to_rep2
                                                                    (rec__ada___system__val_uns__impl__uns_option__value
                                                                    (us_split_fields1
                                                                    init_val)))
                                                                    #x00000000)
                                                                    init_val)))
                                                                    (let ((first_exp 
                                                                    (ite (= is_based true)
                                                                    (+ last_num_based 2)
                                                                    (+ last_num_init 1))))
                                                                    (let ((expon 
                                                                    (ite (= 
                                                                    (starts_as_exponent_format_ghost
                                                                    (let ((temp___522 
                                                                    (of_array
                                                                    (to_array
                                                                    str)
                                                                    first_exp
                                                                    to__)))
                                                                    (let ((temp___523 
                                                                    (to_array
                                                                    temp___522)))
                                                                    (of_array
                                                                    temp___523
                                                                    (first
                                                                    temp___522)
                                                                    (last
                                                                    temp___522))))
                                                                    (of_int
                                                                    0)) true)
                                                                    (scan_exponent_ghost
                                                                    (let ((temp___519 
                                                                    (of_array
                                                                    (to_array
                                                                    str)
                                                                    first_exp
                                                                    to__)))
                                                                    (let ((temp___520 
                                                                    (to_array
                                                                    temp___519)))
                                                                    (of_array
                                                                    temp___520
                                                                    (first
                                                                    temp___519)
                                                                    (last
                                                                    temp___519))))
                                                                    (of_int
                                                                    0))
                                                                    0)))
                                                                    (let ((base 
                                                                    (ite (= is_based true)
                                                                    (to_rep2
                                                                    (rec__ada___system__val_uns__impl__uns_option__value
                                                                    (us_split_fields1
                                                                    init_val)))
                                                                    #x0000000A)))
                                                                    (let ((value 
                                                                    (ite (= is_based true)
                                                                    (to_rep2
                                                                    (rec__ada___system__val_uns__impl__uns_option__value
                                                                    (us_split_fields1
                                                                    based_val)))
                                                                    (to_rep2
                                                                    (rec__ada___system__val_uns__impl__uns_option__value
                                                                    (us_split_fields1
                                                                    init_val))))))
                                                                    (to_rep2
                                                                    (rec__ada___system__val_uns__impl__uns_option__value
                                                                    (us_split_fields1
                                                                    (exponent_unsigned_ghost
                                                                    value
                                                                    expon
                                                                    base))))))))))))))))))) :pattern (
      (scan_raw_unsigned_ghost
        str
        from
        to__)) ))))

;; raw_unsigned_last_ghost
(declare-fun raw_unsigned_last_ghost (us_t
  Int
  Int) Int)

;; raw_unsigned_last_ghost__function_guard
(declare-fun raw_unsigned_last_ghost__function_guard (Int
  us_t
  Int
  Int) Bool)

(declare-datatypes ((t195s__ref 0))
  (((t195s__refqtmk (t195s__content us_t)))))

;; t195s__ref_t195s__content__projection
(define-fun t195s__ref_t195s__content__projection ((a t195s__ref)) us_t
  (t195s__content a))

(declare-datatypes ((t198s__ref 0))
  (((t198s__refqtmk (t198s__content us_t)))))

;; t198s__ref_t198s__content__projection
(define-fun t198s__ref_t198s__content__projection ((a t198s__ref)) us_t
  (t198s__content a))

(declare-datatypes ((t201s__ref 0))
  (((t201s__refqtmk (t201s__content us_t)))))

;; t201s__ref_t201s__content__projection
(define-fun t201s__ref_t201s__content__projection ((a t201s__ref)) us_t
  (t201s__content a))

(declare-datatypes ((t204s__ref 0))
  (((t204s__refqtmk (t204s__content us_t)))))

;; t204s__ref_t204s__content__projection
(define-fun t204s__ref_t204s__content__projection ((a t204s__ref)) us_t
  (t204s__content a))

(declare-datatypes ((t207s__ref 0))
  (((t207s__refqtmk (t207s__content us_t)))))

;; t207s__ref_t207s__content__projection
(define-fun t207s__ref_t207s__content__projection ((a t207s__ref)) us_t
  (t207s__content a))

;; raw_unsigned_last_ghost__post_axiom
(assert
  (forall ((str us_t))
    (forall ((from Int) (to__ Int))
      (! (=>
           (and
             (and
               (and
                 (dynamic_invariant2 str true true true true)
                 (dynamic_invariant from true true true true))
               (dynamic_invariant to__ true true true true))
             (and
               (and
                 (and
                   (not (= (last str) 2147483647))
                   (and (<= (first str) from) (<= from (last str))))
                 (and (<= from to__) (<= to__ (last str))))
               (let ((temp___564 (to_rep (select (to_array str) from))))
                 (and (<= 48 temp___564) (<= temp___564 57)))))
           (let ((result (raw_unsigned_last_ghost str from to__)))
             (=>
               (raw_unsigned_last_ghost__function_guard result str from to__)
               (and
                 (and (<= from result) (<= result (+ to__ 1)))
                 (dynamic_invariant1 result true false true true))))) :pattern (
      (raw_unsigned_last_ghost
        str
        from
        to__)) ))))

;; raw_unsigned_last_ghost__def_axiom
(assert
  (forall ((str us_t))
    (forall ((from Int) (to__ Int))
      (! (=>
           (and
             (and
               (dynamic_invariant2 str true true true true)
               (dynamic_invariant from true true true true))
             (dynamic_invariant to__ true true true true))
           (and
             (forall ((str1 us_t) (from1 Int) (to__1 Int))
               (last_number_ghost__function_guard
                 (last_number_ghost
                   (let ((temp___588 (of_array (to_array str1) from1 to__1)))
                     (let ((temp___589 (to_array temp___588)))
                       (of_array
                         temp___589
                         (first temp___588)
                         (last temp___588)))))
                 (let ((temp___588 (of_array (to_array str1) from1 to__1)))
                   (let ((temp___589 (to_array temp___588)))
                     (of_array
                       temp___589
                       (first temp___588)
                       (last temp___588))))))
             (and
               (forall ((str1 us_t) (to__1 Int) (last_num_init Int))
                 (last_hexa_ghost__function_guard
                   (last_hexa_ghost
                     (let ((temp___579 (let ((temp___578 (+ last_num_init 2)))
                                         (of_array
                                           (to_array str1)
                                           temp___578
                                           to__1))))
                       (let ((temp___580 (to_array temp___579)))
                         (of_array
                           temp___580
                           (first temp___579)
                           (last temp___579)))))
                   (let ((temp___579 (let ((temp___578 (+ last_num_init 2)))
                                       (of_array
                                         (to_array str1)
                                         temp___578
                                         to__1))))
                     (let ((temp___580 (to_array temp___579)))
                       (of_array
                         temp___580
                         (first temp___579)
                         (last temp___579))))))
               (and
                 (forall ((str1 us_t) (to__1 Int) (first_exp Int))
                   (last_number_ghost__function_guard
                     (last_number_ghost
                       (let ((temp___567 (let ((temp___566 (+ first_exp 2)))
                                           (of_array
                                             (to_array str1)
                                             temp___566
                                             to__1))))
                         (let ((temp___568 (to_array temp___567)))
                           (of_array
                             temp___568
                             (first temp___567)
                             (last temp___567)))))
                     (let ((temp___567 (let ((temp___566 (+ first_exp 2)))
                                         (of_array
                                           (to_array str1)
                                           temp___566
                                           to__1))))
                       (let ((temp___568 (to_array temp___567)))
                         (of_array
                           temp___568
                           (first temp___567)
                           (last temp___567))))))
                 (and
                   (forall ((str1 us_t) (to__1 Int) (first_exp Int))
                     (last_number_ghost__function_guard
                       (last_number_ghost
                         (let ((temp___571 (let ((temp___570 (+ first_exp 1)))
                                             (of_array
                                               (to_array str1)
                                               temp___570
                                               to__1))))
                           (let ((temp___572 (to_array temp___571)))
                             (of_array
                               temp___572
                               (first temp___571)
                               (last temp___571)))))
                       (let ((temp___571 (let ((temp___570 (+ first_exp 1)))
                                           (of_array
                                             (to_array str1)
                                             temp___570
                                             to__1))))
                         (let ((temp___572 (to_array temp___571)))
                           (of_array
                             temp___572
                             (first temp___571)
                             (last temp___571))))))
                   (= (raw_unsigned_last_ghost str from to__) (let ((last_num_init 
                                                                (last_number_ghost
                                                                  (let ((temp___588 
                                                                    (of_array
                                                                    (to_array
                                                                    str)
                                                                    from
                                                                    to__)))
                                                                    (let ((temp___589 
                                                                    (to_array
                                                                    temp___588)))
                                                                    (of_array
                                                                    temp___589
                                                                    (first
                                                                    temp___588)
                                                                    (last
                                                                    temp___588)))))))
                                                                (let ((starts_as_based (and (and 
                                                                  (bool_lt1
                                                                    last_num_init
                                                                    (- to__ 1)) 
                                                                  (let ((temp___583 
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    str) (+ last_num_init 1)))))
                                                                    (or 
                                                                    (ite (= temp___583 35)
                                                                    true
                                                                    false) 
                                                                    (ite (= temp___583 58)
                                                                    true
                                                                    false)))) 
                                                                  (let ((temp___584 
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    str) (+ last_num_init 2)))))
                                                                    (or 
                                                                    (let ((temp___587 temp___584))
                                                                    (and 
                                                                    (ite (<= 48 temp___587)
                                                                    true
                                                                    false) 
                                                                    (ite (<= temp___587 57)
                                                                    true
                                                                    false))) (or 
                                                                    (let ((temp___586 temp___584))
                                                                    (and 
                                                                    (ite (<= 97 temp___586)
                                                                    true
                                                                    false) 
                                                                    (ite (<= temp___586 102)
                                                                    true
                                                                    false))) 
                                                                    (let ((temp___585 temp___584))
                                                                    (and 
                                                                    (ite (<= 65 temp___585)
                                                                    true
                                                                    false) 
                                                                    (ite (<= temp___585 70)
                                                                    true
                                                                    false)))))))))
                                                                  (let ((last_num_based 
                                                                    (ite (= starts_as_based true)
                                                                    (last_hexa_ghost
                                                                    (let ((temp___579 
                                                                    (let ((temp___578 (+ last_num_init 2)))
                                                                    (of_array
                                                                    (to_array
                                                                    str)
                                                                    temp___578
                                                                    to__))))
                                                                    (let ((temp___580 
                                                                    (to_array
                                                                    temp___579)))
                                                                    (of_array
                                                                    temp___580
                                                                    (first
                                                                    temp___579)
                                                                    (last
                                                                    temp___579)))))
                                                                    last_num_init)))
                                                                    (let ((is_based (and (and starts_as_based 
                                                                    (bool_lt1
                                                                    last_num_based
                                                                    to__)) 
                                                                    (bool_eq8
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    str) (+ last_num_based 1)))
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    str) (+ last_num_init 1)))))))
                                                                    (let ((first_exp 
                                                                    (ite (= is_based true)
                                                                    (+ last_num_based 2)
                                                                    (+ last_num_init 1))))
                                                                    (ite 
                                                                    (not
                                                                    (= 
                                                                    (starts_as_exponent_format_ghost
                                                                    (let ((temp___576 
                                                                    (of_array
                                                                    (to_array
                                                                    str)
                                                                    first_exp
                                                                    to__)))
                                                                    (let ((temp___577 
                                                                    (to_array
                                                                    temp___576)))
                                                                    (of_array
                                                                    temp___577
                                                                    (first
                                                                    temp___576)
                                                                    (last
                                                                    temp___576))))
                                                                    (of_int
                                                                    0)) true))
                                                                    first_exp
                                                                    (ite 
                                                                    (let ((temp___575 
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    str) (+ first_exp 1)))))
                                                                    (or
                                                                    (= temp___575 45)
                                                                    (= temp___575 43)))
                                                                    (+ 
                                                                    (last_number_ghost
                                                                    (let ((temp___567 
                                                                    (let ((temp___566 (+ first_exp 2)))
                                                                    (of_array
                                                                    (to_array
                                                                    str)
                                                                    temp___566
                                                                    to__))))
                                                                    (let ((temp___568 
                                                                    (to_array
                                                                    temp___567)))
                                                                    (of_array
                                                                    temp___568
                                                                    (first
                                                                    temp___567)
                                                                    (last
                                                                    temp___567))))) 1)
                                                                    (+ 
                                                                    (last_number_ghost
                                                                    (let ((temp___571 
                                                                    (let ((temp___570 (+ first_exp 1)))
                                                                    (of_array
                                                                    (to_array
                                                                    str)
                                                                    temp___570
                                                                    to__))))
                                                                    (let ((temp___572 
                                                                    (to_array
                                                                    temp___571)))
                                                                    (of_array
                                                                    temp___572
                                                                    (first
                                                                    temp___571)
                                                                    (last
                                                                    temp___571))))) 1)))))))))))))) :pattern (
      (raw_unsigned_last_ghost
        str
        from
        to__)) ))))

;; slide_if_necessary
(declare-fun slide_if_necessary (us_t) us_t)

;; slide_if_necessary__function_guard
(declare-fun slide_if_necessary__function_guard (us_t
  us_t) Bool)

;; slide_to_1
(declare-fun slide_to_1 (us_t) us_t)

;; slide_to_1__function_guard
(declare-fun slide_to_1__function_guard (us_t
  us_t) Bool)

;; slide_if_necessary__post_axiom
(assert
  (forall ((str us_t))
    (! (=>
         (dynamic_invariant2 str true true true true)
         (let ((result (slide_if_necessary str)))
           (and
             (forall ((str1 us_t))
               (only_space_ghost__function_guard
                 (only_space_ghost str1 (first str1) (last str1))
                 str1
                 (first str1)
                 (last str1)))
             (and
               (forall ((result1 us_t))
                 (only_space_ghost__function_guard
                   (only_space_ghost result1 (first result1) (last result1))
                   result1
                   (first result1)
                   (last result1)))
               (=>
                 (slide_if_necessary__function_guard result str)
                 (and
                   (=
                     (= (only_space_ghost str (first str) (last str)) true)
                     (= (only_space_ghost
                          result
                          (first result)
                          (last result)) true))
                   (dynamic_invariant2 result true false true true))))))) :pattern (
    (slide_if_necessary
      str)) )))

;; slide_if_necessary__def_axiom
(assert
  (forall ((str us_t))
    (! (=>
         (dynamic_invariant2 str true true true true)
         (and
           (forall ((str1 us_t))
             (slide_to_1__function_guard (slide_to_1 str1) str1))
           (= (slide_if_necessary str) (ite (= (last str) 2147483647)
                                         (slide_to_1 str)
                                         str)))) :pattern ((slide_if_necessary
                                                             str)) )))

;; is_integer_ghost
(declare-fun is_integer_ghost (us_t) Bool)

;; is_integer_ghost__function_guard
(declare-fun is_integer_ghost__function_guard (Bool
  us_t) Bool)

(declare-datatypes ((t39s__ref 0))
  (((t39s__refqtmk (t39s__content us_t)))))

;; t39s__ref_t39s__content__projection
(define-fun t39s__ref_t39s__content__projection ((a t39s__ref)) us_t
  (t39s__content a))

;; is_integer_ghost__post_axiom
(assert
  (forall ((str us_t))
    (only_space_ghost__function_guard
      (only_space_ghost str (first str) (last str))
      str
      (first str)
      (last str))))

;; is_integer_ghost__def_axiom
(assert
  (forall ((str us_t))
    (! (and
         (forall ((str1 us_t))
           (first_non_space_ghost__function_guard
             (first_non_space_ghost str1 (first str1) (last str1))
             str1
             (first str1)
             (last str1)))
         (and
           (forall ((str1 us_t) (fst_num Int))
             (is_raw_unsigned_format_ghost__function_guard
               (is_raw_unsigned_format_ghost
                 (let ((temp___655 (let ((temp___654 (last str1)))
                                     (of_array
                                       (to_array str1)
                                       fst_num
                                       temp___654))))
                   (let ((temp___656 (to_array temp___655)))
                     (of_array
                       temp___656
                       (first temp___655)
                       (last temp___655)))))
               (let ((temp___655 (let ((temp___654 (last str1)))
                                   (of_array
                                     (to_array str1)
                                     fst_num
                                     temp___654))))
                 (let ((temp___656 (to_array temp___655)))
                   (of_array temp___656 (first temp___655) (last temp___655))))))
           (and
             (forall ((str1 us_t) (fst_num Int))
               (raw_unsigned_overflows_ghost__function_guard
                 (raw_unsigned_overflows_ghost str1 fst_num (last str1))
                 str1
                 fst_num
                 (last str1)))
             (and
               (forall ((str1 us_t) (fst_num Int))
                 (scan_raw_unsigned_ghost__function_guard
                   (scan_raw_unsigned_ghost str1 fst_num (last str1))
                   str1
                   fst_num
                   (last str1)))
               (and
                 (forall ((str1 us_t) (fst_num Int))
                   (scan_raw_unsigned_ghost__function_guard
                     (scan_raw_unsigned_ghost str1 fst_num (last str1))
                     str1
                     fst_num
                     (last str1)))
                 (and
                   (forall ((str1 us_t) (non_blank Int) (fst_num Int))
                     (uns_is_valid_int__function_guard
                       (uns_is_valid_int
                         (bool_eq8
                           (to_rep (select (to_array str1) non_blank))
                           45)
                         (scan_raw_unsigned_ghost str1 fst_num (last str1)))
                       (bool_eq8
                         (to_rep (select (to_array str1) non_blank))
                         45)
                       (scan_raw_unsigned_ghost str1 fst_num (last str1))))
                   (and
                     (forall ((str1 us_t) (fst_num Int))
                       (raw_unsigned_last_ghost__function_guard
                         (raw_unsigned_last_ghost str1 fst_num (last str1))
                         str1
                         fst_num
                         (last str1)))
                     (and
                       (forall ((str1 us_t) (fst_num Int))
                         (raw_unsigned_last_ghost__function_guard
                           (raw_unsigned_last_ghost str1 fst_num (last str1))
                           str1
                           fst_num
                           (last str1)))
                       (and
                         (forall ((str1 us_t) (fst_num Int))
                           (only_space_ghost__function_guard
                             (only_space_ghost
                               str1
                               (raw_unsigned_last_ghost
                                 str1
                                 fst_num
                                 (last str1))
                               (last str1))
                             str1
                             (raw_unsigned_last_ghost
                               str1
                               fst_num
                               (last str1))
                             (last str1)))
                         (=
                           (= (is_integer_ghost str) true)
                           (let ((non_blank (first_non_space_ghost
                                              str
                                              (first str)
                                              (last str))))
                             (let ((fst_num (ite (let ((temp___664 (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    str) non_blank))))
                                                   (or
                                                     (= temp___664 43)
                                                     (= temp___664 45)))
                                              (+ non_blank 1)
                                              non_blank)))
                               (and
                                 (and
                                   (and
                                     (= (is_raw_unsigned_format_ghost
                                          (let ((temp___655 (let ((temp___654 
                                                              (last
                                                                str)))
                                                              (of_array
                                                                (to_array
                                                                  str)
                                                                fst_num
                                                                temp___654))))
                                            (let ((temp___656 (to_array
                                                                temp___655)))
                                              (of_array
                                                temp___656
                                                (first temp___655)
                                                (last temp___655))))) true)
                                     (not
                                       (= (raw_unsigned_overflows_ghost
                                            str
                                            fst_num
                                            (last str)) true)))
                                   (= (uns_is_valid_int
                                        (bool_eq8
                                          (to_rep
                                            (select (to_array str) non_blank))
                                          45)
                                        (scan_raw_unsigned_ghost
                                          str
                                          fst_num
                                          (last str))) true))
                                 (= (only_space_ghost
                                      str
                                      (raw_unsigned_last_ghost
                                        str
                                        fst_num
                                        (last str))
                                      (last str)) true)))))))))))))) :pattern (
    (is_integer_ghost
      str)) )))

;; is_value_integer_ghost
(declare-fun is_value_integer_ghost (us_t
  Int) Bool)

;; is_value_integer_ghost__function_guard
(declare-fun is_value_integer_ghost__function_guard (Bool
  us_t
  Int) Bool)

;; is_value_integer_ghost__post_axiom
(assert
  (and
    (forall ((str us_t))
      (only_space_ghost__function_guard
        (only_space_ghost str (first str) (last str))
        str
        (first str)
        (last str)))
    (forall ((str us_t))
      (is_integer_ghost__function_guard (is_integer_ghost str) str))))

;; is_value_integer_ghost__def_axiom
(assert
  (forall ((str us_t))
    (forall ((val__ Int))
      (! (and
           (forall ((str1 us_t))
             (first_non_space_ghost__function_guard
               (first_non_space_ghost str1 (first str1) (last str1))
               str1
               (first str1)
               (last str1)))
           (and
             (forall ((str1 us_t) (fst_num Int))
               (scan_raw_unsigned_ghost__function_guard
                 (scan_raw_unsigned_ghost str1 fst_num (last str1))
                 str1
                 fst_num
                 (last str1)))
             (and
               (forall ((str1 us_t) (val__1 Int) (non_blank Int) (uval (_ BitVec 32)))
                 (is_int_of_uns__function_guard
                   (is_int_of_uns
                     (bool_eq8
                       (to_rep (select (to_array str1) non_blank))
                       45)
                     uval
                     val__1)
                   (bool_eq8 (to_rep (select (to_array str1) non_blank)) 45)
                   uval
                   val__1))
               (=
                 (= (is_value_integer_ghost str val__) true)
                 (let ((non_blank (first_non_space_ghost
                                    str
                                    (first str)
                                    (last str))))
                   (= (is_int_of_uns
                        (bool_eq8
                          (to_rep (select (to_array str) non_blank))
                          45)
                        (scan_raw_unsigned_ghost
                          str
                          (ite (let ((temp___680 (to_rep
                                                   (select (to_array str) non_blank))))
                                 (or (= temp___680 43) (= temp___680 45)))
                            (+ non_blank 1)
                            non_blank)
                          (last str))
                        val__) true)))))) :pattern ((is_value_integer_ghost
                                                      str
                                                      val__)) ))))

;; value_integer
(declare-fun value_integer (us_t) Int)

;; value_integer__function_guard
(declare-fun value_integer__function_guard (Int
  us_t) Bool)

(declare-const str us_t)

(declare-const val__ Int)

;; only_decimal_ghost
(declare-fun only_decimal_ghost (us_t
  Int
  Int) Bool)

;; only_decimal_ghost__function_guard
(declare-fun only_decimal_ghost__function_guard (Bool
  us_t
  Int
  Int) Bool)

;; only_decimal_ghost__post_axiom
(assert true)

;; only_decimal_ghost__def_axiom
(assert
  (forall ((str1 us_t))
    (forall ((from Int) (to__ Int))
      (! (=
           (= (only_decimal_ghost str1 from to__) true)
           (forall ((j Int))
             (=>
               (and (<= from j) (<= j to__))
               (let ((temp___697 (to_rep (select (to_array str1) j))))
                 (and (<= 48 temp___697) (<= temp___697 57)))))) :pattern (
      (only_decimal_ghost
        str1
        from
        to__)) ))))

;; wrap_option
(declare-fun wrap_option ((_ BitVec 32)) us_rep)

;; wrap_option__function_guard
(declare-fun wrap_option__function_guard (us_rep
  (_ BitVec 32)) Bool)

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const alignment4 Int)

;; value__size_axiom
(assert (<= 0 value__size4))

;; object__size_axiom
(assert (<= 0 object__size4))

;; alignment_axiom
(assert (<= 0 alignment4))

(declare-const ada___system__val_uns__impl__uns_option__overflow__first__bit3 Int)

(declare-const ada___system__val_uns__impl__uns_option__overflow__last__bit3 Int)

(declare-const ada___system__val_uns__impl__uns_option__overflow__position3 Int)

;; ada___system__val_uns__impl__uns_option__overflow__first__bit_axiom
(assert
  (<= 0 ada___system__val_uns__impl__uns_option__overflow__first__bit3))

;; ada___system__val_uns__impl__uns_option__overflow__last__bit_axiom
(assert
  (< ada___system__val_uns__impl__uns_option__overflow__first__bit3 ada___system__val_uns__impl__uns_option__overflow__last__bit3))

;; ada___system__val_uns__impl__uns_option__overflow__position_axiom
(assert (<= 0 ada___system__val_uns__impl__uns_option__overflow__position3))

(declare-const ada___system__val_uns__impl__uns_option__value__first__bit3 Int)

(declare-const ada___system__val_uns__impl__uns_option__value__last__bit3 Int)

(declare-const ada___system__val_uns__impl__uns_option__value__position3 Int)

;; ada___system__val_uns__impl__uns_option__value__first__bit_axiom
(assert (<= 0 ada___system__val_uns__impl__uns_option__value__first__bit3))

;; ada___system__val_uns__impl__uns_option__value__last__bit_axiom
(assert
  (< ada___system__val_uns__impl__uns_option__value__first__bit3 ada___system__val_uns__impl__uns_option__value__last__bit3))

;; ada___system__val_uns__impl__uns_option__value__position_axiom
(assert (<= 0 ada___system__val_uns__impl__uns_option__value__position3))

;; user_eq
(declare-fun user_eq9 (us_rep
  us_rep) Bool)

(declare-const dummy9 us_rep)

(declare-datatypes ((t134s__ref 0))
  (((t134s__refqtmk (t134s__content us_rep)))))

;; t134s__ref_t134s__content__projection
(define-fun t134s__ref_t134s__content__projection ((a t134s__ref)) us_rep
  (t134s__content a))

;; wrap_option__post_axiom
(assert true)

;; wrap_option__def_axiom
(assert
  (forall ((value (_ BitVec 32)))
    (! (=>
         (dynamic_invariant4 value true true true true)
         (= (wrap_option value) (let ((temp___overflow_701 (of_int 0)))
                                  (us_repqtmk
                                    (us_split_discrsqtmk temp___overflow_701)
                                    (us_split_fieldsqtmk (of_rep2 value)))))) :pattern (
    (wrap_option
      value)) )))

(declare-const non_blank Int)

(declare-const minus Bool)

(declare-const fst_num Int)

(declare-const uval (_ BitVec 32))

(declare-datatypes ((t47s__ref 0))
  (((t47s__refqtmk (t47s__content us_t)))))

;; t47s__ref_t47s__content__projection
(define-fun t47s__ref_t47s__content__projection ((a t47s__ref)) us_t
  (t47s__content a))

(declare-sort natural 0)

;; natural'int
(declare-fun naturalqtint (natural) Int)

;; natural'axiom
(assert
  (forall ((i natural))
    (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

;; in_range
(define-fun in_range5 ((x Int)) Bool
  (and (<= 0 x) (<= x 2147483647)))

;; bool_eq
(define-fun bool_eq11 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

;; user_eq
(declare-fun user_eq10 (natural
  natural) Bool)

(declare-const dummy10 natural)

(declare-datatypes ((natural__ref 0))
  (((natural__refqtmk (natural__content natural)))))

;; natural__ref_natural__content__projection
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural
  (natural__content a))

;; dynamic_invariant
(define-fun dynamic_invariant5 ((temp___expr_46 Int) (temp___is_init_42 Bool) (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool) (temp___do_typ_inv_45 Bool)) Bool
  (=>
    (or (= temp___is_init_42 true) (<= 0 2147483647))
    (in_range5 temp___expr_46)))

;; dynamic_invariant
(define-fun dynamic_invariant6 ((temp___expr_88 Int) (temp___is_init_84 Bool) (temp___skip_constant_85 Bool) (temp___do_toplevel_86 Bool) (temp___do_typ_inv_87 Bool)) Bool
  (=> (or (= temp___is_init_84 true) (<= 0 255)) (in_range3 temp___expr_88)))

;; only_number_ghost
(declare-fun only_number_ghost (us_t
  Int
  Int) Bool)

;; only_number_ghost__function_guard
(declare-fun only_number_ghost__function_guard (Bool
  us_t
  Int
  Int) Bool)

;; only_number_ghost__post_axiom
(assert true)

;; only_number_ghost__def_axiom
(assert
  (forall ((str1 us_t))
    (forall ((from Int) (to__ Int))
      (! (=
           (= (only_number_ghost str1 from to__) true)
           (forall ((j Int))
             (=>
               (and (<= from j) (<= j to__))
               (let ((temp___252 (to_rep (select (to_array str1) j))))
                 (or
                   (and (<= 48 temp___252) (<= temp___252 57))
                   (= temp___252 95)))))) :pattern ((only_number_ghost
                                                      str1
                                                      from
                                                      to__)) ))))

;; temp___String_Literal_254
(declare-fun temp___String_Literal_254 (tuple0) (Array Int character))

;; temp___String_Literal_254__def_axiom
(assert true)

;; last_number_ghost__post_axiom
(assert
  (forall ((str1 us_t))
    (! (=>
         (and
           (dynamic_invariant2 str1 true true true true)
           (and
             (not
               (= (let ((temp___263 (temp___String_Literal_254 Tuple0)))
                    (bool_eq5
                      (to_array str1)
                      (first str1)
                      (last str1)
                      temp___263
                      1
                      0)) true))
             (let ((temp___264 (to_rep (select (to_array str1) (first str1)))))
               (and (<= 48 temp___264) (<= temp___264 57)))))
         (let ((result (last_number_ghost str1)))
           (=>
             (last_number_ghost__function_guard result str1)
             (and
               (and
                 (and
                   (and (<= (first str1) result) (<= result (last str1)))
                   (=>
                     (< result (last str1))
                     (= (not (let ((temp___266 (to_rep
                                                 (select (to_array str1) (+ result 1)))))
                               (or (let ((temp___267 temp___266))
                                     (and (ite (<= 48 temp___267) true false) 
                                     (ite (<= temp___267 57)
                                       true
                                       false))) (ite (= temp___266 95)
                                                  true
                                                  false)))) true)))
                 (= (only_number_ghost str1 (first str1) result) true))
               (dynamic_invariant1 result true false true true))))) :pattern (
    (last_number_ghost
      str1)) )))

;; temp___String_Literal_269
(declare-fun temp___String_Literal_269 (tuple0) (Array Int character))

;; temp___String_Literal_269__def_axiom
(assert true)

;; is_natural_format_ghost__post_axiom
(assert true)

;; is_natural_format_ghost__def_axiom
(assert
  (forall ((str1 us_t))
    (! (and
         (forall ((str2 us_t))
           (last_number_ghost__function_guard (last_number_ghost str2) str2))
         (=
           (= (is_natural_format_ghost str1) true)
           (and
             (and
               (not
                 (= (let ((temp___278 (temp___String_Literal_269 Tuple0)))
                      (bool_eq5
                        (to_array str1)
                        (first str1)
                        (last str1)
                        temp___278
                        1
                        0)) true))
               (let ((temp___279 (to_rep
                                   (select (to_array str1) (first str1)))))
                 (and (<= 48 temp___279) (<= temp___279 57))))
             (let ((l (last_number_ghost str1)))
               (and
                 (let ((temp___280 (to_rep (select (to_array str1) l))))
                   (and (<= 48 temp___280) (<= temp___280 57)))
                 (forall ((j Int))
                   (=>
                     (and (<= (first str1) j) (<= j l))
                     (=>
                       (= (to_rep (select (to_array str1) j)) 95)
                       (not (= (to_rep (select (to_array str1) (+ j 1))) 95)))))))))) :pattern (
    (is_natural_format_ghost
      str1)) )))

;; starts_as_exponent_format_ghost__post_axiom
(assert true)

;; starts_as_exponent_format_ghost__def_axiom
(assert
  (forall ((str1 us_t))
    (forall ((real__ Bool))
      (! (=
           (= (starts_as_exponent_format_ghost str1 real__) true)
           (and
             (and
               (< 1 (length str1))
               (let ((temp___342 (to_rep
                                   (select (to_array str1) (first str1)))))
                 (or (= temp___342 69) (= temp___342 101))))
             (let ((minus_sign (bool_eq8
                                 (to_rep
                                   (select (to_array str1) (+ (first str1) 1)))
                                 45)))
               (let ((sign (or (bool_eq8
                                 (to_rep
                                   (select (to_array str1) (+ (first str1) 1)))
                                 43) minus_sign)))
                 (and
                   (and
                     (=> (= minus_sign true) (= real__ true))
                     (=> (= sign true) (< 2 (length str1))))
                   (let ((temp___343 (to_rep
                                       (select (to_array str1) (ite (= sign true)
                                                                 (+ (first
                                                                    str1) 2)
                                                                 (+ (first
                                                                    str1) 1))))))
                     (and (<= 48 temp___343) (<= temp___343 57)))))))) :pattern (
      (starts_as_exponent_format_ghost
        str1
        real__)) ))))

(declare-datatypes ((t89s__ref 0))
  (((t89s__refqtmk (t89s__content us_t)))))

;; t89s__ref_t89s__content__projection
(define-fun t89s__ref_t89s__content__projection ((a t89s__ref)) us_t
  (t89s__content a))

;; is_opt_exponent_format_ghost__post_axiom
(assert true)

;; is_opt_exponent_format_ghost__def_axiom
(assert
  (forall ((str1 us_t))
    (forall ((real__ Bool))
      (! (=
           (= (is_opt_exponent_format_ghost str1 real__) true)
           (or
             (not (= (starts_as_exponent_format_ghost str1 real__) true))
             (= (is_natural_format_ghost
                  (let ((temp___352 (let ((temp___351 (last str1)))
                                      (of_array
                                        (to_array str1)
                                        (ite (let ((temp___355 (to_rep
                                                                 (select 
                                                                 (to_array
                                                                   str1) (+ 
                                                                 (first
                                                                   str1) 1)))))
                                               (or
                                                 (= temp___355 43)
                                                 (= temp___355 45)))
                                          (+ (first str1) 2)
                                          (+ (first str1) 1))
                                        temp___351))))
                    (let ((temp___353 (to_array temp___352)))
                      (of_array
                        temp___353
                        (first temp___352)
                        (last temp___352))))) true))) :pattern ((is_opt_exponent_format_ghost
                                                                  str1
                                                                  real__)) ))))

;; scan_natural_ghost
(declare-fun scan_natural_ghost (us_t
  Int
  Int) Int)

;; scan_natural_ghost__function_guard
(declare-fun scan_natural_ghost__function_guard (Int
  us_t
  Int
  Int) Bool)

;; temp___String_Literal_408
(declare-fun temp___String_Literal_408 (tuple0) (Array Int character))

;; temp___String_Literal_408__def_axiom
(assert true)

;; scan_natural_ghost__def_axiom
(assert
  (forall ((str1 us_t))
    (forall ((p Int) (acc Int))
      (! (=>
           (and
             (and
               (and
                 (dynamic_invariant2 str1 true true true true)
                 (dynamic_invariant5 p true true true true))
               (dynamic_invariant5 acc true true true true))
             (scan_natural_ghost__function_guard
               (scan_natural_ghost str1 p acc)
               str1
               p
               acc))
           (and
             (forall ((str2 us_t) (p1 Int) (acc1 Int))
               (scan_natural_ghost__function_guard
                 (scan_natural_ghost str2 (+ p1 1) acc1)
                 str2
                 (+ p1 1)
                 acc1))
             (and
               (forall ((str2 us_t) (p1 Int) (shift_acc Int))
                 (scan_natural_ghost__function_guard
                   (scan_natural_ghost str2 (+ p1 1) shift_acc)
                   str2
                   (+ p1 1)
                   shift_acc))
               (= (scan_natural_ghost str1 p acc) (ite (or
                                                         (or
                                                           (< (last str1) p)
                                                           (= (not (let ((temp___427 
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    str1) p))))
                                                                    (or 
                                                                    (let ((temp___428 temp___427))
                                                                    (and 
                                                                    (ite (<= 48 temp___428)
                                                                    true
                                                                    false) 
                                                                    (ite (<= temp___428 57)
                                                                    true
                                                                    false))) 
                                                                    (ite (= temp___427 95)
                                                                    true
                                                                    false)))) true))
                                                         (<= 214748364 acc))
                                                    acc
                                                    (ite (= (to_rep
                                                              (select 
                                                              (to_array
                                                                str1) p)) 95)
                                                      (scan_natural_ghost
                                                        str1
                                                        (+ p 1)
                                                        acc)
                                                      (let ((shift_acc (+ (* acc 10) (- 
                                                        (to_rep
                                                          (select (to_array
                                                                    str1) p)) 48))))
                                                        (scan_natural_ghost
                                                          str1
                                                          (+ p 1)
                                                          shift_acc)))))))) :pattern (
      (scan_natural_ghost
        str1
        p
        acc)) ))))

;; scan_natural_ghost__post_axiom
(assert
  (forall ((str1 us_t))
    (forall ((p Int) (acc Int))
      (! (and
           (forall ((str2 us_t))
             (last_number_ghost__function_guard
               (last_number_ghost str2)
               str2))
           (=>
             (and
               (and
                 (and
                   (dynamic_invariant2 str1 true true true true)
                   (dynamic_invariant5 p true true true true))
                 (dynamic_invariant5 acc true true true true))
               (and
                 (and
                   (and
                     (not
                       (= (let ((temp___420 (temp___String_Literal_408
                                              Tuple0)))
                            (bool_eq5
                              (to_array str1)
                              (first str1)
                              (last str1)
                              temp___420
                              1
                              0)) true))
                     (let ((temp___421 (to_rep
                                         (select (to_array str1) (first str1)))))
                       (and (<= 48 temp___421) (<= temp___421 57))))
                   (< (last str1) 2147483647))
                 (and
                   (<= (first str1) p)
                   (<= p (+ (last_number_ghost str1) 1)))))
             (let ((result (scan_natural_ghost str1 p acc)))
               (=>
                 (scan_natural_ghost__function_guard result str1 p acc)
                 (dynamic_invariant5 result true false true true))))) :pattern (
      (scan_natural_ghost
        str1
        p
        acc)) ))))

(declare-datatypes ((t94s__ref 0))
  (((t94s__refqtmk (t94s__content us_t)))))

;; t94s__ref_t94s__content__projection
(define-fun t94s__ref_t94s__content__projection ((a t94s__ref)) us_t
  (t94s__content a))

;; scan_exponent_ghost__post_axiom
(assert
  (forall ((str1 us_t))
    (forall ((real__ Bool))
      (! (=>
           (and
             (dynamic_invariant2 str1 true true true true)
             (and
               (< (last str1) 2147483647)
               (= (starts_as_exponent_format_ghost str1 real__) true)))
           (let ((result (scan_exponent_ghost str1 real__)))
             (=>
               (scan_exponent_ghost__function_guard result str1 real__)
               (and
                 (=> (not (= real__ true)) (<= 0 result))
                 (dynamic_invariant result true false true true))))) :pattern (
      (scan_exponent_ghost
        str1
        real__)) ))))

;; scan_exponent_ghost__def_axiom
(assert
  (forall ((str1 us_t))
    (forall ((real__ Bool))
      (! (=>
           (dynamic_invariant2 str1 true true true true)
           (and
             (forall ((str2 us_t) (start Int))
               (scan_natural_ghost__function_guard
                 (scan_natural_ghost
                   (let ((temp___436 (let ((temp___435 (last str2)))
                                       (of_array
                                         (to_array str2)
                                         start
                                         temp___435))))
                     (let ((temp___437 (to_array temp___436)))
                       (of_array
                         temp___437
                         (first temp___436)
                         (last temp___436))))
                   start
                   0)
                 (let ((temp___436 (let ((temp___435 (last str2)))
                                     (of_array
                                       (to_array str2)
                                       start
                                       temp___435))))
                   (let ((temp___437 (to_array temp___436)))
                     (of_array
                       temp___437
                       (first temp___436)
                       (last temp___436))))
                 start
                 0))
             (= (scan_exponent_ghost str1 real__) (let ((plus_sign (bool_eq8
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    str1) (+ 
                                                                    (first
                                                                    str1) 1)))
                                                                    43)))
                                                    (let ((minus_sign 
                                                      (bool_eq8
                                                        (to_rep
                                                          (select (to_array
                                                                    str1) (+ 
                                                          (first
                                                            str1) 1)))
                                                        45)))
                                                      (let ((sign (or plus_sign minus_sign)))
                                                        (let ((start 
                                                          (ite (= sign true)
                                                            (+ (first str1) 2)
                                                            (+ (first str1) 1))))
                                                          (let ((value 
                                                            (scan_natural_ghost
                                                              (let ((temp___436 
                                                                (let ((temp___435 
                                                                  (last
                                                                    str1)))
                                                                  (of_array
                                                                    (to_array
                                                                    str1)
                                                                    start
                                                                    temp___435))))
                                                                (let ((temp___437 
                                                                  (to_array
                                                                    temp___436)))
                                                                  (of_array
                                                                    temp___437
                                                                    (first
                                                                    temp___436)
                                                                    (last
                                                                    temp___436))))
                                                              start
                                                              0)))
                                                            (ite (= minus_sign true)
                                                              (- value)
                                                              value))))))))) :pattern (
      (scan_exponent_ghost
        str1
        real__)) ))))

;; only_hexa_ghost__post_axiom
(assert true)

;; only_hexa_ghost__def_axiom
(assert
  (forall ((str1 us_t))
    (forall ((from Int) (to__ Int))
      (! (=
           (= (only_hexa_ghost str1 from to__) true)
           (forall ((j Int))
             (=>
               (and (<= from j) (<= j to__))
               (let ((temp___290 (to_rep (select (to_array str1) j))))
                 (or
                   (and (<= 48 temp___290) (<= temp___290 57))
                   (or
                     (and (<= 97 temp___290) (<= temp___290 102))
                     (or
                       (and (<= 65 temp___290) (<= temp___290 70))
                       (= temp___290 95)))))))) :pattern ((only_hexa_ghost
                                                            str1
                                                            from
                                                            to__)) ))))

;; temp___String_Literal_294
(declare-fun temp___String_Literal_294 (tuple0) (Array Int character))

;; temp___String_Literal_294__def_axiom
(assert true)

;; last_hexa_ghost__post_axiom
(assert
  (forall ((str1 us_t))
    (! (=>
         (and
           (dynamic_invariant2 str1 true true true true)
           (and
             (not
               (= (let ((temp___308 (temp___String_Literal_294 Tuple0)))
                    (bool_eq5
                      (to_array str1)
                      (first str1)
                      (last str1)
                      temp___308
                      1
                      0)) true))
             (let ((temp___309 (to_rep (select (to_array str1) (first str1)))))
               (or
                 (and (<= 48 temp___309) (<= temp___309 57))
                 (or
                   (and (<= 97 temp___309) (<= temp___309 102))
                   (and (<= 65 temp___309) (<= temp___309 70)))))))
         (let ((result (last_hexa_ghost str1)))
           (=>
             (last_hexa_ghost__function_guard result str1)
             (and
               (and
                 (and
                   (and (<= (first str1) result) (<= result (last str1)))
                   (=>
                     (< result (last str1))
                     (= (not (let ((temp___314 (to_rep
                                                 (select (to_array str1) (+ result 1)))))
                               (or (let ((temp___317 temp___314))
                                     (and (ite (<= 48 temp___317) true false) 
                                     (ite (<= temp___317 57)
                                       true
                                       false))) (or (let ((temp___316 temp___314))
                                                      (and (ite (<= 97 temp___316)
                                                             true
                                                             false) (ite (<= temp___316 102)
                                                                    true
                                                                    false))) (or 
                               (let ((temp___315 temp___314))
                                 (and (ite (<= 65 temp___315) true false) 
                                 (ite (<= temp___315 70)
                                   true
                                   false))) (ite (= temp___314 95)
                                              true
                                              false)))))) true)))
                 (= (only_hexa_ghost str1 (first str1) result) true))
               (dynamic_invariant1 result true false true true))))) :pattern (
    (last_hexa_ghost
      str1)) )))

;; temp___String_Literal_319
(declare-fun temp___String_Literal_319 (tuple0) (Array Int character))

;; temp___String_Literal_319__def_axiom
(assert true)

;; is_based_format_ghost__post_axiom
(assert true)

;; is_based_format_ghost__def_axiom
(assert
  (forall ((str1 us_t))
    (! (and
         (forall ((str2 us_t))
           (last_hexa_ghost__function_guard (last_hexa_ghost str2) str2))
         (=
           (= (is_based_format_ghost str1) true)
           (and
             (and
               (not
                 (= (let ((temp___330 (temp___String_Literal_319 Tuple0)))
                      (bool_eq5
                        (to_array str1)
                        (first str1)
                        (last str1)
                        temp___330
                        1
                        0)) true))
               (let ((temp___331 (to_rep
                                   (select (to_array str1) (first str1)))))
                 (or
                   (and (<= 48 temp___331) (<= temp___331 57))
                   (or
                     (and (<= 97 temp___331) (<= temp___331 102))
                     (and (<= 65 temp___331) (<= temp___331 70))))))
             (let ((l (last_hexa_ghost str1)))
               (and
                 (not (= (to_rep (select (to_array str1) l)) 95))
                 (forall ((j Int))
                   (=>
                     (and (<= (first str1) j) (<= j l))
                     (=>
                       (= (to_rep (select (to_array str1) j)) 95)
                       (not (= (to_rep (select (to_array str1) (+ j 1))) 95)))))))))) :pattern (
    (is_based_format_ghost
      str1)) )))

;; hexa_to_unsigned_ghost__post_axiom
(assert
  (forall ((x Int))
    (! (=>
         (and
           (dynamic_invariant6 x true true true true)
           (or
             (and (<= 48 x) (<= x 57))
             (or (and (<= 97 x) (<= x 102)) (and (<= 65 x) (<= x 70)))))
         (let ((result (hexa_to_unsigned_ghost x)))
           (=>
             (hexa_to_unsigned_ghost__function_guard result x)
             (dynamic_invariant4 result true false true true)))) :pattern (
    (hexa_to_unsigned_ghost
      x)) )))

;; hexa_to_unsigned_ghost__def_axiom
(assert
  (forall ((x Int))
    (! (=>
         (dynamic_invariant6 x true true true true)
         (= (hexa_to_unsigned_ghost x) (ite (and (<= 48 x) (<= x 57))
                                         (bvsub ((_ int2bv 32) x) #x00000030)
                                         (ite (and (<= 97 x) (<= x 102))
                                           (bvadd (bvsub ((_ int2bv 32) x) #x00000061) #x0000000A)
                                           (ite (and (<= 65 x) (<= x 70))
                                             (bvadd (bvsub ((_ int2bv 32) x) #x00000041) #x0000000A)
                                             (to_rep2 dummy5)))))) :pattern (
    (hexa_to_unsigned_ghost
      x)) )))

;; scan_overflows_ghost__post_axiom
(assert true)

;; scan_overflows_ghost__def_axiom
(assert
  (forall ((digit (_ BitVec 32)) (base (_ BitVec 32)) (acc (_ BitVec 32)))
    (! (=
         (= (scan_overflows_ghost digit base acc) true)
         (or
           (or (bvuge digit base) (bvugt acc (bvudiv #xFFFFFFFF base)))
           (bvult (bvsub #xFFFFFFFF digit) (bvmul base acc)))) :pattern (
    (scan_overflows_ghost
      digit
      base
      acc)) )))

;; scan_based_number_ghost__post_axiom
(assert true)

(declare-const value__size5 Int)

(declare-const object__size5 Int)

(declare-const alignment5 Int)

;; value__size_axiom
(assert (<= 0 value__size5))

;; object__size_axiom
(assert (<= 0 object__size5))

;; alignment_axiom
(assert (<= 0 alignment5))

(declare-const ada___system__val_uns__impl__uns_option__overflow__first__bit4 Int)

(declare-const ada___system__val_uns__impl__uns_option__overflow__last__bit4 Int)

(declare-const ada___system__val_uns__impl__uns_option__overflow__position4 Int)

;; ada___system__val_uns__impl__uns_option__overflow__first__bit_axiom
(assert
  (<= 0 ada___system__val_uns__impl__uns_option__overflow__first__bit4))

;; ada___system__val_uns__impl__uns_option__overflow__last__bit_axiom
(assert
  (< ada___system__val_uns__impl__uns_option__overflow__first__bit4 ada___system__val_uns__impl__uns_option__overflow__last__bit4))

;; ada___system__val_uns__impl__uns_option__overflow__position_axiom
(assert (<= 0 ada___system__val_uns__impl__uns_option__overflow__position4))

(declare-const ada___system__val_uns__impl__uns_option__value__first__bit4 Int)

(declare-const ada___system__val_uns__impl__uns_option__value__last__bit4 Int)

(declare-const ada___system__val_uns__impl__uns_option__value__position4 Int)

;; ada___system__val_uns__impl__uns_option__value__first__bit_axiom
(assert (<= 0 ada___system__val_uns__impl__uns_option__value__first__bit4))

;; ada___system__val_uns__impl__uns_option__value__last__bit_axiom
(assert
  (< ada___system__val_uns__impl__uns_option__value__first__bit4 ada___system__val_uns__impl__uns_option__value__last__bit4))

;; ada___system__val_uns__impl__uns_option__value__position_axiom
(assert (<= 0 ada___system__val_uns__impl__uns_option__value__position4))

;; user_eq
(declare-fun user_eq11 (us_rep
  us_rep) Bool)

(declare-const dummy11 us_rep)

(declare-datatypes ((t123s__ref 0))
  (((t123s__refqtmk (t123s__content us_rep)))))

;; t123s__ref_t123s__content__projection
(define-fun t123s__ref_t123s__content__projection ((a t123s__ref)) us_rep
  (t123s__content a))

(declare-const value__size6 Int)

(declare-const object__size6 Int)

(declare-const alignment6 Int)

;; value__size_axiom
(assert (<= 0 value__size6))

;; object__size_axiom
(assert (<= 0 object__size6))

;; alignment_axiom
(assert (<= 0 alignment6))

(declare-const ada___system__val_uns__impl__uns_option__overflow__first__bit5 Int)

(declare-const ada___system__val_uns__impl__uns_option__overflow__last__bit5 Int)

(declare-const ada___system__val_uns__impl__uns_option__overflow__position5 Int)

;; ada___system__val_uns__impl__uns_option__overflow__first__bit_axiom
(assert
  (<= 0 ada___system__val_uns__impl__uns_option__overflow__first__bit5))

;; ada___system__val_uns__impl__uns_option__overflow__last__bit_axiom
(assert
  (< ada___system__val_uns__impl__uns_option__overflow__first__bit5 ada___system__val_uns__impl__uns_option__overflow__last__bit5))

;; ada___system__val_uns__impl__uns_option__overflow__position_axiom
(assert (<= 0 ada___system__val_uns__impl__uns_option__overflow__position5))

(declare-const ada___system__val_uns__impl__uns_option__value__first__bit5 Int)

(declare-const ada___system__val_uns__impl__uns_option__value__last__bit5 Int)

(declare-const ada___system__val_uns__impl__uns_option__value__position5 Int)

;; ada___system__val_uns__impl__uns_option__value__first__bit_axiom
(assert (<= 0 ada___system__val_uns__impl__uns_option__value__first__bit5))

;; ada___system__val_uns__impl__uns_option__value__last__bit_axiom
(assert
  (< ada___system__val_uns__impl__uns_option__value__first__bit5 ada___system__val_uns__impl__uns_option__value__last__bit5))

;; ada___system__val_uns__impl__uns_option__value__position_axiom
(assert (<= 0 ada___system__val_uns__impl__uns_option__value__position5))

;; user_eq
(declare-fun user_eq12 (us_rep
  us_rep) Bool)

(declare-const dummy12 us_rep)

(declare-datatypes ((t124s__ref 0))
  (((t124s__refqtmk (t124s__content us_rep)))))

;; t124s__ref_t124s__content__projection
(define-fun t124s__ref_t124s__content__projection ((a t124s__ref)) us_rep
  (t124s__content a))

;; exponent_unsigned_ghost__def_axiom
(assert
  (forall ((value (_ BitVec 32)) (base (_ BitVec 32)))
    (forall ((exp1 Int))
      (! (=>
           (and
             (and
               (dynamic_invariant4 value true true true true)
               (dynamic_invariant5 exp1 true true true true))
             (dynamic_invariant4 base true true true true))
           (= (exponent_unsigned_ghost value exp1 base) (ite (or
                                                               (= exp1 0)
                                                               (= value #x00000000))
                                                          (let ((temp___overflow_443 
                                                            (of_int
                                                              0)))
                                                            (us_repqtmk
                                                              (us_split_discrsqtmk
                                                                temp___overflow_443)
                                                              (us_split_fieldsqtmk
                                                                (of_rep2
                                                                  value))))
                                                          (ite (= (scan_overflows_ghost
                                                                    #x00000000
                                                                    base
                                                                    value) true)
                                                            (let ((temp___overflow_444 
                                                              (of_int
                                                                1)))
                                                              (us_repqtmk
                                                                (us_split_discrsqtmk
                                                                  temp___overflow_444)
                                                                (us_split_fieldsqtmk
                                                                  dummy5)))
                                                            (exponent_unsigned_ghost
                                                              (bvmul value base)
                                                              (- exp1 1)
                                                              base))))) :pattern (
      (exponent_unsigned_ghost
        value
        exp1
        base)) ))))

;; exponent_unsigned_ghost__post_axiom
(assert true)

(declare-datatypes ((tresS__ref 0))
  (((tresS__refqtmk (tresS__content us_t)))))

;; tresS__ref_tresS__content__projection
(define-fun tresS__ref_tresS__content__projection ((a tresS__ref)) us_t
  (tresS__content a))

;; slide_to_1__post_axiom
(assert
  (forall ((str1 us_t))
    (! (=>
         (dynamic_invariant2 str1 true true true true)
         (let ((result (slide_to_1 str1)))
           (and
             (forall ((str2 us_t))
               (only_space_ghost__function_guard
                 (only_space_ghost str2 (first str2) (last str2))
                 str2
                 (first str2)
                 (last str2)))
             (=>
               (slide_to_1__function_guard result str1)
               (and
                 (=
                   (= (only_space_ghost str1 (first str1) (last str1)) true)
                   (forall ((j Int))
                     (=>
                       (and (<= (first str1) j) (<= j (last str1)))
                       (= (to_rep
                            (select (to_array result) (+ (- j (first str1)) 1))) 32))))
                 (dynamic_invariant2 result true false true true)))))) :pattern (
    (slide_to_1
      str1)) )))

;; slide_to_1__def_axiom
(assert
  (forall ((str1 us_t))
    (! (=>
         (dynamic_invariant2 str1 true true true true)
         (= (slide_to_1 str1) (let ((res (let ((temp___627 (slide
                                                             (to_array str1)
                                                             (first str1)
                                                             1)))
                                           (of_array
                                             temp___627
                                             1
                                             (length str1)))))
                                (let ((temp___626 (to_array res)))
                                  (of_array
                                    temp___626
                                    (first res)
                                    (last res)))))) :pattern ((slide_to_1
                                                                str1)) )))

;; value_integer__post_axiom
(assert
  (forall ((str1 us_t))
    (! (and
         (forall ((str2 us_t))
           (only_space_ghost__function_guard
             (only_space_ghost str2 (first str2) (last str2))
             str2
             (first str2)
             (last str2)))
         (and
           (forall ((str2 us_t))
             (slide_if_necessary__function_guard
               (slide_if_necessary str2)
               str2))
           (and
             (forall ((str2 us_t))
               (slide_if_necessary__function_guard
                 (slide_if_necessary str2)
                 str2))
             (and
               (forall ((str2 us_t))
                 (is_integer_ghost__function_guard
                   (is_integer_ghost (slide_if_necessary str2))
                   (slide_if_necessary str2)))
               (=>
                 (and
                   (dynamic_invariant2 str1 true true true true)
                   (and
                     (and
                       (not
                         (= (only_space_ghost str1 (first str1) (last str1)) true))
                       (not (= (length str1) 2147483647)))
                     (= (is_integer_ghost (slide_if_necessary str1)) true)))
                 (let ((result (value_integer str1)))
                   (and
                     (forall ((str2 us_t))
                       (slide_if_necessary__function_guard
                         (slide_if_necessary str2)
                         str2))
                     (and
                       (forall ((str2 us_t))
                         (slide_if_necessary__function_guard
                           (slide_if_necessary str2)
                           str2))
                       (and
                         (forall ((str2 us_t) (result1 Int))
                           (is_value_integer_ghost__function_guard
                             (is_value_integer_ghost
                               (slide_if_necessary str2)
                               result1)
                             (slide_if_necessary str2)
                             result1))
                         (=>
                           (value_integer__function_guard result str1)
                           (and
                             (= (is_value_integer_ghost
                                  (slide_if_necessary str1)
                                  result) true)
                             (dynamic_invariant result true false true true)))))))))))) :pattern (
    (value_integer
      str1)) )))

(declare-const str1 us_t)

;; dynamic_invariant
(define-fun dynamic_invariant7 ((temp___expr_612 us_t) (temp___is_init_608 Bool) (temp___skip_constant_609 Bool) (temp___do_toplevel_610 Bool) (temp___do_typ_inv_611 Bool)) Bool
  (=>
    (not (= temp___skip_constant_609 true))
    (and
      (and
        (dynamic_property
          1
          (length str1)
          (first temp___expr_612)
          (last temp___expr_612))
        (= (first temp___expr_612) 1))
      (= (last temp___expr_612) (length str1)))))

;; default_initial_assumption
(define-fun default_initial_assumption1 ((temp___expr_614 us_t) (temp___skip_top_level_615 Bool)) Bool
  (and
    (= (first temp___expr_614) 1)
    (= (last temp___expr_614) (length str1))))

;; non_blank__def_axiom
(assert
  (and
    (first_non_space_ghost__function_guard
      (first_non_space_ghost str (first str) (last str))
      str
      (first str)
      (last str))
    (= non_blank (first_non_space_ghost str (first str) (last str)))))

;; minus__def_axiom
(assert (= minus (bool_eq8 (to_rep (select (to_array str) non_blank)) 45)))

;; fst_num__def_axiom
(assert (= fst_num (ite (= minus true) (+ non_blank 1) non_blank)))

;; uval__def_axiom
(assert
  (and
    (scan_raw_unsigned_ghost__function_guard
      (scan_raw_unsigned_ghost str fst_num (last str))
      str
      fst_num
      (last str))
    (= uval (scan_raw_unsigned_ghost str fst_num (last str)))))

;; Assume
(assert (dynamic_invariant2 str true false true true))

;; Assume
(assert (dynamic_invariant val__ true false true true))

;; Assume
(assert
  (and
    (and
      (and
        (and
          (and (not (= (last str) 2147483647)) (<= 2 (length str)))
          (let ((temp___874 (to_rep (select (to_array str) (first str)))))
            (or (= temp___874 32) (= temp___874 45))))
        (= (= (to_rep (select (to_array str) (first str))) 45) (< val__ 0)))
      (= (only_decimal_ghost str (+ (first str) 1) (last str)) true))
    (= (bool_eq10
         (scan_based_number_ghost
           str
           (+ (first str) 1)
           (last str)
           #x0000000A
           #x00000000)
         (wrap_option (abs_uns_of_int val__))) true)))

;; H
(assert
  (first_non_space_ghost__function_guard
    (first_non_space_ghost str (first str) (last str))
    str
    (first str)
    (last str)))

;; H
(assert
  (dynamic_invariant1
    (first_non_space_ghost str (first str) (last str))
    true
    false
    true
    true))

;; H
(assert (<= (first str) (first_non_space_ghost str (first str) (last str))))

;; H
(assert (<= (first_non_space_ghost str (first str) (last str)) (last str)))

;; H
(assert
  (not
    (= (to_rep
         (select (to_array str) (first_non_space_ghost
                                  str
                                  (first str)
                                  (last str)))) 32)))

;; H
(assert
  (and
    (only_space_ghost__function_guard
      (only_space_ghost
        str
        (first str)
        (- (first_non_space_ghost str (first str) (last str)) 1))
      str
      (first str)
      (- (first_non_space_ghost str (first str) (last str)) 1))
    (= (only_space_ghost
         str
         (first str)
         (- (first_non_space_ghost str (first str) (last str)) 1)) true)))

;; Assume
(assert (= (first_non_space_ghost str (first str) (last str)) non_blank))

;; Assume
(assert (dynamic_invariant1 non_blank true false true true))

;; Assert
(assert
  (and
    (only_space_ghost__function_guard
      (only_space_ghost str (first str) (first str))
      str
      (first str)
      (first str))
    (ite (< val__ 0)
      (= non_blank (first str))
      (and
        (= (only_space_ghost str (first str) (first str)) true)
        (= non_blank (+ (first str) 1))))))

;; Assert
(assert (and (<= (first str) non_blank) (<= non_blank (last str))))

;; ada___system__val_int__impl__prove_scan_only_decimal_ghost__minus__assume
(define-fun ada___system__val_int__impl__prove_scan_only_decimal_ghost__minus__assume 
  () Bool
  (ite (= (to_rep (select (to_array str) non_blank)) 45) true false))

;; Assume
(assert
  (= ada___system__val_int__impl__prove_scan_only_decimal_ghost__minus__assume 
  minus))

(declare-const ada___system__val_int__impl__prove_scan_only_decimal_ghost__fst_num__assume Int)

;; H
(assert
  (ite (= minus true)
    (let ((o (+ non_blank 1)))
      (and
        (= ada___system__val_int__impl__prove_scan_only_decimal_ghost__fst_num__assume o)
        (in_range1 o)))
    (= ada___system__val_int__impl__prove_scan_only_decimal_ghost__fst_num__assume 
    non_blank)))

;; Assume
(assert
  (= ada___system__val_int__impl__prove_scan_only_decimal_ghost__fst_num__assume 
  fst_num))

;; Assume
(assert (dynamic_invariant1 fst_num true false true true))

;; Assert
(assert (= fst_num (+ (first str) 1)))

;; Goal def'vc
;; File "s-valuei.ads", line 258, characters 0-0
(assert
  (not
  (=>
    (raw_unsigned_overflows_ghost__function_guard
      (raw_unsigned_overflows_ghost str fst_num (last str))
      str
      fst_num
      (last str))
    (not (= (raw_unsigned_overflows_ghost str fst_num (last str)) true)))))

(check-sat)
(exit)
