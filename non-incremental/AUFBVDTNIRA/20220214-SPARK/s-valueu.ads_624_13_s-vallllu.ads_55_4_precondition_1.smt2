(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTNIRA)
(set-info :source |
Generated by: Yannick Moy
Generated on: 2022-02-14
Generator: GNATprove
Application: GNAT light runtime library
Target solver: Alt-Ergo, CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)

;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
  (((Tuple0))))

(declare-sort us_private 0)

;; private__bool_eq
(declare-fun private__bool_eq (us_private
  us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
  (((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))

(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
  (((int__refqtmk (int__content Int)))))

(declare-datatypes ((bool__ref 0))
  (((bool__refqtmk (bool__content Bool)))))

(declare-datatypes ((us_fixed__ref 0))
  (((us_fixed__refqtmk (us_fixed__content Int)))))

(declare-datatypes ((real__ref 0))
  (((real__refqtmk (real__content Real)))))

(declare-datatypes ((us_private__ref 0))
  (((us_private__refqtmk (us_private__content us_private)))))

;; int__ref___projection
(define-fun int__ref___projection ((a int__ref)) Int
  (int__content a))

;; __fixed__ref___projection
(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int
  (us_fixed__content a))

;; bool__ref___projection
(define-fun bool__ref___projection ((a bool__ref)) Bool
  (bool__content a))

;; real__ref___projection
(define-fun real__ref___projection ((a real__ref)) Real
  (real__content a))

;; __private__ref___projection
(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

;; nth
(declare-fun nth ((_ BitVec 128)
  Int) Bool)

;; lsr
(declare-fun lsr ((_ BitVec 128)
  Int) (_ BitVec 128))

;; asr
(declare-fun asr ((_ BitVec 128)
  Int) (_ BitVec 128))

;; lsl
(declare-fun lsl ((_ BitVec 128)
  Int) (_ BitVec 128))

;; abs
(define-fun abs1 ((x Int)) Int
  (ite (<= 0 x) x (- x)))

;; Abs_le
(assert
  (forall ((x Int) (y Int)) (= (<= (abs1 x) y) (and (<= (- y) x) (<= x y)))))

;; Abs_pos
(assert (forall ((x Int)) (<= 0 (abs1 x))))

;; Div_unique
(assert
  (forall ((x Int) (y Int) (q Int))
    (=>
      (< 0 y)
      (=> (and (<= (* q y) x) (< x (+ (* q y) y))) (= (div x y) q)))))

;; Div_bound
(assert
  (forall ((x Int) (y Int))
    (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div x y)) (<= (div x y) x)))))

;; Div_inf
(assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div x y) 0))))

;; Div_inf_neg
(assert
  (forall ((x Int) (y Int))
    (=> (and (< 0 x) (<= x y)) (= (div (- x) y) (- 1)))))

;; Mod_0
(assert (forall ((y Int)) (=> (not (= y 0)) (= (mod 0 y) 0))))

;; Div_1_left
(assert (forall ((y Int)) (=> (< 1 y) (= (div 1 y) 0))))

;; Div_minus1_left
(assert (forall ((y Int)) (=> (< 1 y) (= (div (- 1) y) (- 1)))))

;; Mod_1_left
(assert (forall ((y Int)) (=> (< 1 y) (= (mod 1 y) 1))))

;; Mod_minus1_left
(assert
  (forall ((y Int))
    (! (=> (< 1 y) (= (mod (- 1) y) (- y 1))) :pattern ((mod (- 1) y)) )))

;; Div_mult
(assert
  (forall ((x Int) (y Int) (z Int))
    (! (=> (< 0 x) (= (div (+ (* x y) z) x) (+ y (div z x)))) :pattern ((div (+ (* x y) z) x)) )))

;; Mod_mult
(assert
  (forall ((x Int) (y Int) (z Int))
    (! (=> (< 0 x) (= (mod (+ (* x y) z) x) (mod z x))) :pattern ((mod (+ (* x y) z) x)) )))

;; rotate_right
(declare-fun rotate_right1 ((_ BitVec 128)
  Int) (_ BitVec 128))

;; rotate_left
(declare-fun rotate_left1 ((_ BitVec 128)
  Int) (_ BitVec 128))

;; pow2
(declare-fun pow2 (Int) Int)

(declare-const two_power_size_minus_one Int)

;; two_power_size_minus_one_val
(assert (= two_power_size_minus_one (pow2 (- 128 1))))

;; to_int
(define-fun to_int1 ((x (_ BitVec 128))) Int
  (ite (bvsge x (_ bv0 128))
    (bv2nat x)
    (- (- 340282366920938463463374607431768211456 (bv2nat x)))))

;; uint_in_range
(define-fun uint_in_range ((i Int)) Bool
  (and (<= 0 i) (<= i 340282366920938463463374607431768211455)))

;; lsr_bv_is_lsr
(assert
  (forall ((x (_ BitVec 128)) (n (_ BitVec 128)))
    (= (bvlshr x n) (lsr x (bv2nat n)))))

;; asr_bv_is_asr
(assert
  (forall ((x (_ BitVec 128)) (n (_ BitVec 128)))
    (= (bvashr x n) (asr x (bv2nat n)))))

;; lsl_bv_is_lsl
(assert
  (forall ((x (_ BitVec 128)) (n (_ BitVec 128)))
    (= (bvshl x n) (lsl x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
(assert
  (forall ((v (_ BitVec 128)) (n (_ BitVec 128)))
    (= (bvor (bvshl v (bvurem n (_ bv128 128))) (bvlshr v (bvsub (_ bv128 128) (bvurem n (_ bv128 128))))) 
    (rotate_left1
      v
      (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
(assert
  (forall ((v (_ BitVec 128)) (n (_ BitVec 128)))
    (= (bvor (bvlshr v (bvurem n (_ bv128 128))) (bvshl v (bvsub (_ bv128 128) (bvurem n (_ bv128 128))))) 
    (rotate_right1
      v
      (bv2nat n)))))

;; nth_bv
(declare-fun nth_bv ((_ BitVec 128)
  (_ BitVec 128)) Bool)

;; nth_bv_def
(assert
  (forall ((x (_ BitVec 128)) (i (_ BitVec 128)))
    (=
      (= (nth_bv x i) true)
      (not
        (= (bvand (bvlshr x i) #x00000000000000000000000000000001) #x00000000000000000000000000000000)))))

;; Nth_bv_is_nth
(assert
  (forall ((x (_ BitVec 128)) (i (_ BitVec 128)))
    (= (nth x (bv2nat i)) (nth_bv x i))))

;; Nth_bv_is_nth2
(assert
  (forall ((x (_ BitVec 128)) (i Int))
    (=>
      (and (<= 0 i) (< i 340282366920938463463374607431768211456))
      (= (nth_bv x ((_ int2bv 128) i)) (nth x i)))))

;; eq_sub_bv
(declare-fun eq_sub_bv ((_ BitVec 128)
  (_ BitVec 128)
  (_ BitVec 128)
  (_ BitVec 128)) Bool)

;; eq_sub_bv_def
(assert
  (forall ((a (_ BitVec 128)) (b (_ BitVec 128)) (i (_ BitVec 128)) (n (_ BitVec 128)))
    (let ((mask (bvshl (bvsub (bvshl #x00000000000000000000000000000001 n) #x00000000000000000000000000000001) i)))
      (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))

;; eq_sub
(define-fun eq_sub ((a (_ BitVec 128)) (b (_ BitVec 128)) (i Int) (n Int)) Bool
  (forall ((j Int))
    (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

;; eq_sub_equiv
(assert
  (forall ((a (_ BitVec 128)) (b (_ BitVec 128)) (i (_ BitVec 128)) (n (_ BitVec 128)))
    (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))

(declare-datatypes ((t__ref 0))
  (((t__refqtmk (t__content (_ BitVec 128))))))

;; bool_eq
(define-fun bool_eq ((x (_ BitVec 128)) (y (_ BitVec 128))) Bool
  (ite (= x y) true false))

;; bool_ne
(define-fun bool_ne ((x (_ BitVec 128)) (y (_ BitVec 128))) Bool
  (ite (not (= x y)) true false))

;; bool_lt
(define-fun bool_lt ((x (_ BitVec 128)) (y (_ BitVec 128))) Bool
  (ite (bvult x y) true false))

;; bool_le
(define-fun bool_le ((x (_ BitVec 128)) (y (_ BitVec 128))) Bool
  (ite (bvule x y) true false))

;; bool_gt
(define-fun bool_gt ((x (_ BitVec 128)) (y (_ BitVec 128))) Bool
  (ite (bvugt x y) true false))

;; bool_ge
(define-fun bool_ge ((x (_ BitVec 128)) (y (_ BitVec 128))) Bool
  (ite (bvuge x y) true false))

;; power
(declare-fun power ((_ BitVec 128)
  Int) (_ BitVec 128))

;; Power_0
(assert
  (forall ((x (_ BitVec 128)))
    (= (power x 0) #x00000000000000000000000000000001)))

;; Power_1
(assert (forall ((x (_ BitVec 128))) (= (power x 1) x)))

;; Power_s
(assert
  (forall ((x (_ BitVec 128)) (n Int))
    (=> (<= 0 n) (= (power x (+ n 1)) (bvmul x (power x n))))))

;; Power_s_alt
(assert
  (forall ((x (_ BitVec 128)) (n Int))
    (=> (< 0 n) (= (power x n) (bvmul x (power x (- n 1)))))))

;; Power_sum
(assert
  (forall ((x (_ BitVec 128)) (n Int) (m Int))
    (=>
      (<= 0 n)
      (=> (<= 0 m) (= (power x (+ n m)) (bvmul (power x n) (power x m)))))))

;; Power_mult
(assert
  (forall ((x (_ BitVec 128)) (n Int) (m Int))
    (=> (<= 0 n) (=> (<= 0 m) (= (power x (* n m)) (power (power x n) m))))))

;; Power_mult2
(assert
  (forall ((x (_ BitVec 128)) (y (_ BitVec 128)) (n Int))
    (=> (<= 0 n) (= (power (bvmul x y) n) (bvmul (power x n) (power y n))))))

;; bv_min
(define-fun bv_min ((x (_ BitVec 128)) (y (_ BitVec 128))) (_ BitVec 128)
  (ite (bvule x y) x y))

;; bv_max
(define-fun bv_max ((x (_ BitVec 128)) (y (_ BitVec 128))) (_ BitVec 128)
  (ite (bvule x y) y x))

;; min
(define-fun min ((x Int) (y Int)) Int
  (ite (<= x y) x y))

;; max
(define-fun max ((x Int) (y Int)) Int
  (ite (<= x y) y x))

;; Min_r
(assert (forall ((x Int) (y Int)) (=> (<= y x) (= (min x y) y))))

;; Max_l
(assert (forall ((x Int) (y Int)) (=> (<= y x) (= (max x y) x))))

;; Min_comm
(assert (forall ((x Int) (y Int)) (= (min x y) (min y x))))

;; Max_comm
(assert (forall ((x Int) (y Int)) (= (max x y) (max y x))))

;; Min_assoc
(assert
  (forall ((x Int) (y Int) (z Int)) (= (min (min x y) z) (min x (min y z)))))

;; Max_assoc
(assert
  (forall ((x Int) (y Int) (z Int)) (= (max (max x y) z) (max x (max y z)))))

;; bv_min_to_uint
(assert
  (forall ((x (_ BitVec 128)) (y (_ BitVec 128)))
    (= (bv2nat (bv_min x y)) (min (bv2nat x) (bv2nat y)))))

;; bv_max_to_uint
(assert
  (forall ((x (_ BitVec 128)) (y (_ BitVec 128)))
    (= (bv2nat (bv_max x y)) (max (bv2nat x) (bv2nat y)))))

;; uc_of_int
(define-fun uc_of_int ((x Int)) (_ BitVec 128)
  (ite (<= 0 x) ((_ int2bv 128) x) (bvneg ((_ int2bv 128) (- x)))))

;; uc_to_int
(define-fun uc_to_int ((x (_ BitVec 128))) Int
  (ite (= (bool_lt x ((_ int2bv 128) two_power_size_minus_one)) true)
    (bv2nat x)
    (- (bv2nat (bvneg x)))))

;; bool_eq
(define-fun bool_eq1 ((x Bool) (y Bool)) Bool
  (ite (= x y) true false))

;; to_int
(define-fun to_int2 ((b Bool)) Int
  (ite (= b true) 1 0))

;; of_int
(define-fun of_int ((i Int)) Bool
  (ite (= i 0) false true))

;; in_range
(define-fun in_range ((x Int)) Bool
  (or (= x 0) (= x 1)))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

;; integer'int
(declare-fun integerqtint (integer) Int)

;; integer'axiom
(assert
  (forall ((i integer))
    (and
      (<= (- 2147483648) (integerqtint i))
      (<= (integerqtint i) 2147483647))))

;; in_range
(define-fun in_range1 ((x Int)) Bool
  (and (<= (- 2147483648) x) (<= x 2147483647)))

;; bool_eq
(define-fun bool_eq2 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

;; user_eq
(declare-fun user_eq (integer
  integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
  (((integer__refqtmk (integer__content integer)))))

;; integer__ref_integer__content__projection
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer
  (integer__content a))

;; dynamic_invariant
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool
  (=>
    (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647))
    (in_range1 temp___expr_18)))

(declare-sort character 0)

;; in_range
(define-fun in_range2 ((x Int)) Bool
  (and (<= 0 x) (<= x 255)))

;; bool_eq
(define-fun bool_eq3 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

;; user_eq
(declare-fun user_eq1 (character
  character) Bool)

(declare-const dummy1 character)

(declare-datatypes ((character__ref 0))
  (((character__refqtmk (character__content character)))))

;; character__ref_character__content__projection
(define-fun character__ref_character__content__projection ((a character__ref)) character
  (character__content a))

;; to_rep
(declare-fun to_rep (character) Int)

;; of_rep
(declare-fun of_rep (Int) character)

;; inversion_axiom
(assert
  (forall ((x character))
    (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
(assert
  (forall ((x character)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
(assert
  (forall ((x Int))
    (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                                (of_rep x))) )))

(declare-datatypes ((map__ref 0))
  (((map__refqtmk (map__content (Array Int character))))))

;; slide
(declare-fun slide ((Array Int character)
  Int
  Int) (Array Int character))

;; slide_eq
(assert
  (forall ((a (Array Int character)))
    (forall ((first Int))
      (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
(assert
  (forall ((a (Array Int character)))
    (forall ((old_first Int))
      (forall ((new_first Int))
        (forall ((i Int))
          (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
          (slide
            a
            old_first
            new_first) i)) ))))))

;; const
(declare-fun const1 (character) (Array Int character))

;; const_def
(assert
  (forall ((v character))
    (forall ((i Int))
      (! (= (select (const1 v) i) v) :pattern ((select (const1 v) i)) ))))

;; bool_eq
(define-fun bool_eq4 ((a (Array Int character)) (a__first Int) (a__last Int) (b (Array Int character)) (b__first Int) (b__last Int)) Bool
  (ite (and
         (ite (<= a__first a__last)
           (and
             (<= b__first b__last)
             (= (- a__last a__first) (- b__last b__first)))
           (< b__last b__first))
         (forall ((temp___idx_105 Int))
           (=>
             (and (<= a__first temp___idx_105) (<= temp___idx_105 a__last))
             (= (to_rep (select a temp___idx_105)) (to_rep
                                                     (select b (+ (- b__first a__first) temp___idx_105)))))))
    true
    false))

;; bool_eq_rev
(assert
  (forall ((a (Array Int character)) (b (Array Int character)))
    (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
      (=>
        (= (bool_eq4 b b__first b__last a a__first a__last) true)
        (and
          (ite (<= a__first a__last)
            (and
              (<= b__first b__last)
              (= (- a__last a__first) (- b__last b__first)))
            (< b__last b__first))
          (forall ((temp___idx_105 Int))
            (=>
              (and (<= a__first temp___idx_105) (<= temp___idx_105 a__last))
              (= (to_rep (select a temp___idx_105)) (to_rep
                                                      (select b (+ (- b__first a__first) temp___idx_105)))))))))))

(declare-sort positive 0)

;; positive'int
(declare-fun positiveqtint (positive) Int)

;; positive'axiom
(assert
  (forall ((i positive))
    (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

;; in_range
(define-fun in_range3 ((x Int)) Bool
  (and (<= 1 x) (<= x 2147483647)))

;; bool_eq
(define-fun bool_eq5 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

;; user_eq
(declare-fun user_eq2 (positive
  positive) Bool)

(declare-const dummy2 positive)

(declare-datatypes ((positive__ref 0))
  (((positive__refqtmk (positive__content positive)))))

;; positive__ref_positive__content__projection
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive
  (positive__content a))

;; to_rep
(define-fun to_rep1 ((x integer)) Int
  (integerqtint x))

;; of_rep
(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
(assert
  (forall ((x integer))
    (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
(assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
(assert
  (forall ((x Int))
    (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                                  (of_rep1 x))) )))

(declare-datatypes ((t 0))
  (((tqtmk (rec__first integer)(rec__last integer)))))

;; mk
(declare-fun mk (Int
  Int) t)

;; mk_def
(assert
  (forall ((f Int) (l Int))
    (! (=>
         (in_range1 f)
         (=>
           (in_range1 l)
           (and
             (= (to_rep1 (rec__first (mk f l))) f)
             (= (to_rep1 (rec__last (mk f l))) l)))) :pattern ((mk f l)) )))

;; dynamic_property
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool
  (and
    (in_range1 low)
    (and
      (in_range1 high)
      (=> (<= low high) (and (in_range3 low) (in_range3 high))))))

(declare-datatypes ((us_t 0))
  (((us_tqtmk (elts (Array Int character))(rt t)))))

;; to_array
(define-fun to_array ((a us_t)) (Array Int character)
  (elts a))

;; of_array
(define-fun of_array ((a (Array Int character)) (f Int) (l Int)) us_t
  (us_tqtmk a (mk f l)))

;; first
(define-fun first ((a us_t)) Int
  (to_rep1 (rec__first (rt a))))

;; last
(define-fun last ((a us_t)) Int
  (to_rep1 (rec__last (rt a))))

;; length
(define-fun length ((a us_t)) Int
  (ite (<= (first a) (last a)) (+ (- (last a) (first a)) 1) 0))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
(assert (<= 0 value__size))

;; object__size_axiom
(assert (<= 0 object__size))

;; component__size_axiom
(assert (<= 0 component__size))

;; alignment_axiom
(assert (<= 0 alignment))

;; bool_eq
(define-fun bool_eq6 ((x us_t) (y us_t)) Bool
  (bool_eq4
    (elts x)
    (to_rep1 (rec__first (rt x)))
    (to_rep1 (rec__last (rt x)))
    (elts y)
    (to_rep1 (rec__first (rt y)))
    (to_rep1 (rec__last (rt y)))))

;; user_eq
(declare-fun user_eq3 (us_t
  us_t) Bool)

(declare-const dummy3 us_t)

(declare-datatypes ((string____ref 0))
  (((string____refqtmk (string____content us_t)))))

;; string____ref_string____content__projection
(define-fun string____ref_string____content__projection ((a string____ref)) us_t
  (string____content a))

;; dynamic_invariant
(define-fun dynamic_invariant1 ((temp___expr_110 us_t) (temp___is_init_106 Bool) (temp___skip_constant_107 Bool) (temp___do_toplevel_108 Bool) (temp___do_typ_inv_109 Bool)) Bool
  (=>
    (not (= temp___skip_constant_107 true))
    (dynamic_property
      1
      2147483647
      (first temp___expr_110)
      (last temp___expr_110))))

(declare-sort long_long_long_unsigned 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 128))

;; bool_eq
(define-fun bool_eq7 ((x (_ BitVec 128)) (y (_ BitVec 128))) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE4 ((_ BitVec 128)) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) (_ BitVec 128))

;; user_eq
(declare-fun user_eq4 (long_long_long_unsigned
  long_long_long_unsigned) Bool)

(declare-const dummy4 long_long_long_unsigned)

(declare-datatypes ((long_long_long_unsigned__ref 0))
  (((long_long_long_unsigned__refqtmk
    (long_long_long_unsigned__content long_long_long_unsigned)))))

;; long_long_long_unsigned__ref_long_long_long_unsigned__content__2__projection
(define-fun long_long_long_unsigned__ref_long_long_long_unsigned__content__2__projection 
  ((a long_long_long_unsigned__ref)) long_long_long_unsigned
  (long_long_long_unsigned__content a))

;; to_rep
(declare-fun to_rep2 (long_long_long_unsigned) (_ BitVec 128))

;; of_rep
(declare-fun of_rep2 ((_ BitVec 128)) long_long_long_unsigned)

;; inversion_axiom
(assert
  (forall ((x long_long_long_unsigned))
    (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
(assert true)

;; coerce_axiom
(assert
  (forall ((x (_ BitVec 128)))
    (! (= (to_rep2 (of_rep2 x)) x) :pattern ((to_rep2 (of_rep2 x))) )))

;; to_int
(define-fun to_int3 ((x long_long_long_unsigned)) Int
  (bv2nat (to_rep2 x)))

;; range_int_axiom
(assert
  (forall ((x long_long_long_unsigned))
    (! (uint_in_range (to_int3 x)) :pattern ((to_int3 x)) )))

(declare-datatypes ((us_split_discrs 0))
  (((us_split_discrsqtmk
    (rec__ada___system__val_lllu__impl__uns_option__overflow Bool)))))

;; __split_discrs_rec__ada___system__val_lllu__impl__uns_option__overflow__projection
(define-fun us_split_discrs_rec__ada___system__val_lllu__impl__uns_option__overflow__projection 
  ((a us_split_discrs)) Bool
  (rec__ada___system__val_lllu__impl__uns_option__overflow a))

(declare-datatypes ((us_split_discrs__ref 0))
  (((us_split_discrs__refqtmk (us_split_discrs__content us_split_discrs)))))

;; __split_discrs__ref___split_discrs__content__projection
(define-fun us_split_discrs__ref___split_discrs__content__projection 
  ((a us_split_discrs__ref)) us_split_discrs
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields 0))
  (((us_split_fieldsqtmk
    (rec__ada___system__val_lllu__impl__uns_option__value long_long_long_unsigned)))))

;; __split_fields_rec__ada___system__val_lllu__impl__uns_option__value__projection
(define-fun us_split_fields_rec__ada___system__val_lllu__impl__uns_option__value__projection 
  ((a us_split_fields)) long_long_long_unsigned
  (rec__ada___system__val_lllu__impl__uns_option__value a))

(declare-datatypes ((us_split_fields__ref 0))
  (((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))

;; __split_fields__ref___split_fields__content__projection
(define-fun us_split_fields__ref___split_fields__content__projection 
  ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
  (((us_repqtmk
    (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))

;; __rep___split_discrs__projection
(define-fun us_rep___split_discrs__projection ((a us_rep)) us_split_discrs
  (us_split_discrs1 a))

;; __rep___split_fields__projection
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields
  (us_split_fields1 a))

;; ada___system__val_lllu__impl__uns_option__value__pred
(define-fun ada___system__val_lllu__impl__uns_option__value__pred ((a us_rep)) Bool
  (= (to_int2
       (rec__ada___system__val_lllu__impl__uns_option__overflow
         (us_split_discrs1 a))) 0))

;; bool_eq
(define-fun bool_eq8 ((a us_rep) (b us_rep)) Bool
  (ite (and
         (= (to_int2
              (rec__ada___system__val_lllu__impl__uns_option__overflow
                (us_split_discrs1 a))) (to_int2
                                         (rec__ada___system__val_lllu__impl__uns_option__overflow
                                           (us_split_discrs1 b))))
         (=>
           (ada___system__val_lllu__impl__uns_option__value__pred a)
           (= (to_rep2
                (rec__ada___system__val_lllu__impl__uns_option__value
                  (us_split_fields1 a))) (to_rep2
                                           (rec__ada___system__val_lllu__impl__uns_option__value
                                             (us_split_fields1 b))))))
    true
    false))

;; in_range
(define-fun in_range4 ((rec__ada___system__val_lllu__impl__uns_option__overflow1 Bool) (a us_split_discrs)) Bool
  (= rec__ada___system__val_lllu__impl__uns_option__overflow1 (rec__ada___system__val_lllu__impl__uns_option__overflow
                                                                a)))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
(assert (<= 0 value__size1))

;; object__size_axiom
(assert (<= 0 object__size1))

;; alignment_axiom
(assert (<= 0 alignment1))

(declare-const ada___system__val_lllu__impl__uns_option__overflow__first__bit Int)

(declare-const ada___system__val_lllu__impl__uns_option__overflow__last__bit Int)

(declare-const ada___system__val_lllu__impl__uns_option__overflow__position Int)

;; ada___system__val_lllu__impl__uns_option__overflow__first__bit_axiom
(assert
  (<= 0 ada___system__val_lllu__impl__uns_option__overflow__first__bit))

;; ada___system__val_lllu__impl__uns_option__overflow__last__bit_axiom
(assert
  (< ada___system__val_lllu__impl__uns_option__overflow__first__bit ada___system__val_lllu__impl__uns_option__overflow__last__bit))

;; ada___system__val_lllu__impl__uns_option__overflow__position_axiom
(assert (<= 0 ada___system__val_lllu__impl__uns_option__overflow__position))

(declare-const ada___system__val_lllu__impl__uns_option__value__first__bit Int)

(declare-const ada___system__val_lllu__impl__uns_option__value__last__bit Int)

(declare-const ada___system__val_lllu__impl__uns_option__value__position Int)

;; ada___system__val_lllu__impl__uns_option__value__first__bit_axiom
(assert (<= 0 ada___system__val_lllu__impl__uns_option__value__first__bit))

;; ada___system__val_lllu__impl__uns_option__value__last__bit_axiom
(assert
  (< ada___system__val_lllu__impl__uns_option__value__first__bit ada___system__val_lllu__impl__uns_option__value__last__bit))

;; ada___system__val_lllu__impl__uns_option__value__position_axiom
(assert (<= 0 ada___system__val_lllu__impl__uns_option__value__position))

;; user_eq
(declare-fun user_eq5 (us_rep
  us_rep) Bool)

(declare-const dummy5 us_rep)

(declare-datatypes ((uns_option__ref 0))
  (((uns_option__refqtmk (uns_option__content us_rep)))))

;; uns_option__ref_uns_option__content__projection
(define-fun uns_option__ref_uns_option__content__projection ((a uns_option__ref)) us_rep
  (uns_option__content a))

;; only_hexa_ghost
(define-fun only_hexa_ghost ((str us_t) (from Int) (to__ Int)) Bool
  (ite (forall ((j Int))
         (=>
           (and (<= from j) (<= j to__))
           (let ((temp___174 (to_rep (select (to_array str) j))))
             (or
               (and (<= 48 temp___174) (<= temp___174 57))
               (or
                 (and (<= 97 temp___174) (<= temp___174 102))
                 (or
                   (and (<= 65 temp___174) (<= temp___174 70))
                   (= temp___174 95)))))))
    true
    false))

;; only_hexa_ghost__function_guard
(declare-fun only_hexa_ghost__function_guard (Bool
  us_t
  Int
  Int) Bool)

;; hexa_to_unsigned_ghost
(define-fun hexa_to_unsigned_ghost ((x Int)) (_ BitVec 128)
  (ite (and (<= 48 x) (<= x 57))
    (bvsub ((_ int2bv 128) x) #x00000000000000000000000000000030)
    (ite (and (<= 97 x) (<= x 102))
      (bvadd (bvsub ((_ int2bv 128) x) #x00000000000000000000000000000061) #x0000000000000000000000000000000A)
      (ite (and (<= 65 x) (<= x 70))
        (bvadd (bvsub ((_ int2bv 128) x) #x00000000000000000000000000000041) #x0000000000000000000000000000000A)
        (to_rep2 dummy4)))))

;; hexa_to_unsigned_ghost__function_guard
(declare-fun hexa_to_unsigned_ghost__function_guard ((_ BitVec 128)
  Int) Bool)

;; dynamic_invariant
(define-fun dynamic_invariant2 ((temp___expr_245 (_ BitVec 128)) (temp___is_init_241 Bool) (temp___skip_constant_242 Bool) (temp___do_toplevel_243 Bool) (temp___do_typ_inv_244 Bool)) Bool
  true)

;; scan_overflows_ghost
(define-fun scan_overflows_ghost ((digit (_ BitVec 128)) (base (_ BitVec 128)) (acc (_ BitVec 128))) Bool
  (or (or (bool_ge digit base) (bool_gt
                                 acc
                                 (bvudiv #xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF base))) 
  (bool_lt
    (bvsub #xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF digit)
    (bvmul base acc))))

;; scan_overflows_ghost__function_guard
(declare-fun scan_overflows_ghost__function_guard (Bool
  (_ BitVec 128)
  (_ BitVec 128)
  (_ BitVec 128)) Bool)

(declare-const str us_t)

(declare-const from Int)

(declare-const to__ Int)

(declare-const base (_ BitVec 128))

(declare-const acc (_ BitVec 128))

;; scan_based_number_ghost
(declare-fun scan_based_number_ghost (us_t
  Int
  Int
  (_ BitVec 128)
  (_ BitVec 128)) us_rep)

;; scan_based_number_ghost__function_guard
(declare-fun scan_based_number_ghost__function_guard (us_rep
  us_t
  Int
  Int
  (_ BitVec 128)
  (_ BitVec 128)) Bool)

;; default_initial_assumption
(define-fun default_initial_assumption ((temp___expr_254 us_rep) (temp___skip_top_level_255 Bool)) Bool
  (and
    (= (rec__ada___system__val_lllu__impl__uns_option__overflow
         (us_split_discrs1 temp___expr_254)) (of_int 0))
    (=>
      (ada___system__val_lllu__impl__uns_option__value__pred temp___expr_254)
      (= (to_rep2
           (rec__ada___system__val_lllu__impl__uns_option__value
             (us_split_fields1 temp___expr_254))) #x00000000000000000000000000000000))))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
(assert (<= 0 value__size2))

;; object__size_axiom
(assert (<= 0 object__size2))

;; alignment_axiom
(assert (<= 0 alignment2))

(declare-const ada___system__val_lllu__impl__uns_option__overflow__first__bit1 Int)

(declare-const ada___system__val_lllu__impl__uns_option__overflow__last__bit1 Int)

(declare-const ada___system__val_lllu__impl__uns_option__overflow__position1 Int)

;; ada___system__val_lllu__impl__uns_option__overflow__first__bit_axiom
(assert
  (<= 0 ada___system__val_lllu__impl__uns_option__overflow__first__bit1))

;; ada___system__val_lllu__impl__uns_option__overflow__last__bit_axiom
(assert
  (< ada___system__val_lllu__impl__uns_option__overflow__first__bit1 
  ada___system__val_lllu__impl__uns_option__overflow__last__bit1))

;; ada___system__val_lllu__impl__uns_option__overflow__position_axiom
(assert (<= 0 ada___system__val_lllu__impl__uns_option__overflow__position1))

(declare-const ada___system__val_lllu__impl__uns_option__value__first__bit1 Int)

(declare-const ada___system__val_lllu__impl__uns_option__value__last__bit1 Int)

(declare-const ada___system__val_lllu__impl__uns_option__value__position1 Int)

;; ada___system__val_lllu__impl__uns_option__value__first__bit_axiom
(assert (<= 0 ada___system__val_lllu__impl__uns_option__value__first__bit1))

;; ada___system__val_lllu__impl__uns_option__value__last__bit_axiom
(assert
  (< ada___system__val_lllu__impl__uns_option__value__first__bit1 ada___system__val_lllu__impl__uns_option__value__last__bit1))

;; ada___system__val_lllu__impl__uns_option__value__position_axiom
(assert (<= 0 ada___system__val_lllu__impl__uns_option__value__position1))

;; user_eq
(declare-fun user_eq6 (us_rep
  us_rep) Bool)

(declare-const dummy6 us_rep)

(declare-datatypes ((t128s__ref 0))
  (((t128s__refqtmk (t128s__content us_rep)))))

;; t128s__ref_t128s__content__projection
(define-fun t128s__ref_t128s__content__projection ((a t128s__ref)) us_rep
  (t128s__content a))

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; value__size_axiom
(assert (<= 0 value__size3))

;; object__size_axiom
(assert (<= 0 object__size3))

;; alignment_axiom
(assert (<= 0 alignment3))

(declare-const ada___system__val_lllu__impl__uns_option__overflow__first__bit2 Int)

(declare-const ada___system__val_lllu__impl__uns_option__overflow__last__bit2 Int)

(declare-const ada___system__val_lllu__impl__uns_option__overflow__position2 Int)

;; ada___system__val_lllu__impl__uns_option__overflow__first__bit_axiom
(assert
  (<= 0 ada___system__val_lllu__impl__uns_option__overflow__first__bit2))

;; ada___system__val_lllu__impl__uns_option__overflow__last__bit_axiom
(assert
  (< ada___system__val_lllu__impl__uns_option__overflow__first__bit2 
  ada___system__val_lllu__impl__uns_option__overflow__last__bit2))

;; ada___system__val_lllu__impl__uns_option__overflow__position_axiom
(assert (<= 0 ada___system__val_lllu__impl__uns_option__overflow__position2))

(declare-const ada___system__val_lllu__impl__uns_option__value__first__bit2 Int)

(declare-const ada___system__val_lllu__impl__uns_option__value__last__bit2 Int)

(declare-const ada___system__val_lllu__impl__uns_option__value__position2 Int)

;; ada___system__val_lllu__impl__uns_option__value__first__bit_axiom
(assert (<= 0 ada___system__val_lllu__impl__uns_option__value__first__bit2))

;; ada___system__val_lllu__impl__uns_option__value__last__bit_axiom
(assert
  (< ada___system__val_lllu__impl__uns_option__value__first__bit2 ada___system__val_lllu__impl__uns_option__value__last__bit2))

;; ada___system__val_lllu__impl__uns_option__value__position_axiom
(assert (<= 0 ada___system__val_lllu__impl__uns_option__value__position2))

;; user_eq
(declare-fun user_eq7 (us_rep
  us_rep) Bool)

(declare-const dummy7 us_rep)

(declare-datatypes ((t129s__ref 0))
  (((t129s__refqtmk (t129s__content us_rep)))))

;; t129s__ref_t129s__content__projection
(define-fun t129s__ref_t129s__content__projection ((a t129s__ref)) us_rep
  (t129s__content a))

;; scan_based_number_ghost__def_axiom
(assert
  (forall ((str1 us_t))
    (forall ((from1 Int) (to__1 Int))
      (forall ((base1 (_ BitVec 128)) (acc1 (_ BitVec 128)))
        (! (=>
             (and
               (and
                 (and
                   (and
                     (dynamic_invariant1 str1 true true true true)
                     (dynamic_invariant from1 true true true true))
                   (dynamic_invariant to__1 true true true true))
                 (dynamic_invariant2 base1 true true true true))
               (dynamic_invariant2 acc1 true true true true))
             (= (scan_based_number_ghost str1 from1 to__1 base1 acc1) 
             (ite (< to__1 from1)
               (let ((temp___overflow_318 (of_int 0)))
                 (us_repqtmk
                   (us_split_discrsqtmk temp___overflow_318)
                   (us_split_fieldsqtmk (of_rep2 acc1))))
               (ite (= (to_rep (select (to_array str1) from1)) 95)
                 (scan_based_number_ghost str1 (+ from1 1) to__1 base1 acc1)
                 (ite (= (scan_overflows_ghost
                           (hexa_to_unsigned_ghost
                             (to_rep (select (to_array str1) from1)))
                           base1
                           acc1) true)
                   (let ((temp___overflow_319 (of_int 1)))
                     (us_repqtmk
                       (us_split_discrsqtmk temp___overflow_319)
                       (us_split_fieldsqtmk dummy4)))
                   (scan_based_number_ghost
                     str1
                     (+ from1 1)
                     to__1
                     base1
                     (bvadd (bvmul base1 acc1) (hexa_to_unsigned_ghost
                                                 (to_rep
                                                   (select (to_array str1) from1)))))))))) :pattern (
        (scan_based_number_ghost
          str1
          from1
          to__1
          base1
          acc1)) )))))

;; dynamic_invariant
(define-fun dynamic_invariant3 ((temp___expr_53 Int) (temp___is_init_49 Bool) (temp___skip_constant_50 Bool) (temp___do_toplevel_51 Bool) (temp___do_typ_inv_52 Bool)) Bool
  (=>
    (or (= temp___is_init_49 true) (<= 1 2147483647))
    (in_range3 temp___expr_53)))

;; dynamic_invariant
(define-fun dynamic_invariant4 ((temp___expr_88 Int) (temp___is_init_84 Bool) (temp___skip_constant_85 Bool) (temp___do_toplevel_86 Bool) (temp___do_typ_inv_87 Bool)) Bool
  (=> (or (= temp___is_init_84 true) (<= 0 255)) (in_range2 temp___expr_88)))

;; Assume
(assert (dynamic_invariant1 str true false true true))

;; Assume
(assert (dynamic_invariant from true false true true))

;; Assume
(assert (dynamic_invariant to__ true false true true))

;; Assume
(assert (dynamic_invariant2 base true false true true))

;; Assume
(assert (dynamic_invariant2 acc true false true true))

;; Assume
(assert
  (and
    (and
      (not (= (last str) 2147483647))
      (or (< to__ from) (and (<= (first str) from) (<= to__ (last str)))))
    (= (only_hexa_ghost str from to__) true)))

;; H
(assert (not (< to__ from)))

;; Assert
(assert (and (<= (first str) from) (<= from (last str))))

;; (=)'result'unused'unused
(define-fun lpeqrpqtresultqtunusedqtunused () Bool
  (ite (= (to_rep (select (to_array str) from)) 95) true false))

;; H
(assert (not (= (to_rep (select (to_array str) from)) 95)))

;; Assert
(assert (and (<= (first str) from) (<= from (last str))))

;; H
(assert
  (dynamic_invariant2
    (hexa_to_unsigned_ghost (to_rep (select (to_array str) from)))
    true
    false
    true
    true))

;; H
(assert
  (= (hexa_to_unsigned_ghost (to_rep (select (to_array str) from))) (ite 
                                                                    (and
                                                                    (<= 48 
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    str) 
                                                                    from)))
                                                                    (<= 
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    str) 
                                                                    from)) 57))
                                                                    (bvsub ((_ int2bv 128) 
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    str) 
                                                                    from))) #x00000000000000000000000000000030)
                                                                    (ite 
                                                                    (and
                                                                    (<= 97 
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    str) 
                                                                    from)))
                                                                    (<= 
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    str) 
                                                                    from)) 102))
                                                                    (bvadd (bvsub ((_ int2bv 128) 
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    str) 
                                                                    from))) #x00000000000000000000000000000061) #x0000000000000000000000000000000A)
                                                                    (ite 
                                                                    (and
                                                                    (<= 65 
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    str) 
                                                                    from)))
                                                                    (<= 
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    str) 
                                                                    from)) 70))
                                                                    (bvadd (bvsub ((_ int2bv 128) 
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    str) 
                                                                    from))) #x00000000000000000000000000000041) #x0000000000000000000000000000000A)
                                                                    (to_rep2
                                                                    dummy4))))))

;; Ensures
(assert
  (=
    (= (scan_overflows_ghost
         (hexa_to_unsigned_ghost (to_rep (select (to_array str) from)))
         base
         acc) true)
    (or
      (or
        (bvuge (hexa_to_unsigned_ghost (to_rep (select (to_array str) from))) 
        base)
        (bvugt acc (bvudiv #xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF base)))
      (bvult (bvsub #xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF (hexa_to_unsigned_ghost
                                                         (to_rep
                                                           (select (to_array
                                                                    str) 
                                                           from)))) (bvmul 
      base acc)))))

;; H
(assert
  (not
    (= (scan_overflows_ghost
         (hexa_to_unsigned_ghost (to_rep (select (to_array str) from)))
         base
         acc) true)))

;; Ensures
(assert (in_range1 (+ from 1)))

;; Assert
(assert (and (<= (first str) from) (<= from (last str))))

;; H
(assert
  (dynamic_invariant2
    (hexa_to_unsigned_ghost (to_rep (select (to_array str) from)))
    true
    false
    true
    true))

;; H
(assert
  (= (hexa_to_unsigned_ghost (to_rep (select (to_array str) from))) (ite 
                                                                    (and
                                                                    (<= 48 
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    str) 
                                                                    from)))
                                                                    (<= 
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    str) 
                                                                    from)) 57))
                                                                    (bvsub ((_ int2bv 128) 
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    str) 
                                                                    from))) #x00000000000000000000000000000030)
                                                                    (ite 
                                                                    (and
                                                                    (<= 97 
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    str) 
                                                                    from)))
                                                                    (<= 
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    str) 
                                                                    from)) 102))
                                                                    (bvadd (bvsub ((_ int2bv 128) 
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    str) 
                                                                    from))) #x00000000000000000000000000000061) #x0000000000000000000000000000000A)
                                                                    (ite 
                                                                    (and
                                                                    (<= 65 
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    str) 
                                                                    from)))
                                                                    (<= 
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    str) 
                                                                    from)) 70))
                                                                    (bvadd (bvsub ((_ int2bv 128) 
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    str) 
                                                                    from))) #x00000000000000000000000000000041) #x0000000000000000000000000000000A)
                                                                    (to_rep2
                                                                    dummy4))))))

;; Goal def'vc
;; File "s-valueu.ads", line 148, characters 0-0
(assert
  (not (= (only_hexa_ghost str (+ from 1) to__) true)))

(check-sat)
(exit)
