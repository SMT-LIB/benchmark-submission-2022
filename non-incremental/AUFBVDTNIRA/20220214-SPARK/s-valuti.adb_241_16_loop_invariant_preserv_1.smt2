(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTNIRA)
(set-info :source |
Generated by: Yannick Moy
Generated on: 2022-02-14
Generator: GNATprove
Application: GNAT light runtime library
Target solver: Alt-Ergo, CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)

;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
  (((Tuple0))))

(declare-sort us_private 0)

;; private__bool_eq
(declare-fun private__bool_eq (us_private
  us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
  (((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))

(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
  (((int__refqtmk (int__content Int)))))

(declare-datatypes ((bool__ref 0))
  (((bool__refqtmk (bool__content Bool)))))

(declare-datatypes ((us_fixed__ref 0))
  (((us_fixed__refqtmk (us_fixed__content Int)))))

(declare-datatypes ((real__ref 0))
  (((real__refqtmk (real__content Real)))))

(declare-datatypes ((us_private__ref 0))
  (((us_private__refqtmk (us_private__content us_private)))))

;; int__ref___projection
(define-fun int__ref___projection ((a int__ref)) Int
  (int__content a))

;; __fixed__ref___projection
(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int
  (us_fixed__content a))

;; bool__ref___projection
(define-fun bool__ref___projection ((a bool__ref)) Bool
  (bool__content a))

;; real__ref___projection
(define-fun real__ref___projection ((a real__ref)) Real
  (real__content a))

;; __private__ref___projection
(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

;; bool_eq
(define-fun bool_eq ((x Bool) (y Bool)) Bool
  (ite (= x y) true false))

;; to_int
(define-fun to_int1 ((b Bool)) Int
  (ite (= b true) 1 0))

;; of_int
(define-fun of_int ((i Int)) Bool
  (ite (= i 0) false true))

;; in_range
(define-fun in_range ((x Int)) Bool
  (or (= x 0) (= x 1)))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

;; integer'int
(declare-fun integerqtint (integer) Int)

;; integer'axiom
(assert
  (forall ((i integer))
    (and
      (<= (- 2147483648) (integerqtint i))
      (<= (integerqtint i) 2147483647))))

;; in_range
(define-fun in_range1 ((x Int)) Bool
  (and (<= (- 2147483648) x) (<= x 2147483647)))

;; bool_eq
(define-fun bool_eq1 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

;; user_eq
(declare-fun user_eq (integer
  integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
  (((integer__refqtmk (integer__content integer)))))

;; integer__ref_integer__content__projection
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer
  (integer__content a))

;; dynamic_invariant
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool
  (=>
    (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647))
    (in_range1 temp___expr_18)))

;; to_rep
(define-fun to_rep ((x integer)) Int
  (integerqtint x))

;; of_rep
(declare-fun of_rep (Int) integer)

;; inversion_axiom
(assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
(assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
(assert
  (forall ((x Int))
    (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                                (of_rep x))) )))

(declare-sort natural 0)

;; natural'int
(declare-fun naturalqtint (natural) Int)

;; natural'axiom
(assert
  (forall ((i natural))
    (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

;; in_range
(define-fun in_range2 ((x Int)) Bool
  (and (<= 0 x) (<= x 2147483647)))

;; bool_eq
(define-fun bool_eq2 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

;; user_eq
(declare-fun user_eq1 (natural
  natural) Bool)

(declare-const dummy1 natural)

(declare-datatypes ((natural__ref 0))
  (((natural__refqtmk (natural__content natural)))))

;; natural__ref_natural__content__projection
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural
  (natural__content a))

;; dynamic_invariant
(define-fun dynamic_invariant1 ((temp___expr_46 Int) (temp___is_init_42 Bool) (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool) (temp___do_typ_inv_45 Bool)) Bool
  (=>
    (or (= temp___is_init_42 true) (<= 0 2147483647))
    (in_range2 temp___expr_46)))

(declare-sort character 0)

;; in_range
(define-fun in_range3 ((x Int)) Bool
  (and (<= 0 x) (<= x 255)))

;; bool_eq
(define-fun bool_eq3 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

;; user_eq
(declare-fun user_eq2 (character
  character) Bool)

(declare-const dummy2 character)

(declare-datatypes ((character__ref 0))
  (((character__refqtmk (character__content character)))))

;; character__ref_character__content__projection
(define-fun character__ref_character__content__projection ((a character__ref)) character
  (character__content a))

;; to_rep
(declare-fun to_rep1 (character) Int)

;; of_rep
(declare-fun of_rep1 (Int) character)

;; inversion_axiom
(assert
  (forall ((x character))
    (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
(assert
  (forall ((x character))
    (! (in_range3 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
(assert
  (forall ((x Int))
    (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                                  (of_rep1 x))) )))

(declare-datatypes ((map__ref 0))
  (((map__refqtmk (map__content (Array Int character))))))

;; slide
(declare-fun slide ((Array Int character)
  Int
  Int) (Array Int character))

;; slide_eq
(assert
  (forall ((a (Array Int character)))
    (forall ((first Int))
      (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
(assert
  (forall ((a (Array Int character)))
    (forall ((old_first Int))
      (forall ((new_first Int))
        (forall ((i Int))
          (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
          (slide
            a
            old_first
            new_first) i)) ))))))

;; const
(declare-fun const1 (character) (Array Int character))

;; const_def
(assert
  (forall ((v character))
    (forall ((i Int))
      (! (= (select (const1 v) i) v) :pattern ((select (const1 v) i)) ))))

;; bool_eq
(define-fun bool_eq4 ((a (Array Int character)) (a__first Int) (a__last Int) (b (Array Int character)) (b__first Int) (b__last Int)) Bool
  (ite (and
         (ite (<= a__first a__last)
           (and
             (<= b__first b__last)
             (= (- a__last a__first) (- b__last b__first)))
           (< b__last b__first))
         (forall ((temp___idx_105 Int))
           (=>
             (and (<= a__first temp___idx_105) (<= temp___idx_105 a__last))
             (= (to_rep1 (select a temp___idx_105)) (to_rep1
                                                      (select b (+ (- b__first a__first) temp___idx_105)))))))
    true
    false))

;; bool_eq_rev
(assert
  (forall ((a (Array Int character)) (b (Array Int character)))
    (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
      (=>
        (= (bool_eq4 b b__first b__last a a__first a__last) true)
        (and
          (ite (<= a__first a__last)
            (and
              (<= b__first b__last)
              (= (- a__last a__first) (- b__last b__first)))
            (< b__last b__first))
          (forall ((temp___idx_105 Int))
            (=>
              (and (<= a__first temp___idx_105) (<= temp___idx_105 a__last))
              (= (to_rep1 (select a temp___idx_105)) (to_rep1
                                                       (select b (+ (- b__first a__first) temp___idx_105)))))))))))

(declare-sort positive 0)

;; positive'int
(declare-fun positiveqtint (positive) Int)

;; positive'axiom
(assert
  (forall ((i positive))
    (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

;; in_range
(define-fun in_range4 ((x Int)) Bool
  (and (<= 1 x) (<= x 2147483647)))

;; bool_eq
(define-fun bool_eq5 ((x Int) (y Int)) Bool
  (ite (= x y) true false))

;; attr__ATTRIBUTE_IMAGE
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

;; attr__ATTRIBUTE_VALUE__pre_check
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

;; attr__ATTRIBUTE_VALUE
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

;; user_eq
(declare-fun user_eq3 (positive
  positive) Bool)

(declare-const dummy3 positive)

(declare-datatypes ((positive__ref 0))
  (((positive__refqtmk (positive__content positive)))))

;; positive__ref_positive__content__projection
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive
  (positive__content a))

(declare-datatypes ((t 0))
  (((tqtmk (rec__first integer)(rec__last integer)))))

;; mk
(declare-fun mk (Int
  Int) t)

;; mk_def
(assert
  (forall ((f Int) (l Int))
    (! (=>
         (in_range1 f)
         (=>
           (in_range1 l)
           (and
             (= (to_rep (rec__first (mk f l))) f)
             (= (to_rep (rec__last (mk f l))) l)))) :pattern ((mk f l)) )))

;; dynamic_property
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool
  (and
    (in_range1 low)
    (and
      (in_range1 high)
      (=> (<= low high) (and (in_range4 low) (in_range4 high))))))

(declare-datatypes ((us_t 0))
  (((us_tqtmk (elts (Array Int character))(rt t)))))

;; to_array
(define-fun to_array ((a us_t)) (Array Int character)
  (elts a))

;; of_array
(define-fun of_array ((a (Array Int character)) (f Int) (l Int)) us_t
  (us_tqtmk a (mk f l)))

;; first
(define-fun first ((a us_t)) Int
  (to_rep (rec__first (rt a))))

;; last
(define-fun last ((a us_t)) Int
  (to_rep (rec__last (rt a))))

;; length
(define-fun length ((a us_t)) Int
  (ite (<= (first a) (last a)) (+ (- (last a) (first a)) 1) 0))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
(assert (<= 0 value__size))

;; object__size_axiom
(assert (<= 0 object__size))

;; component__size_axiom
(assert (<= 0 component__size))

;; alignment_axiom
(assert (<= 0 alignment))

;; bool_eq
(define-fun bool_eq6 ((x us_t) (y us_t)) Bool
  (bool_eq4
    (elts x)
    (to_rep (rec__first (rt x)))
    (to_rep (rec__last (rt x)))
    (elts y)
    (to_rep (rec__first (rt y)))
    (to_rep (rec__last (rt y)))))

;; user_eq
(declare-fun user_eq4 (us_t
  us_t) Bool)

(declare-const dummy4 us_t)

(declare-datatypes ((string____ref 0))
  (((string____refqtmk (string____content us_t)))))

;; string____ref_string____content__projection
(define-fun string____ref_string____content__projection ((a string____ref)) us_t
  (string____content a))

;; dynamic_invariant
(define-fun dynamic_invariant2 ((temp___expr_110 us_t) (temp___is_init_106 Bool) (temp___skip_constant_107 Bool) (temp___do_toplevel_108 Bool) (temp___do_typ_inv_109 Bool)) Bool
  (=>
    (not (= temp___skip_constant_107 true))
    (dynamic_property
      1
      2147483647
      (first temp___expr_110)
      (last temp___expr_110))))

;; last_number_ghost
(declare-fun last_number_ghost (us_t) Int)

;; last_number_ghost__function_guard
(declare-fun last_number_ghost__function_guard (Int
  us_t) Bool)

;; dynamic_invariant
(define-fun dynamic_invariant3 ((temp___expr_53 Int) (temp___is_init_49 Bool) (temp___skip_constant_50 Bool) (temp___do_toplevel_51 Bool) (temp___do_typ_inv_52 Bool)) Bool
  (=>
    (or (= temp___is_init_49 true) (<= 1 2147483647))
    (in_range4 temp___expr_53)))

;; only_number_ghost
(define-fun only_number_ghost ((str us_t) (from Int) (to__ Int)) Bool
  (ite (forall ((j Int))
         (=>
           (and (<= from j) (<= j to__))
           (let ((temp___173 (to_rep1 (select (to_array str) j))))
             (or
               (and (<= 48 temp___173) (<= temp___173 57))
               (= temp___173 95)))))
    true
    false))

;; only_number_ghost__function_guard
(declare-fun only_number_ghost__function_guard (Bool
  us_t
  Int
  Int) Bool)

;; temp___String_Literal_226
(declare-fun temp___String_Literal_226 (tuple0) (Array Int character))

;; temp___String_Literal_226__def_axiom
(assert true)

;; last_number_ghost__post_axiom
(assert
  (forall ((str us_t))
    (! (=>
         (and
           (dynamic_invariant2 str true true true true)
           (and
             (not
               (= (let ((temp___235 (temp___String_Literal_226 Tuple0)))
                    (bool_eq4
                      (to_array str)
                      (first str)
                      (last str)
                      temp___235
                      1
                      0)) true))
             (let ((temp___236 (to_rep1 (select (to_array str) (first str)))))
               (and (<= 48 temp___236) (<= temp___236 57)))))
         (let ((result (last_number_ghost str)))
           (=>
             (last_number_ghost__function_guard result str)
             (and
               (and
                 (and
                   (and (<= (first str) result) (<= result (last str)))
                   (=>
                     (< result (last str))
                     (= (not (let ((temp___238 (to_rep1
                                                 (select (to_array str) (+ result 1)))))
                               (or (let ((temp___239 temp___238))
                                     (and (ite (<= 48 temp___239) true false) 
                                     (ite (<= temp___239 57)
                                       true
                                       false))) (ite (= temp___238 95)
                                                  true
                                                  false)))) true)))
                 (= (only_number_ghost str (first str) result) true))
               (dynamic_invariant3 result true false true true))))) :pattern (
    (last_number_ghost
      str)) )))

;; bool_eq
(declare-fun bool_eq7 (Int
  Int) Bool)

;; bool_ne
(declare-fun bool_ne (Int
  Int) Bool)

;; bool_lt
(declare-fun bool_lt (Int
  Int) Bool)

;; bool_le
(declare-fun bool_le (Int
  Int) Bool)

;; bool_gt
(declare-fun bool_gt (Int
  Int) Bool)

;; bool_ge
(declare-fun bool_ge (Int
  Int) Bool)

;; bool_eq_axiom
(assert
  (forall ((x Int)) (forall ((y Int)) (= (= (bool_eq7 x y) true) (= x y)))))

;; bool_ne_axiom
(assert
  (forall ((x Int))
    (forall ((y Int)) (= (= (bool_ne x y) true) (not (= x y))))))

;; bool_lt_axiom
(assert
  (forall ((x Int)) (forall ((y Int)) (= (= (bool_lt x y) true) (< x y)))))

;; bool_int__le_axiom
(assert
  (forall ((x Int)) (forall ((y Int)) (= (= (bool_le x y) true) (<= x y)))))

;; bool_gt_axiom
(assert
  (forall ((x Int)) (forall ((y Int)) (= (= (bool_gt x y) true) (< y x)))))

;; bool_ge_axiom
(assert
  (forall ((x Int)) (forall ((y Int)) (= (= (bool_ge x y) true) (<= y x)))))

;; length
(define-fun length1 ((x Int) (y Int)) Int
  (ite (<= x y) (+ (- y x) 1) 0))

;; starts_as_exponent_format_ghost
(define-fun starts_as_exponent_format_ghost ((str us_t) (real__ Bool)) Bool
  (and (and (bool_gt (length str) 1) (let ((temp___179 (to_rep1
                                                         (select (to_array
                                                                   str) 
                                                         (first
                                                           str)))))
                                       (or (ite (= temp___179 69) true false) 
                                       (ite (= temp___179 101)
                                         true
                                         false)))) (let ((plus_sign (bool_eq7
                                                                    (to_rep1
                                                                    (select 
                                                                    (to_array
                                                                    str) (+ 
                                                                    (first
                                                                    str) 1)))
                                                                    43)))
                                                     (let ((minus_sign 
                                                       (bool_eq7
                                                         (to_rep1
                                                           (select (to_array
                                                                    str) (+ 
                                                           (first
                                                             str) 1)))
                                                         45)))
                                                       (let ((sign (or plus_sign minus_sign)))
                                                         (and (and (ite (= minus_sign true)
                                                                    real__
                                                                    (of_int
                                                                    1)) 
                                                         (ite (= sign true)
                                                           (bool_gt
                                                             (length str)
                                                             2)
                                                           (of_int 1))) 
                                                         (let ((start 
                                                           (ite (= sign true)
                                                             (+ (first str) 2)
                                                             (+ (first str) 1))))
                                                           (let ((temp___180 
                                                             (to_rep1
                                                               (select 
                                                               (to_array
                                                                 str) start))))
                                                             (and (ite (<= 48 temp___180)
                                                                    true
                                                                    false) 
                                                             (ite (<= temp___180 57)
                                                               true
                                                               false))))))))))

;; starts_as_exponent_format_ghost__function_guard
(declare-fun starts_as_exponent_format_ghost__function_guard (Bool
  us_t
  Bool) Bool)

;; is_opt_exponent_format_ghost
(declare-fun is_opt_exponent_format_ghost (us_t
  Bool) Bool)

;; is_opt_exponent_format_ghost__function_guard
(declare-fun is_opt_exponent_format_ghost__function_guard (Bool
  us_t
  Bool) Bool)

;; is_natural_format_ghost
(declare-fun is_natural_format_ghost (us_t) Bool)

;; is_natural_format_ghost__function_guard
(declare-fun is_natural_format_ghost__function_guard (Bool
  us_t) Bool)

(declare-datatypes ((t89s__ref 0))
  (((t89s__refqtmk (t89s__content us_t)))))

;; t89s__ref_t89s__content__projection
(define-fun t89s__ref_t89s__content__projection ((a t89s__ref)) us_t
  (t89s__content a))

;; is_opt_exponent_format_ghost__post_axiom
(assert true)

;; is_opt_exponent_format_ghost__def_axiom
(assert
  (forall ((str us_t))
    (forall ((real__ Bool))
      (! (=
           (= (is_opt_exponent_format_ghost str real__) true)
           (or
             (not (= (starts_as_exponent_format_ghost str real__) true))
             (= (is_natural_format_ghost
                  (let ((temp___267 (let ((temp___266 (last str)))
                                      (of_array
                                        (to_array str)
                                        (ite (let ((temp___270 (to_rep1
                                                                 (select 
                                                                 (to_array
                                                                   str) (+ 
                                                                 (first
                                                                   str) 1)))))
                                               (or
                                                 (= temp___270 43)
                                                 (= temp___270 45)))
                                          (+ (first str) 2)
                                          (+ (first str) 1))
                                        temp___266))))
                    (let ((temp___268 (to_array temp___267)))
                      (of_array
                        temp___268
                        (first temp___267)
                        (last temp___267))))) true))) :pattern ((is_opt_exponent_format_ghost
                                                                  str
                                                                  real__)) ))))

;; scan_natural_ghost
(declare-fun scan_natural_ghost (us_t
  Int
  Int) Int)

;; scan_natural_ghost__function_guard
(declare-fun scan_natural_ghost__function_guard (Int
  us_t
  Int
  Int) Bool)

;; temp___String_Literal_271
(declare-fun temp___String_Literal_271 (tuple0) (Array Int character))

;; temp___String_Literal_271__def_axiom
(assert true)

;; scan_natural_ghost__def_axiom
(assert
  (forall ((str us_t))
    (forall ((p Int) (acc Int))
      (! (=>
           (and
             (and
               (and
                 (dynamic_invariant2 str true true true true)
                 (dynamic_invariant1 p true true true true))
               (dynamic_invariant1 acc true true true true))
             (scan_natural_ghost__function_guard
               (scan_natural_ghost str p acc)
               str
               p
               acc))
           (and
             (forall ((str1 us_t) (p1 Int) (acc1 Int))
               (scan_natural_ghost__function_guard
                 (scan_natural_ghost str1 (+ p1 1) acc1)
                 str1
                 (+ p1 1)
                 acc1))
             (and
               (forall ((str1 us_t) (p1 Int) (shift_acc Int))
                 (scan_natural_ghost__function_guard
                   (scan_natural_ghost str1 (+ p1 1) shift_acc)
                   str1
                   (+ p1 1)
                   shift_acc))
               (= (scan_natural_ghost str p acc) (ite (or
                                                        (or
                                                          (< (last str) p)
                                                          (= (not (let ((temp___290 
                                                                    (to_rep1
                                                                    (select 
                                                                    (to_array
                                                                    str) p))))
                                                                    (or 
                                                                    (let ((temp___291 temp___290))
                                                                    (and 
                                                                    (ite (<= 48 temp___291)
                                                                    true
                                                                    false) 
                                                                    (ite (<= temp___291 57)
                                                                    true
                                                                    false))) 
                                                                    (ite (= temp___290 95)
                                                                    true
                                                                    false)))) true))
                                                        (<= 214748364 acc))
                                                   acc
                                                   (ite (= (to_rep1
                                                             (select 
                                                             (to_array
                                                               str) p)) 95)
                                                     (scan_natural_ghost
                                                       str
                                                       (+ p 1)
                                                       acc)
                                                     (let ((shift_acc (+ (* acc 10) (- 
                                                       (to_rep1
                                                         (select (to_array
                                                                   str) p)) 48))))
                                                       (scan_natural_ghost
                                                         str
                                                         (+ p 1)
                                                         shift_acc)))))))) :pattern (
      (scan_natural_ghost
        str
        p
        acc)) ))))

;; scan_exponent_ghost
(declare-fun scan_exponent_ghost (us_t
  Bool) Int)

;; scan_exponent_ghost__function_guard
(declare-fun scan_exponent_ghost__function_guard (Int
  us_t
  Bool) Bool)

(declare-datatypes ((t94s__ref 0))
  (((t94s__refqtmk (t94s__content us_t)))))

;; t94s__ref_t94s__content__projection
(define-fun t94s__ref_t94s__content__projection ((a t94s__ref)) us_t
  (t94s__content a))

;; scan_exponent_ghost__post_axiom
(assert
  (forall ((str us_t))
    (forall ((real__ Bool))
      (! (=>
           (and
             (dynamic_invariant2 str true true true true)
             (and
               (< (last str) 2147483647)
               (= (starts_as_exponent_format_ghost str real__) true)))
           (let ((result (scan_exponent_ghost str real__)))
             (=>
               (scan_exponent_ghost__function_guard result str real__)
               (and
                 (=> (not (= real__ true)) (<= 0 result))
                 (dynamic_invariant result true false true true))))) :pattern (
      (scan_exponent_ghost
        str
        real__)) ))))

;; scan_exponent_ghost__def_axiom
(assert
  (forall ((str us_t))
    (forall ((real__ Bool))
      (! (=>
           (dynamic_invariant2 str true true true true)
           (and
             (forall ((str1 us_t) (start Int))
               (scan_natural_ghost__function_guard
                 (scan_natural_ghost
                   (let ((temp___299 (let ((temp___298 (last str1)))
                                       (of_array
                                         (to_array str1)
                                         start
                                         temp___298))))
                     (let ((temp___300 (to_array temp___299)))
                       (of_array
                         temp___300
                         (first temp___299)
                         (last temp___299))))
                   start
                   0)
                 (let ((temp___299 (let ((temp___298 (last str1)))
                                     (of_array
                                       (to_array str1)
                                       start
                                       temp___298))))
                   (let ((temp___300 (to_array temp___299)))
                     (of_array
                       temp___300
                       (first temp___299)
                       (last temp___299))))
                 start
                 0))
             (= (scan_exponent_ghost str real__) (let ((plus_sign (bool_eq7
                                                                    (to_rep1
                                                                    (select 
                                                                    (to_array
                                                                    str) (+ 
                                                                    (first
                                                                    str) 1)))
                                                                    43)))
                                                   (let ((minus_sign 
                                                     (bool_eq7
                                                       (to_rep1
                                                         (select (to_array
                                                                   str) (+ 
                                                         (first
                                                           str) 1)))
                                                       45)))
                                                     (let ((sign (or plus_sign minus_sign)))
                                                       (let ((start (ite (= sign true)
                                                                    (+ 
                                                                    (first
                                                                    str) 2)
                                                                    (+ 
                                                                    (first
                                                                    str) 1))))
                                                         (let ((value 
                                                           (scan_natural_ghost
                                                             (let ((temp___299 
                                                               (let ((temp___298 
                                                                 (last
                                                                   str)))
                                                                 (of_array
                                                                   (to_array
                                                                    str)
                                                                   start
                                                                   temp___298))))
                                                               (let ((temp___300 
                                                                 (to_array
                                                                   temp___299)))
                                                                 (of_array
                                                                   temp___300
                                                                   (first
                                                                    temp___299)
                                                                   (last
                                                                    temp___299))))
                                                             start
                                                             0)))
                                                           (ite (= minus_sign true)
                                                             (- value)
                                                             value))))))))) :pattern (
      (scan_exponent_ghost
        str
        real__)) ))))

(declare-const str us_t)

(declare-const ptr__is_null_pointer Bool)

(declare-const max Int)

(declare-const real__ Bool)

(declare-datatypes ((us_rep 0))
  (((us_repqtmk
    (rec__ada___system__val_util__T8s__is_null_pointer Bool)(rec__ada___system__val_util__T8s__is_moved_pointer Bool)(rec__ada___system__val_util__T8s__pointer_value integer)))))

;; __rep_rec__ada___system__val_util__T8s__is_null_pointer__projection
(define-fun us_rep_rec__ada___system__val_util__T8s__is_null_pointer__projection 
  ((a us_rep)) Bool
  (rec__ada___system__val_util__T8s__is_null_pointer a))

;; __rep_rec__ada___system__val_util__T8s__is_moved_pointer__projection
(define-fun us_rep_rec__ada___system__val_util__T8s__is_moved_pointer__projection 
  ((a us_rep)) Bool
  (rec__ada___system__val_util__T8s__is_moved_pointer a))

;; __rep_rec__ada___system__val_util__T8s__pointer_value__projection
(define-fun us_rep_rec__ada___system__val_util__T8s__pointer_value__projection 
  ((a us_rep)) integer
  (rec__ada___system__val_util__T8s__pointer_value a))

(declare-datatypes ((us_rep__ref 0))
  (((us_rep__refqtmk (us_rep__content us_rep)))))

;; __rep__ref___rep__content__projection
(define-fun us_rep__ref___rep__content__projection ((a us_rep__ref)) us_rep
  (us_rep__content a))

;; bool_eq
(define-fun bool_eq8 ((a us_rep) (b us_rep)) Bool
  (ite (and
         (= (rec__ada___system__val_util__T8s__is_null_pointer a) (rec__ada___system__val_util__T8s__is_null_pointer
                                                                    b))
         (=>
           (not
             (= (rec__ada___system__val_util__T8s__is_null_pointer a) true))
           (= (rec__ada___system__val_util__T8s__pointer_value a) (rec__ada___system__val_util__T8s__pointer_value
                                                                    b))))
    true
    false))

;; rec__ada___system__val_util__T8s__pointer_value__pred
(define-fun rec__ada___system__val_util__T8s__pointer_value__pred ((a us_rep)) Bool
  (not (= (rec__ada___system__val_util__T8s__is_null_pointer a) true)))

(declare-const us_null_pointer us_rep)

;; __null_pointer__def_axiom
(assert
  (= (rec__ada___system__val_util__T8s__is_null_pointer us_null_pointer) true))

(declare-const dummy5 us_rep)

(declare-datatypes ((t40s__ref 0))
  (((t40s__refqtmk (t40s__content us_rep)))))

;; t40s__ref_t40s__content__projection
(define-fun t40s__ref_t40s__content__projection ((a t40s__ref)) us_rep
  (t40s__content a))

(declare-const rest us_t)

(declare-const last1 Int)

(declare-const dummy6 us_rep)

(declare-datatypes ((t35s__ref 0))
  (((t35s__refqtmk (t35s__content us_rep)))))

;; t35s__ref_t35s__content__projection
(define-fun t35s__ref_t35s__content__projection ((a t35s__ref)) us_rep
  (t35s__content a))

(declare-datatypes ((t57s__ref 0))
  (((t57s__refqtmk (t57s__content us_t)))))

;; t57s__ref_t57s__content__projection
(define-fun t57s__ref_t57s__content__projection ((a t57s__ref)) us_t
  (t57s__content a))

(declare-datatypes ((t61s__ref 0))
  (((t61s__refqtmk (t61s__content us_t)))))

;; t61s__ref_t61s__content__projection
(define-fun t61s__ref_t61s__content__projection ((a t61s__ref)) us_t
  (t61s__content a))

(declare-datatypes ((t63s__ref 0))
  (((t63s__refqtmk (t63s__content us_t)))))

;; t63s__ref_t63s__content__projection
(define-fun t63s__ref_t63s__content__projection ((a t63s__ref)) us_t
  (t63s__content a))

(declare-datatypes ((t65s__ref 0))
  (((t65s__refqtmk (t65s__content us_t)))))

;; t65s__ref_t65s__content__projection
(define-fun t65s__ref_t65s__content__projection ((a t65s__ref)) us_t
  (t65s__content a))

(declare-datatypes ((t67s__ref 0))
  (((t67s__refqtmk (t67s__content us_t)))))

;; t67s__ref_t67s__content__projection
(define-fun t67s__ref_t67s__content__projection ((a t67s__ref)) us_t
  (t67s__content a))

(declare-datatypes ((t51b__ref 0))
  (((t51b__refqtmk (t51b__content us_t)))))

;; t51b__ref_t51b__content__projection
(define-fun t51b__ref_t51b__content__projection ((a t51b__ref)) us_t
  (t51b__content a))

;; dynamic_invariant
(define-fun dynamic_invariant4 ((temp___expr_88 Int) (temp___is_init_84 Bool) (temp___skip_constant_85 Bool) (temp___do_toplevel_86 Bool) (temp___do_typ_inv_87 Bool)) Bool
  (=> (or (= temp___is_init_84 true) (<= 0 255)) (in_range3 temp___expr_88)))

;; last__def_axiom
(assert
  (and
    (last_number_ghost__function_guard (last_number_ghost rest) rest)
    (= last1 (last_number_ghost rest))))

;; temp___String_Literal_241
(declare-fun temp___String_Literal_241 (tuple0) (Array Int character))

;; temp___String_Literal_241__def_axiom
(assert true)

;; is_natural_format_ghost__post_axiom
(assert true)

;; is_natural_format_ghost__def_axiom
(assert
  (forall ((str1 us_t))
    (! (and
         (forall ((str2 us_t))
           (last_number_ghost__function_guard (last_number_ghost str2) str2))
         (=
           (= (is_natural_format_ghost str1) true)
           (and
             (and
               (not
                 (= (let ((temp___250 (temp___String_Literal_241 Tuple0)))
                      (bool_eq4
                        (to_array str1)
                        (first str1)
                        (last str1)
                        temp___250
                        1
                        0)) true))
               (let ((temp___251 (to_rep1
                                   (select (to_array str1) (first str1)))))
                 (and (<= 48 temp___251) (<= temp___251 57))))
             (let ((l (last_number_ghost str1)))
               (and
                 (let ((temp___252 (to_rep1 (select (to_array str1) l))))
                   (and (<= 48 temp___252) (<= temp___252 57)))
                 (forall ((j Int))
                   (=>
                     (and (<= (first str1) j) (<= j l))
                     (=>
                       (= (to_rep1 (select (to_array str1) j)) 95)
                       (not
                         (= (to_rep1 (select (to_array str1) (+ j 1))) 95)))))))))) :pattern (
    (is_natural_format_ghost
      str1)) )))

;; scan_natural_ghost__post_axiom
(assert
  (forall ((str1 us_t))
    (forall ((p Int) (acc Int))
      (! (and
           (forall ((str2 us_t))
             (last_number_ghost__function_guard
               (last_number_ghost str2)
               str2))
           (=>
             (and
               (and
                 (and
                   (dynamic_invariant2 str1 true true true true)
                   (dynamic_invariant1 p true true true true))
                 (dynamic_invariant1 acc true true true true))
               (and
                 (and
                   (and
                     (not
                       (= (let ((temp___283 (temp___String_Literal_271
                                              Tuple0)))
                            (bool_eq4
                              (to_array str1)
                              (first str1)
                              (last str1)
                              temp___283
                              1
                              0)) true))
                     (let ((temp___284 (to_rep1
                                         (select (to_array str1) (first str1)))))
                       (and (<= 48 temp___284) (<= temp___284 57))))
                   (< (last str1) 2147483647))
                 (and
                   (<= (first str1) p)
                   (<= p (+ (last_number_ghost str1) 1)))))
             (let ((result (scan_natural_ghost str1 p acc)))
               (=>
                 (scan_natural_ghost__function_guard result str1 p acc)
                 (dynamic_invariant1 result true false true true))))) :pattern (
      (scan_natural_ghost
        str1
        p
        acc)) ))))

(declare-const ptr__pointer_value integer)

(declare-const ptr__is_moved_pointer Bool)

(declare-const exp1 Int)

(declare-const x Int)

;; Assume
(assert (dynamic_invariant2 str true false true true))

;; Assume
(assert (not (= ptr__is_null_pointer true)))

;; Assume
(assert (dynamic_invariant max true false true true))

;; Assume
(assert (dynamic_invariant exp1 false false true true))

;; Assume
(assert
  (and
    (and
      (or
        (< max (to_rep ptr__pointer_value))
        (and
          (<= (first str) (to_rep ptr__pointer_value))
          (<= max (last str))))
      (< max 2147483647))
    (= (is_opt_exponent_format_ghost
         (let ((temp___714 (of_array
                             (to_array str)
                             (to_rep ptr__pointer_value)
                             max)))
           (of_array
             (to_array temp___714)
             (first temp___714)
             (last temp___714)))
         real__) true)))

(declare-const p Int)

;; H
(assert (= p (to_rep ptr__pointer_value)))

;; Assume
(assert (dynamic_invariant p true false true true))

;; Assume
(assert true)

;; Assume
(assert (dynamic_invariant x false false true true))

(declare-const o Int)

(declare-const o1 Int)

(declare-const spark__branch Bool)

;; H
(assert
  (ite (<= max p)
    (= spark__branch true)
    (and
      (and (<= (first str) p) (<= p (last str)))
      (and
        (= (to_rep1 (select (to_array str) p)) o)
        (ite (not (= o 69))
          (and
            (and (<= (first str) p) (<= p (last str)))
            (and
              (= (to_rep1 (select (to_array str) p)) o1)
              (= spark__branch (ite (= o1 101) false true))))
          (= spark__branch false))))))

;; H
(assert (not (= spark__branch true)))

;; Ensures
(assert (in_range1 (+ p 1)))

(declare-const p1 Int)

;; H
(assert (= p1 (+ p 1)))

(declare-const spark__branch1 Bool)

(declare-const p2 Int)

(declare-const m Bool)

;; Assert
(assert (and (<= (first str) p1) (<= p1 (last str))))

(declare-const o2 Int)

;; H
(assert (= (to_rep1 (select (to_array str) p1)) o2))

(declare-const spark__branch2 Bool)

;; H
(assert (= spark__branch2 (ite (= o2 43) true false)))

(declare-const o3 Int)

(declare-const spark__branch3 Bool)

(declare-const o4 Bool)

;; H
(assert
  (ite (= spark__branch2 true)
    (let ((o5 (+ p1 1)))
      (and
        (in_range1 o5)
        (and
          (= p2 o5)
          (and
            (= spark__branch1 (ite (< max p2) true false))
            (and (not (= spark__branch1 true)) (= m (of_int 0)))))))
    (and
      (and (<= (first str) p1) (<= p1 (last str)))
      (and
        (= (to_rep1 (select (to_array str) p1)) o3)
        (and
          (= spark__branch3 (ite (= o3 45) true false))
          (ite (= spark__branch3 true)
            (let ((o5 (+ p1 1)))
              (and
                (in_range1 o5)
                (and
                  (= p2 o5)
                  (and
                    (ite (< max p2)
                      (= o4 true)
                      (= o4 (ite (= real__ true) false true)))
                    (and
                      (= spark__branch1 o4)
                      (and (not (= spark__branch1 true)) (= m (of_int 1))))))))
            (and
              (and (= m (of_int 0)) (= spark__branch1 spark__branch3))
              (= p2 p1))))))))

;; Assert
(assert (and (<= (first str) p2) (<= p2 (last str))))

(declare-const spark__branch4 Bool)

;; H
(assert
  (= spark__branch4 (ite (= (and (ite (<= 48 (to_rep1
                                               (select (to_array str) 
                                               p2)))
                                   true
                                   false) (ite (<= (to_rep1
                                                     (select (to_array str) 
                                                     p2)) 57)
                                            true
                                            false)) true)
                      false
                      true)))

;; H
(assert (not (= spark__branch4 true)))

(declare-const x1 Int)

;; H
(assert (= x1 0))

;; Assert
(assert
  (=>
    (<= p2 max)
    (and
      (and (<= (first str) p2) (<= p2 (last str)))
      (and (<= (first str) max) (<= max (last str))))))

;; Assume
(assert
  (= (of_array
       (to_array (of_array (to_array str) p2 max))
       (first (of_array (to_array str) p2 max))
       (last (of_array (to_array str) p2 max))) rest))

;; Assume
(assert (dynamic_invariant2 rest true false true true))

;; H
(assert (last_number_ghost__function_guard (last_number_ghost rest) rest))

;; H
(assert (dynamic_invariant3 (last_number_ghost rest) true false true true))

;; H
(assert (<= (first rest) (last_number_ghost rest)))

;; H
(assert (<= (last_number_ghost rest) (last rest)))

;; H
(assert
  (=>
    (< (last_number_ghost rest) (last rest))
    (= (not (let ((temp___231 (to_rep1
                                (select (to_array rest) (+ (last_number_ghost
                                                             rest) 1)))))
              (or (and (ite (<= 48 temp___231) true false) (ite (<= temp___231 57)
                                                             true
                                                             false)) 
              (ite (= temp___231 95)
                true
                false)))) true)))

;; H
(assert
  (= (only_number_ghost rest (first rest) (last_number_ghost rest)) true))

;; Ensures
(assert (in_range2 (last_number_ghost rest)))

;; Assume
(assert (= (last_number_ghost rest) last1))

;; Assume
(assert (dynamic_invariant1 last1 true false true true))

(declare-const spark__branch5 Bool)

(declare-const x2 Int)

;; H
(assert (= spark__branch5 (ite (< x1 214748364) true false)))

(declare-const o5 Int)

;; H
(assert
  (ite (= spark__branch5 true)
    (and
      (and (<= (first str) p2) (<= p2 (last str)))
      (and
        (= (to_rep1 (select (to_array str) p2)) o5)
        (let ((o6 (* x1 10)))
          (and
            (in_range1 o6)
            (let ((o7 (+ o6 (- o5 48)))) (and (in_range1 o7) (= x2 o7)))))))
    (= x2 x1)))

(declare-const ptr__pointer_value1 integer)

(declare-const p3 Int)

(declare-const x3 Int)

;; LoopInvariant
(assert (<= 0 x3))

;; LoopInvariant
(assert (and (<= (first rest) p3) (<= p3 last1)))

;; LoopInvariant
(assert
  (let ((temp___679 (to_rep1 (select (to_array str) p3))))
    (and (<= 48 temp___679) (<= temp___679 57))))

;; LoopInvariant
(assert
  (and
    (scan_natural_ghost__function_guard
      (scan_natural_ghost rest (first rest) 0)
      rest
      (first rest)
      0)
    (and
      (scan_natural_ghost__function_guard
        (scan_natural_ghost rest (+ p3 1) x3)
        rest
        (+ p3 1)
        x3)
      (= (scan_natural_ghost rest (first rest) 0) (scan_natural_ghost
                                                    rest
                                                    (+ p3 1)
                                                    x3)))))

;; Assume
(assert
  (and
    (and
      (not (= ptr__is_null_pointer true))
      (dynamic_invariant p3 true true true true))
    (dynamic_invariant x3 false true true true)))

;; Ensures
(assert (in_range1 (+ p3 1)))

(declare-const p4 Int)

;; H
(assert (= p4 (+ p3 1)))

;; H
(assert (not (< max p4)))

(declare-const spark__branch6 Bool)

(declare-const ptr__pointer_value2 integer)

(declare-const p5 Int)

;; Assert
(assert (and (<= (first str) p4) (<= p4 (last str))))

(declare-const o6 Int)

;; H
(assert (= (to_rep1 (select (to_array str) p4)) o6))

;; H
(assert (= spark__branch6 (ite (= o6 95) true false)))

(declare-const temp___672 Int)

(declare-const p6 Int)

;; H
(assert
  (ite (= spark__branch6 true)
    (and
      (in_range2 p4)
      (and
        (and
          (and
            (= p6 (+ p4 1))
            (= (to_rep ptr__pointer_value1) (to_rep ptr__pointer_value2)))
          (and
            (dynamic_invariant1 p6 true true true true)
            (not (= ptr__is_null_pointer true))))
        (and (in_range1 p6) (= p5 p6))))
    (and
      (and
        (and
          (and (<= (first str) p4) (<= p4 (last str)))
          (and
            (= (to_rep1 (select (to_array str) p4)) temp___672)
            (= (and (ite (<= 48 temp___672) true false) (ite (<= temp___672 57)
                                                          true
                                                          false)) true)))
        (= ptr__pointer_value2 ptr__pointer_value1))
      (= p5 p4))))

(declare-const x4 Int)

(declare-const spark__branch7 Bool)

;; H
(assert (= spark__branch7 (ite (< x3 214748364) true false)))

(declare-const o7 Int)

;; H
(assert
  (ite (= spark__branch7 true)
    (and
      (and (<= (first str) p5) (<= p5 (last str)))
      (and
        (= (to_rep1 (select (to_array str) p5)) o7)
        (let ((o8 (* x3 10)))
          (and
            (in_range1 o8)
            (let ((o9 (+ o8 (- o7 48)))) (and (in_range1 o9) (= x4 o9)))))))
    (= x4 x3)))

;; LoopInvariant
(assert (<= 0 x4))

;; LoopInvariant
(assert (and (<= (first rest) p5) (<= p5 last1)))

;; LoopInvariant
(assert
  (let ((temp___679 (to_rep1 (select (to_array str) p5))))
    (and (<= 48 temp___679) (<= temp___679 57))))

;; Goal def'vc
;; File "s-valuti.ads", line 302, characters 0-0
(assert
  (not
  (=>
    (scan_natural_ghost__function_guard
      (scan_natural_ghost rest (first rest) 0)
      rest
      (first rest)
      0)
    (=>
      (scan_natural_ghost__function_guard
        (scan_natural_ghost rest (+ p5 1) x4)
        rest
        (+ p5 1)
        x4)
      (= (scan_natural_ghost rest (first rest) 0) (scan_natural_ghost
                                                    rest
                                                    (+ p5 1)
                                                    x4))))))

(check-sat)
(exit)
