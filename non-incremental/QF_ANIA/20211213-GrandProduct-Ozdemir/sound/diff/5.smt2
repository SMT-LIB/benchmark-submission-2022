
(set-info :smt-lib-version 2.6)
(set-logic QF_ANIA)
(set-info :source |
Generated by: Alex Ozdemir
Generated on: 2021-12-13
Generator: Z3Py API
Application: Soundness counterexamples for a cryptographic argument
Target solver: cvc5, Z3

# The special soundness of PLONK's grand product argument

Let F be a prime-order field and n a natural less than F's size. Let n = {1,
2, .., n} be a subset of F. The PLONK[1] grand product argument relies on the
fact that given a permutation pi: [n] -> [n] and functions A, B: [n] -> [n],

    prod_i (A(i) + beta * i + gamma) = prod_i (B(i) + beta * pi(i) + gamma)

holds for random beta, gamma in F with good probability only when A composed
with pi is B.

Does this implication hold in a deterministic setting, where the above is
checked for distinct---but non-random---beta and gamma?

If it is checked for n+1 distinct values of beta, and for each value of beta,
n+1 distinct values of gamma, then yes. One can prove this.

If it is checked for 2 distinct values of beta, and for each value of beta, n+1
distinct values of gamma, then no.

This series of benchmarks checks the implication holds
* for varying n
* for a fixed permutation pi = (2 3 ... n 1)
* for all A and B
  * that must be equal ("same") or may differ ("diff")
* for all distinct 2 ("unsound") or n+1 ("sound") beta values

rather than instantiating gamma explicitly, we just check that the multisets

    {{A[i] + beta * i}}_i  ==  {{B[i] + beta * pi(i)}}_i

are equal.

[1]: https://eprint.iacr.org/2019/953

|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "crafted")
(set-info :status unsat)
; benchmark generated from python API
(declare-fun b__5 () Int)
(declare-fun b__4 () Int)
(declare-fun b__3 () Int)
(declare-fun b__2 () Int)
(declare-fun b__1 () Int)
(declare-fun b__0 () Int)
(declare-fun w__0 () Int)
(declare-fun v__0 () Int)
(declare-fun w__1 () Int)
(declare-fun v__1 () Int)
(declare-fun w__2 () Int)
(declare-fun v__2 () Int)
(declare-fun w__3 () Int)
(declare-fun v__3 () Int)
(declare-fun w__4 () Int)
(declare-fun v__4 () Int)
(declare-fun start () (Array Int Int))
(assert
 (and (distinct b__0 b__1 b__2 b__3 b__4 b__5) true))
(assert
 (>= w__0 0))
(assert
 (>= v__0 0))
(assert
 (<= w__0 5))
(assert
 (<= v__0 5))
(assert
 (>= w__1 0))
(assert
 (>= v__1 0))
(assert
 (<= w__1 5))
(assert
 (<= v__1 5))
(assert
 (>= w__2 0))
(assert
 (>= v__2 0))
(assert
 (<= w__2 5))
(assert
 (<= v__2 5))
(assert
 (>= w__3 0))
(assert
 (>= v__3 0))
(assert
 (<= w__3 5))
(assert
 (<= v__3 5))
(assert
 (>= w__4 0))
(assert
 (>= v__4 0))
(assert
 (<= w__4 5))
(assert
 (<= v__4 5))
(assert
 (let ((?x532 (* b__0 1)))
 (let ((?x558 (+ v__4 ?x532)))
 (let ((?x539 (* b__0 5)))
 (let ((?x540 (+ v__3 ?x539)))
 (let ((?x569 (* b__0 4)))
 (let ((?x570 (+ v__2 ?x569)))
 (let ((?x550 (* b__0 3)))
 (let ((?x551 (+ v__1 ?x550)))
 (let ((?x535 (* b__0 2)))
 (let ((?x536 (+ v__0 ?x535)))
 (let ((?x541 (store start ?x536 (+ (select start ?x536) 1))))
 (let ((?x554 (store ?x541 ?x551 (+ (select ?x541 ?x551) 1))))
 (let ((?x529 (store ?x554 ?x570 (+ (select ?x554 ?x570) 1))))
 (let ((?x548 (store ?x529 ?x540 (+ (select ?x529 ?x540) 1))))
 (let ((?x567 (store ?x548 ?x558 (+ (select ?x548 ?x558) 1))))
 (let ((?x549 (+ w__4 ?x539)))
 (let ((?x530 (+ w__3 ?x569)))
 (let ((?x560 (+ w__2 ?x550)))
 (let ((?x542 (+ w__1 ?x535)))
 (let ((?x533 (+ w__0 ?x532)))
 (let ((?x534 (store start ?x533 (+ (select start ?x533) 1))))
 (let ((?x545 (store ?x534 ?x542 (+ (select ?x534 ?x542) 1))))
 (let ((?x563 (store ?x545 ?x560 (+ (select ?x545 ?x560) 1))))
 (let ((?x538 (store ?x563 ?x530 (+ (select ?x563 ?x530) 1))))
 (let ((?x557 (store ?x538 ?x549 (+ (select ?x538 ?x549) 1))))
 (= ?x557 ?x567)))))))))))))))))))))))))))
(assert
 (let ((?x34 (* b__1 1)))
 (let ((?x335 (+ v__4 ?x34)))
 (let ((?x141 (* b__1 5)))
 (let ((?x66 (+ v__3 ?x141)))
 (let ((?x152 (* b__1 4)))
 (let ((?x242 (+ v__2 ?x152)))
 (let ((?x129 (* b__1 3)))
 (let ((?x333 (+ v__1 ?x129)))
 (let ((?x314 (* b__1 2)))
 (let ((?x213 (+ v__0 ?x314)))
 (let ((?x217 (store start ?x213 (+ (select start ?x213) 1))))
 (let ((?x179 (store ?x217 ?x333 (+ (select ?x217 ?x333) 1))))
 (let ((?x329 (store ?x179 ?x242 (+ (select ?x179 ?x242) 1))))
 (let ((?x193 (store ?x329 ?x66 (+ (select ?x329 ?x66) 1))))
 (let ((?x245 (store ?x193 ?x335 (+ (select ?x193 ?x335) 1))))
 (let ((?x201 (+ w__4 ?x141)))
 (let ((?x101 (+ w__3 ?x152)))
 (let ((?x275 (+ w__2 ?x129)))
 (let ((?x96 (+ w__1 ?x314)))
 (let ((?x338 (+ w__0 ?x34)))
 (let ((?x309 (store start ?x338 (+ (select start ?x338) 1))))
 (let ((?x160 (store ?x309 ?x96 (+ (select ?x309 ?x96) 1))))
 (let ((?x210 (store ?x160 ?x275 (+ (select ?x160 ?x275) 1))))
 (let ((?x70 (store ?x210 ?x101 (+ (select ?x210 ?x101) 1))))
 (let ((?x334 (store ?x70 ?x201 (+ (select ?x70 ?x201) 1))))
 (= ?x334 ?x245)))))))))))))))))))))))))))
(assert
 (let ((?x137 (* b__2 1)))
 (let ((?x78 (+ v__4 ?x137)))
 (let ((?x236 (* b__2 5)))
 (let ((?x237 (+ v__3 ?x236)))
 (let ((?x367 (* b__2 4)))
 (let ((?x377 (+ v__2 ?x367)))
 (let ((?x25 (* b__2 3)))
 (let ((?x72 (+ v__1 ?x25)))
 (let ((?x41 (* b__2 2)))
 (let ((?x28 (+ v__0 ?x41)))
 (let ((?x321 (store start ?x28 (+ (select start ?x28) 1))))
 (let ((?x311 (store ?x321 ?x72 (+ (select ?x321 ?x72) 1))))
 (let ((?x273 (store ?x311 ?x377 (+ (select ?x311 ?x377) 1))))
 (let ((?x53 (store ?x273 ?x237 (+ (select ?x273 ?x237) 1))))
 (let ((?x365 (store ?x53 ?x78 (+ (select ?x53 ?x78) 1))))
 (let ((?x300 (+ w__4 ?x236)))
 (let ((?x268 (+ w__3 ?x367)))
 (let ((?x263 (+ w__2 ?x25)))
 (let ((?x319 (+ w__1 ?x41)))
 (let ((?x205 (+ w__0 ?x137)))
 (let ((?x229 (store start ?x205 (+ (select start ?x205) 1))))
 (let ((?x169 (store ?x229 ?x319 (+ (select ?x229 ?x319) 1))))
 (let ((?x366 (store ?x169 ?x263 (+ (select ?x169 ?x263) 1))))
 (let ((?x163 (store ?x366 ?x268 (+ (select ?x366 ?x268) 1))))
 (let ((?x313 (store ?x163 ?x300 (+ (select ?x163 ?x300) 1))))
 (= ?x313 ?x365)))))))))))))))))))))))))))
(assert
 (let ((?x20 (* b__3 1)))
 (let ((?x209 (+ v__4 ?x20)))
 (let ((?x608 (* b__3 5)))
 (let ((?x80 (+ v__3 ?x608)))
 (let ((?x582 (* b__3 4)))
 (let ((?x601 (+ v__2 ?x582)))
 (let ((?x147 (* b__3 3)))
 (let ((?x161 (+ v__1 ?x147)))
 (let ((?x24 (* b__3 2)))
 (let ((?x415 (+ v__0 ?x24)))
 (let ((?x243 (store start ?x415 (+ (select start ?x415) 1))))
 (let ((?x577 (store ?x243 ?x161 (+ (select ?x243 ?x161) 1))))
 (let ((?x604 (store ?x577 ?x601 (+ (select ?x577 ?x601) 1))))
 (let ((?x357 (store ?x604 ?x80 (+ (select ?x604 ?x80) 1))))
 (let ((?x255 (store ?x357 ?x209 (+ (select ?x357 ?x209) 1))))
 (let ((?x355 (+ w__4 ?x608)))
 (let ((?x587 (+ w__3 ?x582)))
 (let ((?x597 (+ w__2 ?x147)))
 (let ((?x244 (+ w__1 ?x24)))
 (let ((?x267 (+ w__0 ?x20)))
 (let ((?x108 (store start ?x267 (+ (select start ?x267) 1))))
 (let ((?x69 (store ?x108 ?x244 (+ (select ?x108 ?x244) 1))))
 (let ((?x600 (store ?x69 ?x597 (+ (select ?x69 ?x597) 1))))
 (let ((?x607 (store ?x600 ?x587 (+ (select ?x600 ?x587) 1))))
 (let ((?x414 (store ?x607 ?x355 (+ (select ?x607 ?x355) 1))))
 (= ?x414 ?x255)))))))))))))))))))))))))))
(assert
 (let ((?x145 (* b__4 1)))
 (let ((?x573 (+ v__4 ?x145)))
 (let ((?x64 (* b__4 5)))
 (let ((?x106 (+ v__3 ?x64)))
 (let ((?x240 (* b__4 4)))
 (let ((?x416 (+ v__2 ?x240)))
 (let ((?x107 (* b__4 3)))
 (let ((?x402 (+ v__1 ?x107)))
 (let ((?x75 (* b__4 2)))
 (let ((?x197 (+ v__0 ?x75)))
 (let ((?x274 (store start ?x197 (+ (select start ?x197) 1))))
 (let ((?x173 (store ?x274 ?x402 (+ (select ?x274 ?x402) 1))))
 (let ((?x254 (store ?x173 ?x416 (+ (select ?x173 ?x416) 1))))
 (let ((?x578 (store ?x254 ?x106 (+ (select ?x254 ?x106) 1))))
 (let ((?x576 (store ?x578 ?x573 (+ (select ?x578 ?x573) 1))))
 (let ((?x249 (+ w__4 ?x64)))
 (let ((?x189 (+ w__3 ?x240)))
 (let ((?x188 (+ w__2 ?x107)))
 (let ((?x150 (+ w__1 ?x75)))
 (let ((?x139 (+ w__0 ?x145)))
 (let ((?x68 (store start ?x139 (+ (select start ?x139) 1))))
 (let ((?x135 (store ?x68 ?x150 (+ (select ?x68 ?x150) 1))))
 (let ((?x110 (store ?x135 ?x188 (+ (select ?x135 ?x188) 1))))
 (let ((?x93 (store ?x110 ?x189 (+ (select ?x110 ?x189) 1))))
 (let ((?x119 (store ?x93 ?x249 (+ (select ?x93 ?x249) 1))))
 (= ?x119 ?x576)))))))))))))))))))))))))))
(assert
 (let ((?x258 (* b__5 1)))
 (let ((?x323 (+ v__4 ?x258)))
 (let ((?x305 (* b__5 5)))
 (let ((?x304 (+ v__3 ?x305)))
 (let ((?x426 (* b__5 4)))
 (let ((?x115 (+ v__2 ?x426)))
 (let ((?x148 (* b__5 3)))
 (let ((?x112 (+ v__1 ?x148)))
 (let ((?x610 (* b__5 2)))
 (let ((?x611 (+ v__0 ?x610)))
 (let ((?x615 (store start ?x611 (+ (select start ?x611) 1))))
 (let ((?x170 (store ?x615 ?x112 (+ (select ?x615 ?x112) 1))))
 (let ((?x227 (store ?x170 ?x115 (+ (select ?x170 ?x115) 1))))
 (let ((?x65 (store ?x227 ?x304 (+ (select ?x227 ?x304) 1))))
 (let ((?x409 (store ?x65 ?x323 (+ (select ?x65 ?x323) 1))))
 (let ((?x392 (+ w__4 ?x305)))
 (let ((?x132 (+ w__3 ?x426)))
 (let ((?x121 (+ w__2 ?x148)))
 (let ((?x616 (+ w__1 ?x610)))
 (let ((?x406 (+ w__0 ?x258)))
 (let ((?x609 (store start ?x406 (+ (select start ?x406) 1))))
 (let ((?x342 (store ?x609 ?x616 (+ (select ?x609 ?x616) 1))))
 (let ((?x425 (store ?x342 ?x121 (+ (select ?x342 ?x121) 1))))
 (let ((?x310 (store ?x425 ?x132 (+ (select ?x425 ?x132) 1))))
 (let ((?x399 (store ?x310 ?x392 (+ (select ?x310 ?x392) 1))))
 (= ?x399 ?x409)))))))))))))))))))))))))))
(assert
 (let (($x360 (and (= w__1 v__0) (= w__2 v__1) (= w__3 v__2) (= w__4 v__3) (= w__0 v__4))))
 (not $x360)))
(check-sat)
(exit)
