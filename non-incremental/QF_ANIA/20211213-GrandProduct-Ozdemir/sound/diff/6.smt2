
(set-info :smt-lib-version 2.6)
(set-logic QF_ANIA)
(set-info :source |
Generated by: Alex Ozdemir
Generated on: 2021-12-13
Generator: Z3Py API
Application: Soundness counterexamples for a cryptographic argument
Target solver: cvc5, Z3

# The special soundness of PLONK's grand product argument

Let F be a prime-order field and n a natural less than F's size. Let n = {1,
2, .., n} be a subset of F. The PLONK[1] grand product argument relies on the
fact that given a permutation pi: [n] -> [n] and functions A, B: [n] -> [n],

    prod_i (A(i) + beta * i + gamma) = prod_i (B(i) + beta * pi(i) + gamma)

holds for random beta, gamma in F with good probability only when A composed
with pi is B.

Does this implication hold in a deterministic setting, where the above is
checked for distinct---but non-random---beta and gamma?

If it is checked for n+1 distinct values of beta, and for each value of beta,
n+1 distinct values of gamma, then yes. One can prove this.

If it is checked for 2 distinct values of beta, and for each value of beta, n+1
distinct values of gamma, then no.

This series of benchmarks checks the implication holds
* for varying n
* for a fixed permutation pi = (2 3 ... n 1)
* for all A and B
  * that must be equal ("same") or may differ ("diff")
* for all distinct 2 ("unsound") or n+1 ("sound") beta values

rather than instantiating gamma explicitly, we just check that the multisets

    {{A[i] + beta * i}}_i  ==  {{B[i] + beta * pi(i)}}_i

are equal.

[1]: https://eprint.iacr.org/2019/953

|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "crafted")
(set-info :status unsat)
; benchmark generated from python API
(declare-fun b__6 () Int)
(declare-fun b__5 () Int)
(declare-fun b__4 () Int)
(declare-fun b__3 () Int)
(declare-fun b__2 () Int)
(declare-fun b__1 () Int)
(declare-fun b__0 () Int)
(declare-fun w__0 () Int)
(declare-fun v__0 () Int)
(declare-fun w__1 () Int)
(declare-fun v__1 () Int)
(declare-fun w__2 () Int)
(declare-fun v__2 () Int)
(declare-fun w__3 () Int)
(declare-fun v__3 () Int)
(declare-fun w__4 () Int)
(declare-fun v__4 () Int)
(declare-fun w__5 () Int)
(declare-fun v__5 () Int)
(declare-fun start () (Array Int Int))
(assert
 (and (distinct b__0 b__1 b__2 b__3 b__4 b__5 b__6) true))
(assert
 (>= w__0 0))
(assert
 (>= v__0 0))
(assert
 (<= w__0 6))
(assert
 (<= v__0 6))
(assert
 (>= w__1 0))
(assert
 (>= v__1 0))
(assert
 (<= w__1 6))
(assert
 (<= v__1 6))
(assert
 (>= w__2 0))
(assert
 (>= v__2 0))
(assert
 (<= w__2 6))
(assert
 (<= v__2 6))
(assert
 (>= w__3 0))
(assert
 (>= v__3 0))
(assert
 (<= w__3 6))
(assert
 (<= v__3 6))
(assert
 (>= w__4 0))
(assert
 (>= v__4 0))
(assert
 (<= w__4 6))
(assert
 (<= v__4 6))
(assert
 (>= w__5 0))
(assert
 (>= v__5 0))
(assert
 (<= w__5 6))
(assert
 (<= v__5 6))
(assert
 (let ((?x740 (* b__0 1)))
 (let ((?x775 (+ v__5 ?x740)))
 (let ((?x756 (* b__0 6)))
 (let ((?x757 (+ v__4 ?x756)))
 (let ((?x737 (* b__0 5)))
 (let ((?x738 (+ v__3 ?x737)))
 (let ((?x771 (* b__0 4)))
 (let ((?x777 (+ v__2 ?x771)))
 (let ((?x758 (* b__0 3)))
 (let ((?x759 (+ v__1 ?x758)))
 (let ((?x743 (* b__0 2)))
 (let ((?x744 (+ v__0 ?x743)))
 (let ((?x749 (store start ?x744 (+ (select start ?x744) 1))))
 (let ((?x762 (store ?x749 ?x759 (+ (select ?x749 ?x759) 1))))
 (let ((?x780 (store ?x762 ?x777 (+ (select ?x762 ?x777) 1))))
 (let ((?x746 (store ?x780 ?x738 (+ (select ?x780 ?x738) 1))))
 (let ((?x765 (store ?x746 ?x757 (+ (select ?x746 ?x757) 1))))
 (let ((?x784 (store ?x765 ?x775 (+ (select ?x765 ?x775) 1))))
 (let ((?x766 (+ w__5 ?x756)))
 (let ((?x747 (+ w__4 ?x737)))
 (let ((?x786 (+ w__3 ?x771)))
 (let ((?x767 (+ w__2 ?x758)))
 (let ((?x750 (+ w__1 ?x743)))
 (let ((?x741 (+ w__0 ?x740)))
 (let ((?x742 (store start ?x741 (+ (select start ?x741) 1))))
 (let ((?x753 (store ?x742 ?x750 (+ (select ?x742 ?x750) 1))))
 (let ((?x770 (store ?x753 ?x767 (+ (select ?x753 ?x767) 1))))
 (let ((?x736 (store ?x770 ?x786 (+ (select ?x770 ?x786) 1))))
 (let ((?x755 (store ?x736 ?x747 (+ (select ?x736 ?x747) 1))))
 (let ((?x774 (store ?x755 ?x766 (+ (select ?x755 ?x766) 1))))
 (= ?x774 ?x784))))))))))))))))))))))))))))))))
(assert
 (let ((?x260 (* b__1 1)))
 (let ((?x203 (+ v__5 ?x260)))
 (let ((?x422 (* b__1 6)))
 (let ((?x331 (+ v__4 ?x422)))
 (let ((?x32 (* b__1 5)))
 (let ((?x198 (+ v__3 ?x32)))
 (let ((?x483 (* b__1 4)))
 (let ((?x484 (+ v__2 ?x483)))
 (let ((?x349 (* b__1 3)))
 (let ((?x347 (+ v__1 ?x349)))
 (let ((?x296 (* b__1 2)))
 (let ((?x295 (+ v__0 ?x296)))
 (let ((?x212 (store start ?x295 (+ (select start ?x295) 1))))
 (let ((?x199 (store ?x212 ?x347 (+ (select ?x212 ?x347) 1))))
 (let ((?x581 (store ?x199 ?x484 (+ (select ?x199 ?x484) 1))))
 (let ((?x178 (store ?x581 ?x198 (+ (select ?x581 ?x198) 1))))
 (let ((?x340 (store ?x178 ?x331 (+ (select ?x178 ?x331) 1))))
 (let ((?x489 (store ?x340 ?x203 (+ (select ?x340 ?x203) 1))))
 (let ((?x61 (+ w__5 ?x422)))
 (let ((?x192 (+ w__4 ?x32)))
 (let ((?x583 (+ w__3 ?x483)))
 (let ((?x46 (+ w__2 ?x349)))
 (let ((?x350 (+ w__1 ?x296)))
 (let ((?x225 (+ w__0 ?x260)))
 (let ((?x431 (store start ?x225 (+ (select start ?x225) 1))))
 (let ((?x324 (store ?x431 ?x350 (+ (select ?x431 ?x350) 1))))
 (let ((?x434 (store ?x324 ?x46 (+ (select ?x324 ?x46) 1))))
 (let ((?x586 (store ?x434 ?x583 (+ (select ?x434 ?x583) 1))))
 (let ((?x252 (store ?x586 ?x192 (+ (select ?x586 ?x192) 1))))
 (let ((?x99 (store ?x252 ?x61 (+ (select ?x252 ?x61) 1))))
 (= ?x99 ?x489))))))))))))))))))))))))))))))))
(assert
 (let ((?x566 (* b__2 1)))
 (let ((?x254 (+ v__5 ?x566)))
 (let ((?x204 (* b__2 6)))
 (let ((?x131 (+ v__4 ?x204)))
 (let ((?x36 (* b__2 5)))
 (let ((?x534 (+ v__3 ?x36)))
 (let ((?x537 (* b__2 4)))
 (let ((?x538 (+ v__2 ?x537)))
 (let ((?x385 (* b__2 3)))
 (let ((?x386 (+ v__1 ?x385)))
 (let ((?x466 (* b__2 2)))
 (let ((?x465 (+ v__0 ?x466)))
 (let ((?x619 (store start ?x465 (+ (select start ?x465) 1))))
 (let ((?x383 (store ?x619 ?x386 (+ (select ?x619 ?x386) 1))))
 (let ((?x555 (store ?x383 ?x538 (+ (select ?x383 ?x538) 1))))
 (let ((?x391 (store ?x555 ?x534 (+ (select ?x555 ?x534) 1))))
 (let ((?x535 (store ?x391 ?x131 (+ (select ?x391 ?x131) 1))))
 (let ((?x557 (store ?x535 ?x254 (+ (select ?x535 ?x254) 1))))
 (let ((?x25 (+ w__5 ?x204)))
 (let ((?x357 (+ w__4 ?x36)))
 (let ((?x97 (+ w__3 ?x537)))
 (let ((?x378 (+ w__2 ?x385)))
 (let ((?x620 (+ w__1 ?x466)))
 (let ((?x444 (+ w__0 ?x566)))
 (let ((?x476 (store start ?x444 (+ (select start ?x444) 1))))
 (let ((?x218 (store ?x476 ?x620 (+ (select ?x476 ?x620) 1))))
 (let ((?x574 (store ?x218 ?x378 (+ (select ?x218 ?x378) 1))))
 (let ((?x602 (store ?x574 ?x97 (+ (select ?x574 ?x97) 1))))
 (let ((?x205 (store ?x602 ?x357 (+ (select ?x602 ?x357) 1))))
 (let ((?x189 (store ?x205 ?x25 (+ (select ?x205 ?x25) 1))))
 (= ?x189 ?x557))))))))))))))))))))))))))))))))
(assert
 (let ((?x563 (* b__3 1)))
 (let ((?x141 (+ v__5 ?x563)))
 (let ((?x298 (* b__3 6)))
 (let ((?x299 (+ v__4 ?x298)))
 (let ((?x172 (* b__3 5)))
 (let ((?x103 (+ v__3 ?x172)))
 (let ((?x313 (* b__3 4)))
 (let ((?x262 (+ v__2 ?x313)))
 (let ((?x333 (* b__3 3)))
 (let ((?x353 (+ v__1 ?x333)))
 (let ((?x234 (* b__3 2)))
 (let ((?x542 (+ v__0 ?x234)))
 (let ((?x545 (store start ?x542 (+ (select start ?x542) 1))))
 (let ((?x243 (store ?x545 ?x353 (+ (select ?x545 ?x353) 1))))
 (let ((?x250 (store ?x243 ?x262 (+ (select ?x243 ?x262) 1))))
 (let ((?x366 (store ?x250 ?x103 (+ (select ?x250 ?x103) 1))))
 (let ((?x322 (store ?x366 ?x299 (+ (select ?x366 ?x299) 1))))
 (let ((?x75 (store ?x322 ?x141 (+ (select ?x322 ?x141) 1))))
 (let ((?x303 (+ w__5 ?x298)))
 (let ((?x288 (+ w__4 ?x172)))
 (let ((?x275 (+ w__3 ?x313)))
 (let ((?x560 (+ w__2 ?x333)))
 (let ((?x598 (+ w__1 ?x234)))
 (let ((?x369 (+ w__0 ?x563)))
 (let ((?x242 (store start ?x369 (+ (select start ?x369) 1))))
 (let ((?x608 (store ?x242 ?x598 (+ (select ?x242 ?x598) 1))))
 (let ((?x28 (store ?x608 ?x560 (+ (select ?x608 ?x560) 1))))
 (let ((?x53 (store ?x28 ?x275 (+ (select ?x28 ?x275) 1))))
 (let ((?x314 (store ?x53 ?x288 (+ (select ?x53 ?x288) 1))))
 (let ((?x201 (store ?x314 ?x303 (+ (select ?x314 ?x303) 1))))
 (= ?x201 ?x75))))))))))))))))))))))))))))))))
(assert
 (let ((?x795 (* b__4 1)))
 (let ((?x405 (+ v__5 ?x795)))
 (let ((?x88 (* b__4 6)))
 (let ((?x92 (+ v__4 ?x88)))
 (let ((?x720 (* b__4 5)))
 (let ((?x721 (+ v__3 ?x720)))
 (let ((?x713 (* b__4 4)))
 (let ((?x690 (+ v__2 ?x713)))
 (let ((?x809 (* b__4 3)))
 (let ((?x810 (+ v__1 ?x809)))
 (let ((?x800 (* b__4 2)))
 (let ((?x801 (+ v__0 ?x800)))
 (let ((?x804 (store start ?x801 (+ (select start ?x801) 1))))
 (let ((?x813 (store ?x804 ?x810 (+ (select ?x804 ?x810) 1))))
 (let ((?x716 (store ?x813 ?x690 (+ (select ?x813 ?x690) 1))))
 (let ((?x371 (store ?x716 ?x721 (+ (select ?x716 ?x721) 1))))
 (let ((?x80 (store ?x371 ?x92 (+ (select ?x371 ?x92) 1))))
 (let ((?x274 (store ?x80 ?x405 (+ (select ?x80 ?x405) 1))))
 (let ((?x407 (+ w__5 ?x88)))
 (let ((?x105 (+ w__4 ?x720)))
 (let ((?x717 (+ w__3 ?x713)))
 (let ((?x685 (+ w__2 ?x809)))
 (let ((?x805 (+ w__1 ?x800)))
 (let ((?x796 (+ w__0 ?x795)))
 (let ((?x799 (store start ?x796 (+ (select start ?x796) 1))))
 (let ((?x808 (store ?x799 ?x805 (+ (select ?x799 ?x805) 1))))
 (let ((?x712 (store ?x808 ?x685 (+ (select ?x808 ?x685) 1))))
 (let ((?x719 (store ?x712 ?x717 (+ (select ?x712 ?x717) 1))))
 (let ((?x589 (store ?x719 ?x105 (+ (select ?x719 ?x105) 1))))
 (let ((?x71 (store ?x589 ?x407 (+ (select ?x589 ?x407) 1))))
 (= ?x71 ?x274))))))))))))))))))))))))))))))))
(assert
 (let ((?x686 (* b__5 1)))
 (let ((?x379 (+ v__5 ?x686)))
 (let ((?x400 (* b__5 6)))
 (let ((?x346 (+ v__4 ?x400)))
 (let ((?x593 (* b__5 5)))
 (let ((?x170 (+ v__3 ?x593)))
 (let ((?x257 (* b__5 4)))
 (let ((?x493 (+ v__2 ?x257)))
 (let ((?x469 (* b__5 3)))
 (let ((?x470 (+ v__1 ?x469)))
 (let ((?x687 (* b__5 2)))
 (let ((?x688 (+ v__0 ?x687)))
 (let ((?x283 (store start ?x688 (+ (select start ?x688) 1))))
 (let ((?x478 (store ?x283 ?x470 (+ (select ?x283 ?x470) 1))))
 (let ((?x520 (store ?x478 ?x493 (+ (select ?x478 ?x493) 1))))
 (let ((?x59 (store ?x520 ?x170 (+ (select ?x520 ?x170) 1))))
 (let ((?x594 (store ?x59 ?x346 (+ (select ?x59 ?x346) 1))))
 (let ((?x428 (store ?x594 ?x379 (+ (select ?x594 ?x379) 1))))
 (let ((?x511 (+ w__5 ?x400)))
 (let ((?x305 (+ w__4 ?x593)))
 (let ((?x521 (+ w__3 ?x257)))
 (let ((?x479 (+ w__2 ?x469)))
 (let ((?x591 (+ w__1 ?x687)))
 (let ((?x681 (+ w__0 ?x686)))
 (let ((?x684 (store start ?x681 (+ (select start ?x681) 1))))
 (let ((?x463 (store ?x684 ?x591 (+ (select ?x684 ?x591) 1))))
 (let ((?x265 (store ?x463 ?x479 (+ (select ?x463 ?x479) 1))))
 (let ((?x525 (store ?x265 ?x521 (+ (select ?x265 ?x521) 1))))
 (let ((?x571 (store ?x525 ?x305 (+ (select ?x525 ?x305) 1))))
 (let ((?x382 (store ?x571 ?x511 (+ (select ?x571 ?x511) 1))))
 (= ?x382 ?x428))))))))))))))))))))))))))))))))
(assert
 (let ((?x224 (* b__6 1)))
 (let ((?x823 (+ v__5 ?x224)))
 (let ((?x287 (* b__6 6)))
 (let ((?x285 (+ v__4 ?x287)))
 (let ((?x424 (* b__6 5)))
 (let ((?x279 (+ v__3 ?x424)))
 (let ((?x697 (* b__6 4)))
 (let ((?x698 (+ v__2 ?x697)))
 (let ((?x372 (* b__6 3)))
 (let ((?x49 (+ v__1 ?x372)))
 (let ((?x705 (* b__6 2)))
 (let ((?x726 (+ v__0 ?x705)))
 (let ((?x729 (store start ?x726 (+ (select start ?x726) 1))))
 (let ((?x691 (store ?x729 ?x49 (+ (select ?x729 ?x49) 1))))
 (let ((?x703 (store ?x691 ?x698 (+ (select ?x691 ?x698) 1))))
 (let ((?x220 (store ?x703 ?x279 (+ (select ?x703 ?x279) 1))))
 (let ((?x433 (store ?x220 ?x285 (+ (select ?x220 ?x285) 1))))
 (let ((?x826 (store ?x433 ?x823 (+ (select ?x433 ?x823) 1))))
 (let ((?x730 (+ w__5 ?x287)))
 (let ((?x276 (+ w__4 ?x424)))
 (let ((?x704 (+ w__3 ?x697)))
 (let ((?x692 (+ w__2 ?x372)))
 (let ((?x44 (+ w__1 ?x705)))
 (let ((?x722 (+ w__0 ?x224)))
 (let ((?x725 (store start ?x722 (+ (select start ?x722) 1))))
 (let ((?x87 (store ?x725 ?x44 (+ (select ?x725 ?x44) 1))))
 (let ((?x696 (store ?x87 ?x692 (+ (select ?x87 ?x692) 1))))
 (let ((?x307 (store ?x696 ?x704 (+ (select ?x696 ?x704) 1))))
 (let ((?x343 (store ?x307 ?x276 (+ (select ?x307 ?x276) 1))))
 (let ((?x822 (store ?x343 ?x730 (+ (select ?x343 ?x730) 1))))
 (= ?x822 ?x826))))))))))))))))))))))))))))))))
(assert
 (let (($x311 (and (= w__1 v__0) (= w__2 v__1) (= w__3 v__2) (= w__4 v__3) (= w__5 v__4) (= w__0 v__5))))
 (not $x311)))
(check-sat)
(exit)
