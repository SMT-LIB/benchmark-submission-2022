
(set-info :smt-lib-version 2.6)
(set-logic QF_ANIA)
(set-info :source |
Generated by: Alex Ozdemir
Generated on: 2021-12-13
Generator: Z3Py API
Application: Soundness counterexamples for a cryptographic argument
Target solver: cvc5, Z3

# The special soundness of PLONK's grand product argument

Let F be a prime-order field and n a natural less than F's size. Let n = {1,
2, .., n} be a subset of F. The PLONK[1] grand product argument relies on the
fact that given a permutation pi: [n] -> [n] and functions A, B: [n] -> [n],

    prod_i (A(i) + beta * i + gamma) = prod_i (B(i) + beta * pi(i) + gamma)

holds for random beta, gamma in F with good probability only when A composed
with pi is B.

Does this implication hold in a deterministic setting, where the above is
checked for distinct---but non-random---beta and gamma?

If it is checked for n+1 distinct values of beta, and for each value of beta,
n+1 distinct values of gamma, then yes. One can prove this.

If it is checked for 2 distinct values of beta, and for each value of beta, n+1
distinct values of gamma, then no.

This series of benchmarks checks the implication holds
* for varying n
* for a fixed permutation pi = (2 3 ... n 1)
* for all A and B
  * that must be equal ("same") or may differ ("diff")
* for all distinct 2 ("unsound") or n+1 ("sound") beta values

rather than instantiating gamma explicitly, we just check that the multisets

    {{A[i] + beta * i}}_i  ==  {{B[i] + beta * pi(i)}}_i

are equal.

[1]: https://eprint.iacr.org/2019/953

|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "crafted")
(set-info :status unsat)
; benchmark generated from python API
(declare-fun b__7 () Int)
(declare-fun b__6 () Int)
(declare-fun b__5 () Int)
(declare-fun b__4 () Int)
(declare-fun b__3 () Int)
(declare-fun b__2 () Int)
(declare-fun b__1 () Int)
(declare-fun b__0 () Int)
(declare-fun w__0 () Int)
(declare-fun v__0 () Int)
(declare-fun w__1 () Int)
(declare-fun v__1 () Int)
(declare-fun w__2 () Int)
(declare-fun v__2 () Int)
(declare-fun w__3 () Int)
(declare-fun v__3 () Int)
(declare-fun w__4 () Int)
(declare-fun v__4 () Int)
(declare-fun w__5 () Int)
(declare-fun v__5 () Int)
(declare-fun w__6 () Int)
(declare-fun v__6 () Int)
(declare-fun start () (Array Int Int))
(assert
 (and (distinct b__0 b__1 b__2 b__3 b__4 b__5 b__6 b__7) true))
(assert
 (>= w__0 0))
(assert
 (>= v__0 0))
(assert
 (<= w__0 7))
(assert
 (<= v__0 7))
(assert
 (>= w__1 0))
(assert
 (>= v__1 0))
(assert
 (<= w__1 7))
(assert
 (<= v__1 7))
(assert
 (>= w__2 0))
(assert
 (>= v__2 0))
(assert
 (<= w__2 7))
(assert
 (<= v__2 7))
(assert
 (>= w__3 0))
(assert
 (>= v__3 0))
(assert
 (<= w__3 7))
(assert
 (<= v__3 7))
(assert
 (>= w__4 0))
(assert
 (>= v__4 0))
(assert
 (<= w__4 7))
(assert
 (<= v__4 7))
(assert
 (>= w__5 0))
(assert
 (>= v__5 0))
(assert
 (<= w__5 7))
(assert
 (<= v__5 7))
(assert
 (>= w__6 0))
(assert
 (>= v__6 0))
(assert
 (<= w__6 7))
(assert
 (<= v__6 7))
(assert
 (let ((?x984 (* b__0 1)))
 (let ((?x1028 (+ v__6 ?x984)))
 (let ((?x1009 (* b__0 7)))
 (let ((?x1010 (+ v__5 ?x1009)))
 (let ((?x990 (* b__0 6)))
 (let ((?x991 (+ v__4 ?x990)))
 (let ((?x1033 (* b__0 5)))
 (let ((?x1039 (+ v__3 ?x1033)))
 (let ((?x1015 (* b__0 4)))
 (let ((?x1020 (+ v__2 ?x1015)))
 (let ((?x1002 (* b__0 3)))
 (let ((?x1003 (+ v__1 ?x1002)))
 (let ((?x987 (* b__0 2)))
 (let ((?x988 (+ v__0 ?x987)))
 (let ((?x993 (store start ?x988 (+ (select start ?x988) 1))))
 (let ((?x1006 (store ?x993 ?x1003 (+ (select ?x993 ?x1003) 1))))
 (let ((?x1023 (store ?x1006 ?x1020 (+ (select ?x1006 ?x1020) 1))))
 (let ((?x980 (store ?x1023 ?x1039 (+ (select ?x1023 ?x1039) 1))))
 (let ((?x999 (store ?x980 ?x991 (+ (select ?x980 ?x991) 1))))
 (let ((?x1018 (store ?x999 ?x1010 (+ (select ?x999 ?x1010) 1))))
 (let ((?x1037 (store ?x1018 ?x1028 (+ (select ?x1018 ?x1028) 1))))
 (let ((?x1019 (+ w__6 ?x1009)))
 (let ((?x1000 (+ w__5 ?x990)))
 (let ((?x981 (+ w__4 ?x1033)))
 (let ((?x1024 (+ w__3 ?x1015)))
 (let ((?x1011 (+ w__2 ?x1002)))
 (let ((?x994 (+ w__1 ?x987)))
 (let ((?x985 (+ w__0 ?x984)))
 (let ((?x986 (store start ?x985 (+ (select start ?x985) 1))))
 (let ((?x997 (store ?x986 ?x994 (+ (select ?x986 ?x994) 1))))
 (let ((?x1014 (store ?x997 ?x1011 (+ (select ?x997 ?x1011) 1))))
 (let ((?x1032 (store ?x1014 ?x1024 (+ (select ?x1014 ?x1024) 1))))
 (let ((?x989 (store ?x1032 ?x981 (+ (select ?x1032 ?x981) 1))))
 (let ((?x1008 (store ?x989 ?x1000 (+ (select ?x989 ?x1000) 1))))
 (let ((?x1027 (store ?x1008 ?x1019 (+ (select ?x1008 ?x1019) 1))))
 (= ?x1027 ?x1037)))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x622 (* b__1 1)))
 (let ((?x455 (+ v__6 ?x622)))
 (let ((?x102 (* b__1 7)))
 (let ((?x439 (+ v__5 ?x102)))
 (let ((?x118 (* b__1 6)))
 (let ((?x116 (+ v__4 ?x118)))
 (let ((?x507 (* b__1 5)))
 (let ((?x709 (+ v__3 ?x507)))
 (let ((?x616 (* b__1 4)))
 (let ((?x609 (+ v__2 ?x616)))
 (let ((?x217 (* b__1 3)))
 (let ((?x200 (+ v__1 ?x217)))
 (let ((?x14 (* b__1 2)))
 (let ((?x148 (+ v__0 ?x14)))
 (let ((?x154 (store start ?x148 (+ (select start ?x148) 1))))
 (let ((?x540 (store ?x154 ?x200 (+ (select ?x154 ?x200) 1))))
 (let ((?x526 (store ?x540 ?x609 (+ (select ?x540 ?x609) 1))))
 (let ((?x445 (store ?x526 ?x709 (+ (select ?x526 ?x709) 1))))
 (let ((?x600 (store ?x445 ?x116 (+ (select ?x445 ?x116) 1))))
 (let ((?x448 (store ?x600 ?x439 (+ (select ?x600 ?x439) 1))))
 (let ((?x281 (store ?x448 ?x455 (+ (select ?x448 ?x455) 1))))
 (let ((?x447 (+ w__6 ?x102)))
 (let ((?x582 (+ w__5 ?x118)))
 (let ((?x475 (+ w__4 ?x507)))
 (let ((?x221 (+ w__3 ?x616)))
 (let ((?x528 (+ w__2 ?x217)))
 (let ((?x415 (+ w__1 ?x14)))
 (let ((?x223 (+ w__0 ?x622)))
 (let ((?x45 (store start ?x223 (+ (select start ?x223) 1))))
 (let ((?x530 (store ?x45 ?x415 (+ (select ?x45 ?x415) 1))))
 (let ((?x83 (store ?x530 ?x528 (+ (select ?x530 ?x528) 1))))
 (let ((?x506 (store ?x83 ?x221 (+ (select ?x83 ?x221) 1))))
 (let ((?x18 (store ?x506 ?x475 (+ (select ?x506 ?x475) 1))))
 (let ((?x21 (store ?x18 ?x582 (+ (select ?x18 ?x582) 1))))
 (let ((?x456 (store ?x21 ?x447 (+ (select ?x21 ?x447) 1))))
 (= ?x456 ?x281)))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x552 (* b__2 1)))
 (let ((?x774 (+ v__6 ?x552)))
 (let ((?x768 (* b__2 7)))
 (let ((?x769 (+ v__5 ?x768)))
 (let ((?x203 (* b__2 6)))
 (let ((?x487 (+ v__4 ?x203)))
 (let ((?x84 (* b__2 5)))
 (let ((?x347 (+ v__3 ?x84)))
 (let ((?x323 (* b__2 4)))
 (let ((?x258 (+ v__2 ?x323)))
 (let ((?x731 (* b__2 3)))
 (let ((?x140 (+ v__1 ?x731)))
 (let ((?x106 (* b__2 2)))
 (let ((?x255 (+ v__0 ?x106)))
 (let ((?x541 (store start ?x255 (+ (select start ?x255) 1))))
 (let ((?x231 (store ?x541 ?x140 (+ (select ?x541 ?x140) 1))))
 (let ((?x19 (store ?x231 ?x258 (+ (select ?x231 ?x258) 1))))
 (let ((?x581 (store ?x19 ?x347 (+ (select ?x19 ?x347) 1))))
 (let ((?x781 (store ?x581 ?x487 (+ (select ?x581 ?x487) 1))))
 (let ((?x737 (store ?x781 ?x769 (+ (select ?x781 ?x769) 1))))
 (let ((?x785 (store ?x737 ?x774 (+ (select ?x737 ?x774) 1))))
 (let ((?x747 (+ w__6 ?x768)))
 (let ((?x742 (+ w__5 ?x203)))
 (let ((?x198 (+ w__4 ?x84)))
 (let ((?x311 (+ w__3 ?x323)))
 (let ((?x838 (+ w__2 ?x731)))
 (let ((?x177 (+ w__1 ?x106)))
 (let ((?x182 (+ w__0 ?x552)))
 (let ((?x54 (store start ?x182 (+ (select start ?x182) 1))))
 (let ((?x546 (store ?x54 ?x177 (+ (select ?x54 ?x177) 1))))
 (let ((?x101 (store ?x546 ?x838 (+ (select ?x546 ?x838) 1))))
 (let ((?x338 (store ?x101 ?x311 (+ (select ?x101 ?x311) 1))))
 (let ((?x340 (store ?x338 ?x198 (+ (select ?x338 ?x198) 1))))
 (let ((?x767 (store ?x340 ?x742 (+ (select ?x340 ?x742) 1))))
 (let ((?x755 (store ?x767 ?x747 (+ (select ?x767 ?x747) 1))))
 (= ?x755 ?x785)))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x495 (* b__3 1)))
 (let ((?x796 (+ v__6 ?x495)))
 (let ((?x812 (* b__3 7)))
 (let ((?x813 (+ v__5 ?x812)))
 (let ((?x800 (* b__3 6)))
 (let ((?x805 (+ v__4 ?x800)))
 (let ((?x263 (* b__3 5)))
 (let ((?x715 (+ v__3 ?x263)))
 (let ((?x539 (* b__3 4)))
 (let ((?x391 (+ v__2 ?x539)))
 (let ((?x431 (* b__3 3)))
 (let ((?x296 (+ v__1 ?x431)))
 (let ((?x282 (* b__3 2)))
 (let ((?x723 (+ v__0 ?x282)))
 (let ((?x821 (store start ?x723 (+ (select start ?x723) 1))))
 (let ((?x555 (store ?x821 ?x296 (+ (select ?x821 ?x296) 1))))
 (let ((?x192 (store ?x555 ?x391 (+ (select ?x555 ?x391) 1))))
 (let ((?x232 (store ?x192 ?x715 (+ (select ?x192 ?x715) 1))))
 (let ((?x577 (store ?x232 ?x805 (+ (select ?x232 ?x805) 1))))
 (let ((?x13 (store ?x577 ?x813 (+ (select ?x577 ?x813) 1))))
 (let ((?x602 (store ?x13 ?x796 (+ (select ?x13 ?x796) 1))))
 (let ((?x404 (+ w__6 ?x812)))
 (let ((?x137 (+ w__5 ?x800)))
 (let ((?x354 (+ w__4 ?x263)))
 (let ((?x584 (+ w__3 ?x539)))
 (let ((?x22 (+ w__2 ?x431)))
 (let ((?x822 (+ w__1 ?x282)))
 (let ((?x146 (+ w__0 ?x495)))
 (let ((?x330 (store start ?x146 (+ (select start ?x146) 1))))
 (let ((?x122 (store ?x330 ?x822 (+ (select ?x330 ?x822) 1))))
 (let ((?x538 (store ?x122 ?x22 (+ (select ?x122 ?x22) 1))))
 (let ((?x162 (store ?x538 ?x584 (+ (select ?x538 ?x584) 1))))
 (let ((?x798 (store ?x162 ?x354 (+ (select ?x162 ?x354) 1))))
 (let ((?x25 (store ?x798 ?x137 (+ (select ?x798 ?x137) 1))))
 (let ((?x795 (store ?x25 ?x404 (+ (select ?x25 ?x404) 1))))
 (= ?x795 ?x602)))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x136 (* b__4 1)))
 (let ((?x922 (+ v__6 ?x136)))
 (let ((?x641 (* b__4 7)))
 (let ((?x635 (+ v__5 ?x641)))
 (let ((?x746 (* b__4 6)))
 (let ((?x757 (+ v__4 ?x746)))
 (let ((?x215 (* b__4 5)))
 (let ((?x315 (+ v__3 ?x215)))
 (let ((?x284 (* b__4 4)))
 (let ((?x142 (+ v__2 ?x284)))
 (let ((?x240 (* b__4 3)))
 (let ((?x651 (+ v__1 ?x240)))
 (let ((?x429 (* b__4 2)))
 (let ((?x519 (+ v__0 ?x429)))
 (let ((?x119 (store start ?x519 (+ (select start ?x519) 1))))
 (let ((?x410 (store ?x119 ?x651 (+ (select ?x119 ?x651) 1))))
 (let ((?x42 (store ?x410 ?x142 (+ (select ?x410 ?x142) 1))))
 (let ((?x779 (store ?x42 ?x315 (+ (select ?x42 ?x315) 1))))
 (let ((?x765 (store ?x779 ?x757 (+ (select ?x779 ?x757) 1))))
 (let ((?x917 (store ?x765 ?x635 (+ (select ?x765 ?x635) 1))))
 (let ((?x925 (store ?x917 ?x922 (+ (select ?x917 ?x922) 1))))
 (let ((?x918 (+ w__6 ?x641)))
 (let ((?x775 (+ w__5 ?x746)))
 (let ((?x780 (+ w__4 ?x215)))
 (let ((?x671 (+ w__3 ?x284)))
 (let ((?x401 (+ w__2 ?x240)))
 (let ((?x360 (+ w__1 ?x429)))
 (let ((?x684 (+ w__0 ?x136)))
 (let ((?x361 (store start ?x684 (+ (select start ?x684) 1))))
 (let ((?x453 (store ?x361 ?x360 (+ (select ?x361 ?x360) 1))))
 (let ((?x516 (store ?x453 ?x401 (+ (select ?x453 ?x401) 1))))
 (let ((?x348 (store ?x516 ?x671 (+ (select ?x516 ?x671) 1))))
 (let ((?x745 (store ?x348 ?x780 (+ (select ?x348 ?x780) 1))))
 (let ((?x784 (store ?x745 ?x775 (+ (select ?x745 ?x775) 1))))
 (let ((?x921 (store ?x784 ?x918 (+ (select ?x784 ?x918) 1))))
 (= ?x921 ?x925)))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x1057 (* b__5 1)))
 (let ((?x326 (+ v__6 ?x1057)))
 (let ((?x409 (* b__5 7)))
 (let ((?x406 (+ v__5 ?x409)))
 (let ((?x645 (* b__5 6)))
 (let ((?x640 (+ v__4 ?x645)))
 (let ((?x583 (* b__5 5)))
 (let ((?x376 (+ v__3 ?x583)))
 (let ((?x942 (* b__5 4)))
 (let ((?x943 (+ v__2 ?x942)))
 (let ((?x849 (* b__5 3)))
 (let ((?x848 (+ v__1 ?x849)))
 (let ((?x631 (* b__5 2)))
 (let ((?x630 (+ v__0 ?x631)))
 (let ((?x627 (store start ?x630 (+ (select start ?x630) 1))))
 (let ((?x210 (store ?x627 ?x848 (+ (select ?x627 ?x848) 1))))
 (let ((?x946 (store ?x210 ?x943 (+ (select ?x210 ?x943) 1))))
 (let ((?x654 (store ?x946 ?x376 (+ (select ?x946 ?x376) 1))))
 (let ((?x846 (store ?x654 ?x640 (+ (select ?x654 ?x640) 1))))
 (let ((?x588 (store ?x846 ?x406 (+ (select ?x846 ?x406) 1))))
 (let ((?x310 (store ?x588 ?x326 (+ (select ?x588 ?x326) 1))))
 (let ((?x328 (+ w__6 ?x409)))
 (let ((?x91 (+ w__5 ?x645)))
 (let ((?x649 (+ w__4 ?x583)))
 (let ((?x947 (+ w__3 ?x942)))
 (let ((?x160 (+ w__2 ?x849)))
 (let ((?x789 (+ w__1 ?x631)))
 (let ((?x1085 (+ w__0 ?x1057)))
 (let ((?x636 (store start ?x1085 (+ (select start ?x1085) 1))))
 (let ((?x850 (store ?x636 ?x789 (+ (select ?x636 ?x789) 1))))
 (let ((?x941 (store ?x850 ?x160 (+ (select ?x850 ?x160) 1))))
 (let ((?x131 (store ?x941 ?x947 (+ (select ?x941 ?x947) 1))))
 (let ((?x646 (store ?x131 ?x649 (+ (select ?x131 ?x649) 1))))
 (let ((?x337 (store ?x646 ?x91 (+ (select ?x646 ?x91) 1))))
 (let ((?x663 (store ?x337 ?x328 (+ (select ?x337 ?x328) 1))))
 (= ?x663 ?x310)))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x138 (* b__6 1)))
 (let ((?x658 (+ v__6 ?x138)))
 (let ((?x1065 (* b__6 7)))
 (let ((?x1066 (+ v__5 ?x1065)))
 (let ((?x1053 (* b__6 6)))
 (let ((?x1054 (+ v__4 ?x1053)))
 (let ((?x105 (* b__6 5)))
 (let ((?x599 (+ v__3 ?x105)))
 (let ((?x158 (* b__6 4)))
 (let ((?x249 (+ v__2 ?x158)))
 (let ((?x664 (* b__6 3)))
 (let ((?x496 (+ v__1 ?x664)))
 (let ((?x1052 (* b__6 2)))
 (let ((?x677 (+ v__0 ?x1052)))
 (let ((?x674 (store start ?x677 (+ (select start ?x677) 1))))
 (let ((?x839 (store ?x674 ?x496 (+ (select ?x674 ?x496) 1))))
 (let ((?x224 (store ?x839 ?x249 (+ (select ?x839 ?x249) 1))))
 (let ((?x1072 (store ?x224 ?x599 (+ (select ?x224 ?x599) 1))))
 (let ((?x1058 (store ?x1072 ?x1054 (+ (select ?x1072 ?x1054) 1))))
 (let ((?x1070 (store ?x1058 ?x1066 (+ (select ?x1058 ?x1066) 1))))
 (let ((?x268 (store ?x1070 ?x658 (+ (select ?x1070 ?x658) 1))))
 (let ((?x1071 (+ w__6 ?x1065)))
 (let ((?x1059 (+ w__5 ?x1053)))
 (let ((?x97 (+ w__4 ?x105)))
 (let ((?x47 (+ w__3 ?x158)))
 (let ((?x370 (+ w__2 ?x664)))
 (let ((?x673 (+ w__1 ?x1052)))
 (let ((?x98 (+ w__0 ?x138)))
 (let ((?x660 (store start ?x98 (+ (select start ?x98) 1))))
 (let ((?x665 (store ?x660 ?x673 (+ (select ?x660 ?x673) 1))))
 (let ((?x197 (store ?x665 ?x370 (+ (select ?x665 ?x370) 1))))
 (let ((?x534 (store ?x197 ?x47 (+ (select ?x197 ?x47) 1))))
 (let ((?x49 (store ?x534 ?x97 (+ (select ?x534 ?x97) 1))))
 (let ((?x1064 (store ?x49 ?x1059 (+ (select ?x49 ?x1059) 1))))
 (let ((?x689 (store ?x1064 ?x1071 (+ (select ?x1064 ?x1071) 1))))
 (= ?x689 ?x268)))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x372 (* b__7 1)))
 (let ((?x24 (+ v__6 ?x372)))
 (let ((?x972 (* b__7 7)))
 (let ((?x973 (+ v__5 ?x972)))
 (let ((?x963 (* b__7 6)))
 (let ((?x964 (+ v__4 ?x963)))
 (let ((?x953 (* b__7 5)))
 (let ((?x954 (+ v__3 ?x953)))
 (let ((?x363 (* b__7 4)))
 (let ((?x100 (+ v__2 ?x363)))
 (let ((?x441 (* b__7 3)))
 (let ((?x513 (+ v__1 ?x441)))
 (let ((?x287 (* b__7 2)))
 (let ((?x705 (+ v__0 ?x287)))
 (let ((?x294 (store start ?x705 (+ (select start ?x705) 1))))
 (let ((?x259 (store ?x294 ?x513 (+ (select ?x294 ?x513) 1))))
 (let ((?x175 (store ?x259 ?x100 (+ (select ?x259 ?x100) 1))))
 (let ((?x957 (store ?x175 ?x954 (+ (select ?x175 ?x954) 1))))
 (let ((?x967 (store ?x957 ?x964 (+ (select ?x957 ?x964) 1))))
 (let ((?x976 (store ?x967 ?x973 (+ (select ?x967 ?x973) 1))))
 (let ((?x365 (store ?x976 ?x24 (+ (select ?x976 ?x24) 1))))
 (let ((?x977 (+ w__6 ?x972)))
 (let ((?x968 (+ w__5 ?x963)))
 (let ((?x959 (+ w__4 ?x953)))
 (let ((?x413 (+ w__3 ?x363)))
 (let ((?x112 (+ w__2 ?x441)))
 (let ((?x295 (+ w__1 ?x287)))
 (let ((?x728 (+ w__0 ?x372)))
 (let ((?x494 (store start ?x728 (+ (select start ?x728) 1))))
 (let ((?x670 (store ?x494 ?x295 (+ (select ?x494 ?x295) 1))))
 (let ((?x389 (store ?x670 ?x112 (+ (select ?x670 ?x112) 1))))
 (let ((?x952 (store ?x389 ?x413 (+ (select ?x389 ?x413) 1))))
 (let ((?x962 (store ?x952 ?x959 (+ (select ?x952 ?x959) 1))))
 (let ((?x971 (store ?x962 ?x968 (+ (select ?x962 ?x968) 1))))
 (let ((?x139 (store ?x971 ?x977 (+ (select ?x971 ?x977) 1))))
 (= ?x139 ?x365)))))))))))))))))))))))))))))))))))))
(assert
 (let (($x543 (and (= w__1 v__0) (= w__2 v__1) (= w__3 v__2) (= w__4 v__3) (= w__5 v__4) (= w__6 v__5) (= w__0 v__6))))
 (not $x543)))
(check-sat)
(exit)
