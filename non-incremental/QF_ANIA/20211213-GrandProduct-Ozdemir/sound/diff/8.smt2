
(set-info :smt-lib-version 2.6)
(set-logic QF_ANIA)
(set-info :source |
Generated by: Alex Ozdemir
Generated on: 2021-12-13
Generator: Z3Py API
Application: Soundness counterexamples for a cryptographic argument
Target solver: cvc5, Z3

# The special soundness of PLONK's grand product argument

Let F be a prime-order field and n a natural less than F's size. Let n = {1,
2, .., n} be a subset of F. The PLONK[1] grand product argument relies on the
fact that given a permutation pi: [n] -> [n] and functions A, B: [n] -> [n],

    prod_i (A(i) + beta * i + gamma) = prod_i (B(i) + beta * pi(i) + gamma)

holds for random beta, gamma in F with good probability only when A composed
with pi is B.

Does this implication hold in a deterministic setting, where the above is
checked for distinct---but non-random---beta and gamma?

If it is checked for n+1 distinct values of beta, and for each value of beta,
n+1 distinct values of gamma, then yes. One can prove this.

If it is checked for 2 distinct values of beta, and for each value of beta, n+1
distinct values of gamma, then no.

This series of benchmarks checks the implication holds
* for varying n
* for a fixed permutation pi = (2 3 ... n 1)
* for all A and B
  * that must be equal ("same") or may differ ("diff")
* for all distinct 2 ("unsound") or n+1 ("sound") beta values

rather than instantiating gamma explicitly, we just check that the multisets

    {{A[i] + beta * i}}_i  ==  {{B[i] + beta * pi(i)}}_i

are equal.

[1]: https://eprint.iacr.org/2019/953

|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "crafted")
(set-info :status unsat)
; benchmark generated from python API
(declare-fun b__8 () Int)
(declare-fun b__7 () Int)
(declare-fun b__6 () Int)
(declare-fun b__5 () Int)
(declare-fun b__4 () Int)
(declare-fun b__3 () Int)
(declare-fun b__2 () Int)
(declare-fun b__1 () Int)
(declare-fun b__0 () Int)
(declare-fun w__0 () Int)
(declare-fun v__0 () Int)
(declare-fun w__1 () Int)
(declare-fun v__1 () Int)
(declare-fun w__2 () Int)
(declare-fun v__2 () Int)
(declare-fun w__3 () Int)
(declare-fun v__3 () Int)
(declare-fun w__4 () Int)
(declare-fun v__4 () Int)
(declare-fun w__5 () Int)
(declare-fun v__5 () Int)
(declare-fun w__6 () Int)
(declare-fun v__6 () Int)
(declare-fun w__7 () Int)
(declare-fun v__7 () Int)
(declare-fun start () (Array Int Int))
(assert
 (and (distinct b__0 b__1 b__2 b__3 b__4 b__5 b__6 b__7 b__8) true))
(assert
 (>= w__0 0))
(assert
 (>= v__0 0))
(assert
 (<= w__0 8))
(assert
 (<= v__0 8))
(assert
 (>= w__1 0))
(assert
 (>= v__1 0))
(assert
 (<= w__1 8))
(assert
 (<= v__1 8))
(assert
 (>= w__2 0))
(assert
 (>= v__2 0))
(assert
 (<= w__2 8))
(assert
 (<= v__2 8))
(assert
 (>= w__3 0))
(assert
 (>= v__3 0))
(assert
 (<= w__3 8))
(assert
 (<= v__3 8))
(assert
 (>= w__4 0))
(assert
 (>= v__4 0))
(assert
 (<= w__4 8))
(assert
 (<= v__4 8))
(assert
 (>= w__5 0))
(assert
 (>= v__5 0))
(assert
 (<= w__5 8))
(assert
 (<= v__5 8))
(assert
 (>= w__6 0))
(assert
 (>= v__6 0))
(assert
 (<= w__6 8))
(assert
 (<= v__6 8))
(assert
 (>= w__7 0))
(assert
 (>= v__7 0))
(assert
 (<= w__7 8))
(assert
 (<= v__7 8))
(assert
 (let ((?x1264 (* b__0 1)))
 (let ((?x1317 (+ v__7 ?x1264)))
 (let ((?x1298 (* b__0 8)))
 (let ((?x1299 (+ v__6 ?x1298)))
 (let ((?x1279 (* b__0 7)))
 (let ((?x1280 (+ v__5 ?x1279)))
 (let ((?x1260 (* b__0 6)))
 (let ((?x1261 (+ v__4 ?x1260)))
 (let ((?x1312 (* b__0 5)))
 (let ((?x1313 (+ v__3 ?x1312)))
 (let ((?x1295 (* b__0 4)))
 (let ((?x1300 (+ v__2 ?x1295)))
 (let ((?x1282 (* b__0 3)))
 (let ((?x1283 (+ v__1 ?x1282)))
 (let ((?x1267 (* b__0 2)))
 (let ((?x1268 (+ v__0 ?x1267)))
 (let ((?x1273 (store start ?x1268 (+ (select start ?x1268) 1))))
 (let ((?x1286 (store ?x1273 ?x1283 (+ (select ?x1273 ?x1283) 1))))
 (let ((?x1303 (store ?x1286 ?x1300 (+ (select ?x1286 ?x1300) 1))))
 (let ((?x1321 (store ?x1303 ?x1313 (+ (select ?x1303 ?x1313) 1))))
 (let ((?x1269 (store ?x1321 ?x1261 (+ (select ?x1321 ?x1261) 1))))
 (let ((?x1288 (store ?x1269 ?x1280 (+ (select ?x1269 ?x1280) 1))))
 (let ((?x1307 (store ?x1288 ?x1299 (+ (select ?x1288 ?x1299) 1))))
 (let ((?x1326 (store ?x1307 ?x1317 (+ (select ?x1307 ?x1317) 1))))
 (let ((?x1308 (+ w__7 ?x1298)))
 (let ((?x1289 (+ w__6 ?x1279)))
 (let ((?x1270 (+ w__5 ?x1260)))
 (let ((?x1322 (+ w__4 ?x1312)))
 (let ((?x1304 (+ w__3 ?x1295)))
 (let ((?x1291 (+ w__2 ?x1282)))
 (let ((?x1274 (+ w__1 ?x1267)))
 (let ((?x1265 (+ w__0 ?x1264)))
 (let ((?x1266 (store start ?x1265 (+ (select start ?x1265) 1))))
 (let ((?x1277 (store ?x1266 ?x1274 (+ (select ?x1266 ?x1274) 1))))
 (let ((?x1294 (store ?x1277 ?x1291 (+ (select ?x1277 ?x1291) 1))))
 (let ((?x1311 (store ?x1294 ?x1304 (+ (select ?x1294 ?x1304) 1))))
 (let ((?x1330 (store ?x1311 ?x1322 (+ (select ?x1311 ?x1322) 1))))
 (let ((?x1278 (store ?x1330 ?x1270 (+ (select ?x1330 ?x1270) 1))))
 (let ((?x1297 (store ?x1278 ?x1289 (+ (select ?x1278 ?x1289) 1))))
 (let ((?x1316 (store ?x1297 ?x1308 (+ (select ?x1297 ?x1308) 1))))
 (= ?x1316 ?x1326))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x57 (* b__1 1)))
 (let ((?x1097 (+ v__7 ?x57)))
 (let ((?x171 (* b__1 8)))
 (let ((?x416 (+ v__6 ?x171)))
 (let ((?x712 (* b__1 7)))
 (let ((?x810 (+ v__5 ?x712)))
 (let ((?x399 (* b__1 6)))
 (let ((?x1043 (+ v__4 ?x399)))
 (let ((?x518 (* b__1 5)))
 (let ((?x1087 (+ v__3 ?x518)))
 (let ((?x155 (* b__1 4)))
 (let ((?x368 (+ v__2 ?x155)))
 (let ((?x692 (* b__1 3)))
 (let ((?x87 (+ v__1 ?x692)))
 (let ((?x114 (* b__1 2)))
 (let ((?x794 (+ v__0 ?x114)))
 (let ((?x847 (store start ?x794 (+ (select start ?x794) 1))))
 (let ((?x1078 (store ?x847 ?x87 (+ (select ?x847 ?x87) 1))))
 (let ((?x797 (store ?x1078 ?x368 (+ (select ?x1078 ?x368) 1))))
 (let ((?x276 (store ?x797 ?x1087 (+ (select ?x797 ?x1087) 1))))
 (let ((?x419 (store ?x276 ?x1043 (+ (select ?x276 ?x1043) 1))))
 (let ((?x695 (store ?x419 ?x810 (+ (select ?x419 ?x810) 1))))
 (let ((?x1099 (store ?x695 ?x416 (+ (select ?x695 ?x416) 1))))
 (let ((?x1094 (store ?x1099 ?x1097 (+ (select ?x1099 ?x1097) 1))))
 (let ((?x39 (+ w__7 ?x171)))
 (let ((?x718 (+ w__6 ?x712)))
 (let ((?x766 (+ w__5 ?x399)))
 (let ((?x1076 (+ w__4 ?x518)))
 (let ((?x189 (+ w__3 ?x155)))
 (let ((?x1079 (+ w__2 ?x692)))
 (let ((?x270 (+ w__1 ?x114)))
 (let ((?x426 (+ w__0 ?x57)))
 (let ((?x289 (store start ?x426 (+ (select start ?x426) 1))))
 (let ((?x693 (store ?x289 ?x270 (+ (select ?x289 ?x270) 1))))
 (let ((?x411 (store ?x693 ?x1079 (+ (select ?x693 ?x1079) 1))))
 (let ((?x574 (store ?x411 ?x189 (+ (select ?x411 ?x189) 1))))
 (let ((?x248 (store ?x574 ?x1076 (+ (select ?x574 ?x1076) 1))))
 (let ((?x593 (store ?x248 ?x766 (+ (select ?x248 ?x766) 1))))
 (let ((?x895 (store ?x593 ?x718 (+ (select ?x593 ?x718) 1))))
 (let ((?x380 (store ?x895 ?x39 (+ (select ?x895 ?x39) 1))))
 (= ?x380 ?x1094))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x16 (* b__2 1)))
 (let ((?x353 (+ v__7 ?x16)))
 (let ((?x882 (* b__2 8)))
 (let ((?x873 (+ v__6 ?x882)))
 (let ((?x907 (* b__2 7)))
 (let ((?x902 (+ v__5 ?x907)))
 (let ((?x992 (* b__2 6)))
 (let ((?x998 (+ v__4 ?x992)))
 (let ((?x702 (* b__2 5)))
 (let ((?x220 (+ v__3 ?x702)))
 (let ((?x388 (* b__2 4)))
 (let ((?x512 (+ v__2 ?x388)))
 (let ((?x462 (* b__2 3)))
 (let ((?x424 (+ v__1 ?x462)))
 (let ((?x238 (* b__2 2)))
 (let ((?x393 (+ v__0 ?x238)))
 (let ((?x269 (store start ?x393 (+ (select start ?x393) 1))))
 (let ((?x950 (store ?x269 ?x424 (+ (select ?x269 ?x424) 1))))
 (let ((?x1075 (store ?x950 ?x512 (+ (select ?x950 ?x512) 1))))
 (let ((?x1020 (store ?x1075 ?x220 (+ (select ?x1075 ?x220) 1))))
 (let ((?x1035 (store ?x1020 ?x998 (+ (select ?x1020 ?x998) 1))))
 (let ((?x899 (store ?x1035 ?x902 (+ (select ?x1035 ?x902) 1))))
 (let ((?x866 (store ?x899 ?x873 (+ (select ?x899 ?x873) 1))))
 (let ((?x607 (store ?x866 ?x353 (+ (select ?x866 ?x353) 1))))
 (let ((?x865 (+ w__7 ?x882)))
 (let ((?x890 (+ w__6 ?x907)))
 (let ((?x1036 (+ w__5 ?x992)))
 (let ((?x1021 (+ w__4 ?x702)))
 (let ((?x157 (+ w__3 ?x388)))
 (let ((?x227 (+ w__2 ?x462)))
 (let ((?x824 (+ w__1 ?x238)))
 (let ((?x595 (+ w__0 ?x16)))
 (let ((?x499 (store start ?x595 (+ (select start ?x595) 1))))
 (let ((?x559 (store ?x499 ?x824 (+ (select ?x499 ?x824) 1))))
 (let ((?x624 (store ?x559 ?x227 (+ (select ?x559 ?x227) 1))))
 (let ((?x699 (store ?x624 ?x157 (+ (select ?x624 ?x157) 1))))
 (let ((?x991 (store ?x699 ?x1021 (+ (select ?x699 ?x1021) 1))))
 (let ((?x859 (store ?x991 ?x1036 (+ (select ?x991 ?x1036) 1))))
 (let ((?x883 (store ?x859 ?x890 (+ (select ?x859 ?x890) 1))))
 (let ((?x329 (store ?x883 ?x865 (+ (select ?x883 ?x865) 1))))
 (= ?x329 ?x607))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x582 (* b__3 1)))
 (let ((?x46 (+ v__7 ?x582)))
 (let ((?x647 (* b__3 8)))
 (let ((?x845 (+ v__6 ?x647)))
 (let ((?x365 (* b__3 7)))
 (let ((?x951 (+ v__5 ?x365)))
 (let ((?x376 (* b__3 6)))
 (let ((?x24 (+ v__4 ?x376)))
 (let ((?x102 (* b__3 5)))
 (let ((?x447 (+ v__3 ?x102)))
 (let ((?x816 (* b__3 4)))
 (let ((?x817 (+ v__2 ?x816)))
 (let ((?x771 (* b__3 3)))
 (let ((?x737 (+ v__1 ?x771)))
 (let ((?x754 (* b__3 2)))
 (let ((?x140 (+ v__0 ?x754)))
 (let ((?x231 (store start ?x140 (+ (select start ?x140) 1))))
 (let ((?x793 (store ?x231 ?x737 (+ (select ?x231 ?x737) 1))))
 (let ((?x475 (store ?x793 ?x817 (+ (select ?x793 ?x817) 1))))
 (let ((?x110 (store ?x475 ?x447 (+ (select ?x475 ?x447) 1))))
 (let ((?x33 (store ?x110 ?x24 (+ (select ?x110 ?x24) 1))))
 (let ((?x960 (store ?x33 ?x951 (+ (select ?x33 ?x951) 1))))
 (let ((?x300 (store ?x960 ?x845 (+ (select ?x960 ?x845) 1))))
 (let ((?x677 (store ?x300 ?x46 (+ (select ?x300 ?x46) 1))))
 (let ((?x210 (+ w__7 ?x647)))
 (let ((?x971 (+ w__6 ?x365)))
 (let ((?x965 (+ w__5 ?x376)))
 (let ((?x672 (+ w__4 ?x102)))
 (let ((?x206 (+ w__3 ?x816)))
 (let ((?x125 (+ w__2 ?x771)))
 (let ((?x485 (+ w__1 ?x754)))
 (let ((?x550 (+ w__0 ?x582)))
 (let ((?x748 (store start ?x550 (+ (select start ?x550) 1))))
 (let ((?x487 (store ?x748 ?x485 (+ (select ?x748 ?x485) 1))))
 (let ((?x528 (store ?x487 ?x125 (+ (select ?x487 ?x125) 1))))
 (let ((?x21 (store ?x528 ?x206 (+ (select ?x528 ?x206) 1))))
 (let ((?x555 (store ?x21 ?x672 (+ (select ?x21 ?x672) 1))))
 (let ((?x165 (store ?x555 ?x965 (+ (select ?x555 ?x965) 1))))
 (let ((?x296 (store ?x165 ?x971 (+ (select ?x165 ?x971) 1))))
 (let ((?x1077 (store ?x296 ?x210 (+ (select ?x296 ?x210) 1))))
 (= ?x1077 ?x677))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x948 (* b__4 1)))
 (let ((?x176 (+ v__7 ?x948)))
 (let ((?x919 (* b__4 8)))
 (let ((?x738 (+ v__6 ?x919)))
 (let ((?x401 (* b__4 7)))
 (let ((?x922 (+ v__5 ?x401)))
 (let ((?x301 (* b__4 6)))
 (let ((?x142 (+ v__4 ?x301)))
 (let ((?x80 (* b__4 5)))
 (let ((?x274 (+ v__3 ?x80)))
 (let ((?x723 (* b__4 4)))
 (let ((?x613 (+ v__2 ?x723)))
 (let ((?x789 (* b__4 3)))
 (let ((?x947 (+ v__1 ?x789)))
 (let ((?x137 (* b__4 2)))
 (let ((?x711 (+ v__0 ?x137)))
 (let ((?x349 (store start ?x711 (+ (select start ?x711) 1))))
 (let ((?x714 (store ?x349 ?x947 (+ (select ?x349 ?x947) 1))))
 (let ((?x43 (store ?x714 ?x613 (+ (select ?x714 ?x613) 1))))
 (let ((?x926 (store ?x43 ?x274 (+ (select ?x43 ?x274) 1))))
 (let ((?x782 (store ?x926 ?x142 (+ (select ?x926 ?x142) 1))))
 (let ((?x757 (store ?x782 ?x922 (+ (select ?x782 ?x922) 1))))
 (let ((?x516 (store ?x757 ?x738 (+ (select ?x757 ?x738) 1))))
 (let ((?x765 (store ?x516 ?x176 (+ (select ?x516 ?x176) 1))))
 (let ((?x661 (+ w__7 ?x919)))
 (let ((?x261 (+ w__6 ?x401)))
 (let ((?x775 (+ w__5 ?x301)))
 (let ((?x925 (+ w__4 ?x80)))
 (let ((?x707 (+ w__3 ?x723)))
 (let ((?x232 (+ w__2 ?x789)))
 (let ((?x177 (+ w__1 ?x137)))
 (let ((?x22 (+ w__0 ?x948)))
 (let ((?x461 (store start ?x22 (+ (select start ?x22) 1))))
 (let ((?x631 (store ?x461 ?x177 (+ (select ?x461 ?x177) 1))))
 (let ((?x721 (store ?x631 ?x232 (+ (select ?x631 ?x232) 1))))
 (let ((?x383 (store ?x721 ?x707 (+ (select ?x721 ?x707) 1))))
 (let ((?x293 (store ?x383 ?x925 (+ (select ?x383 ?x925) 1))))
 (let ((?x683 (store ?x293 ?x775 (+ (select ?x293 ?x775) 1))))
 (let ((?x920 (store ?x683 ?x261 (+ (select ?x683 ?x261) 1))))
 (let ((?x235 (store ?x920 ?x661 (+ (select ?x920 ?x661) 1))))
 (= ?x235 ?x765))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x163 (* b__5 1)))
 (let ((?x522 (+ v__7 ?x163)))
 (let ((?x1234 (* b__5 8)))
 (let ((?x77 (+ v__6 ?x1234)))
 (let ((?x906 (* b__5 7)))
 (let ((?x911 (+ v__5 ?x906)))
 (let ((?x332 (* b__5 6)))
 (let ((?x214 (+ v__4 ?x332)))
 (let ((?x573 (* b__5 5)))
 (let ((?x578 (+ v__3 ?x573)))
 (let ((?x362 (* b__5 4)))
 (let ((?x381 (+ v__2 ?x362)))
 (let ((?x556 (* b__5 3)))
 (let ((?x557 (+ v__1 ?x556)))
 (let ((?x466 (* b__5 2)))
 (let ((?x476 (+ v__0 ?x466)))
 (let ((?x44 (store start ?x476 (+ (select start ?x476) 1))))
 (let ((?x260 (store ?x44 ?x557 (+ (select ?x44 ?x557) 1))))
 (let ((?x50 (store ?x260 ?x381 (+ (select ?x260 ?x381) 1))))
 (let ((?x533 (store ?x50 ?x578 (+ (select ?x50 ?x578) 1))))
 (let ((?x135 (store ?x533 ?x214 (+ (select ?x533 ?x214) 1))))
 (let ((?x913 (store ?x135 ?x911 (+ (select ?x135 ?x911) 1))))
 (let ((?x145 (store ?x913 ?x77 (+ (select ?x913 ?x77) 1))))
 (let ((?x508 (store ?x145 ?x522 (+ (select ?x145 ?x522) 1))))
 (let ((?x170 (+ w__7 ?x1234)))
 (let ((?x915 (+ w__6 ?x906)))
 (let ((?x897 (+ w__5 ?x332)))
 (let ((?x60 (+ w__4 ?x573)))
 (let ((?x90 (+ w__3 ?x362)))
 (let ((?x225 (+ w__2 ?x556)))
 (let ((?x694 (+ w__1 ?x466)))
 (let ((?x144 (+ w__0 ?x163)))
 (let ((?x620 (store start ?x144 (+ (select start ?x144) 1))))
 (let ((?x343 (store ?x620 ?x694 (+ (select ?x620 ?x694) 1))))
 (let ((?x56 (store ?x343 ?x225 (+ (select ?x343 ?x225) 1))))
 (let ((?x549 (store ?x56 ?x90 (+ (select ?x56 ?x90) 1))))
 (let ((?x81 (store ?x549 ?x60 (+ (select ?x549 ?x60) 1))))
 (let ((?x904 (store ?x81 ?x897 (+ (select ?x81 ?x897) 1))))
 (let ((?x1201 (store ?x904 ?x915 (+ (select ?x904 ?x915) 1))))
 (let ((?x483 (store ?x1201 ?x170 (+ (select ?x1201 ?x170) 1))))
 (= ?x483 ?x508))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x575 (* b__6 1)))
 (let ((?x243 (+ v__7 ?x575)))
 (let ((?x603 (* b__6 8)))
 (let ((?x604 (+ v__6 ?x603)))
 (let ((?x867 (* b__6 7)))
 (let ((?x868 (+ v__5 ?x867)))
 (let ((?x1249 (* b__6 6)))
 (let ((?x1250 (+ v__4 ?x1249)))
 (let ((?x1241 (* b__6 5)))
 (let ((?x1242 (+ v__3 ?x1241)))
 (let ((?x1231 (* b__6 4)))
 (let ((?x1232 (+ v__2 ?x1231)))
 (let ((?x673 (* b__6 3)))
 (let ((?x686 (+ v__1 ?x673)))
 (let ((?x1221 (* b__6 2)))
 (let ((?x827 (+ v__0 ?x1221)))
 (let ((?x1034 (store start ?x827 (+ (select start ?x827) 1))))
 (let ((?x1227 (store ?x1034 ?x686 (+ (select ?x1034 ?x686) 1))))
 (let ((?x1236 (store ?x1227 ?x1232 (+ (select ?x1227 ?x1232) 1))))
 (let ((?x1245 (store ?x1236 ?x1242 (+ (select ?x1236 ?x1242) 1))))
 (let ((?x1253 (store ?x1245 ?x1250 (+ (select ?x1245 ?x1250) 1))))
 (let ((?x879 (store ?x1253 ?x868 (+ (select ?x1253 ?x868) 1))))
 (let ((?x190 (store ?x879 ?x604 (+ (select ?x879 ?x604) 1))))
 (let ((?x542 (store ?x190 ?x243 (+ (select ?x190 ?x243) 1))))
 (let ((?x448 (+ w__7 ?x603)))
 (let ((?x590 (+ w__6 ?x867)))
 (let ((?x529 (+ w__5 ?x1249)))
 (let ((?x1216 (+ w__4 ?x1241)))
 (let ((?x1237 (+ w__3 ?x1231)))
 (let ((?x1228 (+ w__2 ?x673)))
 (let ((?x986 (+ w__1 ?x1221)))
 (let ((?x509 (+ w__0 ?x575)))
 (let ((?x181 (store start ?x509 (+ (select start ?x509) 1))))
 (let ((?x667 (store ?x181 ?x986 (+ (select ?x181 ?x986) 1))))
 (let ((?x1230 (store ?x667 ?x1228 (+ (select ?x667 ?x1228) 1))))
 (let ((?x1240 (store ?x1230 ?x1237 (+ (select ?x1230 ?x1237) 1))))
 (let ((?x1248 (store ?x1240 ?x1216 (+ (select ?x1240 ?x1216) 1))))
 (let ((?x861 (store ?x1248 ?x529 (+ (select ?x1248 ?x529) 1))))
 (let ((?x188 (store ?x861 ?x590 (+ (select ?x861 ?x590) 1))))
 (let ((?x94 (store ?x188 ?x448 (+ (select ?x188 ?x448) 1))))
 (= ?x94 ?x542))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x1256 (* b__7 1)))
 (let ((?x778 (+ v__7 ?x1256)))
 (let ((?x680 (* b__7 8)))
 (let ((?x361 (+ v__6 ?x680)))
 (let ((?x788 (* b__7 7)))
 (let ((?x366 (+ v__5 ?x788)))
 (let ((?x398 (* b__7 6)))
 (let ((?x489 (+ v__4 ?x398)))
 (let ((?x1399 (* b__7 5)))
 (let ((?x1400 (+ v__3 ?x1399)))
 (let ((?x1390 (* b__7 4)))
 (let ((?x1361 (+ v__2 ?x1390)))
 (let ((?x1382 (* b__7 3)))
 (let ((?x1383 (+ v__1 ?x1382)))
 (let ((?x1341 (* b__7 2)))
 (let ((?x1375 (+ v__0 ?x1341)))
 (let ((?x1378 (store start ?x1375 (+ (select start ?x1375) 1))))
 (let ((?x1386 (store ?x1378 ?x1383 (+ (select ?x1378 ?x1383) 1))))
 (let ((?x1393 (store ?x1386 ?x1361 (+ (select ?x1386 ?x1361) 1))))
 (let ((?x979 (store ?x1393 ?x1400 (+ (select ?x1393 ?x1400) 1))))
 (let ((?x751 (store ?x979 ?x489 (+ (select ?x979 ?x489) 1))))
 (let ((?x443 (store ?x751 ?x366 (+ (select ?x751 ?x366) 1))))
 (let ((?x515 (store ?x443 ?x361 (+ (select ?x443 ?x361) 1))))
 (let ((?x469 (store ?x515 ?x778 (+ (select ?x515 ?x778) 1))))
 (let ((?x745 (+ w__7 ?x680)))
 (let ((?x385 (+ w__6 ?x788)))
 (let ((?x752 (+ w__5 ?x398)))
 (let ((?x969 (+ w__4 ?x1399)))
 (let ((?x1394 (+ w__3 ?x1390)))
 (let ((?x1356 (+ w__2 ?x1382)))
 (let ((?x1346 (+ w__1 ?x1341)))
 (let ((?x1257 (+ w__0 ?x1256)))
 (let ((?x1374 (store start ?x1257 (+ (select start ?x1257) 1))))
 (let ((?x1381 (store ?x1374 ?x1346 (+ (select ?x1374 ?x1346) 1))))
 (let ((?x1389 (store ?x1381 ?x1356 (+ (select ?x1381 ?x1356) 1))))
 (let ((?x1398 (store ?x1389 ?x1394 (+ (select ?x1389 ?x1394) 1))))
 (let ((?x331 (store ?x1398 ?x969 (+ (select ?x1398 ?x969) 1))))
 (let ((?x787 (store ?x331 ?x752 (+ (select ?x331 ?x752) 1))))
 (let ((?x823 (store ?x787 ?x385 (+ (select ?x787 ?x385) 1))))
 (let ((?x410 (store ?x823 ?x745 (+ (select ?x823 ?x745) 1))))
 (= ?x410 ?x469))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x982 (* b__8 1)))
 (let ((?x91 (+ v__7 ?x982)))
 (let ((?x175 (* b__8 8)))
 (let ((?x259 (+ v__6 ?x175)))
 (let ((?x371 (* b__8 7)))
 (let ((?x589 (+ v__5 ?x371)))
 (let ((?x96 (* b__8 6)))
 (let ((?x313 (+ v__4 ?x96)))
 (let ((?x856 (* b__8 5)))
 (let ((?x855 (+ v__3 ?x856)))
 (let ((?x38 (* b__8 4)))
 (let ((?x425 (+ v__2 ?x38)))
 (let ((?x993 (* b__8 3)))
 (let ((?x1003 (+ v__1 ?x993)))
 (let ((?x1007 (* b__8 2)))
 (let ((?x1008 (+ v__0 ?x1007)))
 (let ((?x1025 (store start ?x1008 (+ (select start ?x1008) 1))))
 (let ((?x305 (store ?x1025 ?x1003 (+ (select ?x1025 ?x1003) 1))))
 (let ((?x864 (store ?x305 ?x425 (+ (select ?x305 ?x425) 1))))
 (let ((?x1114 (store ?x864 ?x855 (+ (select ?x864 ?x855) 1))))
 (let ((?x887 (store ?x1114 ?x313 (+ (select ?x1114 ?x313) 1))))
 (let ((?x905 (store ?x887 ?x589 (+ (select ?x887 ?x589) 1))))
 (let ((?x821 (store ?x905 ?x259 (+ (select ?x905 ?x259) 1))))
 (let ((?x216 (store ?x821 ?x91 (+ (select ?x821 ?x91) 1))))
 (let ((?x649 (+ w__7 ?x175)))
 (let ((?x335 (+ w__6 ?x371)))
 (let ((?x888 (+ w__5 ?x96)))
 (let ((?x1113 (+ w__4 ?x856)))
 (let ((?x1109 (+ w__3 ?x38)))
 (let ((?x430 (+ w__2 ?x993)))
 (let ((?x1026 (+ w__1 ?x1007)))
 (let ((?x983 (+ w__0 ?x982)))
 (let ((?x1001 (store start ?x983 (+ (select start ?x983) 1))))
 (let ((?x1038 (store ?x1001 ?x1026 (+ (select ?x1001 ?x1026) 1))))
 (let ((?x75 (store ?x1038 ?x430 (+ (select ?x1038 ?x430) 1))))
 (let ((?x857 (store ?x75 ?x1109 (+ (select ?x75 ?x1109) 1))))
 (let ((?x298 (store ?x857 ?x1113 (+ (select ?x857 ?x1113) 1))))
 (let ((?x327 (store ?x298 ?x888 (+ (select ?x298 ?x888) 1))))
 (let ((?x939 (store ?x327 ?x335 (+ (select ?x327 ?x335) 1))))
 (let ((?x663 (store ?x939 ?x649 (+ (select ?x939 ?x649) 1))))
 (= ?x663 ?x216))))))))))))))))))))))))))))))))))))))))))
(assert
 (let (($x921 (and (= w__1 v__0) (= w__2 v__1) (= w__3 v__2) (= w__4 v__3) (= w__5 v__4) (= w__6 v__5) (= w__7 v__6) (= w__0 v__7))))
 (not $x921)))
(check-sat)
(exit)
