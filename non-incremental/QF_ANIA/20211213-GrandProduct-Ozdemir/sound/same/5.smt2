
(set-info :smt-lib-version 2.6)
(set-logic QF_ANIA)
(set-info :source |
Generated by: Alex Ozdemir
Generated on: 2021-12-13
Generator: Z3Py API
Application: Soundness counterexamples for a cryptographic argument
Target solver: cvc5, Z3

# The special soundness of PLONK's grand product argument

Let F be a prime-order field and n a natural less than F's size. Let n = {1,
2, .., n} be a subset of F. The PLONK[1] grand product argument relies on the
fact that given a permutation pi: [n] -> [n] and functions A, B: [n] -> [n],

    prod_i (A(i) + beta * i + gamma) = prod_i (B(i) + beta * pi(i) + gamma)

holds for random beta, gamma in F with good probability only when A composed
with pi is B.

Does this implication hold in a deterministic setting, where the above is
checked for distinct---but non-random---beta and gamma?

If it is checked for n+1 distinct values of beta, and for each value of beta,
n+1 distinct values of gamma, then yes. One can prove this.

If it is checked for 2 distinct values of beta, and for each value of beta, n+1
distinct values of gamma, then no.

This series of benchmarks checks the implication holds
* for varying n
* for a fixed permutation pi = (2 3 ... n 1)
* for all A and B
  * that must be equal ("same") or may differ ("diff")
* for all distinct 2 ("unsound") or n+1 ("sound") beta values

rather than instantiating gamma explicitly, we just check that the multisets

    {{A[i] + beta * i}}_i  ==  {{B[i] + beta * pi(i)}}_i

are equal.

[1]: https://eprint.iacr.org/2019/953

|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "crafted")
(set-info :status unsat)
; benchmark generated from python API
(declare-fun w__0 () Int)
(declare-fun v__0 () Int)
(declare-fun w__1 () Int)
(declare-fun v__1 () Int)
(declare-fun w__2 () Int)
(declare-fun v__2 () Int)
(declare-fun w__3 () Int)
(declare-fun v__3 () Int)
(declare-fun w__4 () Int)
(declare-fun v__4 () Int)
(declare-fun b__5 () Int)
(declare-fun b__4 () Int)
(declare-fun b__3 () Int)
(declare-fun b__2 () Int)
(declare-fun b__1 () Int)
(declare-fun b__0 () Int)
(declare-fun start () (Array Int Int))
(assert
 (= v__0 w__0))
(assert
 (= v__1 w__1))
(assert
 (= v__2 w__2))
(assert
 (= v__3 w__3))
(assert
 (= v__4 w__4))
(assert
 (and (distinct b__0 b__1 b__2 b__3 b__4 b__5) true))
(assert
 (>= w__0 0))
(assert
 (>= v__0 0))
(assert
 (<= w__0 5))
(assert
 (<= v__0 5))
(assert
 (>= w__1 0))
(assert
 (>= v__1 0))
(assert
 (<= w__1 5))
(assert
 (<= v__1 5))
(assert
 (>= w__2 0))
(assert
 (>= v__2 0))
(assert
 (<= w__2 5))
(assert
 (<= v__2 5))
(assert
 (>= w__3 0))
(assert
 (>= v__3 0))
(assert
 (<= w__3 5))
(assert
 (<= v__3 5))
(assert
 (>= w__4 0))
(assert
 (>= v__4 0))
(assert
 (<= w__4 5))
(assert
 (<= v__4 5))
(assert
 (let ((?x124 (* b__0 1)))
 (let ((?x312 (+ v__4 ?x124)))
 (let ((?x53 (* b__0 5)))
 (let ((?x218 (+ v__3 ?x53)))
 (let ((?x163 (* b__0 4)))
 (let ((?x89 (+ v__2 ?x163)))
 (let ((?x299 (* b__0 3)))
 (let ((?x298 (+ v__1 ?x299)))
 (let ((?x182 (* b__0 2)))
 (let ((?x78 (+ v__0 ?x182)))
 (let ((?x365 (store start ?x78 (+ (select start ?x78) 1))))
 (let ((?x290 (store ?x365 ?x298 (+ (select ?x365 ?x298) 1))))
 (let ((?x270 (store ?x290 ?x89 (+ (select ?x290 ?x89) 1))))
 (let ((?x306 (store ?x270 ?x218 (+ (select ?x270 ?x218) 1))))
 (let ((?x151 (store ?x306 ?x312 (+ (select ?x306 ?x312) 1))))
 (let ((?x300 (+ w__4 ?x53)))
 (let ((?x236 (+ w__3 ?x163)))
 (let ((?x273 (+ w__2 ?x299)))
 (let ((?x366 (+ w__1 ?x182)))
 (let ((?x149 (+ w__0 ?x124)))
 (let ((?x171 (store start ?x149 (+ (select start ?x149) 1))))
 (let ((?x384 (store ?x171 ?x366 (+ (select ?x171 ?x366) 1))))
 (let ((?x262 (store ?x384 ?x273 (+ (select ?x384 ?x273) 1))))
 (let ((?x172 (store ?x262 ?x236 (+ (select ?x262 ?x236) 1))))
 (let ((?x313 (store ?x172 ?x300 (+ (select ?x172 ?x300) 1))))
 (= ?x313 ?x151)))))))))))))))))))))))))))
(assert
 (let ((?x212 (* b__1 1)))
 (let ((?x256 (+ v__4 ?x212)))
 (let ((?x14 (* b__1 5)))
 (let ((?x303 (+ v__3 ?x14)))
 (let ((?x117 (* b__1 4)))
 (let ((?x131 (+ v__2 ?x117)))
 (let ((?x99 (* b__1 3)))
 (let ((?x102 (+ v__1 ?x99)))
 (let ((?x222 (* b__1 2)))
 (let ((?x429 (+ v__0 ?x222)))
 (let ((?x87 (store start ?x429 (+ (select start ?x429) 1))))
 (let ((?x204 (store ?x87 ?x102 (+ (select ?x87 ?x102) 1))))
 (let ((?x28 (store ?x204 ?x131 (+ (select ?x204 ?x131) 1))))
 (let ((?x319 (store ?x28 ?x303 (+ (select ?x28 ?x303) 1))))
 (let ((?x25 (store ?x319 ?x256 (+ (select ?x319 ?x256) 1))))
 (let ((?x219 (+ w__4 ?x14)))
 (let ((?x18 (+ w__3 ?x117)))
 (let ((?x203 (+ w__2 ?x99)))
 (let ((?x88 (+ w__1 ?x222)))
 (let ((?x350 (+ w__0 ?x212)))
 (let ((?x30 (store start ?x350 (+ (select start ?x350) 1))))
 (let ((?x208 (store ?x30 ?x88 (+ (select ?x30 ?x88) 1))))
 (let ((?x230 (store ?x208 ?x203 (+ (select ?x208 ?x203) 1))))
 (let ((?x45 (store ?x230 ?x18 (+ (select ?x230 ?x18) 1))))
 (let ((?x134 (store ?x45 ?x219 (+ (select ?x45 ?x219) 1))))
 (= ?x134 ?x25)))))))))))))))))))))))))))
(assert
 (let ((?x333 (* b__2 1)))
 (let ((?x32 (+ v__4 ?x333)))
 (let ((?x67 (* b__2 5)))
 (let ((?x73 (+ v__3 ?x67)))
 (let ((?x136 (* b__2 4)))
 (let ((?x178 (+ v__2 ?x136)))
 (let ((?x234 (* b__2 3)))
 (let ((?x245 (+ v__1 ?x234)))
 (let ((?x250 (* b__2 2)))
 (let ((?x334 (+ v__0 ?x250)))
 (let ((?x36 (store start ?x334 (+ (select start ?x334) 1))))
 (let ((?x352 (store ?x36 ?x245 (+ (select ?x36 ?x245) 1))))
 (let ((?x74 (store ?x352 ?x178 (+ (select ?x352 ?x178) 1))))
 (let ((?x194 (store ?x74 ?x73 (+ (select ?x74 ?x73) 1))))
 (let ((?x109 (store ?x194 ?x32 (+ (select ?x194 ?x32) 1))))
 (let ((?x193 (+ w__4 ?x67)))
 (let ((?x70 (+ w__3 ?x136)))
 (let ((?x353 (+ w__2 ?x234)))
 (let ((?x31 (+ w__1 ?x250)))
 (let ((?x345 (+ w__0 ?x333)))
 (let ((?x275 (store start ?x345 (+ (select start ?x345) 1))))
 (let ((?x242 (store ?x275 ?x31 (+ (select ?x275 ?x31) 1))))
 (let ((?x174 (store ?x242 ?x353 (+ (select ?x242 ?x353) 1))))
 (let ((?x200 (store ?x174 ?x70 (+ (select ?x174 ?x70) 1))))
 (let ((?x154 (store ?x200 ?x193 (+ (select ?x200 ?x193) 1))))
 (= ?x154 ?x109)))))))))))))))))))))))))))
(assert
 (let ((?x307 (* b__3 1)))
 (let ((?x96 (+ v__4 ?x307)))
 (let ((?x265 (* b__3 5)))
 (let ((?x213 (+ v__3 ?x265)))
 (let ((?x39 (* b__3 4)))
 (let ((?x84 (+ v__2 ?x39)))
 (let ((?x398 (* b__3 3)))
 (let ((?x400 (+ v__1 ?x398)))
 (let ((?x408 (* b__3 2)))
 (let ((?x410 (+ v__0 ?x408)))
 (let ((?x190 (store start ?x410 (+ (select start ?x410) 1))))
 (let ((?x338 (store ?x190 ?x400 (+ (select ?x190 ?x400) 1))))
 (let ((?x314 (store ?x338 ?x84 (+ (select ?x338 ?x84) 1))))
 (let ((?x217 (store ?x314 ?x213 (+ (select ?x314 ?x213) 1))))
 (let ((?x160 (store ?x217 ?x96 (+ (select ?x217 ?x96) 1))))
 (let ((?x257 (+ w__4 ?x265)))
 (let ((?x317 (+ w__3 ?x39)))
 (let ((?x339 (+ w__2 ?x398)))
 (let ((?x220 (+ w__1 ?x408)))
 (let ((?x424 (+ w__0 ?x307)))
 (let ((?x280 (store start ?x424 (+ (select start ?x424) 1))))
 (let ((?x397 (store ?x280 ?x220 (+ (select ?x280 ?x220) 1))))
 (let ((?x62 (store ?x397 ?x339 (+ (select ?x397 ?x339) 1))))
 (let ((?x266 (store ?x62 ?x317 (+ (select ?x62 ?x317) 1))))
 (let ((?x122 (store ?x266 ?x257 (+ (select ?x266 ?x257) 1))))
 (= ?x122 ?x160)))))))))))))))))))))))))))
(assert
 (let ((?x436 (* b__4 1)))
 (let ((?x477 (+ v__4 ?x436)))
 (let ((?x468 (* b__4 5)))
 (let ((?x469 (+ v__3 ?x468)))
 (let ((?x459 (* b__4 4)))
 (let ((?x460 (+ v__2 ?x459)))
 (let ((?x450 (* b__4 3)))
 (let ((?x451 (+ v__1 ?x450)))
 (let ((?x441 (* b__4 2)))
 (let ((?x442 (+ v__0 ?x441)))
 (let ((?x445 (store start ?x442 (+ (select start ?x442) 1))))
 (let ((?x454 (store ?x445 ?x451 (+ (select ?x445 ?x451) 1))))
 (let ((?x463 (store ?x454 ?x460 (+ (select ?x454 ?x460) 1))))
 (let ((?x472 (store ?x463 ?x469 (+ (select ?x463 ?x469) 1))))
 (let ((?x480 (store ?x472 ?x477 (+ (select ?x472 ?x477) 1))))
 (let ((?x473 (+ w__4 ?x468)))
 (let ((?x464 (+ w__3 ?x459)))
 (let ((?x455 (+ w__2 ?x450)))
 (let ((?x446 (+ w__1 ?x441)))
 (let ((?x437 (+ w__0 ?x436)))
 (let ((?x440 (store start ?x437 (+ (select start ?x437) 1))))
 (let ((?x449 (store ?x440 ?x446 (+ (select ?x440 ?x446) 1))))
 (let ((?x458 (store ?x449 ?x455 (+ (select ?x449 ?x455) 1))))
 (let ((?x467 (store ?x458 ?x464 (+ (select ?x458 ?x464) 1))))
 (let ((?x476 (store ?x467 ?x473 (+ (select ?x467 ?x473) 1))))
 (= ?x476 ?x480)))))))))))))))))))))))))))
(assert
 (let ((?x527 (* b__5 1)))
 (let ((?x568 (+ v__4 ?x527)))
 (let ((?x559 (* b__5 5)))
 (let ((?x560 (+ v__3 ?x559)))
 (let ((?x550 (* b__5 4)))
 (let ((?x551 (+ v__2 ?x550)))
 (let ((?x541 (* b__5 3)))
 (let ((?x542 (+ v__1 ?x541)))
 (let ((?x532 (* b__5 2)))
 (let ((?x533 (+ v__0 ?x532)))
 (let ((?x536 (store start ?x533 (+ (select start ?x533) 1))))
 (let ((?x545 (store ?x536 ?x542 (+ (select ?x536 ?x542) 1))))
 (let ((?x554 (store ?x545 ?x551 (+ (select ?x545 ?x551) 1))))
 (let ((?x563 (store ?x554 ?x560 (+ (select ?x554 ?x560) 1))))
 (let ((?x571 (store ?x563 ?x568 (+ (select ?x563 ?x568) 1))))
 (let ((?x564 (+ w__4 ?x559)))
 (let ((?x555 (+ w__3 ?x550)))
 (let ((?x546 (+ w__2 ?x541)))
 (let ((?x537 (+ w__1 ?x532)))
 (let ((?x528 (+ w__0 ?x527)))
 (let ((?x531 (store start ?x528 (+ (select start ?x528) 1))))
 (let ((?x540 (store ?x531 ?x537 (+ (select ?x531 ?x537) 1))))
 (let ((?x549 (store ?x540 ?x546 (+ (select ?x540 ?x546) 1))))
 (let ((?x558 (store ?x549 ?x555 (+ (select ?x549 ?x555) 1))))
 (let ((?x567 (store ?x558 ?x564 (+ (select ?x558 ?x564) 1))))
 (= ?x567 ?x571)))))))))))))))))))))))))))
(assert
 (let (($x623 (and (= w__1 v__0) (= w__2 v__1) (= w__3 v__2) (= w__4 v__3) (= w__0 v__4))))
 (not $x623)))
(check-sat)
(exit)
