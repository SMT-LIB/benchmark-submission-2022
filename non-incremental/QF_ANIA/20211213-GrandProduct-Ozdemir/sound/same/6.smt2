
(set-info :smt-lib-version 2.6)
(set-logic QF_ANIA)
(set-info :source |
Generated by: Alex Ozdemir
Generated on: 2021-12-13
Generator: Z3Py API
Application: Soundness counterexamples for a cryptographic argument
Target solver: cvc5, Z3

# The special soundness of PLONK's grand product argument

Let F be a prime-order field and n a natural less than F's size. Let n = {1,
2, .., n} be a subset of F. The PLONK[1] grand product argument relies on the
fact that given a permutation pi: [n] -> [n] and functions A, B: [n] -> [n],

    prod_i (A(i) + beta * i + gamma) = prod_i (B(i) + beta * pi(i) + gamma)

holds for random beta, gamma in F with good probability only when A composed
with pi is B.

Does this implication hold in a deterministic setting, where the above is
checked for distinct---but non-random---beta and gamma?

If it is checked for n+1 distinct values of beta, and for each value of beta,
n+1 distinct values of gamma, then yes. One can prove this.

If it is checked for 2 distinct values of beta, and for each value of beta, n+1
distinct values of gamma, then no.

This series of benchmarks checks the implication holds
* for varying n
* for a fixed permutation pi = (2 3 ... n 1)
* for all A and B
  * that must be equal ("same") or may differ ("diff")
* for all distinct 2 ("unsound") or n+1 ("sound") beta values

rather than instantiating gamma explicitly, we just check that the multisets

    {{A[i] + beta * i}}_i  ==  {{B[i] + beta * pi(i)}}_i

are equal.

[1]: https://eprint.iacr.org/2019/953

|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "crafted")
(set-info :status unsat)
; benchmark generated from python API
(declare-fun w__0 () Int)
(declare-fun v__0 () Int)
(declare-fun w__1 () Int)
(declare-fun v__1 () Int)
(declare-fun w__2 () Int)
(declare-fun v__2 () Int)
(declare-fun w__3 () Int)
(declare-fun v__3 () Int)
(declare-fun w__4 () Int)
(declare-fun v__4 () Int)
(declare-fun w__5 () Int)
(declare-fun v__5 () Int)
(declare-fun b__6 () Int)
(declare-fun b__5 () Int)
(declare-fun b__4 () Int)
(declare-fun b__3 () Int)
(declare-fun b__2 () Int)
(declare-fun b__1 () Int)
(declare-fun b__0 () Int)
(declare-fun start () (Array Int Int))
(assert
 (= v__0 w__0))
(assert
 (= v__1 w__1))
(assert
 (= v__2 w__2))
(assert
 (= v__3 w__3))
(assert
 (= v__4 w__4))
(assert
 (= v__5 w__5))
(assert
 (and (distinct b__0 b__1 b__2 b__3 b__4 b__5 b__6) true))
(assert
 (>= w__0 0))
(assert
 (>= v__0 0))
(assert
 (<= w__0 6))
(assert
 (<= v__0 6))
(assert
 (>= w__1 0))
(assert
 (>= v__1 0))
(assert
 (<= w__1 6))
(assert
 (<= v__1 6))
(assert
 (>= w__2 0))
(assert
 (>= v__2 0))
(assert
 (<= w__2 6))
(assert
 (<= v__2 6))
(assert
 (>= w__3 0))
(assert
 (>= v__3 0))
(assert
 (<= w__3 6))
(assert
 (<= v__3 6))
(assert
 (>= w__4 0))
(assert
 (>= v__4 0))
(assert
 (<= w__4 6))
(assert
 (<= v__4 6))
(assert
 (>= w__5 0))
(assert
 (>= v__5 0))
(assert
 (<= w__5 6))
(assert
 (<= v__5 6))
(assert
 (let ((?x600 (* b__0 1)))
 (let ((?x243 (+ v__5 ?x600)))
 (let ((?x217 (* b__0 6)))
 (let ((?x333 (+ v__4 ?x217)))
 (let ((?x597 (* b__0 5)))
 (let ((?x598 (+ v__3 ?x597)))
 (let ((?x316 (* b__0 4)))
 (let ((?x542 (+ v__2 ?x316)))
 (let ((?x345 (* b__0 3)))
 (let ((?x15 (+ v__1 ?x345)))
 (let ((?x605 (* b__0 2)))
 (let ((?x606 (+ v__0 ?x605)))
 (let ((?x369 (store start ?x606 (+ (select start ?x606) 1))))
 (let ((?x234 (store ?x369 ?x15 (+ (select ?x369 ?x15) 1))))
 (let ((?x545 (store ?x234 ?x542 (+ (select ?x234 ?x542) 1))))
 (let ((?x608 (store ?x545 ?x598 (+ (select ?x545 ?x598) 1))))
 (let ((?x66 (store ?x608 ?x333 (+ (select ?x608 ?x333) 1))))
 (let ((?x562 (store ?x66 ?x243 (+ (select ?x66 ?x243) 1))))
 (let ((?x200 (+ w__5 ?x217)))
 (let ((?x355 (+ w__4 ?x597)))
 (let ((?x569 (+ w__3 ?x316)))
 (let ((?x67 (+ w__2 ?x345)))
 (let ((?x414 (+ w__1 ?x605)))
 (let ((?x582 (+ w__0 ?x600)))
 (let ((?x587 (store start ?x582 (+ (select start ?x582) 1))))
 (let ((?x213 (store ?x587 ?x414 (+ (select ?x587 ?x414) 1))))
 (let ((?x415 (store ?x213 ?x67 (+ (select ?x213 ?x67) 1))))
 (let ((?x147 (store ?x415 ?x569 (+ (select ?x415 ?x569) 1))))
 (let ((?x216 (store ?x147 ?x355 (+ (select ?x147 ?x355) 1))))
 (let ((?x233 (store ?x216 ?x200 (+ (select ?x216 ?x200) 1))))
 (= ?x233 ?x562))))))))))))))))))))))))))))))))
(assert
 (let ((?x574 (* b__1 1)))
 (let ((?x177 (+ v__5 ?x574)))
 (let ((?x263 (* b__1 6)))
 (let ((?x171 (+ v__4 ?x263)))
 (let ((?x131 (* b__1 5)))
 (let ((?x229 (+ v__3 ?x131)))
 (let ((?x357 (* b__1 4)))
 (let ((?x417 (+ v__2 ?x357)))
 (let ((?x36 (* b__1 3)))
 (let ((?x245 (+ v__1 ?x36)))
 (let ((?x555 (* b__1 2)))
 (let ((?x556 (+ v__0 ?x555)))
 (let ((?x23 (store start ?x556 (+ (select start ?x556) 1))))
 (let ((?x564 (store ?x23 ?x245 (+ (select ?x23 ?x245) 1))))
 (let ((?x255 (store ?x564 ?x417 (+ (select ?x564 ?x417) 1))))
 (let ((?x256 (store ?x255 ?x229 (+ (select ?x255 ?x229) 1))))
 (let ((?x541 (store ?x256 ?x171 (+ (select ?x256 ?x171) 1))))
 (let ((?x603 (store ?x541 ?x177 (+ (select ?x541 ?x177) 1))))
 (let ((?x551 (+ w__5 ?x263)))
 (let ((?x155 (+ w__4 ?x131)))
 (let ((?x162 (+ w__3 ?x357)))
 (let ((?x534 (+ w__2 ?x36)))
 (let ((?x97 (+ w__1 ?x555)))
 (let ((?x537 (+ w__0 ?x574)))
 (let ((?x549 (store start ?x537 (+ (select start ?x537) 1))))
 (let ((?x602 (store ?x549 ?x97 (+ (select ?x549 ?x97) 1))))
 (let ((?x391 (store ?x602 ?x534 (+ (select ?x602 ?x534) 1))))
 (let ((?x204 (store ?x391 ?x162 (+ (select ?x391 ?x162) 1))))
 (let ((?x25 (store ?x204 ?x155 (+ (select ?x204 ?x155) 1))))
 (let ((?x176 (store ?x25 ?x551 (+ (select ?x25 ?x551) 1))))
 (= ?x176 ?x603))))))))))))))))))))))))))))))))
(assert
 (let ((?x423 (* b__2 1)))
 (let ((?x362 (+ v__5 ?x423)))
 (let ((?x270 (* b__2 6)))
 (let ((?x218 (+ v__4 ?x270)))
 (let ((?x618 (* b__2 5)))
 (let ((?x619 (+ v__3 ?x618)))
 (let ((?x467 (* b__2 4)))
 (let ((?x466 (+ v__2 ?x467)))
 (let ((?x445 (* b__2 3)))
 (let ((?x444 (+ v__1 ?x445)))
 (let ((?x547 (* b__2 2)))
 (let ((?x548 (+ v__0 ?x547)))
 (let ((?x566 (store start ?x548 (+ (select start ?x548) 1))))
 (let ((?x476 (store ?x566 ?x444 (+ (select ?x566 ?x444) 1))))
 (let ((?x459 (store ?x476 ?x466 (+ (select ?x476 ?x466) 1))))
 (let ((?x291 (store ?x459 ?x619 (+ (select ?x459 ?x619) 1))))
 (let ((?x306 (store ?x291 ?x218 (+ (select ?x291 ?x218) 1))))
 (let ((?x48 (store ?x306 ?x362 (+ (select ?x306 ?x362) 1))))
 (let ((?x312 (+ w__5 ?x270)))
 (let ((?x290 (+ w__4 ?x618)))
 (let ((?x458 (+ w__3 ?x467)))
 (let ((?x475 (+ w__2 ?x445)))
 (let ((?x567 (+ w__1 ?x547)))
 (let ((?x156 (+ w__0 ?x423)))
 (let ((?x370 (store start ?x156 (+ (select start ?x156) 1))))
 (let ((?x451 (store ?x370 ?x567 (+ (select ?x370 ?x567) 1))))
 (let ((?x468 (store ?x451 ?x475 (+ (select ?x451 ?x475) 1))))
 (let ((?x455 (store ?x468 ?x458 (+ (select ?x468 ?x458) 1))))
 (let ((?x43 (store ?x455 ?x290 (+ (select ?x455 ?x290) 1))))
 (let ((?x151 (store ?x43 ?x312 (+ (select ?x43 ?x312) 1))))
 (= ?x151 ?x48))))))))))))))))))))))))))))))))
(assert
 (let ((?x181 (* b__3 1)))
 (let ((?x271 (+ v__5 ?x181)))
 (let ((?x61 (* b__3 6)))
 (let ((?x62 (+ v__4 ?x61)))
 (let ((?x422 (* b__3 5)))
 (let ((?x113 (+ v__3 ?x422)))
 (let ((?x178 (* b__3 4)))
 (let ((?x401 (+ v__2 ?x178)))
 (let ((?x586 (* b__3 3)))
 (let ((?x226 (+ v__1 ?x586)))
 (let ((?x486 (* b__3 2)))
 (let ((?x487 (+ v__0 ?x486)))
 (let ((?x580 (store start ?x487 (+ (select start ?x487) 1))))
 (let ((?x194 (store ?x580 ?x226 (+ (select ?x580 ?x226) 1))))
 (let ((?x73 (store ?x194 ?x401 (+ (select ?x194 ?x401) 1))))
 (let ((?x332 (store ?x73 ?x113 (+ (select ?x73 ?x113) 1))))
 (let ((?x318 (store ?x332 ?x62 (+ (select ?x332 ?x62) 1))))
 (let ((?x429 (store ?x318 ?x271 (+ (select ?x318 ?x271) 1))))
 (let ((?x17 (+ w__5 ?x61)))
 (let ((?x331 (+ w__4 ?x422)))
 (let ((?x192 (+ w__3 ?x178)))
 (let ((?x32 (+ w__2 ?x586)))
 (let ((?x581 (+ w__1 ?x486)))
 (let ((?x434 (+ w__0 ?x181)))
 (let ((?x485 (store start ?x434 (+ (select start ?x434) 1))))
 (let ((?x585 (store ?x485 ?x581 (+ (select ?x485 ?x581) 1))))
 (let ((?x352 (store ?x585 ?x32 (+ (select ?x585 ?x32) 1))))
 (let ((?x252 (store ?x352 ?x192 (+ (select ?x352 ?x192) 1))))
 (let ((?x340 (store ?x252 ?x331 (+ (select ?x252 ?x331) 1))))
 (let ((?x203 (store ?x340 ?x17 (+ (select ?x340 ?x17) 1))))
 (= ?x203 ?x429))))))))))))))))))))))))))))))))
(assert
 (let ((?x389 (* b__4 1)))
 (let ((?x359 (+ v__5 ?x389)))
 (let ((?x221 (* b__4 6)))
 (let ((?x381 (+ v__4 ?x221)))
 (let ((?x315 (* b__4 5)))
 (let ((?x109 (+ v__3 ?x315)))
 (let ((?x301 (* b__4 4)))
 (let ((?x431 (+ v__2 ?x301)))
 (let ((?x261 (* b__4 3)))
 (let ((?x260 (+ v__1 ?x261)))
 (let ((?x435 (* b__4 2)))
 (let ((?x281 (+ v__0 ?x435)))
 (let ((?x85 (store start ?x281 (+ (select start ?x281) 1))))
 (let ((?x122 (store ?x85 ?x260 (+ (select ?x85 ?x260) 1))))
 (let ((?x294 (store ?x122 ?x431 (+ (select ?x122 ?x431) 1))))
 (let ((?x56 (store ?x294 ?x109 (+ (select ?x294 ?x109) 1))))
 (let ((?x347 (store ?x56 ?x381 (+ (select ?x56 ?x381) 1))))
 (let ((?x46 (store ?x347 ?x359 (+ (select ?x347 ?x359) 1))))
 (let ((?x514 (+ w__5 ?x221)))
 (let ((?x16 (+ w__4 ?x315)))
 (let ((?x293 (+ w__3 ?x301)))
 (let ((?x410 (+ w__2 ?x261)))
 (let ((?x376 (+ w__1 ?x435)))
 (let ((?x363 (+ w__0 ?x389)))
 (let ((?x526 (store start ?x363 (+ (select start ?x363) 1))))
 (let ((?x412 (store ?x526 ?x376 (+ (select ?x526 ?x376) 1))))
 (let ((?x284 (store ?x412 ?x410 (+ (select ?x412 ?x410) 1))))
 (let ((?x215 (store ?x284 ?x293 (+ (select ?x284 ?x293) 1))))
 (let ((?x144 (store ?x215 ?x16 (+ (select ?x215 ?x16) 1))))
 (let ((?x507 (store ?x144 ?x514 (+ (select ?x144 ?x514) 1))))
 (= ?x507 ?x46))))))))))))))))))))))))))))))))
(assert
 (let ((?x626 (* b__5 1)))
 (let ((?x676 (+ v__5 ?x626)))
 (let ((?x667 (* b__5 6)))
 (let ((?x668 (+ v__4 ?x667)))
 (let ((?x658 (* b__5 5)))
 (let ((?x659 (+ v__3 ?x658)))
 (let ((?x649 (* b__5 4)))
 (let ((?x650 (+ v__2 ?x649)))
 (let ((?x640 (* b__5 3)))
 (let ((?x641 (+ v__1 ?x640)))
 (let ((?x631 (* b__5 2)))
 (let ((?x632 (+ v__0 ?x631)))
 (let ((?x635 (store start ?x632 (+ (select start ?x632) 1))))
 (let ((?x644 (store ?x635 ?x641 (+ (select ?x635 ?x641) 1))))
 (let ((?x653 (store ?x644 ?x650 (+ (select ?x644 ?x650) 1))))
 (let ((?x662 (store ?x653 ?x659 (+ (select ?x653 ?x659) 1))))
 (let ((?x671 (store ?x662 ?x668 (+ (select ?x662 ?x668) 1))))
 (let ((?x679 (store ?x671 ?x676 (+ (select ?x671 ?x676) 1))))
 (let ((?x672 (+ w__5 ?x667)))
 (let ((?x663 (+ w__4 ?x658)))
 (let ((?x654 (+ w__3 ?x649)))
 (let ((?x645 (+ w__2 ?x640)))
 (let ((?x636 (+ w__1 ?x631)))
 (let ((?x627 (+ w__0 ?x626)))
 (let ((?x630 (store start ?x627 (+ (select start ?x627) 1))))
 (let ((?x639 (store ?x630 ?x636 (+ (select ?x630 ?x636) 1))))
 (let ((?x648 (store ?x639 ?x645 (+ (select ?x639 ?x645) 1))))
 (let ((?x657 (store ?x648 ?x654 (+ (select ?x648 ?x654) 1))))
 (let ((?x666 (store ?x657 ?x663 (+ (select ?x657 ?x663) 1))))
 (let ((?x675 (store ?x666 ?x672 (+ (select ?x666 ?x672) 1))))
 (= ?x675 ?x679))))))))))))))))))))))))))))))))
(assert
 (let ((?x735 (* b__6 1)))
 (let ((?x785 (+ v__5 ?x735)))
 (let ((?x776 (* b__6 6)))
 (let ((?x777 (+ v__4 ?x776)))
 (let ((?x767 (* b__6 5)))
 (let ((?x768 (+ v__3 ?x767)))
 (let ((?x758 (* b__6 4)))
 (let ((?x759 (+ v__2 ?x758)))
 (let ((?x749 (* b__6 3)))
 (let ((?x750 (+ v__1 ?x749)))
 (let ((?x740 (* b__6 2)))
 (let ((?x741 (+ v__0 ?x740)))
 (let ((?x744 (store start ?x741 (+ (select start ?x741) 1))))
 (let ((?x753 (store ?x744 ?x750 (+ (select ?x744 ?x750) 1))))
 (let ((?x762 (store ?x753 ?x759 (+ (select ?x753 ?x759) 1))))
 (let ((?x771 (store ?x762 ?x768 (+ (select ?x762 ?x768) 1))))
 (let ((?x780 (store ?x771 ?x777 (+ (select ?x771 ?x777) 1))))
 (let ((?x788 (store ?x780 ?x785 (+ (select ?x780 ?x785) 1))))
 (let ((?x781 (+ w__5 ?x776)))
 (let ((?x772 (+ w__4 ?x767)))
 (let ((?x763 (+ w__3 ?x758)))
 (let ((?x754 (+ w__2 ?x749)))
 (let ((?x745 (+ w__1 ?x740)))
 (let ((?x736 (+ w__0 ?x735)))
 (let ((?x739 (store start ?x736 (+ (select start ?x736) 1))))
 (let ((?x748 (store ?x739 ?x745 (+ (select ?x739 ?x745) 1))))
 (let ((?x757 (store ?x748 ?x754 (+ (select ?x748 ?x754) 1))))
 (let ((?x766 (store ?x757 ?x763 (+ (select ?x757 ?x763) 1))))
 (let ((?x775 (store ?x766 ?x772 (+ (select ?x766 ?x772) 1))))
 (let ((?x784 (store ?x775 ?x781 (+ (select ?x775 ?x781) 1))))
 (= ?x784 ?x788))))))))))))))))))))))))))))))))
(assert
 (let (($x850 (and (= w__1 v__0) (= w__2 v__1) (= w__3 v__2) (= w__4 v__3) (= w__5 v__4) (= w__0 v__5))))
 (not $x850)))
(check-sat)
(exit)
