
(set-info :smt-lib-version 2.6)
(set-logic QF_ANIA)
(set-info :source |
Generated by: Alex Ozdemir
Generated on: 2021-12-13
Generator: Z3Py API
Application: Soundness counterexamples for a cryptographic argument
Target solver: cvc5, Z3

# The special soundness of PLONK's grand product argument

Let F be a prime-order field and n a natural less than F's size. Let n = {1,
2, .., n} be a subset of F. The PLONK[1] grand product argument relies on the
fact that given a permutation pi: [n] -> [n] and functions A, B: [n] -> [n],

    prod_i (A(i) + beta * i + gamma) = prod_i (B(i) + beta * pi(i) + gamma)

holds for random beta, gamma in F with good probability only when A composed
with pi is B.

Does this implication hold in a deterministic setting, where the above is
checked for distinct---but non-random---beta and gamma?

If it is checked for n+1 distinct values of beta, and for each value of beta,
n+1 distinct values of gamma, then yes. One can prove this.

If it is checked for 2 distinct values of beta, and for each value of beta, n+1
distinct values of gamma, then no.

This series of benchmarks checks the implication holds
* for varying n
* for a fixed permutation pi = (2 3 ... n 1)
* for all A and B
  * that must be equal ("same") or may differ ("diff")
* for all distinct 2 ("unsound") or n+1 ("sound") beta values

rather than instantiating gamma explicitly, we just check that the multisets

    {{A[i] + beta * i}}_i  ==  {{B[i] + beta * pi(i)}}_i

are equal.

[1]: https://eprint.iacr.org/2019/953

|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "crafted")
(set-info :status sat)
; benchmark generated from python API
(declare-fun b__1 () Int)
(declare-fun b__0 () Int)
(declare-fun w__0 () Int)
(declare-fun v__0 () Int)
(declare-fun w__1 () Int)
(declare-fun v__1 () Int)
(declare-fun w__2 () Int)
(declare-fun v__2 () Int)
(declare-fun w__3 () Int)
(declare-fun v__3 () Int)
(declare-fun w__4 () Int)
(declare-fun v__4 () Int)
(declare-fun w__5 () Int)
(declare-fun v__5 () Int)
(declare-fun w__6 () Int)
(declare-fun v__6 () Int)
(declare-fun w__7 () Int)
(declare-fun v__7 () Int)
(declare-fun w__8 () Int)
(declare-fun v__8 () Int)
(declare-fun w__9 () Int)
(declare-fun v__9 () Int)
(declare-fun w__10 () Int)
(declare-fun v__10 () Int)
(declare-fun start () (Array Int Int))
(assert
 (and (distinct b__0 b__1) true))
(assert
 (>= w__0 0))
(assert
 (>= v__0 0))
(assert
 (<= w__0 11))
(assert
 (<= v__0 11))
(assert
 (>= w__1 0))
(assert
 (>= v__1 0))
(assert
 (<= w__1 11))
(assert
 (<= v__1 11))
(assert
 (>= w__2 0))
(assert
 (>= v__2 0))
(assert
 (<= w__2 11))
(assert
 (<= v__2 11))
(assert
 (>= w__3 0))
(assert
 (>= v__3 0))
(assert
 (<= w__3 11))
(assert
 (<= v__3 11))
(assert
 (>= w__4 0))
(assert
 (>= v__4 0))
(assert
 (<= w__4 11))
(assert
 (<= v__4 11))
(assert
 (>= w__5 0))
(assert
 (>= v__5 0))
(assert
 (<= w__5 11))
(assert
 (<= v__5 11))
(assert
 (>= w__6 0))
(assert
 (>= v__6 0))
(assert
 (<= w__6 11))
(assert
 (<= v__6 11))
(assert
 (>= w__7 0))
(assert
 (>= v__7 0))
(assert
 (<= w__7 11))
(assert
 (<= v__7 11))
(assert
 (>= w__8 0))
(assert
 (>= v__8 0))
(assert
 (<= w__8 11))
(assert
 (<= v__8 11))
(assert
 (>= w__9 0))
(assert
 (>= v__9 0))
(assert
 (<= w__9 11))
(assert
 (<= v__9 11))
(assert
 (>= w__10 0))
(assert
 (>= v__10 0))
(assert
 (<= w__10 11))
(assert
 (<= v__10 11))
(assert
 (let ((?x1417 (* b__0 1)))
 (let ((?x889 (+ v__10 ?x1417)))
 (let ((?x1883 (* b__0 11)))
 (let ((?x1884 (+ v__9 ?x1883)))
 (let ((?x1544 (* b__0 10)))
 (let ((?x1205 (+ v__8 ?x1544)))
 (let ((?x1896 (* b__0 9)))
 (let ((?x1897 (+ v__7 ?x1896)))
 (let ((?x1741 (* b__0 8)))
 (let ((?x1743 (+ v__6 ?x1741)))
 (let ((?x1542 (* b__0 7)))
 (let ((?x1543 (+ v__5 ?x1542)))
 (let ((?x1891 (* b__0 6)))
 (let ((?x1892 (+ v__4 ?x1891)))
 (let ((?x1549 (* b__0 5)))
 (let ((?x1550 (+ v__3 ?x1549)))
 (let ((?x949 (* b__0 4)))
 (let ((?x1053 (+ v__2 ?x949)))
 (let ((?x1887 (* b__0 3)))
 (let ((?x1888 (+ v__1 ?x1887)))
 (let ((?x69 (* b__0 2)))
 (let ((?x1744 (+ v__0 ?x69)))
 (let ((?x1668 (store start ?x1744 (+ (select start ?x1744) 1))))
 (let ((?x1895 (store ?x1668 ?x1888 (+ (select ?x1668 ?x1888) 1))))
 (let ((?x1540 (store ?x1895 ?x1053 (+ (select ?x1895 ?x1053) 1))))
 (let ((?x255 (store ?x1540 ?x1550 (+ (select ?x1540 ?x1550) 1))))
 (let ((?x945 (store ?x255 ?x1892 (+ (select ?x255 ?x1892) 1))))
 (let ((?x353 (store ?x945 ?x1543 (+ (select ?x945 ?x1543) 1))))
 (let ((?x1667 (store ?x353 ?x1743 (+ (select ?x353 ?x1743) 1))))
 (let ((?x449 (store ?x1667 ?x1897 (+ (select ?x1667 ?x1897) 1))))
 (let ((?x1551 (store ?x449 ?x1205 (+ (select ?x449 ?x1205) 1))))
 (let ((?x1901 (store ?x1551 ?x1884 (+ (select ?x1551 ?x1884) 1))))
 (let ((?x1365 (store ?x1901 ?x889 (+ (select ?x1901 ?x889) 1))))
 (let ((?x1902 (+ w__10 ?x1883)))
 (let ((?x114 (+ w__9 ?x1544)))
 (let ((?x468 (+ w__8 ?x1896)))
 (let ((?x1879 (+ w__7 ?x1741)))
 (let ((?x755 (+ w__6 ?x1542)))
 (let ((?x1065 (+ w__5 ?x1891)))
 (let ((?x1222 (+ w__4 ?x1549)))
 (let ((?x1541 (+ w__3 ?x949)))
 (let ((?x1904 (+ w__2 ?x1887)))
 (let ((?x1214 (+ w__1 ?x69)))
 (let ((?x1415 (+ w__0 ?x1417)))
 (let ((?x1745 (store start ?x1415 (+ (select start ?x1415) 1))))
 (let ((?x1878 (store ?x1745 ?x1214 (+ (select ?x1745 ?x1214) 1))))
 (let ((?x1175 (store ?x1878 ?x1904 (+ (select ?x1878 ?x1904) 1))))
 (let ((?x1548 (store ?x1175 ?x1541 (+ (select ?x1175 ?x1541) 1))))
 (let ((?x343 (store ?x1548 ?x1222 (+ (select ?x1548 ?x1222) 1))))
 (let ((?x1692 (store ?x343 ?x1065 (+ (select ?x343 ?x1065) 1))))
 (let ((?x1422 (store ?x1692 ?x755 (+ (select ?x1692 ?x755) 1))))
 (let ((?x1886 (store ?x1422 ?x1879 (+ (select ?x1422 ?x1879) 1))))
 (let ((?x1199 (store ?x1886 ?x468 (+ (select ?x1886 ?x468) 1))))
 (let ((?x1103 (store ?x1199 ?x114 (+ (select ?x1199 ?x114) 1))))
 (let ((?x737 (store ?x1103 ?x1902 (+ (select ?x1103 ?x1902) 1))))
 (= ?x737 ?x1365)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x761 (* b__1 1)))
 (let ((?x1111 (+ v__10 ?x761)))
 (let ((?x988 (* b__1 11)))
 (let ((?x55 (+ v__9 ?x988)))
 (let ((?x820 (* b__1 10)))
 (let ((?x1047 (+ v__8 ?x820)))
 (let ((?x668 (* b__1 9)))
 (let ((?x797 (+ v__7 ?x668)))
 (let ((?x549 (* b__1 8)))
 (let ((?x1102 (+ v__6 ?x549)))
 (let ((?x1747 (* b__1 7)))
 (let ((?x1414 (+ v__5 ?x1747)))
 (let ((?x1248 (* b__1 6)))
 (let ((?x1580 (+ v__4 ?x1248)))
 (let ((?x68 (* b__1 5)))
 (let ((?x1374 (+ v__3 ?x68)))
 (let ((?x1081 (* b__1 4)))
 (let ((?x451 (+ v__2 ?x1081)))
 (let ((?x727 (* b__1 3)))
 (let ((?x1106 (+ v__1 ?x727)))
 (let ((?x1372 (* b__1 2)))
 (let ((?x1257 (+ v__0 ?x1372)))
 (let ((?x1297 (store start ?x1257 (+ (select start ?x1257) 1))))
 (let ((?x405 (store ?x1297 ?x1106 (+ (select ?x1297 ?x1106) 1))))
 (let ((?x453 (store ?x405 ?x451 (+ (select ?x405 ?x451) 1))))
 (let ((?x1346 (store ?x453 ?x1374 (+ (select ?x453 ?x1374) 1))))
 (let ((?x1013 (store ?x1346 ?x1580 (+ (select ?x1346 ?x1580) 1))))
 (let ((?x567 (store ?x1013 ?x1414 (+ (select ?x1013 ?x1414) 1))))
 (let ((?x83 (store ?x567 ?x1102 (+ (select ?x567 ?x1102) 1))))
 (let ((?x1295 (store ?x83 ?x797 (+ (select ?x83 ?x797) 1))))
 (let ((?x507 (store ?x1295 ?x1047 (+ (select ?x1295 ?x1047) 1))))
 (let ((?x135 (store ?x507 ?x55 (+ (select ?x507 ?x55) 1))))
 (let ((?x979 (store ?x135 ?x1111 (+ (select ?x135 ?x1111) 1))))
 (let ((?x1706 (+ w__10 ?x988)))
 (let ((?x2099 (+ w__9 ?x820)))
 (let ((?x1304 (+ w__8 ?x668)))
 (let ((?x100 (+ w__7 ?x549)))
 (let ((?x1748 (+ w__6 ?x1747)))
 (let ((?x413 (+ w__5 ?x1248)))
 (let ((?x651 (+ w__4 ?x68)))
 (let ((?x1721 (+ w__3 ?x1081)))
 (let ((?x1699 (+ w__2 ?x727)))
 (let ((?x168 (+ w__1 ?x1372)))
 (let ((?x760 (+ w__0 ?x761)))
 (let ((?x739 (store start ?x760 (+ (select start ?x760) 1))))
 (let ((?x678 (store ?x739 ?x168 (+ (select ?x739 ?x168) 1))))
 (let ((?x1089 (store ?x678 ?x1699 (+ (select ?x678 ?x1699) 1))))
 (let ((?x878 (store ?x1089 ?x1721 (+ (select ?x1089 ?x1721) 1))))
 (let ((?x1072 (store ?x878 ?x651 (+ (select ?x878 ?x651) 1))))
 (let ((?x1689 (store ?x1072 ?x413 (+ (select ?x1072 ?x413) 1))))
 (let ((?x1742 (store ?x1689 ?x1748 (+ (select ?x1689 ?x1748) 1))))
 (let ((?x87 (store ?x1742 ?x100 (+ (select ?x1742 ?x100) 1))))
 (let ((?x1268 (store ?x87 ?x1304 (+ (select ?x87 ?x1304) 1))))
 (let ((?x2102 (store ?x1268 ?x2099 (+ (select ?x1268 ?x2099) 1))))
 (let ((?x1710 (store ?x2102 ?x1706 (+ (select ?x2102 ?x1706) 1))))
 (= ?x1710 ?x979)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let (($x1256 (and (= w__1 v__0) (= w__2 v__1) (= w__3 v__2) (= w__4 v__3) (= w__5 v__4) (= w__6 v__5) (= w__7 v__6) (= w__8 v__7) (= w__9 v__8) (= w__10 v__9) (= w__0 v__10))))
 (not $x1256)))
(check-sat)
(exit)
