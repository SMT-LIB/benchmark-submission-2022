
(set-info :smt-lib-version 2.6)
(set-logic QF_ANIA)
(set-info :source |
Generated by: Alex Ozdemir
Generated on: 2021-12-13
Generator: Z3Py API
Application: Soundness counterexamples for a cryptographic argument
Target solver: cvc5, Z3

# The special soundness of PLONK's grand product argument

Let F be a prime-order field and n a natural less than F's size. Let n = {1,
2, .., n} be a subset of F. The PLONK[1] grand product argument relies on the
fact that given a permutation pi: [n] -> [n] and functions A, B: [n] -> [n],

    prod_i (A(i) + beta * i + gamma) = prod_i (B(i) + beta * pi(i) + gamma)

holds for random beta, gamma in F with good probability only when A composed
with pi is B.

Does this implication hold in a deterministic setting, where the above is
checked for distinct---but non-random---beta and gamma?

If it is checked for n+1 distinct values of beta, and for each value of beta,
n+1 distinct values of gamma, then yes. One can prove this.

If it is checked for 2 distinct values of beta, and for each value of beta, n+1
distinct values of gamma, then no.

This series of benchmarks checks the implication holds
* for varying n
* for a fixed permutation pi = (2 3 ... n 1)
* for all A and B
  * that must be equal ("same") or may differ ("diff")
* for all distinct 2 ("unsound") or n+1 ("sound") beta values

rather than instantiating gamma explicitly, we just check that the multisets

    {{A[i] + beta * i}}_i  ==  {{B[i] + beta * pi(i)}}_i

are equal.

[1]: https://eprint.iacr.org/2019/953

|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "crafted")
(set-info :status sat)
; benchmark generated from python API
(declare-fun b__1 () Int)
(declare-fun b__0 () Int)
(declare-fun w__0 () Int)
(declare-fun v__0 () Int)
(declare-fun w__1 () Int)
(declare-fun v__1 () Int)
(declare-fun w__2 () Int)
(declare-fun v__2 () Int)
(declare-fun w__3 () Int)
(declare-fun v__3 () Int)
(declare-fun w__4 () Int)
(declare-fun v__4 () Int)
(declare-fun w__5 () Int)
(declare-fun v__5 () Int)
(declare-fun w__6 () Int)
(declare-fun v__6 () Int)
(declare-fun w__7 () Int)
(declare-fun v__7 () Int)
(declare-fun start () (Array Int Int))
(assert
 (and (distinct b__0 b__1) true))
(assert
 (>= w__0 0))
(assert
 (>= v__0 0))
(assert
 (<= w__0 8))
(assert
 (<= v__0 8))
(assert
 (>= w__1 0))
(assert
 (>= v__1 0))
(assert
 (<= w__1 8))
(assert
 (<= v__1 8))
(assert
 (>= w__2 0))
(assert
 (>= v__2 0))
(assert
 (<= w__2 8))
(assert
 (<= v__2 8))
(assert
 (>= w__3 0))
(assert
 (>= v__3 0))
(assert
 (<= w__3 8))
(assert
 (<= v__3 8))
(assert
 (>= w__4 0))
(assert
 (>= v__4 0))
(assert
 (<= w__4 8))
(assert
 (<= v__4 8))
(assert
 (>= w__5 0))
(assert
 (>= v__5 0))
(assert
 (<= w__5 8))
(assert
 (<= v__5 8))
(assert
 (>= w__6 0))
(assert
 (>= v__6 0))
(assert
 (<= w__6 8))
(assert
 (<= v__6 8))
(assert
 (>= w__7 0))
(assert
 (>= v__7 0))
(assert
 (<= w__7 8))
(assert
 (<= v__7 8))
(assert
 (let ((?x547 (* b__0 1)))
 (let ((?x923 (+ v__7 ?x547)))
 (let ((?x261 (* b__0 8)))
 (let ((?x410 (+ v__6 ?x261)))
 (let ((?x738 (* b__0 7)))
 (let ((?x739 (+ v__5 ?x738)))
 (let ((?x682 (* b__0 6)))
 (let ((?x361 (+ v__4 ?x682)))
 (let ((?x635 (* b__0 5)))
 (let ((?x634 (+ v__3 ?x635)))
 (let ((?x119 (* b__0 4)))
 (let ((?x142 (+ v__2 ?x119)))
 (let ((?x746 (* b__0 3)))
 (let ((?x775 (+ v__1 ?x746)))
 (let ((?x240 (* b__0 2)))
 (let ((?x401 (+ v__0 ?x240)))
 (let ((?x671 (store start ?x401 (+ (select start ?x401) 1))))
 (let ((?x784 (store ?x671 ?x775 (+ (select ?x671 ?x775) 1))))
 (let ((?x42 (store ?x784 ?x142 (+ (select ?x784 ?x142) 1))))
 (let ((?x495 (store ?x42 ?x634 (+ (select ?x42 ?x634) 1))))
 (let ((?x515 (store ?x495 ?x361 (+ (select ?x495 ?x361) 1))))
 (let ((?x918 (store ?x515 ?x739 (+ (select ?x515 ?x739) 1))))
 (let ((?x779 (store ?x918 ?x410 (+ (select ?x918 ?x410) 1))))
 (let ((?x282 (store ?x779 ?x923 (+ (select ?x779 ?x923) 1))))
 (let ((?x757 (+ w__7 ?x261)))
 (let ((?x919 (+ w__6 ?x738)))
 (let ((?x661 (+ w__5 ?x682)))
 (let ((?x146 (+ w__4 ?x635)))
 (let ((?x315 (+ w__3 ?x119)))
 (let ((?x921 (+ w__2 ?x746)))
 (let ((?x317 (+ w__1 ?x240)))
 (let ((?x567 (+ w__0 ?x547)))
 (let ((?x453 (store start ?x567 (+ (select start ?x567) 1))))
 (let ((?x215 (store ?x453 ?x317 (+ (select ?x453 ?x317) 1))))
 (let ((?x156 (store ?x215 ?x921 (+ (select ?x215 ?x921) 1))))
 (let ((?x765 (store ?x156 ?x315 (+ (select ?x156 ?x315) 1))))
 (let ((?x122 (store ?x765 ?x146 (+ (select ?x765 ?x146) 1))))
 (let ((?x780 (store ?x122 ?x661 (+ (select ?x122 ?x661) 1))))
 (let ((?x412 (store ?x780 ?x919 (+ (select ?x780 ?x919) 1))))
 (let ((?x922 (store ?x412 ?x757 (+ (select ?x412 ?x757) 1))))
 (= ?x922 ?x282))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x461 (* b__1 1)))
 (let ((?x137 (+ v__7 ?x461)))
 (let ((?x538 (* b__1 8)))
 (let ((?x584 (+ v__6 ?x538)))
 (let ((?x236 (* b__1 7)))
 (let ((?x940 (+ v__5 ?x236)))
 (let ((?x637 (* b__1 6)))
 (let ((?x636 (+ v__4 ?x637)))
 (let ((?x1070 (* b__1 5)))
 (let ((?x658 (+ v__3 ?x1070)))
 (let ((?x417 (* b__1 4)))
 (let ((?x54 (+ v__2 ?x417)))
 (let ((?x711 (* b__1 3)))
 (let ((?x601 (+ v__1 ?x711)))
 (let ((?x807 (* b__1 2)))
 (let ((?x263 (+ v__0 ?x807)))
 (let ((?x808 (store start ?x263 (+ (select start ?x263) 1))))
 (let ((?x36 (store ?x808 ?x601 (+ (select ?x808 ?x601) 1))))
 (let ((?x177 (store ?x36 ?x54 (+ (select ?x36 ?x54) 1))))
 (let ((?x268 (store ?x177 ?x658 (+ (select ?x177 ?x658) 1))))
 (let ((?x851 (store ?x268 ?x636 (+ (select ?x268 ?x636) 1))))
 (let ((?x947 (store ?x851 ?x940 (+ (select ?x851 ?x940) 1))))
 (let ((?x162 (store ?x947 ?x584 (+ (select ?x947 ?x584) 1))))
 (let ((?x25 (store ?x162 ?x137 (+ (select ?x162 ?x137) 1))))
 (let ((?x354 (+ w__7 ?x538)))
 (let ((?x948 (+ w__6 ?x236)))
 (let ((?x707 (+ w__5 ?x637)))
 (let ((?x367 (+ w__4 ?x1070)))
 (let ((?x833 (+ w__3 ?x417)))
 (let ((?x552 (+ w__2 ?x711)))
 (let ((?x721 (+ w__1 ?x807)))
 (let ((?x539 (+ w__0 ?x461)))
 (let ((?x806 (store start ?x539 (+ (select start ?x539) 1))))
 (let ((?x796 (store ?x806 ?x721 (+ (select ?x806 ?x721) 1))))
 (let ((?x613 (store ?x796 ?x552 (+ (select ?x796 ?x552) 1))))
 (let ((?x724 (store ?x613 ?x833 (+ (select ?x613 ?x833) 1))))
 (let ((?x43 (store ?x724 ?x367 (+ (select ?x724 ?x367) 1))))
 (let ((?x160 (store ?x43 ?x707 (+ (select ?x43 ?x707) 1))))
 (let ((?x383 (store ?x160 ?x948 (+ (select ?x160 ?x948) 1))))
 (let ((?x798 (store ?x383 ?x354 (+ (select ?x383 ?x354) 1))))
 (= ?x798 ?x25))))))))))))))))))))))))))))))))))))))))))
(assert
 (let (($x841 (and (= w__1 v__0) (= w__2 v__1) (= w__3 v__2) (= w__4 v__3) (= w__5 v__4) (= w__6 v__5) (= w__7 v__6) (= w__0 v__7))))
 (not $x841)))
(check-sat)
(exit)
