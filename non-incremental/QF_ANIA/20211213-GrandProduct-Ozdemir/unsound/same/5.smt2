
(set-info :smt-lib-version 2.6)
(set-logic QF_ANIA)
(set-info :source |
Generated by: Alex Ozdemir
Generated on: 2021-12-13
Generator: Z3Py API
Application: Soundness counterexamples for a cryptographic argument
Target solver: cvc5, Z3

# The special soundness of PLONK's grand product argument

Let F be a prime-order field and n a natural less than F's size. Let n = {1,
2, .., n} be a subset of F. The PLONK[1] grand product argument relies on the
fact that given a permutation pi: [n] -> [n] and functions A, B: [n] -> [n],

    prod_i (A(i) + beta * i + gamma) = prod_i (B(i) + beta * pi(i) + gamma)

holds for random beta, gamma in F with good probability only when A composed
with pi is B.

Does this implication hold in a deterministic setting, where the above is
checked for distinct---but non-random---beta and gamma?

If it is checked for n+1 distinct values of beta, and for each value of beta,
n+1 distinct values of gamma, then yes. One can prove this.

If it is checked for 2 distinct values of beta, and for each value of beta, n+1
distinct values of gamma, then no.

This series of benchmarks checks the implication holds
* for varying n
* for a fixed permutation pi = (2 3 ... n 1)
* for all A and B
  * that must be equal ("same") or may differ ("diff")
* for all distinct 2 ("unsound") or n+1 ("sound") beta values

rather than instantiating gamma explicitly, we just check that the multisets

    {{A[i] + beta * i}}_i  ==  {{B[i] + beta * pi(i)}}_i

are equal.

[1]: https://eprint.iacr.org/2019/953

|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "crafted")
(set-info :status sat)
; benchmark generated from python API
(declare-fun w__0 () Int)
(declare-fun v__0 () Int)
(declare-fun w__1 () Int)
(declare-fun v__1 () Int)
(declare-fun w__2 () Int)
(declare-fun v__2 () Int)
(declare-fun w__3 () Int)
(declare-fun v__3 () Int)
(declare-fun w__4 () Int)
(declare-fun v__4 () Int)
(declare-fun b__1 () Int)
(declare-fun b__0 () Int)
(declare-fun start () (Array Int Int))
(assert
 (= v__0 w__0))
(assert
 (= v__1 w__1))
(assert
 (= v__2 w__2))
(assert
 (= v__3 w__3))
(assert
 (= v__4 w__4))
(assert
 (and (distinct b__0 b__1) true))
(assert
 (>= w__0 0))
(assert
 (>= v__0 0))
(assert
 (<= w__0 5))
(assert
 (<= v__0 5))
(assert
 (>= w__1 0))
(assert
 (>= v__1 0))
(assert
 (<= w__1 5))
(assert
 (<= v__1 5))
(assert
 (>= w__2 0))
(assert
 (>= v__2 0))
(assert
 (<= w__2 5))
(assert
 (<= v__2 5))
(assert
 (>= w__3 0))
(assert
 (>= v__3 0))
(assert
 (<= w__3 5))
(assert
 (<= v__3 5))
(assert
 (>= w__4 0))
(assert
 (>= v__4 0))
(assert
 (<= w__4 5))
(assert
 (<= v__4 5))
(assert
 (let ((?x417 (* b__0 1)))
 (let ((?x119 (+ v__4 ?x417)))
 (let ((?x332 (* b__0 5)))
 (let ((?x254 (+ v__3 ?x332)))
 (let ((?x413 (* b__0 4)))
 (let ((?x414 (+ v__2 ?x413)))
 (let ((?x123 (* b__0 3)))
 (let ((?x255 (+ v__1 ?x123)))
 (let ((?x421 (* b__0 2)))
 (let ((?x422 (+ v__0 ?x421)))
 (let ((?x162 (store start ?x422 (+ (select start ?x422) 1))))
 (let ((?x209 (store ?x162 ?x255 (+ (select ?x162 ?x255) 1))))
 (let ((?x176 (store ?x209 ?x414 (+ (select ?x209 ?x414) 1))))
 (let ((?x158 (store ?x176 ?x254 (+ (select ?x176 ?x254) 1))))
 (let ((?x170 (store ?x158 ?x119 (+ (select ?x158 ?x119) 1))))
 (let ((?x81 (+ w__4 ?x332)))
 (let ((?x175 (+ w__3 ?x413)))
 (let ((?x253 (+ w__2 ?x123)))
 (let ((?x19 (+ w__1 ?x421)))
 (let ((?x418 (+ w__0 ?x417)))
 (let ((?x420 (store start ?x418 (+ (select start ?x418) 1))))
 (let ((?x278 (store ?x420 ?x19 (+ (select ?x420 ?x19) 1))))
 (let ((?x412 (store ?x278 ?x253 (+ (select ?x278 ?x253) 1))))
 (let ((?x331 (store ?x412 ?x175 (+ (select ?x412 ?x175) 1))))
 (let ((?x113 (store ?x331 ?x81 (+ (select ?x331 ?x81) 1))))
 (= ?x113 ?x170)))))))))))))))))))))))))))
(assert
 (let ((?x29 (* b__1 1)))
 (let ((?x380 (+ v__4 ?x29)))
 (let ((?x358 (* b__1 5)))
 (let ((?x368 (+ v__3 ?x358)))
 (let ((?x370 (* b__1 4)))
 (let ((?x371 (+ v__2 ?x370)))
 (let ((?x49 (* b__1 3)))
 (let ((?x156 (+ v__1 ?x49)))
 (let ((?x143 (* b__1 2)))
 (let ((?x98 (+ v__0 ?x143)))
 (let ((?x47 (store start ?x98 (+ (select start ?x98) 1))))
 (let ((?x361 (store ?x47 ?x156 (+ (select ?x47 ?x156) 1))))
 (let ((?x379 (store ?x361 ?x371 (+ (select ?x361 ?x371) 1))))
 (let ((?x376 (store ?x379 ?x368 (+ (select ?x379 ?x368) 1))))
 (let ((?x388 (store ?x376 ?x380 (+ (select ?x376 ?x380) 1))))
 (let ((?x364 (+ w__4 ?x358)))
 (let ((?x389 (+ w__3 ?x370)))
 (let ((?x378 (+ w__2 ?x49)))
 (let ((?x239 (+ w__1 ?x143)))
 (let ((?x260 (+ w__0 ?x29)))
 (let ((?x144 (store start ?x260 (+ (select start ?x260) 1))))
 (let ((?x48 (store ?x144 ?x239 (+ (select ?x144 ?x239) 1))))
 (let ((?x363 (store ?x48 ?x378 (+ (select ?x48 ?x378) 1))))
 (let ((?x357 (store ?x363 ?x389 (+ (select ?x363 ?x389) 1))))
 (let ((?x369 (store ?x357 ?x364 (+ (select ?x357 ?x364) 1))))
 (= ?x369 ?x388)))))))))))))))))))))))))))
(assert
 (let (($x199 (and (= w__1 v__0) (= w__2 v__1) (= w__3 v__2) (= w__4 v__3) (= w__0 v__4))))
 (not $x199)))
(check-sat)
(exit)
