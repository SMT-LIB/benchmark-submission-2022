(set-info :smt-lib-version 2.6)
(set-logic QF_NRA)
(set-info :source |
Generated by: Ali K. Uncu, Matthew England, and James H. Davenport
Generated on: 2022-01-08

Generator: SUMCracker-ProveInequality function by Manuel Kauers ("https://www3.risc.jku.at/research/combinat/software/ergosum/RISC/SumCracker.html")
Translated to SMT-Lib by Maple SMTLIB package.

Application: 
CAD calls of SUMCracker-ProveInequality to prove Knopp-Schur Inequality after preprocessing outlined in
S. Gerhold and M. Kauers, A Procedure for Proving Special Function Inequalities Involving a Discrete Parameter.
ISSAC '05: Proceedings of the 2005 international symposium on Symbolic and algebraic computationJuly 2005 Pages 156-162.
(https://dl.acm.org/doi/10.1145/1073884.1073907)

All denominators in the original CAD call got cleared in a simple way:
a/b == c/d --> a d==b c && b<>0 && d<>0
a/b > c/d --> a d^2 >=b^2 c && b<>0 && d<>0
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :status unsat)
(set-info :category "industrial")

(declare-fun P () Real)
(declare-fun V1 () Real)
(declare-fun V2 () Real)
(declare-fun V3 () Real)
(declare-fun V4 () Real)
(assert (and (< P 4) (< 3 P) (< 0 V1) (< 0 V3) (< 0 (* (* (+ 2 V2) (+ 3 (* V2 2)) V3) 2)) (< 0 (* (* (+ 2 V2) (+ 3 V2) (+ 3 (* V2 2)) (+ 5 (* V2 2)) V3) 4)) (< 0 V4) (< 0 (* (* (+ 1 V2) (+ 1 V2)) (* (+ 2 V2) (+ 2 V2)) V3 (+ 14 (* (* V3 V4) 4) (* (* (* V2 V2 V2) V3 V4) 6) (* (* V2 V2 V2 V2) V3 V4) (* (* V2 (+ (* (* V3 V4) 2) 3)) 6) (* (* V2 V2) (+ (* (* V3 V4) 13) 6))))) (<= 1 V2) (<= 0 V2) (<= 0 (+ 1 V2)) (< (* (* (+ (* P P) (* V1 (- 6)) (- 6)) V2 V3) 6) 72) (< (* (* (+ 3 (* V2 2)) (+ (* V2 V2) (* V2 3) 2) V3 (+ (* P P) (* V4 (- 6)) (- 6))) 12) (* (* (+ 3 (* V2 2)) (+ 3 (* V2 2))) 288)) (<= (* (* (* (+ 1 V2) (+ 1 V2) (+ 1 V2) (+ 1 V2)) (* (+ 3 (* V2 2)) (+ 3 (* V2 2))) (* (+ 5 (* V2 2)) (+ 5 (* V2 2)))) 1152) (* (* (* (+ 1 V2) (+ 1 V2)) (+ 3 V2) (+ 3 (* V2 2)) (+ 5 (* V2 2)) (+ (- 84) (* (* V2 (+ (- 9) (* V3 (+ (* P P) (* V4 (- 6)) (- 6))))) 12) (* (* V2 V2) (+ (- 36) (* (* V3 (+ (* P P) (* V4 (- 6)) (- 6))) 13))) (* (* V3 (+ (* P P) (* V4 (- 6)) (- 6))) 4) (* (* (* V2 V2 V2) V3 (+ (* P P) (* V4 (- 6)) (- 6))) 6) (* (* V2 V2 V2 V2) V3 (+ (* P P) (* V4 (- 6)) (- 6))))) 24)) (not (= (+ 6 (* V2 4)) 0)) (not (= (* (* (+ 3 (* V2 2)) (+ 5 (* V2 2))) 4) 0)) (not (= (* (* (+ 1 V2) (+ 1 V2)) (* (+ 2 V2) (+ 2 V2)) V3) 0)) (not (= (+ 36 (* V2 24)) 0)) (not (= (* (* (* (+ 1 V2) (+ 1 V2)) (+ 3 (* V2 2)) (+ 5 (* V2 2))) 24) 0))))
(check-sat)
(exit)



































